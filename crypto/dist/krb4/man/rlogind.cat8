
RLOGIND(8)                  System Manager's Manual                 RLOGIND(8)

NNAAMMEE
     rrllooggiinndd - remote login server

SSYYNNOOPPSSIISS
     rrllooggiinndd [--aaiillnnkkvvxxDD] [--pp _p_o_r_t_n_u_m_b_e_r] [--LL _/_b_i_n_/_l_o_g_i_n]

DDEESSCCRRIIPPTTIIOONN
     RRllooggiinndd is the server for the rlogin(1) program.  The server provides a
     remote login facility with kerberos-based authentication or traditional
     pseudo-authentication with privileged port numbers from trusted hosts.

     Options supported by rrllooggiinndd:

     --aa      No-op.  For backwards compatibility.  Hostnames are always veri-
             fied.

     --ll      Prevent any authentication based on the user's ``_._r_h_o_s_t_s'' file,
             unless the user is logging in as the superuser.

     --nn      Disable keep-alive messages.

     --kk      Enable kerberos authentication.

     --ii      Do not expect to be spawned by inetd and create a socket and lis-
             ten on it yourself.

     --pp --ppoorrttnnuummbbeerr
             Specifies the port number it should listen on in case the

     --ii      flag has been given.

     --vv      Vacuous, echo "Remote host requires Kerberos authentication" and
             exit.

     --xx      Provides an encrypted communications channel.  This options re-
             quires the --kk flag.

     --LL --ppaatthhnnaammee
             Specify pathname to an alternative login program.

     --DD      Use the TCP nodelay option (see setsockopt(2)).

     When a service request is received, rrllooggiinndd verifies the kerberos ticket
     supplied by the user.

     For non-kerberised connections, the following protocol is initiated:

     1.   The server checks the client's source port.  If the port is not in
          the range 512-1023, the server aborts the connection.

     2.   The server checks the client's source address and requests the cor-
          responding host name (see gethostbyaddr(3),  hosts(5) and named(8)).
           If the hostname cannot be determined, the dot-notation representa-
          tion of the host address is used.  The addresses for the hostname
          are requested, verifying that the name and address correspond.  Nor-
          mal authentication is bypassed if the address verification fails.

     Once the source port and address have been checked, rrllooggiinndd proceeds with
     the authentication process described in rshd(8).

     It then allocates a pseudo terminal (see pty(4)),  and manipulates file
     descriptors so that the slave half of the pseudo terminal becomes the
     _s_t_d_i_n, _s_t_d_o_u_t, and _s_t_d_e_r_r for a login process.  The login process is an
     instance of the login(1) program, invoked with the --ff option if authenti-
     cation has succeeded.  If automatic authentication fails, the user is
     prompted to log in as if on a standard terminal line.

     The parent of the login process manipulates the master side of the pseudo
     terminal, operating as an intermediary between the login process and the
     client instance of the rlogin program.  In normal operation, the packet
     protocol described in pty(4) is invoked to provide `^S/^Q' type facili-
     ties and propagate interrupt signals to the remote programs.  The login
     process propagates the client terminal's baud rate and terminal type, as
     found in the environment variable, `TERM'; see environ(7).  The screen or
     window size of the terminal is requested from the client, and window size
     changes from the client are propagated to the pseudo terminal.

     Transport-level keepalive messages are enabled unless the --nn option is
     present.  The use of keepalive messages allows sessions to be timed out
     if the client crashes or becomes unreachable.

DDIIAAGGNNOOSSTTIICCSS
     All initial diagnostic messages are indicated by a leading byte with a
     value of 1, after which any network connections are closed.  If there are
     no errors before login is invoked, a null byte is returned as in indica-
     tion of success.

     TTrryy aaggaaiinn..
             A fork by the server failed.

SSEEEE AALLSSOO
     login(1),  ruserok(3),  rshd(8)

BBUUGGSS
     A more extensible protocol should be used.

HHIISSTTOORRYY
     The rrllooggiinndd command appeared in 4.2BSD.

4.2 Berkeley Distribution       August 25, 1996                              2

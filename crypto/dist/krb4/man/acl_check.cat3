


 AACCLL__CCHHEECCKK((33))                 MMIITT PPrroojjeecctt AAtthheennaa                AACCLL__CCHHEECCKK((33))
                             KKeerrbbeerrooss VVeerrssiioonn 44..00



 NNAAMMEE
      acl_canonicalize_principal, acl_check, acl_exact_match, acl_add,
      acl_delete, acl_initialize - Access control list routines

 SSYYNNOOPPSSIISS
      cccc <<ffiilleess>> --llaaccll --llkkrrbb

      ##iinncclluuddee <<kkrrbb..hh>>

      aaccll__ccaannoonniiccaalliizzee__pprriinncciippaall((pprriinncciippaall,, bbuuff))
      cchhaarr **pprriinncciippaall;;
      cchhaarr **bbuuff;;

      aaccll__cchheecckk((aaccll,, pprriinncciippaall))
      cchhaarr **aaccll;;
      cchhaarr **pprriinncciippaall;;

      aaccll__eexxaacctt__mmaattcchh((aaccll,, pprriinncciippaall))
      cchhaarr **aaccll;;
      cchhaarr **pprriinncciippaall;;

      aaccll__aadddd((aaccll,, pprriinncciippaall))
      cchhaarr **aaccll;;
      cchhaarr **pprriinncciippaall;;

      aaccll__ddeelleettee((aaccll,, pprriinncciippaall))
      cchhaarr **aaccll;;
      cchhaarr **pprriinncciippaall;;

      aaccll__iinniittiiaalliizzee((aaccll__ffiillee,, mmooddee))
      cchhaarr **aaccll__ffiillee;;
      iinntt mmooddee;;

 DDEESSCCRRIIPPTTIIOONN
    IInnttrroodduuccttiioonn
      An access control list (ACL) is a list of principals, where each
      principal is represented by a text string which cannot contain
      whitespace.  The library allows application programs to refer to named
      access control lists to test membership and to atomically add and
      delete principals using a natural and intuitive interface.  At
      present, the names of access control lists are required to be Unix
      filenames, and refer to human-readable Unix files; in the future, when
      a networked ACL server is implemented, the names may refer to a
      different namespace specific to the ACL service.

    PPrriinncciippaall NNaammeess
      Principal names have the form
           <name>[.<instance>][@<realm>]
      e.g.:
           asp
           asp.root



                                    - 1 -        Formatted:  March 12, 2000






 AACCLL__CCHHEECCKK((33))                 MMIITT PPrroojjeecctt AAtthheennaa                AACCLL__CCHHEECCKK((33))
                             KKeerrbbeerrooss VVeerrssiioonn 44..00



           asp@ATHENA.MIT.EDU
           asp.@ATHENA.MIT.EDU
           asp.root@ATHENA.MIT.EDU
      It is possible for principals to be underspecified.  If an instance is
      missing, it is assumed to be "".  If realm is missing, it is assumed
      to be the local realm as determined by _k_r_b___g_e_t___l_r_e_a_l_m(3).  The
      canonical form contains all of name, instance, and realm; the acl_add
      and acl_delete routines will always leave the file in that form.  Note
      that the canonical form of asp@ATHENA.MIT.EDU is actually
      asp.@ATHENA.MIT.EDU.

    RRoouuttiinneess
      _a_c_l___c_a_n_o_n_i_c_a_l_i_z_e___p_r_i_n_c_i_p_a_l stores the canonical form of _p_r_i_n_c_i_p_a_l in
      _b_u_f.  _B_u_f must contain enough space to store a principal, given the
      limits on the sizes of name, instance, and realm specified as
      ANAME_SZ, INST_SZ, and REALM_SZ, respectively, in _/_u_s_r_/_i_n_c_l_u_d_e_/_k_r_b_._h.

      _a_c_l___c_h_e_c_k returns nonzero if _p_r_i_n_c_i_p_a_l appears in _a_c_l.  Returns 0 if
      principal does not appear in acl, or if an error occurs.
      Canonicalizes principal before checking, and allows the ACL to contain
      wildcards.  The only supported wildcards are entries of the form
      name.*@realm, *.*@realm, and *.*@*.  An asterisk matches any value for
      the its component field.  For example, "jtkohl.*@*" would match
      principal jtkohl, with any instance and any realm.

      _a_c_l___e_x_a_c_t___m_a_t_c_h performs like _a_c_l___c_h_e_c_k, but does no canonicalization
      or wildcard matching.

      _a_c_l___a_d_d atomically adds _p_r_i_n_c_i_p_a_l to _a_c_l.  Returns 0 if successful,
      nonzero otherwise.  It is considered a failure if _p_r_i_n_c_i_p_a_l is already
      in _a_c_l.  This routine will canonicalize _p_r_i_n_c_i_p_a_l, but will treat
      wildcards literally.

      _a_c_l___d_e_l_e_t_e atomically deletes _p_r_i_n_c_i_p_a_l from _a_c_l.  Returns 0 if
      successful, nonzero otherwise.  It is considered a failure if
      _p_r_i_n_c_i_p_a_l is not already in _a_c_l.  This routine will canonicalize
      _p_r_i_n_c_i_p_a_l, but will treat wildcards literally.

      _a_c_l___i_n_i_t_i_a_l_i_z_e initializes _a_c_l___f_i_l_e.  If the file _a_c_l___f_i_l_e does not
      exist, _a_c_l___i_n_i_t_i_a_l_i_z_e creates it with mode _m_o_d_e.  If the file _a_c_l___f_i_l_e
      exists, _a_c_l___i_n_i_t_i_a_l_i_z_e removes all members.  Returns 0 if successful,
      nonzero otherwise.  WARNING: Mode argument is likely to change with
      the eventual introduction of an ACL service.

 NNOOTTEESS
      In the presence of concurrency, there is a very small chance that
      _a_c_l___a_d_d or _a_c_l___d_e_l_e_t_e could report success even though it would have
      had no effect.  This is a necessary side effect of using lock files
      for concurrency control rather than flock(2), which is not supported
      by NFS.




                                    - 2 -        Formatted:  March 12, 2000






 AACCLL__CCHHEECCKK((33))                 MMIITT PPrroojjeecctt AAtthheennaa                AACCLL__CCHHEECCKK((33))
                             KKeerrbbeerrooss VVeerrssiioonn 44..00



      The current implementation caches ACLs in memory in a hash-table
      format for increased efficiency in checking membership; one effect of
      the caching scheme is that one file descriptor will be kept open for
      each ACL cached, up to a maximum of 8.

 SSEEEE AALLSSOO
      kerberos(3), krb_get_lrealm(3)

 AAUUTTHHOORR
      James Aspnes (MIT Project Athena)












































                                    - 3 -        Formatted:  March 12, 2000




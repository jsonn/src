#!/bin/sh

# Copyright (c) 1993, 1996 Eric P. Allman
# Copyright (c) 1993 The Regents of the University of California.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#	This product includes software developed by the University of
#	California, Berkeley and its contributors.
# 4. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
#       @(#)makesendmail	8.42 (Berkeley) 11/10/96
#

#
#  A quick-and-dirty script to compile sendmail in the presence of
#  multiple architectures and Makefiles.
#

if [ "x${1-""}" = "x-m" ]
then
	# show Makefile name only
	mflag=1
else
	mflag=""
fi

#
#  Do heuristic guesses !ONLY! for machines that do not have uname
#
if [ -d /NextApps -a ! -f /bin/uname -a ! -f /usr/bin/uname ]
then
	# probably a NeXT box
	arch=`hostinfo | sed -n 's/.*Processor type: \([^ ]*\).*/\1/p'`
	os=NeXT
	rel=`hostinfo | sed -n 's/.*NeXT Mach \([0-9\.]*\).*/\1/p'`
elif [ -f /usr/sony/bin/machine -a -f /etc/osversion ]
then
	# probably a Sony NEWS 4.x
	os=NEWS-OS
	rel=`awk '{ print $3}' /etc/osversion`
	arch=`/usr/sony/bin/machine`
elif [ -d /usr/omron -a -f /bin/luna ]
then
	# probably a Omron LUNA
	os=LUNA
	if [ -f /bin/luna1 ] && /bin/luna1
	then
		rel=unios-b
		arch=luna1
	elif [ -f /bin/luna2 ] && /bin/luna2
	then
		rel=Mach
		arch=luna2
	elif [ -f /bin/luna88k ] && /bin/luna88k
	then
		rel=Mach
		arch=luna88k
	fi
fi

if [ ! "$arch" -a ! "$os" -a ! "$rel" ]
then
	arch=`uname -m | sed -e 's/ //g'`
	os=`uname -s | sed -e 's/\//-/g' -e 's/ //g'`
	rel=`uname -r | sed -e 's/(/-/g' -e 's/)//g'`
fi

#
#  Tweak the values we have already got.  PLEASE LIMIT THESE to
#  tweaks that are absolutely necessary because your system uname
#  routine doesn't return something sufficiently unique.  Don't do
#  it just because you don't like the name that is returned.  You
#  can combine the architecture name with the os name to create a
#  unique Makefile name.
#

# tweak machine architecture
case $arch
in
  sun4*)	arch=sun4;;

  9000/*)	arch=`echo $arch | sed -e 's/9000.//' -e 's/..$/xx/'`;;

  DS/907000)	arch=ds90;;
esac

# tweak operating system type and release
node=`uname -n | sed -e 's/\//-/g' -e 's/ //g'`
if [ "$os" = "$node" -a "$arch" = "i386" -a "$rel" = 3.2 -a "`uname -v`" = 2 ]
then
	# old versions of SCO UNIX set uname -s the same as uname -n
	os=SCO_SV
fi

case $os
in
  DYNIX-ptx)	os=PTX;;
  Paragon*)	os=Paragon;;
  HP-UX)	rel=`echo $rel | sed -e 's/^[^.]*\.0*//'`;;
  AIX)		rel=`uname -v`
		if [ "$rel" = "2" ]
		then
			arch=""
		fi;;
  BSD-386)	os=BSD-OS;;
  SCO_SV)	os=SCO; rel=`uname -X | sed -n 's/Release = 3.2v//p'`;;
  UNIX_System_V) if [ "$arch" = "ds90" ]
		then
			os="UXPDS"
			rel=`uname -v | sed -e 's/\(V.*\)L.*/\1/'`
		fi;;
esac

# get "base part" of operating system release
rroot=`echo $rel | sed -e 's/\.[^.]*$//'`
rbase=`echo $rel | sed -e 's/\..*//'`
if [ "$rroot" = "$rbase" ]
then
	rroot=$rel
fi

# heuristic tweaks to clean up names -- PLEASE LIMIT THESE!
if [ "$os" = "unix" ]
then
	# might be Altos System V
	case $rel
	in
	  5.3*)		os=Altos;;
	esac
elif [ -r /unix -a -r /usr/lib/libseq.a -a -r /lib/cpp ]
then
	# might be a DYNIX/ptx 2.x system, which has a broken uname
	if strings /lib/cpp | grep _SEQUENT_ > /dev/null
	then
		os=PTX
	fi
elif [ -d /usr/nec ]
then
	# NEC machine -- what is it running?
	if [ "$os" = "UNIX_System_V" ]
	then
		os=EWS-UX_V
	elif [ "$os" = "UNIX_SV" ]
	then
		os=UX4800
	fi
elif [ "$arch" = "mips" ]
then
	case $rel
	in
	  4_*)
		if [ `uname -v` = "UMIPS" ]
		then
			os=RISCos
		fi;;
	esac
fi

# see if there is a "user suffix" specified
if [ "${SENDMAIL_SUFFIX-}x" = "x" ]
then
	sfx=""
else
	sfx=".${SENDMAIL_SUFFIX}"
fi

echo "Configuration: os=$os, rel=$rel, rbase=$rbase, rroot=$rroot, arch=$arch, sfx=$sfx"

# now try to find a reasonable object directory
if [ -r obj.$os.$rel.$arch$sfx ]; then
	obj=obj.$os.$rel.$arch$sfx
elif [ -r obj.$os.$rroot.$arch$sfx ]; then
	obj=obj.$os.$rroot.$arch$sfx
elif [ -r obj.$os.$rbase.x.$arch$sfx ]; then
	obj=obj.$os.$rbase.x.$arch$sfx
elif [ -r obj.$os.$rel$sfx ]; then
	obj=obj.$os.$rel$sfx
elif [ -r obj.$os.$rbase.x$sfx ]; then
	obj=obj.$os.$rbase.x$sfx
elif [ -r obj.$os.$arch$sfx ]; then
	obj=obj.$os.$arch$sfx
elif [ -r obj.$rel.$arch$sfx ]; then
	obj=obj.$rel.$arch$sfx
elif [ -r obj.$rbase.x.$arch$sfx ]; then
	obj=obj.$rbase.x.$arch$sfx
elif [ -r obj.$os$sfx ]; then
	obj=obj.$os$sfx
elif [ -r obj.$arch$sfx ]; then
	obj=obj.$arch$sfx
elif [ -r obj.$rel$sfx ]; then
	obj=obj.$rel$sfx
elif [ -r obj$sfx ]; then
	obj=obj$sfx
else
	# no existing obj directory -- try to create one if Makefile found
	obj=obj.$os.$rel.$arch$sfx
	if [ -r Makefiles/Makefile.$os.$rel.$arch$sfx ]; then
		makefile=Makefile.$os.$rel.$arch$sfx
	elif [ -r Makefiles/Makefile.$os.$rel.$arch ]; then
		makefile=Makefile.$os.$rel.$arch
	elif [ -r Makefiles/Makefile.$os.$rroot.$arch$sfx ]; then
		makefile=Makefile.$os.$rroot.$arch$sfx
	elif [ -r Makefiles/Makefile.$os.$rroot.$arch ]; then
		makefile=Makefile.$os.$rroot.$arch
	elif [ -r Makefiles/Makefile.$os.$rbase.x.$arch$sfx ]; then
		makefile=Makefile.$os.$rbase.x.$arch$sfx
	elif [ -r Makefiles/Makefile.$os.$rbase.x.$arch ]; then
		makefile=Makefile.$os.$rbase.x.$arch
	elif [ -r Makefiles/Makefile.$os.$rel$sfx ]; then
		makefile=Makefile.$os.$rel$sfx
	elif [ -r Makefiles/Makefile.$os.$rel ]; then
		makefile=Makefile.$os.$rel
	elif [ -r Makefiles/Makefile.$os.$rroot$sfx ]; then
		makefile=Makefile.$os.$rroot$sfx
	elif [ -r Makefiles/Makefile.$os.$rroot ]; then
		makefile=Makefile.$os.$rroot
	elif [ -r Makefiles/Makefile.$os.$rbase.x$sfx ]; then
		makefile=Makefile.$os.$rbase.x$sfx
	elif [ -r Makefiles/Makefile.$os.$rbase.x ]; then
		makefile=Makefile.$os.$rbase.x
	elif [ -r Makefiles/Makefile.$os.$arch$sfx ]; then
		makefile=Makefile.$os.$arch$sfx
	elif [ -r Makefiles/Makefile.$os.$arch ]; then
		makefile=Makefile.$os.$arch
	elif [ -r Makefiles/Makefile.$rel.$arch$sfx ]; then
		makefile=Makefile.$rel.$arch$sfx
	elif [ -r Makefiles/Makefile.$rel.$arch ]; then
		makefile=Makefile.$rel.$arch
	elif [ -r Makefiles/Makefile.$rroot.$arch$sfx ]; then
		makefile=Makefile.$rroot.$arch$sfx
	elif [ -r Makefiles/Makefile.$rroot.$arch ]; then
		makefile=Makefile.$rroot.$arch
	elif [ -r Makefiles/Makefile.$rbase.x.$arch$sfx ]; then
		makefile=Makefile.$rbase.x.$arch$sfx
	elif [ -r Makefiles/Makefile.$rbase.x.$arch ]; then
		makefile=Makefile.$rbase.x.$arch
	elif [ -r Makefiles/Makefile.$os$sfx ]; then
		makefile=Makefile.$os$sfx
	elif [ -r Makefiles/Makefile.$os ]; then
		makefile=Makefile.$os
	elif [ -r Makefiles/Makefile.$arch$sfx ]; then
		makefile=Makefile.$arch$sfx
	elif [ -r Makefiles/Makefile.$arch ]; then
		makefile=Makefile.$arch
	elif [ -r Makefiles/Makefile.$rel$sfx ]; then
		makefile=Makefile.$rel$sfx
	elif [ -r Makefiles/Makefile.$rel ]; then
		makefile=Makefile.$rel
	elif [ -r Makefiles/Makefile.$rel$sfx ]; then
		makefile=Makefile.$rel$sfx
	else
		echo "Cannot determine how to support $arch.$os.$rel"
		exit 1
	fi
	if [ "$mflag" ]
	then
		echo "Will run in virgin $obj using $makefile"
		exit 0
	fi
	echo "Creating $obj using $makefile"
	mkdir $obj
	(cd $obj; ln -s ../*.[ch158] ../sendmail.hf .; ln -s ../Makefiles/$makefile Makefile)
	echo "Making dependencies in $obj"
	(cd $obj; ${MAKE-make} depend)
fi

if [ "$mflag" ]
then
	makefile=`ls -l $obj/Makefile | sed 's/.* //'`
	if [ -z "$makefile" ]
	then
		echo "ERROR: $obj exists but has no Makefile"
		exit 1
	fi
	case $makefile
	in
	  ../Makefiles/*)
		makefile=`echo $makefile | sed 's/...Makefiles.//'`
		echo "Will run in existing $obj using $makefile"
		;;

	  *)
		echo "Will run in existing $obj using custom $makefile"
		;;
	esac
	exit 0
fi

echo "Making in $obj"
cd $obj
if [ $# = 0 ]
then
	exec ${MAKE-make}
else
	exec ${MAKE-make} "$@"
fi

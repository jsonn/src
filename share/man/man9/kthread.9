.\"     $NetBSD: kthread.9,v 1.16.6.1 2008/06/02 13:21:41 mjf Exp $
.\"
.\" Copyright (c) 2000, 2007 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to The NetBSD Foundation
.\" by Gregory McGarry, and by Andrew Doran.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd November 22, 2007
.Dt KTHREAD 9
.Os
.Sh NAME
.Nm kthread_create ,
.Nm kthread_destroy ,
.Nm kthread_exit
.Nd kernel threads
.Sh SYNOPSIS
.In sys/kthread.h
.Ft int
.Fn kthread_create "pri_t pri" "int flags" "struct cpu_info *ci" \
"void (*func)(void *)" "void *arg" "lwp_t **newlp" "const char *fmt" "..."
.Ft void
.Fn kthread_destroy "lwp_t *l"
.Ft void
.Fn kthread_exit "int ecode"
.Sh DESCRIPTION
Kernel threads are light-weight processes which execute entirely
within the kernel.
.Pp
Any process can request the creation of a new kernel thread.
Kernel threads are not swapped out during memory congestion.
The VM space and limits are shared with proc0 (usually swapper).
.Sh FUNCTIONS
.Bl -tag -width compact
.It Fn kthread_create "pri" "flags" "ci" "func" "arg" "newlp" "fmt" "..."
Create a kernel thread.
The arguments are as follows.
.Bl -tag -width compact
.It Fa pri
Priority level for the thread.
If no priority level is desired specify
.Dv PRI_NONE ,
causing
.Fn kthread_create
to select the default priority level.
.It Fa flags
Flags that can be logically ORed together to alter the thread's behaviour.
.Pp
.Dv KTHREAD_IDLE :
causes the thread to be created in the
.Dv LSIDL
(idle) state.
By default, the threads are created in the 
.Dv LSRUN
(runnable) state, meaning they will begin execution shortly after creation.
.Pp
.Dv KTHREAD_MPSAFE :
Specifies that the thread does its own locking and so is multiprocessor safe.
If not specified, the global kernel lock will be held whenever the thread is
running (unless explicitly dropped by the thread).
.Pp
.Dv KTHREAD_INTR :
Specifies that the thread services device interrupts.
This flag is intended for kernel internal use and should not normally be
specified.
.It Fa ci
If non-NULL, the thread will be created bound to the CPU specified
by
.Fa ci ,
meaning that it will only ever execute on that CPU.
By default, the threads are free to execute on any CPU in the system.
.It Fa func
A function to be called when the thread begins executing.
This function must not return.
If the thread runs to completion, it must call
.Fn kthread_exit
to properly terminate itself.
.It Fa arg
An argument to be passed to
.Fn func .
May be NULL if not required.
.It Fa newpl
A pointer to receive the new lwp structure for the kernel thread.
May be NULL if not required.
.It Fa fmt
A string containing format information used to display the kernel
thread name.
Must not be NULL.
.El
.It Fn kthread_destroy "l"
From another thread executing in the kernel, cause a kthread to exit.
The kthread must be in the
.Dv LSIDL
(idle) state.
.It Fn kthread_exit "ecode"
Exit from a kernel thread.
Must only be called by a kernel thread.
.El
.Sh RETURN VALUES
Upon successful completion,
.Fn kthread_create
returns 0.
Otherwise, the following error values are returned:
.Bl -tag -width [EAGAIN]
.It Bq Er EAGAIN
The limit on the total number of system processes would be exceeded.
.It Bq Er EAGAIN
The limit
.Dv RLIMIT_NPROC
on the total number of processes under execution by this
user id would be exceeded.
.El
.Sh CODE REFERENCES
This section describes places within the
.Nx
source tree where actual code implementing or using the kthread
framework can be found.
All pathnames are relative to
.Pa /usr/src .
.Pp
The kthread framework itself is implemented within the file
.Pa sys/kern/kern_kthread.c .
Data structures and function prototypes for the framework are located in
.Pa sys/sys/kthread.h .
.Sh SEE ALSO
.Xr driver 9
.Sh HISTORY
The kthread framework appeared in
.Nx 1.4 .

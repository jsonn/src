dnl Process this file with autoconf to produce a configure script.
dnl
AC_PREREQ(2.5)
AC_INIT(libbfd.c)

AC_ARG_ENABLE(64-bit-bfd,
[  --enable-64-bit-bfd     64-bit support (on hosts with narrower word sizes)],
[case "${enableval}" in
  yes)  want64=true  ;;
  no)   want64=false ;;
  *)    AC_MSG_ERROR(bad value ${enableval} for 64-bit-bfd option) ;;
esac],[want64=false])dnl
AC_ARG_ENABLE(targets,
[  --enable-targets        alternative target configurations],
[case "${enableval}" in
  yes | "") AC_ERROR(enable-targets option must specify target names or 'all')
            ;;
  no)       enable_targets= ;;
  *)        enable_targets=$enableval ;;
esac])dnl
AC_ARG_ENABLE(shared,
[  --enable-shared         build shared BFD library],
[case "${enableval}" in
  yes) shared=true ;;
  no)  shared=false ;;
  *bfd*) shared=true ;;
  *) shared=false ;;
esac])dnl
AC_ARG_ENABLE(commonbfdlib,
[  --enable-commonbfdlib   build shared BFD/opcodes/libiberty library],
[case "${enableval}" in
  yes) commonbfdlib=true ;;
  no)  commonbfdlib=false ;;
  *)   AC_MSG_ERROR([bad value ${enableval} for BFD commonbfdlib option]) ;;
esac])dnl
AC_ARG_WITH(mmap,
[  --with-mmap             try using mmap for BFD input files if available],
[case "${withval}" in
  yes)  want_mmap=true ;;
  no)   want_mmap=false ;;
  *)    AC_MSG_ERROR(bad value ${withval} for BFD with-mmap option) ;;
esac],[want_mmap=false])dnl

AC_CONFIG_HEADER(config.h:config.in)

AC_CONFIG_AUX_DIR(`cd $srcdir/..;pwd`)
AC_CANONICAL_SYSTEM
if test -z "$target" ; then
    AC_MSG_ERROR(Unrecognized target system type; please check config.sub.)
fi
AC_ARG_PROGRAM

host64=false
target64=false

# host stuff:

ALLLIBS='$(TARGETLIB)'
PICFLAG=
SHLIB=unused-shlib
SHLINK=unused-shlink
if test "${shared}" = "true"; then
  PICFLAG=-fpic
  if test "${commonbfdlib}" = "true"; then
    ALLLIBS='$(TARGETLIB)'
  else
    ALLLIBS='$(TARGETLIB) $(SHLIB) $(SHLINK)'
changequote(,)dnl
    SHLIB=libbfd.so.`sed -e 's/[^0-9]*\([0-9.]*\).*/\1/' ${srcdir}/VERSION`
changequote([,])dnl
    SHLINK=libbfd.so
  fi
fi

AC_PROG_CC

AC_ISC_POSIX

# Permit host specific settings.
. ${srcdir}/configure.host

AC_SUBST(HDEFINES)
AC_CHECK_TOOL(AR, ar)
AC_CHECK_TOOL(RANLIB, ranlib, :)
AC_PROG_INSTALL

if test "${shared}" = "true"; then
  if test "${GCC}" != "yes" && test "${shared_non_gcc}" != "yes"; then
    AC_MSG_WARN([BFD --enable-shared only supported when using gcc])
    shared=false
    ALLLIBS='$(TARGETLIB)'
    PICFLAG=
    SHLIB=unused-shlib
  fi
fi

AC_SUBST(ALLLIBS)
AC_SUBST(PICFLAG)
AC_SUBST(SHLIB)
AC_SUBST(SHLIB_CC)
AC_SUBST(SHLIB_CFLAGS)
AC_SUBST(SHLIB_LIBS)
if test "${commonbfdlib}" = "true"; then
  COMMON_SHLIB=yes
  PICLIST=piclist
else
  COMMON_SHLIB=
  PICLIST=
fi
AC_SUBST(COMMON_SHLIB)
AC_SUBST(PICLIST)
AC_SUBST(SHLINK)
AC_SUBST(INSTALL_SHLIB)

VERSION=`cat ${srcdir}/VERSION`
AC_SUBST(VERSION)

BFD_HOST_64BIT_LONG=0
BFD_HOST_64_BIT_DEFINED=0
BFD_HOST_64_BIT=
BFD_HOST_U_64_BIT=
if test "x${HOST_64BIT_TYPE}" = "xlong"; then
  BFD_HOST_64BIT_LONG=1
elif test "x${HOST_64BIT_TYPE}" != "x"; then
  BFD_HOST_64_BIT_DEFINED=1
  BFD_HOST_64_BIT=${HOST_64BIT_TYPE}
  BFD_HOST_U_64_BIT=${HOST_U_64BIT_TYPE}
fi
AC_SUBST(BFD_HOST_64BIT_LONG)
AC_SUBST(BFD_HOST_64_BIT_DEFINED)
AC_SUBST(BFD_HOST_64_BIT)
AC_SUBST(BFD_HOST_U_64_BIT)

BFD_CC_FOR_BUILD

AC_CHECK_HEADERS(stddef.h string.h strings.h stdlib.h time.h unistd.h)
AC_CHECK_HEADERS(fcntl.h sys/file.h sys/time.h)
AC_HEADER_TIME
AC_CHECK_FUNCS(fcntl getpagesize setitimer sysconf)

BFD_BINARY_FOPEN

BFD_NEED_DECLARATION(strstr)
BFD_NEED_DECLARATION(malloc)
BFD_NEED_DECLARATION(realloc)
BFD_NEED_DECLARATION(free)
BFD_NEED_DECLARATION(getenv)

# If we are configured native, pick a core file support file.
COREFILE=
COREFLAG=
if test "${target}" = "${host}"; then
  case "${host}" in
  alpha*-*-linux*)
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/alphalinux.h")
	;;
  alpha*-*-netbsd*)	COREFILE=netbsd-core.o ;;
  alpha*-*-*)		COREFILE=osf-core.o ;;
  arm-*-riscix)		COREFILE=trad-core.o ;;
  hppa*-*-hpux*)	COREFILE=hpux-core.o ;;
  hppa*-*-hiux*)	COREFILE=hpux-core.o ;;
  hppa*-*-bsd*)		COREFILE="hpux-core.o hppabsd-core.o"
			COREFLAG="-DHPUX_CORE -DHPPABSD_CORE" ;;
changequote(,)dnl
  i[3456]86-sequent-bsd*)
changequote([,])dnl
	COREFILE=trad-core.o;
	AC_DEFINE(TRAD_HEADER,"hosts/symmetry.h")
	;;
changequote(,)dnl
  i[3456]86-sequent-sysv4*) ;;
  i[3456]86-sequent-sysv*)
changequote([,])dnl
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/symmetry.h")
	;;
changequote(,)dnl
  i[3456]86-*-bsd* | i[3456]86-*-freebsd*)
changequote([,])dnl
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/i386bsd.h")
	;;
changequote(,)dnl
  i[3456]86-*-netbsd* | i[3456]86-*-openbsd*)
changequote([,])dnl
	COREFILE=netbsd-core.o
	;;
changequote(,)dnl
  i[3456]86-esix-sysv3*)
changequote([,])dnl
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/esix.h")
	;;
changequote(,)dnl
  i[3456]86-*-sco* | i[3456]86-*-isc*)
changequote([,])dnl
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/i386sco.h")
	;;
changequote(,)dnl
  i[3456]86-*-mach3*)
changequote([,])dnl
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/i386mach3.h")
	;;
changequote(,)dnl
  i[3456]86-*-linux*)
changequote([,])dnl
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/i386linux.h")
	;;
changequote(,)dnl
  i[3456]86-*-isc*)	COREFILE=trad-core.o ;;
  i[3456]86-*-aix*)	COREFILE=aix386-core.o ;;
changequote([,])dnl
  i860-*-mach3* | i860-*-osf1*)
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/i860mach3.h")
	;;
  mips-dec-bsd*)
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/mipsbsd.h")
	;;
  mips-dec-mach3*)
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/mipsmach3.h")
	;;
  mips-*-netbsd* | mips*-*-openbsd*)
	COREFILE=netbsd-core.o
	;;
  mips-dec-*)
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/decstation.h")
	;;
  mips-sgi-irix4*)	COREFILE=irix-core.o ;;
  mips-sgi-irix5*)	COREFILE=irix-core.o ;;
  mips-sgi-irix6*)	COREFILE=irix-core.o ;;
  mips-*-mach3*)
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/mipsmach3.h")
	;;
  mips-*-sysv4*)	;;
  mips-*-sysv* | mips-*-riscos*)
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/riscos.h")
	;;
  mips-sony-bsd*)
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/news-mips.h")
	;;
  m68*-bull*-sysv*)
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/dpx2.h")
	;;
  m68*-hp-hpux*)	COREFILE=hpux-core.o ;;
  m68*-hp-bsd*)
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/hp300bsd.h")
	;;
  m68*-*-linux*)
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/m68klinux.h")
	;;
  m68*-motorola-sysv*)
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER, "hosts/delta68.h")
	;;
  m68*-sony-*)
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/news.h")
	;;
  m68*-*-netbsd* | m68*-*-openbsd*)
	COREFILE=netbsd-core.o
	;;
  m68*-apple-aux*)
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/m68kaux.h")
	;;
  m88*-*-sysv4*)	;;
  m88*-motorola-sysv*)	COREFILE=ptrace-core.o ;;
  m88*-*-mach3*)
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/m88kmach3.h")
	;;
  ns32k-pc532-mach)
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/pc532mach.h")
	;;
  ns32k-*-netbsd* | ns32k-*-openbsd*)
	COREFILE=netbsd-core.o
	;;
  rs6000-*-lynx*)	COREFILE=lynx-core.o ;;
  rs6000-*-aix4*)	COREFILE=rs6000-core.o ;;
  rs6000-*-*)		COREFILE=rs6000-core.o ;;
  powerpc-*-*bsd*)	COREFILE=netbsd-core.o ;;
  powerpc-*-aix4*)	COREFILE=rs6000-core.o ;;
  powerpc-*-aix*)	COREFILE=rs6000-core.o ;;
  powerpc-*-beos*)	;;
  powerpc-*-netbsd*)
	COREFILE=netbsd-core.o
	;;
  sparc-*-netbsd* | sparc-*-openbsd*)
	COREFILE=netbsd-core.o
	;;
  tahoe-*-*)
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/tahoe.h")
	;;
  vax-*-ultrix2*)
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/vaxult2.h")
	;;
  vax-*-ultrix*)
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/vaxult2.h")
	;;
  vax-*-*)
	COREFILE=trad-core.o
	AC_DEFINE(TRAD_HEADER,"hosts/vaxbsd.h")
	;;
  esac

  case "$COREFILE" in
  aix386-core.o)	COREFLAG=-DAIX386_CORE ;;
  hppabsd-core.o)	COREFLAG=-DHPPABSD_CORE ;;
  hpux-core.o)		COREFLAG=-DHPUX_CORE ;;
  irix-core.o)		COREFLAG=-DIRIX_CORE ;;
  lynx-core.o)		COREFLAG=-DLYNX_CORE ;;
  netbsd-core.o)	COREFLAG=-DNETBSD_CORE ;;
  osf-core.o)		COREFLAG=-DOSF_CORE ;;
  ptrace-core.o)	COREFLAG=-DPTRACE_CORE ;;
  rs6000-core.o)	COREFLAG="$COREFLAG -DAIX_CORE" ;;
  trad-core.o)		COREFLAG="$COREFLAG -DTRAD_CORE" ;;
  esac

  # The ELF code uses the native <sys/procfs.h> to handle core files.
  # Define HAVE_SYS_PROCFS_H if the file exists and defines
  # prstatus_t.
  AC_MSG_CHECKING([for sys/procfs.h])
  AC_CACHE_VAL(bfd_cv_header_sys_procfs_h,
  [AC_TRY_COMPILE([#include <sys/procfs.h>],
  [prstatus_t t;],
  bfd_cv_header_sys_procfs_h=yes, bfd_cv_header_sys_procfs_h=no)])
  AC_MSG_RESULT($bfd_cv_header_sys_procfs_h)
  if test $bfd_cv_header_sys_procfs_h = yes; then
    AC_DEFINE(HAVE_SYS_PROCFS_H)
  fi

fi
AC_SUBST(COREFILE)
AC_SUBST(COREFLAG)

# target stuff:

# Canonicalize the secondary target names.
if test -n "$enable_targets" ; then
    for targ in `echo $enable_targets | sed 's/,/ /g'`
    do
	result=`${CONFIG_SHELL-/bin/sh} $ac_config_sub $targ 2>/dev/null`
	if test -n "$result" ; then
	    canon_targets="$canon_targets $result"
	else
	    # Allow targets that config.sub doesn't recognize, like "all".
	    canon_targets="$canon_targets $targ"
	fi
    done
fi

all_targets=false
defvec=
selvecs=
selarchs=
TDEFINES=
for targ in $target $canon_targets
do
    if test "x$targ" = "xall"; then
        all_targets=true
    else
	. $srcdir/config.bfd
	if test "x$targ" = "x$target"; then
	    defvec=$targ_defvec
	fi
	selvecs="$selvecs $targ_defvec $targ_selvecs"
	selarchs="$selarchs $targ_archs"
	TDEFINES="$TDEFINES $targ_cflags"
    fi
done
AC_SUBST(TDEFINES)

# This processing still needs to be done if we're to decide properly whether
# 64-bit support needs to be compiled in.  Currently, it will be included if
# the default or any other explicitly requested target requires it; it
# will not be included on a 32-bit host if no 64-bit target is requested, and
# no "--with-64-bit-bfd" option is given, even if "--with-targets=all" is
# used.

# uniq the default and selected vectors in all the configured targets.
f=""
for i in $selvecs ; do
    case " $f " in
    *" $i "*) ;;
    *) f="$f $i" ;;
    esac
done
selvecs="$f"

# uniq the architectures in all the configured targets.
f=""
for i in $selarchs ; do
    case " $f " in
    *" $i "*) ;;
    *) f="$f $i" ;;
    esac
done
selarchs="$f"

# Target backend .o files.
tb=

elf="elf.o elflink.o"

for vec in $selvecs
do
    case "$vec" in
    # This list is alphabetized to make it easy to compare
    # with the two vector lists in targets.c.
    a29kcoff_big_vec)		tb="$tb coff-a29k.o cofflink.o" ;;
    a_out_adobe_vec)		tb="$tb aout-adobe.o aout32.o" ;;
    armcoff_little_vec)		tb="$tb coff-arm.o cofflink.o " ;;
    armcoff_big_vec)		tb="$tb coff-arm.o cofflink.o " ;;
    armpe_little_vec)		tb="$tb pe-arm.o cofflink.o " ;;
    armpe_big_vec)		tb="$tb pe-arm.o cofflink.o " ;;
    armpei_little_vec)		tb="$tb pei-arm.o cofflink.o " ;;
    armpei_big_vec)		tb="$tb pei-arm.o cofflink.o " ;;
    aout0_big_vec)		tb="$tb aout0.o aout32.o" ;;
    aout_arm_big_vec)		tb="$tb aout-arm.o aout32.o" ;;
    aout_arm_little_vec)	tb="$tb aout-arm.o aout32.o" ;;
    aout_mips_big_vec)		tb="$tb mipsbsd.o aout32.o" ;;
    aout_mips_little_vec)	tb="$tb mipsbsd.o aout32.o" ;;
    apollocoff_vec)		tb="$tb coff-apollo.o" ;;
    b_out_vec_big_host)		tb="$tb bout.o aout32.o" ;;
    b_out_vec_little_host)	tb="$tb bout.o aout32.o" ;;
    bfd_elf64_alpha_vec)	tb="$tb elf64-alpha.o elf64.o $elf"
				target64=true ;;
    bfd_elf32_big_generic_vec) 	tb="$tb elf32-gen.o elf32.o $elf" ;;
    bfd_elf32_bigmips_vec) 	tb="$tb elf32-mips.o elf32.o $elf ecofflink.o" ;;
    bfd_elf64_bigmips_vec) 	tb="$tb elf64-mips.o elf64.o elf32-mips.o elf32.o $elf ecofflink.o"
				target64=true ;;
    bfd_elf32_d10v_vec)		tb="$tb elf32-d10v.o elf32.o $elf" ;;
    bfd_elf32_hppa_vec)		tb="$tb elf32-hppa.o elf32.o $elf" ;;
    bfd_elf32_i386_vec)		tb="$tb elf32-i386.o elf32.o $elf" ;;
    bfd_elf32_i860_vec)		tb="$tb elf32-i860.o elf32.o $elf" ;;
    bfd_elf32_little_generic_vec) tb="$tb elf32-gen.o elf32.o $elf" ;;
    bfd_elf32_littlemips_vec) 	tb="$tb elf32-mips.o elf32.o $elf ecofflink.o" ;;
    bfd_elf64_littlemips_vec) 	tb="$tb elf64-mips.o elf64.o elf32-mips.o elf32.o $elf ecofflink.o"
				target64=true ;;
    bfd_elf32_m32r_vec)		tb="$tb elf32-m32r.o elf32.o $elf" ;;
    bfd_elf32_m68k_vec)		tb="$tb elf32-m68k.o elf32.o $elf" ;;
    bfd_elf32_m88k_vec)		tb="$tb elf32-m88k.o elf32.o $elf" ;;
    bfd_elf32_mn10200_vec)	tb="$tb elf-m10200.o elf32.o $elf" ;;
    bfd_elf32_mn10300_vec)	tb="$tb elf-m10300.o elf32.o $elf" ;;
    bfd_elf32_powerpc_vec)	tb="$tb elf32-ppc.o elf32.o $elf" ;;
    bfd_elf32_powerpcle_vec)	tb="$tb elf32-ppc.o elf32.o $elf" ;;
    bfd_elf32_sh_vec)		tb="$tb elf32-sh.o elf32.o $elf coff-sh.o" ;;
    bfd_elf32_shl_vec)		tb="$tb elf32-sh.o elf32.o $elf coff-sh.o" ;;
    bfd_elf32_sparc_vec)	tb="$tb elf32-sparc.o elf32.o $elf" ;;
    bfd_elf64_big_generic_vec) 	tb="$tb elf64-gen.o elf64.o $elf"
				target64=true ;;
    bfd_elf64_little_generic_vec) tb="$tb elf64-gen.o elf64.o $elf"
				target64=true ;;
    bfd_elf64_sparc_vec)	tb="$tb elf64-sparc.o elf64.o $elf"
				target64=true ;;
    cisco_core_vec)		tb="$tb cisco-core.o" ;;
    demo_64_vec)		tb="$tb demo64.o aout64.o"
				target64=true ;;
    ecoff_big_vec)		tb="$tb coff-mips.o ecoff.o ecofflink.o" ;;
    ecoff_little_vec)		tb="$tb coff-mips.o ecoff.o ecofflink.o" ;;
    ecoff_biglittle_vec)	tb="$tb coff-mips.o ecoff.o ecofflink.o" ;;
    ecoffalpha_little_vec)	tb="$tb coff-alpha.o ecoff.o ecofflink.o"
				target64=true ;;
    evax_alpha_vec)		tb="$tb evax-alpha.o evax-emh.o evax-egsd.o evax-etir.o evax-misc.o"
 				target64=true ;;
    h8300coff_vec)		tb="$tb coff-h8300.o reloc16.o" ;;
    h8500coff_vec)		tb="$tb coff-h8500.o reloc16.o" ;;
    host_aout_vec)		tb="$tb host-aout.o aout32.o" ;;
    hp300bsd_vec)		tb="$tb hp300bsd.o aout32.o" ;;
    hp300hpux_vec)		tb="$tb hp300hpux.o aout32.o" ;;
    i386aout_vec)		tb="$tb i386aout.o aout32.o" ;;
    i386bsd_vec)		tb="$tb i386bsd.o aout32.o" ;;
    i386coff_vec)		tb="$tb coff-i386.o cofflink.o" ;;
    i386dynix_vec)		tb="$tb i386dynix.o aout32.o" ;;
    i386freebsd_vec)		tb="$tb i386freebsd.o aout32.o" ;;
    i386msdos_vec)		tb="$tb i386msdos.o" ;;
    i386pe_vec)			tb="$tb pe-i386.o cofflink.o " ;;
    i386pei_vec)		tb="$tb pei-i386.o cofflink.o" ;;
    i386linux_vec)		tb="$tb i386linux.o aout32.o" ;;
    i386lynx_aout_vec)		tb="$tb i386lynx.o lynx-core.o aout32.o" ;;
    i386lynx_coff_vec)		tb="$tb cf-i386lynx.o cofflink.o lynx-core.o" ;;
    i386mach3_vec)		tb="$tb i386mach3.o aout32.o" ;;
    i386netbsd_vec)		tb="$tb i386netbsd.o aout32.o" ;;
    i386os9k_vec)		tb="$tb i386os9k.o aout32.o" ;;
    i860coff_vec)		tb="$tb coff-i860.o cofflink.o" ;;
    icoff_big_vec)		tb="$tb coff-i960.o cofflink.o" ;;
    icoff_little_vec)		tb="$tb coff-i960.o cofflink.o" ;;
    ieee_vec)			tb="$tb ieee.o" ;;
    m68kcoff_vec)		tb="$tb coff-m68k.o cofflink.o" ;;
    m68kcoffun_vec)		tb="$tb coff-u68k.o coff-m68k.o cofflink.o" ;;
    m68klinux_vec)		tb="$tb m68klinux.o aout32.o" ;;
    m68klynx_aout_vec)		tb="$tb m68klynx.o lynx-core.o aout32.o" ;;
    m68klynx_coff_vec)		tb="$tb cf-m68klynx.o coff-m68k.o cofflink.o lynx-core.o" ;;
    m68knetbsd_vec)		tb="$tb m68knetbsd.o aout32.o" ;;
    m68k4knetbsd_vec)		tb="$tb m68k4knetbsd.o aout32.o" ;;
    m68kaux_coff_vec)		tb="$tb coff-aux.o coff-m68k.o cofflink.o" ;;
    m68ksysvcoff_vec)		tb="$tb coff-svm68k.o cofflink.o" ;;
    m88kbcs_vec)		tb="$tb coff-m88k.o" ;;
    newsos3_vec)		tb="$tb newsos3.o aout32.o" ;;
    nlm32_i386_vec)		tb="$tb nlm32-i386.o nlm32.o nlm.o" ;;
    nlm32_sparc_vec)		tb="$tb nlm32-sparc.o nlm32.o nlm.o" ;;
    nlm32_alpha_vec)		tb="$tb nlm32-alpha.o nlm32.o nlm.o"
				target64=true ;;
    riscix_vec)			tb="$tb aout32.o riscix.o" ;;
    nlm32_powerpc_vec)		tb="$tb nlm32-ppc.o nlm32.o nlm.o" ;;
    pc532netbsd_vec)		tb="$tb ns32knetbsd.o aout-ns32k.o" ;;
    pc532machaout_vec)		tb="$tb pc532-mach.o aout-ns32k.o" ;;
    pmac_xcoff_vec)		tb="$tb coff-pmac.o xcofflink.o" ;;
    rs6000coff_vec)		tb="$tb coff-rs6000.o xcofflink.o" ;;
    bfd_powerpc_pe_vec)         tb="$tb pe-ppc.o cofflink.o" ;;  
    bfd_powerpcle_pe_vec)       tb="$tb pe-ppc.o cofflink.o" ;;  
    bfd_powerpc_pei_vec)        tb="$tb pei-ppc.o cofflink.o" ;;
    bfd_powerpcle_pei_vec)      tb="$tb pei-ppc.o cofflink.o" ;;
    ppcboot_vec)		tb="$tb ppcboot.o" ;;
    shcoff_vec)			tb="$tb coff-sh.o cofflink.o" ;;
    shlcoff_vec)		tb="$tb coff-sh.o cofflink.o" ;;
    som_vec)			tb="$tb som.o" ;;
    sparcle_aout_vec)		tb="$tb aout-sparcle.o aout32.o" ;;
    sparclinux_vec)		tb="$tb sparclinux.o aout32.o stab-syms.o" ;;
    sparclynx_aout_vec)		tb="$tb sparclynx.o lynx-core.o aout32.o" ;;
    sparclynx_coff_vec)		tb="$tb cf-sparclynx.o lynx-core.o" ;;
    sparcnetbsd_vec)		tb="$tb sparcnetbsd.o aout32.o" ;;
    sparccoff_vec)		tb="$tb coff-sparc.o" ;;
    srec_vec)			tb="$tb srec.o" ;;
    sunos_big_vec)		tb="$tb sunos.o aout32.o" ;;
    symbolsrec_vec)		tb="$tb srec.o" ;;
    tekhex_vec)			tb="$tb tekhex.o" ;;
    we32kcoff_vec)		tb="$tb coff-we32k.o" ;;
    z8kcoff_vec)		tb="$tb coff-z8k.o reloc16.o" ;;
    w65_vec)			tb="$tb coff-w65.o reloc16.o" ;;
    versados_vec)		tb="$tb versados.o" ;;

    "")			;;
    *) AC_MSG_ERROR(*** unknown target vector $vec) ;;
    esac
done

# Target architecture .o files.
# A couple of CPUs use shorter file names to avoid problems on DOS
# filesystems.
ta=`echo $selarchs | sed -e s/bfd_/cpu-/g -e s/_arch/.o/g -e s/mn10200/m10200/ -e s/mn10300/m10300/`

# Weed out duplicate .o files.
f=""
for i in $tb ; do
    case " $f " in
    *" $i "*) ;;
    *) f="$f $i" ;;
    esac
done
tb="$f"

f=""
for i in $ta ; do
    case " $f " in
    *" $i "*) ;;
    *) f="$f $i" ;;
    esac
done
ta="$f"

bfd_backends="$tb"
bfd_machines="$ta"

if test x${all_targets} = xtrue ; then
  bfd_backends="${bfd_backends}"' $(ALL_BACKENDS)'
  bfd_machines="${bfd_machines}"' $(ALL_MACHINES)'
  selvecs=
  havevecs=
  selarchs=
else	# all_targets is true
  # Only set these if they will be nonempty, for the clever echo.
  havevecs=
  test -n "$selvecs" &&
    havevecs=`echo $selvecs | sed -e 's/^/-DHAVE_/' -e 's/ \(.\)/ -DHAVE_\1/g'`
  test -n "$selvecs" &&
    selvecs=`echo $selvecs | sed -e 's/^/\&/' -e 's/ \(.\)/,\&\1/g'`
  test -n "$selarchs" &&
    selarchs=`echo $selarchs | sed -e 's/^/\&/' -e 's/ \(.\)/,\&\1/g'`
fi	# all_targets is true

case ${host64}-${target64}-${want64} in
  *true*)
    wordsize=64
    all_backends='$(BFD64_BACKENDS) $(BFD32_BACKENDS)'
    if test -z "$GCC" && test "$BFD_HOST_64BIT_LONG" = "0" && test "$BFD_HOST_64_BIT_DEFINED" = "0"; then
      AC_MSG_WARN([You have requested a 64 bit BFD configuration, but])
      AC_MSG_WARN([your compiler may not have a 64 bit integral type])
    fi
    ;;
  false-false-false)
    wordsize=32
    all_backends='$(BFD32_BACKENDS)'
    ;;
esac

AC_SUBST(wordsize)
AC_SUBST(all_backends)
AC_SUBST(bfd_backends)
AC_SUBST(bfd_machines)

tdefaults=""
test -n "${defvec}" && tdefaults="${tdefaults} -DDEFAULT_VECTOR=${defvec}"
test -n "${selvecs}" && tdefaults="${tdefaults} -DSELECT_VECS='${selvecs}'"
test -n "${selarchs}" && tdefaults="${tdefaults} -DSELECT_ARCHITECTURES='${selarchs}'"
test -n "${havevecs}" && tdefaults="${tdefaults} ${havevecs}"
AC_SUBST(tdefaults)

dnl AC_CHECK_HEADERS(sys/mman.h)
AC_FUNC_MMAP
AC_CHECK_FUNCS(madvise mprotect)
case ${want_mmap}+${ac_cv_func_mmap_fixed_mapped} in
  true+yes )  AC_DEFINE(USE_MMAP) ;;
esac

rm -f doc/config.status
AC_OUTPUT(Makefile doc/Makefile bfd-in3.h:bfd-in2.h,
[case x$CONFIG_HEADERS in xconfig.h:config.in) echo > stamp-h ;; esac])

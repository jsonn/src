.\" $NetBSD: gcc.1,v 1.2.20.1 2009/05/13 19:18:17 jym Exp $
.Dd April 30, 2009
.Dt GCC 1
.Os
.Sh NAME
.Nm gcc
.Nd GNU project C and C++ compiler
.Sh SYNOPSIS
.Nm
.Oo Fl c | Fl S | Fl E Oc
.Op Fl std= Ns Ar standard
.Op Fl g
.Op Fl pg
.Op Fl O Ns Ar level
.Op Fl W Ns Ar warn...
.Op Fl pedantic
.Op Fl I Ns Ar dir...
.Op Fl L Ns Ar dir...
.Op Fl D Ns Ar macro Ns = Ns Ar defn...
.Op Fl U Ns Ar macro
.Op Fl f Ns Ar option...
.Op Fl m Ns Ar machine-option...
.Op Fl o Ar outfile
.Ar infile
.Ar ...
.Pp
Only the most useful options are listed here; see below for the remainder.
.Nm g++
accepts mostly the same options as
.Nm gcc .
.Sh DESCRIPTION
When you invoke GCC, it normally does preprocessing, compilation, assembly and linking.
The "overall options" allow you to stop this process at an intermediate stage.
For example, the
.Fl c
option says not to run the linker.
Then the output consists of object files output by the assembler.
.Pp
Other options are passed on to one stage of processing.
Some options control the preprocessor and others the compiler itself.
Yet other options control the assembler and linker; most of these are not documented here, since you rarely need to use any of them.
.Pp
Most of the command line options that you can use with GCC are useful for C programs; when an option is only useful with another language (usually C++), the explanation says so explicitly.
If the description for a particular option does not mention a source language, you can use that option with all supported languages.
.Pp
The
.Nm gcc
program accepts options and file names as operands.
Many options have multi-letter names; therefore multiple single-letter options may
.Em not
be grouped:
.Fl dr
is very different from
.Fl d Fl r .
.Pp
You can mix options and other arguments.
For the most part, the order you use doesn't matter.
Order does matter when you use several options of the same kind; for example, if you specify
.Fl L
more than once, the directories are searched in the order specified.
.Pp
Many options have long names starting with
.Fl f
or with
.Fl W
---for example,
.Fl fstrength-reduce ,
.Fl Wformat
and so on.
Most of these have both positive and negative forms; the negative form of
.Fl ffoo
would be
.Fl fno-foo .
This manual documents only one of these two forms, whichever one is not the default.
.Sh OPTIONS
.Ss Option Summary
Here is a summary of all the options, grouped by type.
Explanations are in the following sections.
.Pp
.Bl -tag -width xx
.It Sy Overall Options
.Fl c Fl S Fl E Fl o Ar file
.Fl combine Fl pipe Fl pass-exit-codes Fl x Ar language
.Fl v Fl ### Fl -help Fl -target-help Fl -version
.Pp
.It Sy C Language Options
.Fl ansi Fl std= Ns Ar standard
.Fl fgnu89-inline Fl aux-info Ar filename
.Fl fno-asm Fl fno-builtin Fl fno-builtin- Ns Ar function
.Fl fhosted Fl ffreestanding Fl fms-extensions Fl trigraphs Fl no-integrated-cpp Fl traditional Fl traditional-cpp Fl fallow-single-precision Fl fcond-mismatch Fl fsigned-bitfields Fl fsigned-char Fl funsigned-bitfields Fl funsigned-char
.Pp
.It Sy C++ Language Options
.Fl fabi-version= Ns Ar n
.Fl fno-access-control Fl fcheck-new Fl fconserve-space Fl ffriend-injection Fl fno-const-strings Fl fno-elide-constructors Fl fno-enforce-eh-specs Fl ffor-scope Fl fno-for-scope Fl fno-gnu-keywords Fl fno-implicit-templates Fl fno-implicit-inline-templates Fl fno-implement-inlines Fl fms-extensions Fl fno-nonansi-builtins Fl fno-operator-names Fl fno-optional-diags Fl fpermissive Fl frepo Fl fno-rtti Fl fstats Fl ftemplate-depth- Ns Ar n
.Fl fno-threadsafe-statics Fl fuse-cxa-atexit Fl fno-weak Fl nostdinc++ Fl fno-default-inline Fl fvisibility-inlines-hidden Fl Wabi Fl Wctor-dtor-privacy Fl Wnon-virtual-dtor Fl Wreorder Fl Weffc++ Fl Wno-deprecated Fl Wstrict-null-sentinel Fl Wno-non-template-friend Fl Wold-style-cast Fl Woverloaded-virtual Fl Wno-pmf-conversions Fl Wsign-promo
.Pp
.It Sy Objective-C and Objective-C++ Language Options
.Fl fconstant-string-class= Ns Ar class-name
.Fl fgnu-runtime Fl fnext-runtime Fl fno-nil-receivers Fl fobjc-call-cxx-cdtors Fl fobjc-direct-dispatch Fl fobjc-exceptions Fl fobjc-gc Fl freplace-objc-classes Fl fzero-link Fl gen-decls Fl Wassign-intercept Fl Wno-protocol Fl Wselector Fl Wstrict-selector-match Fl Wundeclared-selector
.Pp
.It Sy Language Independent Options
.Fl fmessage-length= Ns Ar n
.Fl fdiagnostics-show-location= Ns Oo Ns Ar once Ns | Ns Ar every-line Ns Oc
.Fl fdiagnostics-show-options
.Pp
.It Sy Warning Options
.Fl fsyntax-only Fl pedantic Fl pedantic-errors Fl w Fl Wextra Fl Wall Fl Waggregate-return Fl Wno-attributes Fl Wc++-compat Fl Wcast-align Fl Wcast-qual Fl Wchar-subscripts Fl Wcomment Fl Wconversion Fl Wno-deprecated-declarations Fl Wdisabled-optimization Fl Wno-div-by-zero Fl Wno-endif-labels Fl Werror Fl Werror-implicit-function-declaration Fl Wfatal-errors Fl Wfloat-equal Fl Wformat Fl Wformat=2 Fl Wno-format-extra-args Fl Wformat-nonliteral Fl Wformat-security Fl Wformat-y2k Fl Wimplicit Fl Wimplicit-function-declaration Fl Wimplicit-int Fl Wimport Fl Wno-import Fl Winit-self Fl Winline Fl Wno-int-to-pointer-cast Fl Wno-invalid-offsetof Fl Winvalid-pch Fl Wlarger-than- Ns Ar len
.Fl Wunsafe-loop-optimizations Fl Wlong-long Fl Wmain Fl Wmissing-braces Fl Wmissing-field-initializers Fl Wmissing-format-attribute Fl Wmissing-include-dirs Fl Wmissing-noreturn Fl Wno-multichar Fl Wnonnull Fl Wpacked Fl Wpadded Fl Wparentheses Fl Wpointer-arith Fl Wno-pointer-to-int-cast Fl Wredundant-decls Fl Wreturn-type Fl Wsequence-point Fl Wshadow Fl Wsign-compare Fl Wstack-protector Fl Wstrict-aliasing Fl Wstrict-aliasing=2 Fl Wswitch Fl Wswitch-default Fl Wswitch-enum Fl Wsystem-headers Fl Wtrigraphs Fl Wundef Fl Wuninitialized Fl Wunknown-pragmas Fl Wno-pragmas Fl Wunreachable-code Fl Wunused Fl Wunused-function Fl Wunused-label Fl Wunused-parameter Fl Wunused-value Fl Wunused-variable Fl Wvariadic-macros Fl Wvolatile-register-var Fl Wwrite-strings
.Pp
.It Sy C-only Warning Options
.Fl Wbad-function-cast Fl Wmissing-declarations Fl Wmissing-prototypes Fl Wnested-externs Fl Wold-style-definition Fl Wstrict-prototypes Fl Wtraditional Fl Wdeclaration-after-statement Fl Wpointer-sign
.Pp
.It Sy Debugging Options
.Fl d Ns Ar letters
.Fl dumpspecs Fl dumpmachine Fl dumpversion Fl fdump-unnumbered Fl fdump-translation-unit- Ns Ar n
.Fl fdump-class-hierarchy- Ns Ar n
.Fl fdump-ipa-all Fl fdump-ipa-cgraph Fl fdump-tree-all Fl fdump-tree-original- Ns Ar n
.Fl fdump-tree-optimized- Ns Ar n
.Fl fdump-tree-inlined- Ns Ar n
.Fl fdump-tree-cfg Fl fdump-tree-vcg Fl fdump-tree-alias Fl fdump-tree-ch Fl fdump-tree-ssa- Ns Ar n
.Fl fdump-tree-pre- Ns Ar n
.Fl fdump-tree-ccp- Ns Ar n
.Fl fdump-tree-dce- Ns Ar n
.Fl fdump-tree-gimple Ns Oo Ns Ar -raw Ns Oc
.Fl fdump-tree-mudflap- Ns Ar n
.Fl fdump-tree-dom- Ns Ar n
.Fl fdump-tree-dse- Ns Ar n
.Fl fdump-tree-phiopt- Ns Ar n
.Fl fdump-tree-forwprop- Ns Ar n
.Fl fdump-tree-copyrename- Ns Ar n
.Fl fdump-tree-nrv Fl fdump-tree-vect Fl fdump-tree-sink Fl fdump-tree-sra- Ns Ar n
.Fl fdump-tree-salias Fl fdump-tree-fre- Ns Ar n
.Fl fdump-tree-vrp- Ns Ar n
.Fl ftree-vectorizer-verbose= Ns Ar n
.Fl fdump-tree-storeccp- Ns Ar n
.Fl feliminate-dwarf2-dups Fl feliminate-unused-debug-types Fl feliminate-unused-debug-symbols Fl fmem-report Fl fprofile-arcs Fl frandom-seed= Ns Ar string
.Fl fsched-verbose= Ns Ar n
.Fl ftest-coverage Fl ftime-report Fl fvar-tracking Fl g Fl g Ns Ar level
.Fl gcoff Fl gdwarf-2 Fl ggdb Fl gstabs Fl gstabs+ Fl gvms Fl gxcoff Fl gxcoff+ Fl p Fl pg Fl print-file-name= Ns Ar library
.Fl print-libgcc-file-name Fl print-multi-directory Fl print-multi-lib Fl print-prog-name= Ns Ar program
.Fl print-search-dirs Fl Q Fl save-temps Fl time
.Pp
.It Sy Optimization Options
.Fl falign-functions Ns Oo = Ns Ar n Oc
.Fl falign-jumps Ns Oo = Ns Ar n Oc
.Fl falign-labels Ns Oo = Ns Ar n Oc
.Fl falign-loops Ns Oo = Ns Ar n Oc
.Fl fmudflap Fl fmudflapth Fl fmudflapir Fl fbranch-probabilities Fl fprofile-values Fl fvpt Fl fbranch-target-load-optimize Fl fbranch-target-load-optimize2 Fl fbtr-bb-exclusive Fl fcaller-saves Fl fcprop-registers Fl fcse-follow-jumps Fl fcse-skip-blocks Fl fcx-limited-range Fl fdata-sections Fl fdelayed-branch Fl fdelete-null-pointer-checks Fl fearly-inlining Fl fexpensive-optimizations Fl ffast-math Fl ffloat-store Fl fforce-addr Fl ffunction-sections Fl fgcse Fl fgcse-lm Fl fgcse-sm Fl fgcse-las Fl fgcse-after-reload Fl floop-optimize Fl fcrossjumping Fl fif-conversion Fl fif-conversion2 Fl finline-functions Fl finline-functions-called-once Fl finline-limit= Ns Ar n
.Fl fkeep-inline-functions Fl fkeep-static-consts Fl fmerge-constants Fl fmerge-all-constants Fl fmodulo-sched Fl fno-branch-count-reg Fl fno-default-inline Fl fno-defer-pop Fl floop-optimize2 Fl fmove-loop-invariants Fl fno-function-cse Fl fno-guess-branch-probability Fl fno-inline Fl fno-math-errno Fl fno-peephole Fl fno-peephole2 Fl funsafe-math-optimizations Fl funsafe-loop-optimizations Fl ffinite-math-only Fl fno-trapping-math Fl fno-zero-initialized-in-bss Fl fomit-frame-pointer Fl foptimize-register-move Fl foptimize-sibling-calls Fl fprefetch-loop-arrays Fl fprofile-generate Fl fprofile-use Fl fregmove Fl frename-registers Fl freorder-blocks Fl freorder-blocks-and-partition Fl freorder-functions Fl frerun-cse-after-loop Fl frerun-loop-opt Fl frounding-math Fl fschedule-insns Fl fschedule-insns2 Fl fno-sched-interblock Fl fno-sched-spec Fl fsched-spec-load Fl fsched-spec-load-dangerous Fl fsched-stalled-insns Ns Oo = Ns Ar n Oc
.Fl fsched-stalled-insns-dep Ns Oo = Ns Ar n Oc
.Fl fsched2-use-superblocks Fl fsched2-use-traces Fl freschedule-modulo-scheduled-loops Fl fsignaling-nans Fl fsingle-precision-constant Fl fstack-protector Fl fstack-protector-all Fl fstrength-reduce Fl fstrict-aliasing Fl ftracer Fl fthread-jumps Fl funroll-all-loops Fl funroll-loops Fl fpeel-loops Fl fsplit-ivs-in-unroller Fl funswitch-loops Fl fvariable-expansion-in-unroller Fl ftree-pre Fl ftree-ccp Fl ftree-dce Fl ftree-loop-optimize Fl ftree-loop-linear Fl ftree-loop-im Fl ftree-loop-ivcanon Fl fivopts Fl ftree-dominator-opts Fl ftree-dse Fl ftree-copyrename Fl ftree-sink Fl ftree-ch Fl ftree-sra Fl ftree-ter Fl ftree-lrs Fl ftree-fre Fl ftree-vectorize Fl ftree-vect-loop-version Fl ftree-salias Fl fweb Fl ftree-copy-prop Fl ftree-store-ccp Fl ftree-store-copy-prop Fl ftree-vrp Fl funit-at-a-time Fl fwhole-program Fl -param Ar name Ns = Ns Ar value
.Fl O Fl O0 Fl O1 Fl O2 Fl O3 Fl \&Os
.Pp
.It Sy Preprocessor Options
.Fl A Ns Ar question Ns = Ns Ar answer
.Fl A- Ns Ar question Ns = Ns Ar answer
.Fl C Fl dD Fl dI Fl dM Fl dN Fl D Ns Ar macro Ns = Ns Ar defn
.Fl E Fl H Fl idirafter Ar dir
.Fl include Ar file
.Fl imacros Ar file
.Fl iprefix Ar file
.Fl iwithprefix Ar dir
.Fl iwithprefixbefore Ar dir
.Fl isystem Ar dir
.Fl cxx-isystem Ar dir
.Fl isysroot Ar dir
.Fl M Fl MM Fl MF Fl MG Fl MP Fl MQ Fl MT Fl nostdinc Fl P Fl fworking-directory Fl remap Fl trigraphs Fl undef Fl U Ns Ar macro
.Fl Wp, Ns Ar option
.Fl Xpreprocessor Ar option
.Pp
.It Sy Assembler Option
.Fl Wa, Ns Ar option
.Fl Xassembler Ar option
.Pp
.It Sy Linker Options
.Em object-file-name
.Fl l Ns Ar library
.Fl nostartfiles Fl nodefaultlibs Fl nostdlib Fl pie Fl rdynamic Fl s Fl static Fl static-libgcc Fl shared Fl shared-libgcc Fl symbolic Fl Wl, Ns Ar option
.Fl Xlinker Ar option
.Fl u Ar symbol
.Pp
.It Sy Directory Options
.Fl B Ns Ar prefix
.Fl I Ns Ar dir
.Fl iquote Ns Ar dir
.Fl L Ns Ar dir
.Fl specs= Ns Ar file
.Fl I- Fl -sysroot= Ns Ar dir
.Pp
.It Sy Target Options
.Fl V Ar version
.Fl b Ar machine
.Pp
.It Sy Machine Dependent Options
.Em ARC Options
.Fl EB Fl EL Fl mmangle-cpu Fl mcpu= Ns Ar cpu
.Fl mtext= Ns Ar text-section
.Fl mdata= Ns Ar data-section
.Fl mrodata= Ns Ar readonly-data-section
.Pp
.Em ARM Options
.Fl mapcs-frame Fl mno-apcs-frame Fl mabi= Ns Ar name
.Fl mapcs-stack-check Fl mno-apcs-stack-check Fl mapcs-float Fl mno-apcs-float Fl mapcs-reentrant Fl mno-apcs-reentrant Fl msched-prolog Fl mno-sched-prolog Fl mlittle-endian Fl mbig-endian Fl mwords-little-endian Fl mfloat-abi= Ns Ar name
.Fl msoft-float Fl mhard-float Fl mfpe Fl mthumb-interwork Fl mno-thumb-interwork Fl mcpu= Ns Ar name
.Fl march= Ns Ar name
.Fl mfpu= Ns Ar name
.Fl mstructure-size-boundary= Ns Ar n
.Fl mabort-on-noreturn Fl mlong-calls Fl mno-long-calls Fl msingle-pic-base Fl mno-single-pic-base Fl mpic-register= Ns Ar reg
.Fl mnop-fun-dllimport Fl mcirrus-fix-invalid-insns Fl mno-cirrus-fix-invalid-insns Fl mpoke-function-name Fl mthumb Fl marm Fl mtpcs-frame Fl mtpcs-leaf-frame Fl mcaller-super-interworking Fl mcallee-super-interworking Fl mtp= Ns Ar name
.Pp
.Em AVR Options
.Fl mmcu= Ns Ar mcu
.Fl msize Fl minit-stack= Ns Ar n
.Fl mno-interrupts Fl mcall-prologues Fl mno-tablejump Fl mtiny-stack Fl mint8
.Pp
.Em Blackfin Options
.Fl momit-leaf-frame-pointer Fl mno-omit-leaf-frame-pointer Fl mspecld-anomaly Fl mno-specld-anomaly Fl mcsync-anomaly Fl mno-csync-anomaly Fl mlow-64k Fl mno-low64k Fl mid-shared-library Fl mno-id-shared-library Fl mshared-library-id= Ns Ar n
.Fl mlong-calls Fl mno-long-calls
.Pp
.Em CRIS Options
.Fl mcpu= Ns Ar cpu
.Fl march= Ns Ar cpu
.Fl mtune= Ns Ar cpu
.Fl mmax-stack-frame= Ns Ar n
.Fl melinux-stacksize= Ns Ar n
.Fl metrax4 Fl metrax100 Fl mpdebug Fl mcc-init Fl mno-side-effects Fl mstack-align Fl mdata-align Fl mconst-align Fl m32-bit Fl m16-bit Fl m8-bit Fl mno-prologue-epilogue Fl mno-gotplt Fl melf Fl maout Fl melinux Fl mlinux Fl sim Fl sim2 Fl mmul-bug-workaround Fl mno-mul-bug-workaround
.Pp
.Em CRX Options
.Fl mmac Fl mpush-args
.Pp
.Em Darwin Options
.Fl all_load Fl allowable_client Fl arch Fl arch_errors_fatal Fl arch_only Fl bind_at_load Fl bundle Fl bundle_loader Fl client_name Fl compatibility_version Fl current_version Fl dead_strip Fl dependency-file Fl dylib_file Fl dylinker_install_name Fl dynamic Fl dynamiclib Fl exported_symbols_list Fl filelist Fl flat_namespace Fl force_cpusubtype_ALL Fl force_flat_namespace Fl headerpad_max_install_names Fl image_base Fl init Fl install_name Fl keep_private_externs Fl multi_module Fl multiply_defined Fl multiply_defined_unused Fl noall_load Fl no_dead_strip_inits_and_terms Fl nofixprebinding Fl nomultidefs Fl noprebind Fl noseglinkedit Fl pagezero_size Fl prebind Fl prebind_all_twolevel_modules Fl private_bundle Fl read_only_relocs Fl sectalign Fl sectobjectsymbols Fl whyload Fl seg1addr Fl sectcreate Fl sectobjectsymbols Fl sectorder Fl segaddr Fl segs_read_only_addr Fl segs_read_write_addr Fl seg_addr_table Fl seg_addr_table_filename Fl seglinkedit Fl segprot Fl segs_read_only_addr Fl segs_read_write_addr Fl single_module Fl static Fl sub_library Fl sub_umbrella Fl twolevel_namespace Fl umbrella Fl undefined Fl unexported_symbols_list Fl weak_reference_mismatches Fl whatsloaded Fl F Fl gused Fl gfull Fl mmacosx-version-min= Ns Ar version
.Fl mone-byte-bool
.Pp
.Em DEC Alpha Options
.Fl mno-fp-regs Fl msoft-float Fl malpha-as Fl mgas Fl mieee Fl mieee-with-inexact Fl mieee-conformant Fl mfp-trap-mode= Ns Ar mode
.Fl mfp-rounding-mode= Ns Ar mode
.Fl mtrap-precision= Ns Ar mode
.Fl mbuild-constants Fl mcpu= Ns Ar cpu-type
.Fl mtune= Ns Ar cpu-type
.Fl mbwx Fl mmax Fl mfix Fl mcix Fl mfloat-vax Fl mfloat-ieee Fl mexplicit-relocs Fl msmall-data Fl mlarge-data Fl msmall-text Fl mlarge-text Fl mmemory-latency= Ns Ar time
.Pp
.Em DEC Alpha/VMS Options
.Fl mvms-return-codes
.Pp
.Em FRV Options
.Fl mgpr-32 Fl mgpr-64 Fl mfpr-32 Fl mfpr-64 Fl mhard-float Fl msoft-float Fl malloc-cc Fl mfixed-cc Fl mdword Fl mno-dword Fl mdouble Fl mno-double Fl mmedia Fl mno-media Fl mmuladd Fl mno-muladd Fl mfdpic Fl minline-plt Fl mgprel-ro Fl multilib-library-pic Fl mlinked-fp Fl mlong-calls Fl malign-labels Fl mlibrary-pic Fl macc-4 Fl macc-8 Fl mpack Fl mno-pack Fl mno-eflags Fl mcond-move Fl mno-cond-move Fl moptimize-membar Fl mno-optimize-membar Fl mscc Fl mno-scc Fl mcond-exec Fl mno-cond-exec Fl mvliw-branch Fl mno-vliw-branch Fl mmulti-cond-exec Fl mno-multi-cond-exec Fl mnested-cond-exec Fl mno-nested-cond-exec Fl mtomcat-stats Fl mTLS Fl mtls Fl mcpu= Ns Ar cpu
.Pp
.Em H8/300 Options
.Fl mrelax Fl mh Fl ms Fl mn Fl mint32 Fl malign-300
.Pp
.Em HPPA Options
.Fl march= Ns Ar architecture-type
.Fl mbig-switch Fl mdisable-fpregs Fl mdisable-indexing Fl mfast-indirect-calls Fl mgas Fl mgnu-ld Fl mhp-ld Fl mfixed-range= Ns Ar register-range
.Fl mjump-in-delay Fl mlinker-opt Fl mlong-calls Fl mlong-load-store Fl mno-big-switch Fl mno-disable-fpregs Fl mno-disable-indexing Fl mno-fast-indirect-calls Fl mno-gas Fl mno-jump-in-delay Fl mno-long-load-store Fl mno-portable-runtime Fl mno-soft-float Fl mno-space-regs Fl msoft-float Fl mpa-risc-1-0 Fl mpa-risc-1-1 Fl mpa-risc-2-0 Fl mportable-runtime Fl mschedule= Ns Ar cpu-type
.Fl mspace-regs Fl msio Fl mwsio Fl munix= Ns Ar unix-std
.Fl nolibdld Fl static Fl threads
.Pp
.Em i386 and x86-64 Options
.Fl mtune= Ns Ar cpu-type
.Fl march= Ns Ar cpu-type
.Fl mfpmath= Ns Ar unit
.Fl masm= Ns Ar dialect
.Fl mno-fancy-math-387 Fl mno-fp-ret-in-387 Fl msoft-float Fl msvr3-shlib Fl mno-wide-multiply Fl mrtd Fl malign-double Fl mpreferred-stack-boundary= Ns Ar num
.Fl mmmx Fl msse Fl msse2 Fl msse3 Fl m3dnow Fl mthreads Fl mno-align-stringops Fl minline-all-stringops Fl mpush-args Fl maccumulate-outgoing-args Fl m128bit-long-double Fl m96bit-long-double Fl mregparm= Ns Ar num
.Fl msseregparm Fl momit-leaf-frame-pointer Fl mno-red-zone Fl mno-tls-direct-seg-refs Fl mcmodel= Ns Ar code-model
.Fl m32 Fl m64 Fl mlarge-data-threshold= Ns Ar num
.Pp
.Em IA-64 Options
.Fl mbig-endian Fl mlittle-endian Fl mgnu-as Fl mgnu-ld Fl mno-pic Fl mvolatile-asm-stop Fl mregister-names Fl mno-sdata Fl mconstant-gp Fl mauto-pic Fl minline-float-divide-min-latency Fl minline-float-divide-max-throughput Fl minline-int-divide-min-latency Fl minline-int-divide-max-throughput Fl minline-sqrt-min-latency Fl minline-sqrt-max-throughput Fl mno-dwarf2-asm Fl mearly-stop-bits Fl mfixed-range= Ns Ar register-range
.Fl mtls-size= Ns Ar tls-size
.Fl mtune= Ns Ar cpu-type
.Fl mt Fl pthread Fl milp32 Fl mlp64
.Pp
.Em M32R/D Options
.Fl m32r2 Fl m32rx Fl m32r Fl mdebug Fl malign-loops Fl mno-align-loops Fl missue-rate= Ns Ar number
.Fl mbranch-cost= Ns Ar number
.Fl mmodel= Ns Ar code-size-model-type
.Fl msdata= Ns Ar sdata-type
.Fl mno-flush-func Fl mflush-func= Ns Ar name
.Fl mno-flush-trap Fl mflush-trap= Ns Ar number
.Fl G Ar num
.Pp
.Em M32C Options
.Fl mcpu= Ns Ar cpu
.Fl msim Fl memregs= Ns Ar number
.Pp
.Em M680x0 Options
.Fl m68000 Fl m68020 Fl m68020-40 Fl m68020-60 Fl m68030 Fl m68040 Fl m68060 Fl mcpu32 Fl m5200 Fl m68881 Fl mbitfield Fl mc68000 Fl mc68020 Fl mnobitfield Fl mrtd Fl mshort Fl msoft-float Fl mpcrel Fl malign-int Fl mstrict-align Fl msep-data Fl mno-sep-data Fl mshared-library-id=n Fl mid-shared-library Fl mno-id-shared-library
.Pp
.Em M68hc1x Options
.Fl m6811 Fl m6812 Fl m68hc11 Fl m68hc12 Fl m68hcs12 Fl mauto-incdec Fl minmax Fl mlong-calls Fl mshort Fl msoft-reg-count= Ns Ar count
.Pp
.Em MCore Options
.Fl mhardlit Fl mno-hardlit Fl mdiv Fl mno-div Fl mrelax-immediates Fl mno-relax-immediates Fl mwide-bitfields Fl mno-wide-bitfields Fl m4byte-functions Fl mno-4byte-functions Fl mcallgraph-data Fl mno-callgraph-data Fl mslow-bytes Fl mno-slow-bytes Fl mno-lsim Fl mlittle-endian Fl mbig-endian Fl m210 Fl m340 Fl mstack-increment
.Pp
.Em MIPS Options
.Fl EL Fl EB Fl march= Ns Ar arch
.Fl mtune= Ns Ar arch
.Fl mips1 Fl mips2 Fl mips3 Fl mips4 Fl mips32 Fl mips32r2 Fl mips64 Fl mips16 Fl mno-mips16 Fl mabi= Ns Ar abi
.Fl mabicalls Fl mno-abicalls Fl mxgot Fl mno-xgot Fl mgp32 Fl mgp64 Fl mfp32 Fl mfp64 Fl mhard-float Fl msoft-float Fl msingle-float Fl mdouble-float Fl mdsp Fl mpaired-single Fl mips3d Fl mlong64 Fl mlong32 Fl msym32 Fl mno-sym32 Fl G Ns Ar num
.Fl membedded-data Fl mno-embedded-data Fl muninit-const-in-rodata Fl mno-uninit-const-in-rodata Fl msplit-addresses Fl mno-split-addresses Fl mexplicit-relocs Fl mno-explicit-relocs Fl mcheck-zero-division Fl mno-check-zero-division Fl mdivide-traps Fl mdivide-breaks Fl mmemcpy Fl mno-memcpy Fl mlong-calls Fl mno-long-calls Fl mmad Fl mno-mad Fl mfused-madd Fl mno-fused-madd Fl nocpp Fl mfix-r4000 Fl mno-fix-r4000 Fl mfix-r4400 Fl mno-fix-r4400 Fl mfix-vr4120 Fl mno-fix-vr4120 Fl mfix-vr4130 Fl mfix-sb1 Fl mno-fix-sb1 Fl mflush-func= Ns Ar func
.Fl mno-flush-func Fl mbranch-likely Fl mno-branch-likely Fl mfp-exceptions Fl mno-fp-exceptions Fl mvr4130-align Fl mno-vr4130-align
.Pp
.Em MMIX Options
.Fl mlibfuncs Fl mno-libfuncs Fl mepsilon Fl mno-epsilon Fl mabi=gnu Fl mabi=mmixware Fl mzero-extend Fl mknuthdiv Fl mtoplevel-symbols Fl melf Fl mbranch-predict Fl mno-branch-predict Fl mbase-addresses Fl mno-base-addresses Fl msingle-exit Fl mno-single-exit
.Pp
.Em MN10300 Options
.Fl mmult-bug Fl mno-mult-bug Fl mam33 Fl mno-am33 Fl mam33-2 Fl mno-am33-2 Fl mreturn-pointer-on-d0 Fl mno-crt0 Fl mrelax
.Pp
.Em MT Options
.Fl mno-crt0 Fl mbacc Fl msim Fl march= Ns Ar cpu-type
\~
.Pp
.Em PDP-11 Options
.Fl mfpu Fl msoft-float Fl mac0 Fl mno-ac0 Fl m40 Fl m45 Fl m10 Fl mbcopy Fl mbcopy-builtin Fl mint32 Fl mno-int16 Fl mint16 Fl mno-int32 Fl mfloat32 Fl mno-float64 Fl mfloat64 Fl mno-float32 Fl mabshi Fl mno-abshi Fl mbranch-expensive Fl mbranch-cheap Fl msplit Fl mno-split Fl munix-asm Fl mdec-asm
.Pp
.Em PowerPC Options
See RS/6000 and PowerPC Options.
.Pp
.Em RS/6000 and PowerPC Options
.Fl mcpu= Ns Ar cpu-type
.Fl mtune= Ns Ar cpu-type
.Fl mpower Fl mno-power Fl mpower2 Fl mno-power2 Fl mpowerpc Fl mpowerpc64 Fl mno-powerpc Fl maltivec Fl mno-altivec Fl mpowerpc-gpopt Fl mno-powerpc-gpopt Fl mpowerpc-gfxopt Fl mno-powerpc-gfxopt Fl mmfcrf Fl mno-mfcrf Fl mpopcntb Fl mno-popcntb Fl mfprnd Fl mno-fprnd Fl mnew-mnemonics Fl mold-mnemonics Fl mfull-toc Fl mminimal-toc Fl mno-fp-in-toc Fl mno-sum-in-toc Fl m64 Fl m32 Fl mxl-compat Fl mno-xl-compat Fl mpe Fl malign-power Fl malign-natural Fl msoft-float Fl mhard-float Fl mmultiple Fl mno-multiple Fl mstring Fl mno-string Fl mupdate Fl mno-update Fl mfused-madd Fl mno-fused-madd Fl mbit-align Fl mno-bit-align Fl mstrict-align Fl mno-strict-align Fl mrelocatable Fl mno-relocatable Fl mrelocatable-lib Fl mno-relocatable-lib Fl mtoc Fl mno-toc Fl mlittle Fl mlittle-endian Fl mbig Fl mbig-endian Fl mdynamic-no-pic Fl maltivec Fl mswdiv Fl mprioritize-restricted-insns= Ns Ar priority
.Fl msched-costly-dep= Ns Ar dependence_type
.Fl minsert-sched-nops= Ns Ar scheme
.Fl mcall-sysv Fl mcall-netbsd Fl maix-struct-return Fl msvr4-struct-return Fl mabi= Ns Ar abi-type
.Fl msecure-plt Fl mbss-plt Fl misel Fl mno-isel Fl misel=yes Fl misel=no Fl mspe Fl mno-spe Fl mspe=yes Fl mspe=no Fl mvrsave Fl mno-vrsave Fl mfloat-gprs=yes Fl mfloat-gprs=no Fl mfloat-gprs=single Fl mfloat-gprs=double Fl mprototype Fl mno-prototype Fl msim Fl mmvme Fl mads Fl myellowknife Fl memb Fl msdata Fl msdata= Ns Ar opt
.Fl mvxworks Fl mwindiss Fl G Ar num
.Fl pthread
.Pp
.Em S/390 and zSeries Options
.Fl mtune= Ns Ar cpu-type
.Fl march= Ns Ar cpu-type
.Fl mhard-float Fl msoft-float Fl mlong-double-64 Fl mlong-double-128 Fl mbackchain Fl mno-backchain Fl mpacked-stack Fl mno-packed-stack Fl msmall-exec Fl mno-small-exec Fl mmvcle Fl mno-mvcle Fl m64 Fl m31 Fl mdebug Fl mno-debug Fl mesa Fl mzarch Fl mtpf-trace Fl mno-tpf-trace Fl mfused-madd Fl mno-fused-madd Fl mwarn-framesize Fl mwarn-dynamicstack Fl mstack-size Fl mstack-guard
.Pp
.Em SH Options
.Fl m1 Fl m2 Fl m2e Fl m3 Fl m3e Fl m4-nofpu Fl m4-single-only Fl m4-single Fl m4 Fl m4a-nofpu Fl m4a-single-only Fl m4a-single Fl m4a Fl m4al Fl m5-64media Fl m5-64media-nofpu Fl m5-32media Fl m5-32media-nofpu Fl m5-compact Fl m5-compact-nofpu Fl mb Fl ml Fl mdalign Fl mrelax Fl mbigtable Fl mfmovd Fl mhitachi Fl mrenesas Fl mno-renesas Fl mnomacsave Fl mieee Fl misize Fl mpadstruct Fl mspace Fl mprefergot Fl musermode Fl multcost= Ns Ar number
.Fl mdiv= Ns Ar strategy
.Fl mdivsi3_libfunc= Ns Ar name
.Fl madjust-unroll Fl mindexed-addressing Fl mgettrcost= Ns Ar number
.Fl mpt-fixed Fl minvalid-symbols
.Pp
.Em SPARC Options
.Fl mcpu= Ns Ar cpu-type
.Fl mtune= Ns Ar cpu-type
.Fl mcmodel= Ns Ar code-model
.Fl m32 Fl m64 Fl mapp-regs Fl mno-app-regs Fl mfaster-structs Fl mno-faster-structs Fl mfpu Fl mno-fpu Fl mhard-float Fl msoft-float Fl mhard-quad-float Fl msoft-quad-float Fl mimpure-text Fl mno-impure-text Fl mlittle-endian Fl mstack-bias Fl mno-stack-bias Fl munaligned-doubles Fl mno-unaligned-doubles Fl mv8plus Fl mno-v8plus Fl mvis Fl mno-vis Fl threads Fl pthreads Fl pthread
.Pp
.Em System V Options
.Fl Qy Fl Qn Fl YP, Ns Ar paths
.Fl Ym, Ns Ar dir
.Pp
.Em TMS320C3x/C4x Options
.Fl mcpu= Ns Ar cpu
.Fl mbig Fl msmall Fl mregparm Fl mmemparm Fl mfast-fix Fl mmpyi Fl mbk Fl mti Fl mdp-isr-reload Fl mrpts= Ns Ar count
.Fl mrptb Fl mdb Fl mloop-unsigned Fl mparallel-insns Fl mparallel-mpy Fl mpreserve-float
.Pp
.Em V850 Options
.Fl mlong-calls Fl mno-long-calls Fl mep Fl mno-ep Fl mprolog-function Fl mno-prolog-function Fl mspace Fl mtda= Ns Ar n
.Fl msda= Ns Ar n
.Fl mzda= Ns Ar n
.Fl mapp-regs Fl mno-app-regs Fl mdisable-callt Fl mno-disable-callt Fl mv850e1 Fl mv850e Fl mv850 Fl mbig-switch
.Pp
.Em VAX Options
.Fl mg Fl mgnu Fl munix
.Pp
.Em x86-64 Options
See i386 and x86-64 Options.
.Pp
.Em Xstormy16 Options
.Fl msim
.Pp
.Em Xtensa Options
.Fl mconst16 Fl mno-const16 Fl mfused-madd Fl mno-fused-madd Fl mtext-section-literals Fl mno-text-section-literals Fl mtarget-align Fl mno-target-align Fl mlongcalls Fl mno-longcalls
.Pp
.Em zSeries Options
See S/390 and zSeries Options.
.Pp
.It Sy Code Generation Options
.Fl fcall-saved- Ns Ar reg
.Fl fcall-used- Ns Ar reg
.Fl ffixed- Ns Ar reg
.Fl fexceptions Fl fnon-call-exceptions Fl funwind-tables Fl fasynchronous-unwind-tables Fl finhibit-size-directive Fl finstrument-functions Fl fno-common Fl fno-ident Fl fpcc-struct-return Fl fpic Fl fPIC Fl fpie Fl fPIE Fl fno-jump-tables Fl freg-struct-return Fl fshared-data Fl fshort-enums Fl fshort-double Fl fshort-wchar Fl fverbose-asm Fl fpack-struct Ns Oo = Ns Ar n Oc
.Fl fstack-check Fl fstack-limit-register= Ns Ar reg
.Fl fstack-limit-symbol= Ns Ar sym
.Fl fno-stack-limit Fl fargument-alias Fl fargument-noalias Fl fargument-noalias-global Fl fleading-underscore Fl ftls-model= Ns Ar model
.Fl ftrapv Fl fwrapv Fl fbounds-check Fl fvisibility
.Pp
.El
.Ss Options Controlling the Kind of Output
Compilation can involve up to four stages: preprocessing, compilation proper, assembly and linking, always in that order.
GCC is capable of preprocessing and compiling several files either into several assembler input files, or into one assembler input file; then each assembler input file produces an object file, and linking combines all the object files (those newly compiled, and those specified as input) into an executable file.
.Pp
For any given input file, the file name suffix determines what kind of compilation is done:
.Pp
.Bl -tag -width xx
.It Em file Ns Sy .c Ns
C source code which must be preprocessed.
.Pp
.It Em file Ns Sy .i Ns
C source code which should not be preprocessed.
.Pp
.It Em file Ns Sy .ii Ns
C++ source code which should not be preprocessed.
.Pp
.It Em file Ns Sy .m Ns
Objective-C source code.
Note that you must link with the
.Pa libobjc
library to make an Objective-C program work.
.Pp
.It Em file Ns Sy .mi Ns
Objective-C source code which should not be preprocessed.
.Pp
.It Em file Ns Sy .mm Ns
.It Em file Ns Sy .M Ns
Objective-C++ source code.
Note that you must link with the
.Pa libobjc
library to make an Objective-C++ program work.
Note that
.Sy .M
refers to a literal capital M.
.Pp
.It Em file Ns Sy .mii Ns
Objective-C++ source code which should not be preprocessed.
.Pp
.It Em file Ns Sy .h Ns
C, C++, Objective-C or Objective-C++ header file to be turned into a precompiled header.
.Pp
.It Em file Ns Sy .cc Ns
.It Em file Ns Sy .cp Ns
.It Em file Ns Sy .cxx Ns
.It Em file Ns Sy .cpp Ns
.It Em file Ns Sy .CPP Ns
.It Em file Ns Sy .c++ Ns
.It Em file Ns Sy .C Ns
C++ source code which must be preprocessed.
Note that in
.Sy .cxx ,
the last two letters must both be literally
.Sy x .
Likewise,
.Sy .C
refers to a literal capital C.
.Pp
.It Em file Ns Sy .mm Ns
.It Em file Ns Sy .M Ns
Objective-C++ source code which must be preprocessed.
.Pp
.It Em file Ns Sy .mii Ns
Objective-C++ source code which should not be preprocessed.
.Pp
.It Em file Ns Sy .hh Ns
.It Em file Ns Sy .H Ns
C++ header file to be turned into a precompiled header.
.Pp
.It Em file Ns Sy .f Ns
.It Em file Ns Sy .for Ns
.It Em file Ns Sy .FOR Ns
Fixed form Fortran source code which should not be preprocessed.
.Pp
.It Em file Ns Sy .F Ns
.It Em file Ns Sy .fpp Ns
.It Em file Ns Sy .FPP Ns
Fixed form Fortran source code which must be preprocessed (with the traditional preprocessor).
.Pp
.It Em file Ns Sy .f90 Ns
.It Em file Ns Sy .f95 Ns
Free form Fortran source code which should not be preprocessed.
.Pp
.It Em file Ns Sy .F90 Ns
.It Em file Ns Sy .F95 Ns
Free form Fortran source code which must be preprocessed (with the traditional preprocessor).
.Pp
.It Em file Ns Sy .ads Ns
Ada source code file which contains a library unit declaration (a declaration of a package, subprogram, or generic, or a generic instantiation), or a library unit renaming declaration (a package, generic, or subprogram renaming declaration).
Such files are also called
.Em specs .
.Pp
.It Em file Ns Sy .adb Ns
Ada source code file containing a library unit body (a subprogram or package body).
Such files are also called
.Em bodies .
.Pp
.It Em file Ns Sy .s Ns
Assembler code.
.Pp
.It Em file Ns Sy .S Ns
Assembler code which must be preprocessed.
.Pp
.It Em other Ns
An object file to be fed straight into linking.
Any file name with no recognized suffix is treated this way.
.Pp
.El
You can specify the input language explicitly with the
.Fl x
option:
.Pp
.Bl -tag -width xx
.It Fl x Ar language
Specify explicitly the
.Em language
for the following input files (rather than letting the compiler choose a default based on the file name suffix).
This option applies to all following input files until the next
.Fl x
option.
Possible values for
.Em language
are:
.Pp
.Bd -literal -offset indent
c  c-header  c-cpp-output
c++  c++-header  c++-cpp-output
objective-c  objective-c-header  objective-c-cpp-output
objective-c++ objective-c++-header objective-c++-cpp-output
assembler  assembler-with-cpp
ada
f95  f95-cpp-input
java
treelang
.Ed
.It Fl x Ar none
Turn off any specification of a language, so that subsequent files are handled according to their file name suffixes (as they are if
.Fl x
has not been used at all).
.Pp
.It Fl pass-exit-codes
Normally the
.Nm gcc
program will exit with the code of 1 if any phase of the compiler returns a non-success return code.
If you specify
.Fl pass-exit-codes ,
the
.Nm gcc
program will instead return with numerically highest error produced by any phase that returned an error indication.
.Pp
.El
If you only want some of the stages of compilation, you can use
.Fl x
(or filename suffixes) to tell
.Nm gcc
where to start, and one of the options
.Fl c ,
.Fl S ,
or
.Fl E
to say where
.Nm gcc
is to stop.
Note that some combinations (for example,
.Fl x Ar cpp-output Fl E )
instruct
.Nm gcc
to do nothing at all.
.Pp
.Bl -tag -width xx
.It Fl c
Compile or assemble the source files, but do not link.
The linking stage simply is not done.
The ultimate output is in the form of an object file for each source file.
.Pp
By default, the object file name for a source file is made by replacing the suffix
.Sy .c ,
.Sy .i ,
.Sy .s ,
etc., with
.Sy .o .
.Pp
Unrecognized input files, not requiring compilation or assembly, are ignored.
.Pp
.It Fl S
Stop after the stage of compilation proper; do not assemble.
The output is in the form of an assembler code file for each non-assembler input file specified.
.Pp
By default, the assembler file name for a source file is made by replacing the suffix
.Sy .c ,
.Sy .i ,
etc., with
.Sy .s .
.Pp
Input files that don't require compilation are ignored.
.Pp
.It Fl E
Stop after the preprocessing stage; do not run the compiler proper.
The output is in the form of preprocessed source code, which is sent to the standard output.
.Pp
Input files which don't require preprocessing are ignored.
.Pp
.It Fl o Ar file
Place output in file
.Em file .
This applies regardless to whatever sort of output is being produced, whether it be an executable file, an object file, an assembler file or preprocessed C code.
.Pp
If
.Fl o
is not specified, the default is to put an executable file in
.Pa a.out ,
the object file for
.Pa source.suffix
in
.Pa source.o ,
its assembler file in
.Pa source.s ,
a precompiled header file in
.Pa source.suffix.gch ,
and all preprocessed C source on standard output.
.Pp
.It Fl v
Print (on standard error output) the commands executed to run the stages of compilation.
Also print the version number of the compiler driver program and of the preprocessor and the compiler proper.
.Pp
.It Fl ###
Like
.Fl v
except the commands are not executed and all command arguments are quoted.
This is useful for shell scripts to capture the driver-generated command lines.
.Pp
.It Fl pipe
Use pipes rather than temporary files for communication between the various stages of compilation.
This fails to work on some systems where the assembler is unable to read from a pipe; but the GNU assembler has no trouble.
.Pp
.It Fl combine
If you are compiling multiple source files, this option tells the driver to pass all the source files to the compiler at once (for those languages for which the compiler can handle this).
This will allow intermodule analysis (IMA) to be performed by the compiler.
Currently the only language for which this is supported is C.
If you pass source files for multiple languages to the driver, using this option, the driver will invoke the compiler(s) that support IMA once each, passing each compiler all the source files appropriate for it.
For those languages that do not support IMA this option will be ignored, and the compiler will be invoked once for each source file in that language.
If you use this option in conjunction with
.Fl save-temps ,
the compiler will generate multiple pre-processed files (one for each source file), but only one (combined)
.Pa .o
or
.Pa .s
file.
.Pp
.It Fl -help
Print (on the standard output) a description of the command line options understood by
.Nm gcc .
If the
.Fl v
option is also specified then
.Fl -help
will also be passed on to the various processes invoked by
.Nm gcc ,
so that they can display the command line options they accept.
If the
.Fl Wextra
option is also specified then command line options which have no documentation associated with them will also be displayed.
.Pp
.It Fl -target-help
Print (on the standard output) a description of target specific command line options for each tool.
.Pp
.It Fl -version
Display the version number and copyrights of the invoked GCC.
.Pp
.El
.Ss Compiling C++ Programs
C++ source files conventionally use one of the suffixes
.Sy .C ,
.Sy .cc ,
.Sy .cpp ,
.Sy .CPP ,
.Sy .c++ ,
.Sy .cp ,
or
.Sy .cxx ;
C++ header files often use
.Sy .hh
or
.Sy .H ;
and preprocessed C++ files use the suffix
.Sy .ii .
GCC recognizes files with these names and compiles them as C++ programs even if you call the compiler the same way as for compiling C programs (usually with the name
.Nm gcc ) .
.Pp
However, C++ programs often require class libraries as well as a compiler that understands the C++ language---and under some circumstances, you might want to compile programs or header files from standard input, or otherwise without a suffix that flags them as C++ programs.
You might also like to precompile a C header file with a
.Sy .h
extension to be used in C++ compilations.
.Nm g++
is a program that calls GCC with the default language set to C++, and automatically specifies linking against the C++ library.
On many systems,
.Nm g++
is also installed with the name
.Nm c++ .
.Pp
When you compile C++ programs, you may specify many of the same command-line options that you use for compiling programs in any language; or command-line options meaningful for C and related languages; or options that are meaningful only for C++ programs.
.Ss Options Controlling C Dialect
The following options control the dialect of C (or languages derived from C, such as C++, Objective-C and Objective-C++) that the compiler accepts:
.Pp
.Bl -tag -width xx
.It Fl ansi
In C mode, support all ISO C90 programs.
In C++ mode, remove GNU extensions that conflict with ISO C++.
.Pp
This turns off certain features of GCC that are incompatible with ISO C90 (when compiling C code), or of standard C++ (when compiling C++ code), such as the
.Va asm
and
.Va typeof
keywords, and predefined macros such as
.Va unix
and
.Va vax
that identify the type of system you are using.
It also enables the undesirable and rarely used ISO trigraph feature.
For the C compiler, it disables recognition of C++ style
.Sy //
comments as well as the
.Va inline
keyword.
.Pp
The alternate keywords
.Va __asm__ ,
.Va __extension__ ,
.Va __inline__
and
.Va __typeof__
continue to work despite
.Fl ansi .
You would not want to use them in an ISO C program, of course, but it is useful to put them in header files that might be included in compilations done with
.Fl ansi .
Alternate predefined macros such as
.Va __unix__
and
.Va __vax__
are also available, with or without
.Fl ansi .
.Pp
The
.Fl ansi
option does not cause non-ISO programs to be rejected gratuitously.
For that,
.Fl pedantic
is required in addition to
.Fl ansi .
.Pp
The macro
.Va __STRICT_ANSI__
is predefined when the
.Fl ansi
option is used.
Some header files may notice this macro and refrain from declaring certain functions or defining certain macros that the ISO standard doesn't call for; this is to avoid interfering with any programs that might use these names for other things.
.Pp
Functions which would normally be built in but do not have semantics defined by ISO C (such as
.Va alloca
and
.Va ffs )
are not built-in functions with
.Fl ansi
is used.
.Pp
.It Fl std=
Determine the language standard.
This option is currently only supported when compiling C or C++.
A value for this option must be provided; possible values are
.Pp
.Bl -tag -width xx
.It Sy c89 Ns
.It Sy iso9899:1990 Ns
ISO C90 (same as
.Fl ansi ) .
.Pp
.It Sy iso9899:199409 Ns
ISO C90 as modified in amendment 1.
.Pp
.It Sy c99 Ns
.It Sy c9x Ns
.It Sy iso9899:1999 Ns
.It Sy iso9899:199x Ns
ISO C99.
Note that this standard is not yet fully supported; see
.Lk http://gcc.gnu.org/gcc-4.1/c99status.html
for more information.
The names
.Sy c9x
and
.Sy iso9899:199x
are deprecated.
.Pp
.It Sy gnu89 Ns
Default, ISO C90 plus GNU extensions (including some C99 features).
.Pp
.It Sy gnu99 Ns
.It Sy gnu9x Ns
ISO C99 plus GNU extensions.
When ISO C99 is fully implemented in GCC, this will become the default.
The name
.Sy gnu9x
is deprecated.
.Pp
.It Sy c++98 Ns
The 1998 ISO C++ standard plus amendments.
.Pp
.It Sy gnu++98 Ns
The same as
.Fl std=c++98
plus GNU extensions.
This is the default for C++ code.
.Pp
.El
Even when this option is not specified, you can still use some of the features of newer standards in so far as they do not conflict with previous C standards.
For example, you may use
.Va __restrict__
even when
.Fl std=c99
is not specified.
.Pp
The
.Fl std
options specifying some version of ISO C have the same effects as
.Fl ansi ,
except that features that were not in ISO C90 but are in the specified version (for example,
.Sy //
comments and the
.Va inline
keyword in ISO C99) are not disabled.
.Pp
.It Fl fgnu89-inline
The option
.Fl fgnu89-inline
tells GCC to use the traditional GNU semantics for
.Va inline
functions when in C99 mode.
Using this option is roughly equivalent to adding the
.Va gnu_inline
function attribute to all inline functions.
.Pp
This option is accepted by GCC versions 4.1.3 and up.
In GCC versions prior to 4.3, C99 inline semantics are not supported, and thus this option is effectively assumed to be present regardless of whether or not it is specified; the only effect of specifying it explicitly is to disable warnings about using inline functions in C99 mode.
Likewise, the option
.Fl fno-gnu89-inline
is not supported in versions of GCC before 4.3.
It will be supported only in C99 or gnu99 mode, not in C89 or gnu89 mode.
.Pp
The preprocesor macros
.Va __GNUC_GNU_INLINE__
and
.Va __GNUC_STDC_INLINE__
may be used to check which semantics are in effect for
.Va inline
functions.
.Pp
.It Fl aux-info Ar filename
Output to the given filename prototyped declarations for all functions declared and/or defined in a translation unit, including those in header files.
This option is silently ignored in any language other than C.
.Pp
Besides declarations, the file indicates, in comments, the origin of each declaration (source file and line), whether the declaration was implicit, prototyped or unprototyped
.Sy ( I ,
.Sy N
for new or
.Sy O
for old, respectively, in the first character after the line number and the colon), and whether it came from a declaration or a definition
.Sy ( C
or
.Sy F ,
respectively, in the following character).
In the case of function definitions, a K&R-style list of arguments followed by their declarations is also provided, inside comments, after the declaration.
.Pp
.It Fl fno-asm
Do not recognize
.Va asm ,
.Va inline
or
.Va typeof
as a keyword, so that code can use these words as identifiers.
You can use the keywords
.Va __asm__ ,
.Va __inline__
and
.Va __typeof__
instead.
.Fl ansi
implies
.Fl fno-asm .
.Pp
In C++, this switch only affects the
.Va typeof
keyword, since
.Va asm
and
.Va inline
are standard keywords.
You may want to use the
.Fl fno-gnu-keywords
flag instead, which has the same effect.
In C99 mode
.Fl ( std=c99
or
.Fl std=gnu99 ) ,
this switch only affects the
.Va asm
and
.Va typeof
keywords, since
.Va inline
is a standard keyword in ISO C99.
.Pp
.It Fl fno-builtin
.It Fl fno-builtin- Ns Ar function
Don't recognize built-in functions that do not begin with
.Sy __builtin_
as prefix.
.Pp
GCC normally generates special code to handle certain built-in functions more efficiently; for instance, calls to
.Va alloca
may become single instructions that adjust the stack directly, and calls to
.Va memcpy
may become inline copy loops.
The resulting code is often both smaller and faster, but since the function calls no longer appear as such, you cannot set a breakpoint on those calls, nor can you change the behavior of the functions by linking with a different library.
In addition, when a function is recognized as a built-in function, GCC may use information about that function to warn about problems with calls to that function, or to generate more efficient code, even if the resulting code still contains calls to that function.
For example, warnings are given with
.Fl Wformat
for bad calls to
.Va printf ,
when
.Va printf
is built in, and
.Va strlen
is known not to modify global memory.
.Pp
With the
.Fl fno-builtin- Ns Ar function
option only the built-in function
.Em function
is disabled.
.Em function
must not begin with
.Sy __builtin_ .
If a function is named this is not built-in in this version of GCC, this option is ignored.
There is no corresponding
.Fl fbuiltin- Ns Ar function
option; if you wish to enable built-in functions selectively when using
.Fl fno-builtin
or
.Fl ffreestanding ,
you may define macros such as:
.Pp
.Bd -literal -offset indent
#define abs(n)          __builtin_abs ((n))
#define strcpy(d, s)    __builtin_strcpy ((d), (s))
.Ed
.It Fl fhosted
Assert that compilation takes place in a hosted environment.
This implies
.Fl fbuiltin .
A hosted environment is one in which the entire standard library is available, and in which
.Va main
has a return type of
.Va int .
Examples are nearly everything except a kernel.
This is equivalent to
.Fl fno-freestanding .
.Pp
.It Fl ffreestanding
Assert that compilation takes place in a freestanding environment.
This implies
.Fl fno-builtin .
A freestanding environment is one in which the standard library may not exist, and program startup may not necessarily be at
.Va main .
The most obvious example is an OS kernel.
This is equivalent to
.Fl fno-hosted .
.Pp
.It Fl fms-extensions
Accept some non-standard constructs used in Microsoft header files.
.Pp
Some cases of unnamed fields in structures and unions are only accepted with this option.
.Pp
.It Fl trigraphs
Support ISO C trigraphs.
The
.Fl ansi
option (and
.Fl std
options for strict ISO C conformance) implies
.Fl trigraphs .
.Pp
.It Fl no-integrated-cpp
Performs a compilation in two passes: preprocessing and compiling.
This option allows a user supplied "cc1", "cc1plus", or "cc1obj" via the
.Fl B
option.
The user supplied compilation step can then add in an additional preprocessing step after normal preprocessing but before compiling.
The default is to use the integrated cpp (internal cpp)
.Pp
The semantics of this option will change if "cc1", "cc1plus", and "cc1obj" are merged.
.Pp
.It Fl traditional
.It Fl traditional-cpp
Formerly, these options caused GCC to attempt to emulate a pre-standard C compiler.
They are now only supported with the
.Fl E
switch.
The preprocessor continues to support a pre-standard mode.
See the GNU CPP manual for details.
.Pp
.It Fl fcond-mismatch
Allow conditional expressions with mismatched types in the second and third arguments.
The value of such an expression is void.
This option is not supported for C++.
.Pp
.It Fl funsigned-char
Let the type
.Va char
be unsigned, like
.Va unsigned char .
.Pp
Each kind of machine has a default for what
.Va char
should be.
It is either like
.Va unsigned char
by default or like
.Va signed char
by default.
.Pp
Ideally, a portable program should always use
.Va signed char
or
.Va unsigned char
when it depends on the signedness of an object.
But many programs have been written to use plain
.Va char
and expect it to be signed, or expect it to be unsigned, depending on the machines they were written for.
This option, and its inverse, let you make such a program work with the opposite default.
.Pp
The type
.Va char
is always a distinct type from each of
.Va signed char
or
.Va unsigned char ,
even though its behavior is always just like one of those two.
.Pp
.It Fl fsigned-char
Let the type
.Va char
be signed, like
.Va signed char .
.Pp
Note that this is equivalent to
.Fl fno-unsigned-char ,
which is the negative form of
.Fl funsigned-char .
Likewise, the option
.Fl fno-signed-char
is equivalent to
.Fl funsigned-char .
.Pp
.It Fl fsigned-bitfields
.It Fl funsigned-bitfields
.It Fl fno-signed-bitfields
.It Fl fno-unsigned-bitfields
These options control whether a bit-field is signed or unsigned, when the declaration does not use either
.Va signed
or
.Va unsigned .
By default, such a bit-field is signed, because this is consistent: the basic integer types such as
.Va int
are signed types.
.Pp
.El
.Ss Options Controlling C++ Dialect
This section describes the command-line options that are only meaningful for C++ programs; but you can also use most of the GNU compiler options regardless of what language your program is in.
For example, you might compile a file
.Va firstClass.C
like this:
.Pp
.Bd -literal -offset indent
g++ -g -frepo -O -c firstClass.C
.Ed
In this example, only
.Fl frepo
is an option meant only for C++ programs; you can use the other options with any language supported by GCC.
.Pp
Here is a list of options that are
.Em only
for compiling C++ programs:
.Pp
.Bl -tag -width xx
.It Fl fabi-version= Ns Ar n
Use version
.Em n
of the C++ ABI.
Version 2 is the version of the C++ ABI that first appeared in G++ 3.4.
Version 1 is the version of the C++ ABI that first appeared in G++ 3.2.
Version 0 will always be the version that conforms most closely to the C++ ABI specification.
Therefore, the ABI obtained using version 0 will change as ABI bugs are fixed.
.Pp
The default is version 2.
.Pp
.It Fl fno-access-control
Turn off all access checking.
This switch is mainly useful for working around bugs in the access control code.
.Pp
.It Fl fcheck-new
Check that the pointer returned by
.Va operator new
is non-null before attempting to modify the storage allocated.
This check is normally unnecessary because the C++ standard specifies that
.Va operator new
will only return
.Va 0
if it is declared
.Sy throw() ,
in which case the compiler will always check the return value even without this option.
In all other cases, when
.Va operator new
has a non-empty exception specification, memory exhaustion is signalled by throwing
.Va std::bad_alloc .
See also
.Sy new (nothrow) .
.Pp
.It Fl fconserve-space
Put uninitialized or runtime-initialized global variables into the common segment, as C does.
This saves space in the executable at the cost of not diagnosing duplicate definitions.
If you compile with this flag and your program mysteriously crashes after
.Va main()
has completed, you may have an object that is being destroyed twice because two definitions were merged.
.Pp
This option is no longer useful on most targets, now that support has been added for putting variables into BSS without making them common.
.Pp
.It Fl ffriend-injection
Inject friend functions into the enclosing namespace, so that they are visible outside the scope of the class in which they are declared.
Friend functions were documented to work this way in the old Annotated C++ Reference Manual, and versions of G++ before 4.1 always worked that way.
However, in ISO C++ a friend function which is not declared in an enclosing scope can only be found using argument dependent lookup.
This option causes friends to be injected as they were in earlier releases.
.Pp
This option is for compatibility, and may be removed in a future release of G++.
.Pp
.It Fl fno-const-strings
Give string constants type
.Va char *
instead of type
.Va const char * .
By default, G++ uses type
.Va const char *
as required by the standard.
Even if you use
.Fl fno-const-strings ,
you cannot actually modify the value of a string constant.
.Pp
This option might be removed in a future release of G++.
For maximum portability, you should structure your code so that it works with string constants that have type
.Va const char * .
.Pp
.It Fl fno-elide-constructors
The C++ standard allows an implementation to omit creating a temporary which is only used to initialize another object of the same type.
Specifying this option disables that optimization, and forces G++ to call the copy constructor in all cases.
.Pp
.It Fl fno-enforce-eh-specs
Don't generate code to check for violation of exception specifications at runtime.
This option violates the C++ standard, but may be useful for reducing code size in production builds, much like defining
.Sy NDEBUG .
This does not give user code permission to throw exceptions in violation of the exception specifications; the compiler will still optimize based on the specifications, so throwing an unexpected exception will result in undefined behavior.
.Pp
.It Fl ffor-scope
.It Fl fno-for-scope
If
.Fl ffor-scope
is specified, the scope of variables declared in a
.Em for-init-statement
is limited to the
.Sy for
loop itself, as specified by the C++ standard.
If
.Fl fno-for-scope
is specified, the scope of variables declared in a
.Em for-init-statement
extends to the end of the enclosing scope, as was the case in old versions of G++, and other (traditional) implementations of C++.
.Pp
The default if neither flag is given to follow the standard, but to allow and give a warning for old-style code that would otherwise be invalid, or have different behavior.
.Pp
.It Fl fno-gnu-keywords
Do not recognize
.Va typeof
as a keyword, so that code can use this word as an identifier.
You can use the keyword
.Va __typeof__
instead.
.Fl ansi
implies
.Fl fno-gnu-keywords .
.Pp
.It Fl fno-implicit-templates
Never emit code for non-inline templates which are instantiated implicitly (i.e. by use); only emit code for explicit instantiations.
.Pp
.It Fl fno-implicit-inline-templates
Don't emit code for implicit instantiations of inline templates, either.
The default is to handle inlines differently so that compiles with and without optimization will need the same set of explicit instantiations.
.Pp
.It Fl fno-implement-inlines
To save space, do not emit out-of-line copies of inline functions controlled by
.Sy #pragma implementation .
This will cause linker errors if these functions are not inlined everywhere they are called.
.Pp
.It Fl fms-extensions
Disable pedantic warnings about constructs used in MFC, such as implicit int and getting a pointer to member function via non-standard syntax.
.Pp
.It Fl fno-nonansi-builtins
Disable built-in declarations of functions that are not mandated by ANSI/ISO C.
These include
.Va ffs ,
.Va alloca ,
.Va _exit ,
.Va index ,
.Va bzero ,
.Va conjf ,
and other related functions.
.Pp
.It Fl fno-operator-names
Do not treat the operator name keywords
.Va and ,
.Va bitand ,
.Va bitor ,
.Va compl ,
.Va not ,
.Va or
and
.Va xor
as synonyms as keywords.
.Pp
.It Fl fno-optional-diags
Disable diagnostics that the standard says a compiler does not need to issue.
Currently, the only such diagnostic issued by G++ is the one for a name having multiple meanings within a class.
.Pp
.It Fl fpermissive
Downgrade some diagnostics about nonconformant code from errors to warnings.
Thus, using
.Fl fpermissive
will allow some nonconforming code to compile.
.Pp
.It Fl frepo
Enable automatic template instantiation at link time.
This option also implies
.Fl fno-implicit-templates .
.Pp
.It Fl fno-rtti
Disable generation of information about every class with virtual functions for use by the C++ runtime type identification features
.Sy ( dynamic_cast
and
.Sy typeid ) .
If you don't use those parts of the language, you can save some space by using this flag.
Note that exception handling uses the same information, but it will generate it as needed.
.Pp
.It Fl fstats
Emit statistics about front-end processing at the end of the compilation.
This information is generally only useful to the G++ development team.
.Pp
.It Fl ftemplate-depth- Ns Ar n
Set the maximum instantiation depth for template classes to
.Em n .
A limit on the template instantiation depth is needed to detect endless recursions during template class instantiation.
ANSI/ISO C++ conforming programs must not rely on a maximum depth greater than 17.
.Pp
.It Fl fno-threadsafe-statics
Do not emit the extra code to use the routines specified in the C++ ABI for thread-safe initialization of local statics.
You can use this option to reduce code size slightly in code that doesn't need to be thread-safe.
.Pp
.It Fl fuse-cxa-atexit
Register destructors for objects with static storage duration with the
.Va __cxa_atexit
function rather than the
.Va atexit
function.
This option is required for fully standards-compliant handling of static destructors, but will only work if your C library supports
.Va __cxa_atexit .
.Pp
.It Fl fvisibility-inlines-hidden
Causes all inlined methods to be marked with
.Va __attribute__ ((visibility ("hidden")))
so that they do not appear in the export table of a DSO and do not require a PLT indirection when used within the DSO.
Enabling this option can have a dramatic effect on load and link times of a DSO as it massively reduces the size of the dynamic export table when the library makes heavy use of templates.
While it can cause bloating through duplication of code within each DSO where it is used, often the wastage is less than the considerable space occupied by a long symbol name in the export table which is typical when using templates and namespaces.
For even more savings, combine with the
.Fl fvisibility=hidden
switch.
.Pp
.It Fl fno-weak
Do not use weak symbol support, even if it is provided by the linker.
By default, G++ will use weak symbols if they are available.
This option exists only for testing, and should not be used by end-users; it will result in inferior code and has no benefits.
This option may be removed in a future release of G++.
.Pp
.It Fl nostdinc++
Do not search for header files in the standard directories specific to C++, but do still search the other standard directories.
(This option is used when building the C++ library.)
.Pp
.El
In addition, these optimization, warning, and code generation options have meanings only for C++ programs:
.Pp
.Bl -tag -width xx
.It Fl fno-default-inline
Do not assume
.Sy inline
for functions defined inside a class scope.
Note that these functions will have linkage like inline functions; they just won't be inlined by default.
.Pp
.It Fl Wabi (C++ only)
Warn when G++ generates code that is probably not compatible with the vendor-neutral C++ ABI.
Although an effort has been made to warn about all such cases, there are probably some cases that are not warned about, even though G++ is generating incompatible code.
There may also be cases where warnings are emitted even though the code that is generated will be compatible.
.Pp
You should rewrite your code to avoid these warnings if you are concerned about the fact that code generated by G++ may not be binary compatible with code generated by other compilers.
.Pp
The known incompatibilities at this point include:
.Pp
.Bl -bullet
.It
Incorrect handling of tail-padding for bit-fields.
G++ may attempt to pack data into the same byte as a base class.
For example:
.Pp
.Bd -literal -offset indent
struct A { virtual void f(); int f1 : 1; };
struct B : public A { int f2 : 1; };
.Ed
In this case, G++ will place
.Va B::f2
into the same byte as
.Va A::f1 ;
other compilers will not.
You can avoid this problem by explicitly padding
.Va A
so that its size is a multiple of the byte size on your platform; that will cause G++ and other compilers to layout
.Va B
identically.
.Pp
.It
Incorrect handling of tail-padding for virtual bases.
G++ does not use tail padding when laying out virtual bases.
For example:
.Pp
.Bd -literal -offset indent
struct A { virtual void f(); char c1; };
struct B { B(); char c2; };
struct C : public A, public virtual B {};
.Ed
In this case, G++ will not place
.Va B
into the tail-padding for
.Va A ;
other compilers will.
You can avoid this problem by explicitly padding
.Va A
so that its size is a multiple of its alignment (ignoring virtual base classes); that will cause G++ and other compilers to layout
.Va C
identically.
.Pp
.It
Incorrect handling of bit-fields with declared widths greater than that of their underlying types, when the bit-fields appear in a union.
For example:
.Pp
.Bd -literal -offset indent
union U { int i : 4096; };
.Ed
Assuming that an
.Va int
does not have 4096 bits, G++ will make the union too small by the number of bits in an
.Va int .
.Pp
.It
Empty classes can be placed at incorrect offsets.
For example:
.Pp
.Bd -literal -offset indent
struct A {};

struct B {
  A a;
  virtual void f ();
};

struct C : public B, public A {};
.Ed
G++ will place the
.Va A
base class of
.Va C
at a nonzero offset; it should be placed at offset zero.
G++ mistakenly believes that the
.Va A
data member of
.Va B
is already at offset zero.
.Pp
.It
Names of template functions whose types involve
.Va typename
or template template parameters can be mangled incorrectly.
.Pp
.Bd -literal -offset indent
template \*[Lt]typename Q\*[Gt]
void f(typename Q::X) {}

template \*[Lt]template \*[Lt]typename\*[Gt] class Q\*[Gt]
void f(typename Q\*[Lt]int\*[Gt]::X) {}
.Ed
Instantiations of these templates may be mangled incorrectly.
.Pp
.El
.It Fl Wctor-dtor-privacy (C++ only)
Warn when a class seems unusable because all the constructors or destructors in that class are private, and it has neither friends nor public static member functions.
.Pp
.It Fl Wnon-virtual-dtor (C++ only)
Warn when a class appears to be polymorphic, thereby requiring a virtual destructor, yet it declares a non-virtual one.
This warning is enabled by
.Fl Wall .
.Pp
.It Fl Wreorder (C++ only)
Warn when the order of member initializers given in the code does not match the order in which they must be executed.
For instance:
.Pp
.Bd -literal -offset indent
struct A {
  int i;
  int j;
  A(): j (0), i (1) { }
};
.Ed
The compiler will rearrange the member initializers for
.Sy i
and
.Sy j
to match the declaration order of the members, emitting a warning to that effect.
This warning is enabled by
.Fl Wall .
.Pp
.El
The following
.Fl W...
options are not affected by
.Fl Wall .
.Pp
.Bl -tag -width xx
.It Fl Weffc++ (C++ only)
Warn about violations of the following style guidelines from Scott Meyers'
.Em Effective C++
book:
.Pp
.Bl -bullet
.It
Item 11: Define a copy constructor and an assignment operator for classes with dynamically allocated memory.
.Pp
.It
Item 12: Prefer initialization to assignment in constructors.
.Pp
.It
Item 14: Make destructors virtual in base classes.
.Pp
.It
Item 15: Have
.Va operator=
return a reference to
.Va *this .
.Pp
.It
Item 23: Don't try to return a reference when you must return an object.
.Pp
.El
Also warn about violations of the following style guidelines from Scott Meyers'
.Em More Effective C++
book:
.Pp
.Bl -bullet
.It
Item 6: Distinguish between prefix and postfix forms of increment and decrement operators.
.Pp
.It
Item 7: Never overload
.Va && ,
.Va || ,
or
.Va , .
.Pp
.El
When selecting this option, be aware that the standard library headers do not obey all of these guidelines; use
.Sy grep -v
to filter out those warnings.
.Pp
.It Fl Wno-deprecated (C++ only)
Do not warn about usage of deprecated features.
.Pp
.It Fl Wstrict-null-sentinel (C++ only)
Warn also about the use of an uncasted
.Va NULL
as sentinel.
When compiling only with GCC this is a valid sentinel, as
.Va NULL
is defined to
.Va __null .
Although it is a null pointer constant not a null pointer, it is guaranteed to of the same size as a pointer.
But this use is not portable across different compilers.
.Pp
.It Fl Wno-non-template-friend (C++ only)
Disable warnings when non-templatized friend functions are declared within a template.
Since the advent of explicit template specification support in G++, if the name of the friend is an unqualified-id (i.e.,
.Sy friend foo(int) ) ,
the C++ language specification demands that the friend declare or define an ordinary, nontemplate function.
(Section 14.5.3).
Before G++ implemented explicit specification, unqualified-ids could be interpreted as a particular specialization of a templatized function.
Because this non-conforming behavior is no longer the default behavior for G++,
.Fl Wnon-template-friend
allows the compiler to check existing code for potential trouble spots and is on by default.
This new compiler behavior can be turned off with
.Fl Wno-non-template-friend
which keeps the conformant compiler code but disables the helpful warning.
.Pp
.It Fl Wold-style-cast (C++ only)
Warn if an old-style (C-style) cast to a non-void type is used within a C++ program.
The new-style casts
.Sy ( dynamic_cast ,
.Sy static_cast ,
.Sy reinterpret_cast ,
and
.Sy const_cast )
are less vulnerable to unintended effects and much easier to search for.
.Pp
.It Fl Woverloaded-virtual (C++ only)
Warn when a function declaration hides virtual functions from a base class.
For example, in:
.Pp
.Bd -literal -offset indent
struct A {
  virtual void f();
};

struct B: public A {
  void f(int);
};
.Ed
the
.Va A
class version of
.Va f
is hidden in
.Va B ,
and code like:
.Pp
.Bd -literal -offset indent
B* b;
b-\*[Gt]f();
.Ed
will fail to compile.
.Pp
.It Fl Wno-pmf-conversions (C++ only)
Disable the diagnostic for converting a bound pointer to member function to a plain pointer.
.Pp
.It Fl Wsign-promo (C++ only)
Warn when overload resolution chooses a promotion from unsigned or enumerated type to a signed type, over a conversion to an unsigned type of the same size.
Previous versions of G++ would try to preserve unsignedness, but the standard mandates the current behavior.
.Pp
.Bd -literal -offset indent
struct A {
  operator int ();
  A& operator = (int);
};

main ()
{
  A a,b;
  a = b;
}
.Ed
In this example, G++ will synthesize a default
.Sy A& operator = (const A&); ,
while cfront will use the user-defined
.Sy operator = .
.Pp
.El
.Ss Options Controlling Objective-C and Objective-C++ Dialects
(NOTE: This manual does not describe the Objective-C and Objective-C++ languages themselves.
See
.Pp
This section describes the command-line options that are only meaningful for Objective-C and Objective-C++ programs, but you can also use most of the language-independent GNU compiler options.
For example, you might compile a file
.Va some_class.m
like this:
.Pp
.Bd -literal -offset indent
gcc -g -fgnu-runtime -O -c some_class.m
.Ed
In this example,
.Fl fgnu-runtime
is an option meant only for Objective-C and Objective-C++ programs; you can use the other options with any language supported by GCC.
.Pp
Note that since Objective-C is an extension of the C language, Objective-C compilations may also use options specific to the C front-end (e.g.,
.Fl Wtraditional ) .
Similarly, Objective-C++ compilations may use C++-specific options (e.g.,
.Fl Wabi ) .
.Pp
Here is a list of options that are
.Em only
for compiling Objective-C and Objective-C++ programs:
.Pp
.Bl -tag -width xx
.It Fl fconstant-string-class= Ns Ar class-name
Use
.Em class-name
as the name of the class to instantiate for each literal string specified with the syntax
.Va @"..." .
The default class name is
.Va NXConstantString
if the GNU runtime is being used, and
.Va NSConstantString
if the NeXT runtime is being used (see below).
The
.Fl fconstant-cfstrings
option, if also present, will override the
.Fl fconstant-string-class
setting and cause
.Va @"..."
literals to be laid out as constant CoreFoundation strings.
.Pp
.It Fl fgnu-runtime
Generate object code compatible with the standard GNU Objective-C runtime.
This is the default for most types of systems.
.Pp
.It Fl fnext-runtime
Generate output compatible with the NeXT runtime.
This is the default for NeXT-based systems, including Darwin and Mac OS X.
The macro
.Va __NEXT_RUNTIME__
is predefined if (and only if) this option is used.
.Pp
.It Fl fno-nil-receivers
Assume that all Objective-C message dispatches (e.g.,
.Va [receiver message:arg] )
in this translation unit ensure that the receiver is not
.Va nil .
This allows for more efficient entry points in the runtime to be used.
Currently, this option is only available in conjunction with the NeXT runtime on Mac OS X 10.3 and later.
.Pp
.It Fl fobjc-call-cxx-cdtors
For each Objective-C class, check if any of its instance variables is a C++ object with a non-trivial default constructor.
If so, synthesize a special
.Va - (id) .cxx_construct
instance method that will run non-trivial default constructors on any such instance variables, in order, and then return
.Va self .
Similarly, check if any instance variable is a C++ object with a non-trivial destructor, and if so, synthesize a special
.Va - (void) .cxx_destruct
method that will run all such default destructors, in reverse order.
.Pp
The
.Va - (id) .cxx_construct
and/or
.Va - (void) .cxx_destruct
methods thusly generated will only operate on instance variables declared in the current Objective-C class, and not those inherited from superclasses.
It is the responsibility of the Objective-C runtime to invoke all such methods in an object's inheritance hierarchy.
The
.Va - (id) .cxx_construct
methods will be invoked by the runtime immediately after a new object instance is allocated; the
.Va - (void) .cxx_destruct
methods will be invoked immediately before the runtime deallocates an object instance.
.Pp
As of this writing, only the NeXT runtime on Mac OS X 10.4 and later has support for invoking the
.Va - (id) .cxx_construct
and
.Va - (void) .cxx_destruct
methods.
.Pp
.It Fl fobjc-direct-dispatch
Allow fast jumps to the message dispatcher.
On Darwin this is accomplished via the comm page.
.Pp
.It Fl fobjc-exceptions
Enable syntactic support for structured exception handling in Objective-C, similar to what is offered by C++ and Java.
Currently, this option is only available in conjunction with the NeXT runtime on Mac OS X 10.3 and later.
.Pp
.Bd -literal -offset indent
  @try {
    ...
       @throw expr;
    ...
  }
  @catch (AnObjCClass *exc) {
    ...
      @throw expr;
    ...
      @throw;
    ...
  }
  @catch (AnotherClass *exc) {
    ...
  }
  @catch (id allOthers) {
    ...
  }
  @finally {
    ...
      @throw expr;
    ...
  }
.Ed
The
.Va @throw
statement may appear anywhere in an Objective-C or Objective-C++ program; when used inside of a
.Va @catch
block, the
.Va @throw
may appear without an argument (as shown above), in which case the object caught by the
.Va @catch
will be rethrown.
.Pp
Note that only (pointers to) Objective-C objects may be thrown and caught using this scheme.
When an object is thrown, it will be caught by the nearest
.Va @catch
clause capable of handling objects of that type, analogously to how
.Va catch
blocks work in C++ and Java.
A
.Va @catch(id ...)
clause (as shown above) may also be provided to catch any and all Objective-C exceptions not caught by previous
.Va @catch
clauses (if any).
.Pp
The
.Va @finally
clause, if present, will be executed upon exit from the immediately preceding
.Va @try ... @catch
section.
This will happen regardless of whether any exceptions are thrown, caught or rethrown inside the
.Va @try ... @catch
section, analogously to the behavior of the
.Va finally
clause in Java.
.Pp
There are several caveats to using the new exception mechanism:
.Pp
.Bl -bullet
.It
Although currently designed to be binary compatible with
.Va NS_HANDLER
-style idioms provided by the
.Va NSException
class, the new exceptions can only be used on Mac OS X 10.3 (Panther) and later systems, due to additional functionality needed in the (NeXT) Objective-C runtime.
.Pp
.It
As mentioned above, the new exceptions do not support handling types other than Objective-C objects.
Furthermore, when used from Objective-C++, the Objective-C exception model does not interoperate with C++ exceptions at this time.
This means you cannot
.Va @throw
an exception from Objective-C and
.Va catch
it in C++, or vice versa (i.e.,
.Va throw ... @catch ) .
.Pp
.El
The
.Fl fobjc-exceptions
switch also enables the use of synchronization blocks for thread-safe execution:
.Pp
.Bd -literal -offset indent
  @synchronized (ObjCClass *guard) {
    ...
  }
.Ed
Upon entering the
.Va @synchronized
block, a thread of execution shall first check whether a lock has been placed on the corresponding
.Va guard
object by another thread.
If it has, the current thread shall wait until the other thread relinquishes its lock.
Once
.Va guard
becomes available, the current thread will place its own lock on it, execute the code contained in the
.Va @synchronized
block, and finally relinquish the lock (thereby making
.Va guard
available to other threads).
.Pp
Unlike Java, Objective-C does not allow for entire methods to be marked
.Va @synchronized .
Note that throwing exceptions out of
.Va @synchronized
blocks is allowed, and will cause the guarding object to be unlocked properly.
.Pp
.It Fl fobjc-gc
Enable garbage collection (GC) in Objective-C and Objective-C++ programs.
.Pp
.It Fl freplace-objc-classes
Emit a special marker instructing
.Sy ld(1)
not to statically link in the resulting object file, and allow
.Sy dyld(1)
to load it in at run time instead.
This is used in conjunction with the Fix-and-Continue debugging mode, where the object file in question may be recompiled and dynamically reloaded in the course of program execution, without the need to restart the program itself.
Currently, Fix-and-Continue functionality is only available in conjunction with the NeXT runtime on Mac OS X 10.3 and later.
.Pp
.It Fl fzero-link
When compiling for the NeXT runtime, the compiler ordinarily replaces calls to
.Va objc_getClass("...")
(when the name of the class is known at compile time) with static class references that get initialized at load time, which improves run-time performance.
Specifying the
.Fl fzero-link
flag suppresses this behavior and causes calls to
.Va objc_getClass("...")
to be retained.
This is useful in Zero-Link debugging mode, since it allows for individual class implementations to be modified during program execution.
.Pp
.It Fl gen-decls
Dump interface declarations for all classes seen in the source file to a file named
.Pa sourcename.decl .
.Pp
.It Fl Wassign-intercept
Warn whenever an Objective-C assignment is being intercepted by the garbage collector.
.Pp
.It Fl Wno-protocol
If a class is declared to implement a protocol, a warning is issued for every method in the protocol that is not implemented by the class.
The default behavior is to issue a warning for every method not explicitly implemented in the class, even if a method implementation is inherited from the superclass.
If you use the
.Fl Wno-protocol
option, then methods inherited from the superclass are considered to be implemented, and no warning is issued for them.
.Pp
.It Fl Wselector
Warn if multiple methods of different types for the same selector are found during compilation.
The check is performed on the list of methods in the final stage of compilation.
Additionally, a check is performed for each selector appearing in a
.Va @selector(...)
expression, and a corresponding method for that selector has been found during compilation.
Because these checks scan the method table only at the end of compilation, these warnings are not produced if the final stage of compilation is not reached, for example because an error is found during compilation, or because the
.Fl fsyntax-only
option is being used.
.Pp
.It Fl Wstrict-selector-match
Warn if multiple methods with differing argument and/or return types are found for a given selector when attempting to send a message using this selector to a receiver of type
.Va id
or
.Va Class .
When this flag is off (which is the default behavior), the compiler will omit such warnings if any differences found are confined to types which share the same size and alignment.
.Pp
.It Fl Wundeclared-selector
Warn if a
.Va @selector(...)
expression referring to an undeclared selector is found.
A selector is considered undeclared if no method with that name has been declared before the
.Va @selector(...)
expression, either explicitly in an
.Va @interface
or
.Va @protocol
declaration, or implicitly in an
.Va @implementation
section.
This option always performs its checks as soon as a
.Va @selector(...)
expression is found, while
.Fl Wselector
only performs its checks in the final stage of compilation.
This also enforces the coding style convention that methods and selectors must be declared before being used.
.Pp
.It Fl print-objc-runtime-info
Generate C header describing the largest structure that is passed by value, if any.
.Pp
.El
.Ss Options to Control Diagnostic Messages Formatting
Traditionally, diagnostic messages have been formatted irrespective of the output device's aspect (e.g. its width, ...).
The options described below can be used to control the diagnostic messages formatting algorithm, e.g. how many characters per line, how often source location information should be reported.
Right now, only the C++ front end can honor these options.
However it is expected, in the near future, that the remaining front ends would be able to digest them correctly.
.Pp
.Bl -tag -width xx
.It Fl fmessage-length= Ns Ar n
Try to format error messages so that they fit on lines of about
.Em n
characters.
The default is 72 characters for
.Nm g++
and 0 for the rest of the front ends supported by GCC.
If
.Em n
is zero, then no line-wrapping will be done; each error message will appear on a single line.
.Pp
.It Fl fdiagnostics-show-location=once
Only meaningful in line-wrapping mode.
Instructs the diagnostic messages reporter to emit
.Em once
source location information; that is, in case the message is too long to fit on a single physical line and has to be wrapped, the source location won't be emitted (as prefix) again, over and over, in subsequent continuation lines.
This is the default behavior.
.Pp
.It Fl fdiagnostics-show-location=every-line
Only meaningful in line-wrapping mode.
Instructs the diagnostic messages reporter to emit the same source location information (as prefix) for physical lines that result from the process of breaking a message which is too long to fit on a single line.
.Pp
.It Fl fdiagnostics-show-options
This option instructs the diagnostic machinery to add text to each diagnostic emitted, which indicates which command line option directly controls that diagnostic, when such an option is known to the diagnostic machinery.
.Pp
.El
.Ss Options to Request or Suppress Warnings
Warnings are diagnostic messages that report constructions which are not inherently erroneous but which are risky or suggest there may have been an error.
.Pp
You can request many specific warnings with options beginning
.Fl W ,
for example
.Fl Wimplicit
to request warnings on implicit declarations.
Each of these specific warning options also has a negative form beginning
.Fl Wno-
to turn off warnings; for example,
.Fl Wno-implicit .
This manual lists only one of the two forms, whichever is not the default.
.Pp
The following options control the amount and kinds of warnings produced by GCC; for further, language-specific options also refer to
.Sy C++ Dialect Options
and
.Sy Objective-C and Objective-C++ Dialect Options .
.Pp
.Bl -tag -width xx
.It Fl fsyntax-only
Check the code for syntax errors, but don't do anything beyond that.
.Pp
.It Fl pedantic
Issue all the warnings demanded by strict ISO C and ISO C++; reject all programs that use forbidden extensions, and some other programs that do not follow ISO C and ISO C++.
For ISO C, follows the version of the ISO C standard specified by any
.Fl std
option used.
.Pp
Valid ISO C and ISO C++ programs should compile properly with or without this option (though a rare few will require
.Fl ansi
or a
.Fl std
option specifying the required version of ISO C).
However, without this option, certain GNU extensions and traditional C and C++ features are supported as well.
With this option, they are rejected.
.Pp
.Fl pedantic
does not cause warning messages for use of the alternate keywords whose names begin and end with
.Sy __ .
Pedantic warnings are also disabled in the expression that follows
.Va __extension__ .
However, only system header files should use these escape routes; application programs should avoid them.
.Pp
Some users try to use
.Fl pedantic
to check programs for strict ISO C conformance.
They soon find that it does not do quite what they want: it finds some non-ISO practices, but not all---only those for which ISO C
.Em requires
a diagnostic, and some others for which diagnostics have been added.
.Pp
A feature to report any failure to conform to ISO C might be useful in some instances, but would require considerable additional work and would be quite different from
.Fl pedantic .
We don't have plans to support such a feature in the near future.
.Pp
Where the standard specified with
.Fl std
represents a GNU extended dialect of C, such as
.Sy gnu89
or
.Sy gnu99 ,
there is a corresponding
.Em base standard ,
the version of ISO C on which the GNU extended dialect is based.
Warnings from
.Fl pedantic
are given where they are required by the base standard.
(It would not make sense for such warnings to be given only for features not in the specified GNU C dialect, since by definition the GNU dialects of C include all features the compiler supports with the given option, and there would be nothing to warn about.)
.Pp
.It Fl pedantic-errors
Like
.Fl pedantic ,
except that errors are produced rather than warnings.
.Pp
.It Fl w
Inhibit all warning messages.
.Pp
.It Fl Wno-import
Inhibit warning messages about the use of
.Sy #import .
.Pp
.It Fl Wchar-subscripts
Warn if an array subscript has type
.Va char .
This is a common cause of error, as programmers often forget that this type is signed on some machines.
This warning is enabled by
.Fl Wall .
.Pp
.It Fl Wcomment
Warn whenever a comment-start sequence
.Sy /*
appears in a
.Sy /*
comment, or whenever a Backslash-Newline appears in a
.Sy //
comment.
This warning is enabled by
.Fl Wall .
.Pp
.It Fl Wfatal-errors
This option causes the compiler to abort compilation on the first error occurred rather than trying to keep going and printing further error messages.
.Pp
.It Fl Wformat
Check calls to
.Va printf
and
.Va scanf ,
etc., to make sure that the arguments supplied have types appropriate to the format string specified, and that the conversions specified in the format string make sense.
This includes standard functions, and others specified by format attributes, in the
.Va printf ,
.Va scanf ,
.Va strftime
and
.Va strfmon
(an X/Open extension, not in the C standard) families (or other target-specific families).
Which functions are checked without format attributes having been specified depends on the standard version selected, and such checks of functions without the attribute specified are disabled by
.Fl ffreestanding
or
.Fl fno-builtin .
.Pp
The formats are checked against the format features supported by GNU libc version 2.2.
These include all ISO C90 and C99 features, as well as features from the Single Unix Specification and some BSD and GNU extensions.
Other library implementations may not support all these features; GCC does not support warning about features that go beyond a particular library's limitations.
However, if
.Fl pedantic
is used with
.Fl Wformat ,
warnings will be given about format features not in the selected standard version (but not for
.Va strfmon
formats, since those are not in any version of the C standard).
.Pp
Since
.Fl Wformat
also checks for null format arguments for several functions,
.Fl Wformat
also implies
.Fl Wnonnull .
.Pp
.Fl Wformat
is included in
.Fl Wall .
For more control over some aspects of format checking, the options
.Fl Wformat-y2k ,
.Fl Wno-format-extra-args ,
.Fl Wno-format-zero-length ,
.Fl Wformat-nonliteral ,
.Fl Wformat-security ,
and
.Fl Wformat=2
are available, but are not included in
.Fl Wall .
.Pp
.It Fl Wformat-y2k
If
.Fl Wformat
is specified, also warn about
.Va strftime
formats which may yield only a two-digit year.
.Pp
.It Fl Wno-format-extra-args
If
.Fl Wformat
is specified, do not warn about excess arguments to a
.Va printf
or
.Va scanf
format function.
The C standard specifies that such arguments are ignored.
.Pp
Where the unused arguments lie between used arguments that are specified with
.Sy $
operand number specifications, normally warnings are still given, since the implementation could not know what type to pass to
.Va va_arg
to skip the unused arguments.
However, in the case of
.Va scanf
formats, this option will suppress the warning if the unused arguments are all pointers, since the Single Unix Specification says that such unused arguments are allowed.
.Pp
.It Fl Wno-format-zero-length
If
.Fl Wformat
is specified, do not warn about zero-length formats.
The C standard specifies that zero-length formats are allowed.
.Pp
.It Fl Wformat-nonliteral
If
.Fl Wformat
is specified, also warn if the format string is not a string literal and so cannot be checked, unless the format function takes its format arguments as a
.Va va_list .
.Pp
.It Fl Wformat-security
If
.Fl Wformat
is specified, also warn about uses of format functions that represent possible security problems.
At present, this warns about calls to
.Va printf
and
.Va scanf
functions where the format string is not a string literal and there are no format arguments, as in
.Va printf (foo); .
This may be a security hole if the format string came from untrusted input and contains
.Sy %n .
(This is currently a subset of what
.Fl Wformat-nonliteral
warns about, but in future warnings may be added to
.Fl Wformat-security
that are not included in
.Fl Wformat-nonliteral . )
.Pp
.It Fl Wformat=2
Enable
.Fl Wformat
plus format checks not included in
.Fl Wformat .
Currently equivalent to
.Fl Wformat Fl Wformat-nonliteral Fl Wformat-security Fl Wformat-y2k .
.Pp
.It Fl Wnonnull
Warn about passing a null pointer for arguments marked as requiring a non-null value by the
.Va nonnull
function attribute.
.Pp
.Fl Wnonnull
is included in
.Fl Wall
and
.Fl Wformat .
It can be disabled with the
.Fl Wno-nonnull
option.
.Pp
.It Fl Winit-self (C, C++, Objective-C and Objective-C++ only)
Warn about uninitialized variables which are initialized with themselves.
Note this option can only be used with the
.Fl Wuninitialized
option, which in turn only works with
.Fl O1
and above.
.Pp
For example, GCC will warn about
.Va i
being uninitialized in the following snippet only when
.Fl Winit-self
has been specified:
.Pp
.Bd -literal -offset indent
int f()
{
  int i = i;
  return i;
}
.Ed
.It Fl Wimplicit-int
Warn when a declaration does not specify a type.
This warning is enabled by
.Fl Wall .
.Pp
.It Fl Wimplicit-function-declaration
.It Fl Werror-implicit-function-declaration
Give a warning (or error) whenever a function is used before being declared.
The form
.Fl Wno-error-implicit-function-declaration
is not supported.
This warning is enabled by
.Fl Wall
(as a warning, not an error).
.Pp
.It Fl Wimplicit
Same as
.Fl Wimplicit-int
and
.Fl Wimplicit-function-declaration .
This warning is enabled by
.Fl Wall .
.Pp
.It Fl Wmain
Warn if the type of
.Sy main
is suspicious.
.Sy main
should be a function with external linkage, returning int, taking either zero arguments, two, or three arguments of appropriate types.
This warning is enabled by
.Fl Wall .
.Pp
.It Fl Wmissing-braces
Warn if an aggregate or union initializer is not fully bracketed.
In the following example, the initializer for
.Sy a
is not fully bracketed, but that for
.Sy b
is fully bracketed.
.Pp
.Bd -literal -offset indent
int a[2][2] = { 0, 1, 2, 3 };
int b[2][2] = { { 0, 1 }, { 2, 3 } };
.Ed
This warning is enabled by
.Fl Wall .
.Pp
.It Fl Wmissing-include-dirs (C, C++, Objective-C and Objective-C++ only)
Warn if a user-supplied include directory does not exist.
.Pp
.It Fl Wparentheses
Warn if parentheses are omitted in certain contexts, such as when there is an assignment in a context where a truth value is expected, or when operators are nested whose precedence people often get confused about.
Only the warning for an assignment used as a truth value is supported when compiling C++; the other warnings are only supported when compiling C.
.Pp
Also warn if a comparison like
.Sy x\*[Lt]=y\*[Lt]=z
appears; this is equivalent to
.Sy (x\*[Lt]=y ? 1 : 0) \*[Lt]= z ,
which is a different interpretation from that of ordinary mathematical notation.
.Pp
Also warn about constructions where there may be confusion to which
.Va if
statement an
.Va else
branch belongs.
Here is an example of such a case:
.Pp
.Bd -literal -offset indent
{
  if (a)
    if (b)
      foo ();
  else
    bar ();
}
.Ed
In C, every
.Va else
branch belongs to the innermost possible
.Va if
statement, which in this example is
.Va if (b) .
This is often not what the programmer expected, as illustrated in the above example by indentation the programmer chose.
When there is the potential for this confusion, GCC will issue a warning when this flag is specified.
To eliminate the warning, add explicit braces around the innermost
.Va if
statement so there is no way the
.Va else
could belong to the enclosing
.Va if .
The resulting code would look like this:
.Pp
.Bd -literal -offset indent
{
  if (a)
    {
      if (b)
        foo ();
      else
        bar ();
    }
}
.Ed
This warning is enabled by
.Fl Wall .
.Pp
.It Fl Wsequence-point
Warn about code that may have undefined semantics because of violations of sequence point rules in the C standard.
.Pp
The C standard defines the order in which expressions in a C program are evaluated in terms of
.Em sequence points ,
which represent a partial ordering between the execution of parts of the program: those executed before the sequence point, and those executed after it.
These occur after the evaluation of a full expression (one which is not part of a larger expression), after the evaluation of the first operand of a
.Va && ,
.Va || ,
.Va ? :
or
.Va ,
(comma) operator, before a function is called (but after the evaluation of its arguments and the expression denoting the called function), and in certain other places.
Other than as expressed by the sequence point rules, the order of evaluation of subexpressions of an expression is not specified.
All these rules describe only a partial order rather than a total order, since, for example, if two functions are called within one expression with no sequence point between them, the order in which the functions are called is not specified.
However, the standards committee have ruled that function calls do not overlap.
.Pp
It is not specified when between sequence points modifications to the values of objects take effect.
Programs whose behavior depends on this have undefined behavior; the C standard specifies that "Between the previous and next sequence point an object shall have its stored value modified at most once by the evaluation of an expression.
Furthermore, the prior value shall be read only to determine the value to be stored.".
If a program breaks these rules, the results on any particular implementation are entirely unpredictable.
.Pp
Examples of code with undefined behavior are
.Va a = a++; ,
.Va a[n] = b[n++]
and
.Va a[i++] = i; .
Some more complicated cases are not diagnosed by this option, and it may give an occasional false positive result, but in general it has been found fairly effective at detecting this sort of problem in programs.
.Pp
The present implementation of this option only works for C programs.
A future implementation may also work for C++ programs.
.Pp
The C standard is worded confusingly, therefore there is some debate over the precise meaning of the sequence point rules in subtle cases.
Links to discussions of the problem, including proposed formal definitions, may be found on the GCC readings page, at
.Lk http://gcc.gnu.org/readings.html .
.Pp
This warning is enabled by
.Fl Wall .
.Pp
.It Fl Wreturn-type
Warn whenever a function is defined with a return-type that defaults to
.Va int .
Also warn about any
.Va return
statement with no return-value in a function whose return-type is not
.Va void .
.Pp
For C, also warn if the return type of a function has a type qualifier such as
.Va const .
Such a type qualifier has no effect, since the value returned by a function is not an lvalue.
ISO C prohibits qualified
.Va void
return types on function definitions, so such return types always receive a warning even without this option.
.Pp
For C++, a function without return type always produces a diagnostic message, even when
.Fl Wno-return-type
is specified.
The only exceptions are
.Sy main
and functions defined in system headers.
.Pp
This warning is enabled by
.Fl Wall .
.Pp
.It Fl Wswitch
Warn whenever a
.Va switch
statement has an index of enumerated type and lacks a
.Va case
for one or more of the named codes of that enumeration.
(The presence of a
.Va default
label prevents this warning.)
.Va case
labels outside the enumeration range also provoke warnings when this option is used.
This warning is enabled by
.Fl Wall .
.Pp
.It Fl Wswitch-default
Warn whenever a
.Va switch
statement does not have a
.Va default
case.
.Pp
.It Fl Wswitch-enum
Warn whenever a
.Va switch
statement has an index of enumerated type and lacks a
.Va case
for one or more of the named codes of that enumeration.
.Va case
labels outside the enumeration range also provoke warnings when this option is used.
.Pp
.It Fl Wtrigraphs
Warn if any trigraphs are encountered that might change the meaning of the program (trigraphs within comments are not warned about).
This warning is enabled by
.Fl Wall .
.Pp
.It Fl Wunused-function
Warn whenever a static function is declared but not defined or a non-inline static function is unused.
This warning is enabled by
.Fl Wall .
.Pp
.It Fl Wunused-label
Warn whenever a label is declared but not used.
This warning is enabled by
.Fl Wall .
.Pp
To suppress this warning use the
.Sy unused
attribute.
.Pp
.It Fl Wunused-parameter
Warn whenever a function parameter is unused aside from its declaration.
.Pp
To suppress this warning use the
.Sy unused
attribute.
.Pp
.It Fl Wunused-variable
Warn whenever a local variable or non-constant static variable is unused aside from its declaration.
This warning is enabled by
.Fl Wall .
.Pp
To suppress this warning use the
.Sy unused
attribute.
.Pp
.It Fl Wunused-value
Warn whenever a statement computes a result that is explicitly not used.
This warning is enabled by
.Fl Wall .
.Pp
To suppress this warning cast the expression to
.Sy void .
.Pp
.It Fl Wunused
All the above
.Fl Wunused
options combined.
.Pp
In order to get a warning about an unused function parameter, you must either specify
.Fl Wextra Fl Wunused
(note that
.Fl Wall
implies
.Fl Wunused ) ,
or separately specify
.Fl Wunused-parameter .
.Pp
.It Fl Wuninitialized
Warn if an automatic variable is used without first being initialized or if a variable may be clobbered by a
.Va setjmp
call.
.Pp
These warnings are possible only in optimizing compilation, because they require data flow information that is computed only when optimizing.
If you don't specify
.Fl O ,
you simply won't get these warnings.
.Pp
If you want to warn about code which uses the uninitialized value of the variable in its own initializer, use the
.Fl Winit-self
option.
.Pp
These warnings occur for individual uninitialized or clobbered elements of structure, union or array variables as well as for variables which are uninitialized or clobbered as a whole.
They do not occur for variables or elements declared
.Va volatile .
Because these warnings depend on optimization, the exact variables or elements for which there are warnings will depend on the precise optimization options and version of GCC used.
.Pp
Note that there may be no warning about a variable that is used only to compute a value that itself is never used, because such computations may be deleted by data flow analysis before the warnings are printed.
.Pp
These warnings are made optional because GCC is not smart enough to see all the reasons why the code might be correct despite appearing to have an error.
Here is one example of how this can happen:
.Pp
.Bd -literal -offset indent
{
  int x;
  switch (y)
    {
    case 1: x = 1;
      break;
    case 2: x = 4;
      break;
    case 3: x = 5;
    }
  foo (x);
}
.Ed
If the value of
.Va y
is always 1, 2 or 3, then
.Va x
is always initialized, but GCC doesn't know this.
Here is another common case:
.Pp
.Bd -literal -offset indent
{
  int save_y;
  if (change_y) save_y = y, y = new_y;
  ...
  if (change_y) y = save_y;
}
.Ed
This has no bug because
.Va save_y
is used only if it is set.
.Pp
This option also warns when a non-volatile automatic variable might be changed by a call to
.Va longjmp .
These warnings as well are possible only in optimizing compilation.
.Pp
The compiler sees only the calls to
.Va setjmp .
It cannot know where
.Va longjmp
will be called; in fact, a signal handler could call it at any point in the code.
As a result, you may get a warning even when there is in fact no problem because
.Va longjmp
cannot in fact be called at the place which would cause a problem.
.Pp
Some spurious warnings can be avoided if you declare all the functions you use that never return as
.Va noreturn .
.Pp
This warning is enabled by
.Fl Wall .
.Pp
.It Fl Wunknown-pragmas
Warn when a #pragma directive is encountered which is not understood by GCC.
If this command line option is used, warnings will even be issued for unknown pragmas in system header files.
This is not the case if the warnings were only enabled by the
.Fl Wall
command line option.
.Pp
.It Fl Wno-pragmas
Do not warn about misuses of pragmas, such as incorrect parameters, invalid syntax, or conflicts between pragmas.
See also
.Fl Wunknown-pragmas .
.Pp
.It Fl Wstrict-aliasing
This option is only active when
.Fl fstrict-aliasing
is active.
It warns about code which might break the strict aliasing rules that the compiler is using for optimization.
The warning does not catch all cases, but does attempt to catch the more common pitfalls.
It is included in
.Fl Wall .
.Pp
.It Fl Wstrict-aliasing=2
This option is only active when
.Fl fstrict-aliasing
is active.
It warns about code which might break the strict aliasing rules that the compiler is using for optimization.
This warning catches more cases than
.Fl Wstrict-aliasing ,
but it will also give a warning for some ambiguous cases that are safe.
.Pp
.It Fl Wall
All of the above
.Fl W
options combined.
This enables all the warnings about constructions that some users consider questionable, and that are easy to avoid (or modify to prevent the warning), even in conjunction with macros.
This also enables some language-specific warnings described in
.Sy C++ Dialect Options
and
.Sy Objective-C and Objective-C++ Dialect Options .
.Pp
.El
The following
.Fl W...
options are not implied by
.Fl Wall .
Some of them warn about constructions that users generally do not consider questionable, but which occasionally you might wish to check for; others warn about constructions that are necessary or hard to avoid in some cases, and there is no simple way to modify the code to suppress the warning.
.Pp
.Bl -tag -width xx
.It Fl Wextra
(This option used to be called
.Fl W .
The older name is still supported, but the newer name is more descriptive.) Print extra warning messages for these events:
.Pp
.Bl -bullet
.It
A function can return either with or without a value.
(Falling off the end of the function body is considered returning without a value.) For example, this function would evoke such a warning:
.Pp
.Bd -literal -offset indent
foo (a)
{
  if (a \*[Gt] 0)
    return a;
}
.Ed
.It
An expression-statement or the left-hand side of a comma expression contains no side effects.
To suppress the warning, cast the unused expression to void.
For example, an expression such as
.Sy x[i,j]
will cause a warning, but
.Sy x[(void)i,j]
will not.
.Pp
.It
An unsigned value is compared against zero with
.Sy \*[Lt]
or
.Sy \*[Gt]= .
.Pp
.It
Storage-class specifiers like
.Va static
are not the first things in a declaration.
According to the C Standard, this usage is obsolescent.
.Pp
.It
If
.Fl Wall
or
.Fl Wunused
is also specified, warn about unused arguments.
.Pp
.It
A comparison between signed and unsigned values could produce an incorrect result when the signed value is converted to unsigned.
(But don't warn if
.Fl Wno-sign-compare
is also specified.)
.Pp
.It
An aggregate has an initializer which does not initialize all members.
This warning can be independently controlled by
.Fl Wmissing-field-initializers .
.Pp
.It
A function parameter is declared without a type specifier in K&R-style functions:
.Pp
.Bd -literal -offset indent
void foo(bar) { }
.Ed
.It
An empty body occurs in an
.Sy if
or
.Sy else
statement.
.Pp
.It
A pointer is compared against integer zero with
.Sy \*[Lt] ,
.Sy \*[Lt]= ,
.Sy \*[Gt] ,
or
.Sy \*[Gt]= .
.Pp
.It
A variable might be changed by
.Sy longjmp
or
.Sy vfork .
.Pp
.It
Any of several floating-point events that often indicate errors, such as overflow, underflow, loss of precision, etc.
.Pp
.It
An enumerator and a non-enumerator both appear in a conditional expression.
.Pp
.It
A non-static reference or non-static
.Sy const
member appears in a class without constructors.
.Pp
.It
Ambiguous virtual bases.
.Pp
.It
Subscripting an array which has been declared
.Sy register .
.Pp
.It
Taking the address of a variable which has been declared
.Sy register .
.Pp
.It
A base class is not initialized in a derived class' copy constructor.
.Pp
.El
.It Fl Wno-div-by-zero
Do not warn about compile-time integer division by zero.
Floating point division by zero is not warned about, as it can be a legitimate way of obtaining infinities and NaNs.
.Pp
.It Fl Wsystem-headers
Print warning messages for constructs found in system header files.
Warnings from system headers are normally suppressed, on the assumption that they usually do not indicate real problems and would only make the compiler output harder to read.
Using this command line option tells GCC to emit warnings from system headers as if they occurred in user code.
However, note that using
.Fl Wall
in conjunction with this option will
.Em not
warn about unknown pragmas in system headers---for that,
.Fl Wunknown-pragmas
must also be used.
.Pp
.It Fl Wfloat-equal
Warn if floating point values are used in equality comparisons.
.Pp
The idea behind this is that sometimes it is convenient (for the programmer) to consider floating-point values as approximations to infinitely precise real numbers.
If you are doing this, then you need to compute (by analyzing the code, or in some other way) the maximum or likely maximum error that the computation introduces, and allow for it when performing comparisons (and when producing output, but that's a different problem).
In particular, instead of testing for equality, you would check to see whether the two values have ranges that overlap; and this is done with the relational operators, so equality comparisons are probably mistaken.
.Pp
.It Fl Wtraditional (C only)
Warn about certain constructs that behave differently in traditional and ISO C.
Also warn about ISO C constructs that have no traditional C equivalent, and/or problematic constructs which should be avoided.
.Pp
.Bl -bullet
.It
Macro parameters that appear within string literals in the macro body.
In traditional C macro replacement takes place within string literals, but does not in ISO C.
.Pp
.It
In traditional C, some preprocessor directives did not exist.
Traditional preprocessors would only consider a line to be a directive if the
.Sy #
appeared in column 1 on the line.
Therefore
.Fl Wtraditional
warns about directives that traditional C understands but would ignore because the
.Sy #
does not appear as the first character on the line.
It also suggests you hide directives like
.Sy #pragma
not understood by traditional C by indenting them.
Some traditional implementations would not recognize
.Sy #elif ,
so it suggests avoiding it altogether.
.Pp
.It
A function-like macro that appears without arguments.
.Pp
.It
The unary plus operator.
.Pp
.It
The
.Sy U
integer constant suffix, or the
.Sy F
or
.Sy L
floating point constant suffixes.
(Traditional C does support the
.Sy L
suffix on integer constants.) Note, these suffixes appear in macros defined in the system headers of most modern systems, e.g. the
.Sy _MIN
/
.Sy _MAX
macros in
.Va \*[Lt]limits.h\*[Gt] .
Use of these macros in user code might normally lead to spurious warnings, however GCC's integrated preprocessor has enough context to avoid warning in these cases.
.Pp
.It
A function declared external in one block and then used after the end of the block.
.Pp
.It
A
.Va switch
statement has an operand of type
.Va long .
.Pp
.It
A non-
.Va static
function declaration follows a
.Va static
one.
This construct is not accepted by some traditional C compilers.
.Pp
.It
The ISO type of an integer constant has a different width or signedness from its traditional type.
This warning is only issued if the base of the constant is ten.
I.e. hexadecimal or octal values, which typically represent bit patterns, are not warned about.
.Pp
.It
Usage of ISO string concatenation is detected.
.Pp
.It
Initialization of automatic aggregates.
.Pp
.It
Identifier conflicts with labels.
Traditional C lacks a separate namespace for labels.
.Pp
.It
Initialization of unions.
If the initializer is zero, the warning is omitted.
This is done under the assumption that the zero initializer in user code appears conditioned on e.g.
.Va __STDC__
to avoid missing initializer warnings and relies on default initialization to zero in the traditional C case.
.Pp
.It
Conversions by prototypes between fixed/floating point values and vice versa.
The absence of these prototypes when compiling with traditional C would cause serious problems.
This is a subset of the possible conversion warnings, for the full set use
.Fl Wconversion .
.Pp
.It
Use of ISO C style function definitions.
This warning intentionally is
.Em not
issued for prototype declarations or variadic functions because these ISO C features will appear in your code when using libiberty's traditional C compatibility macros,
.Va PARAMS
and
.Va VPARAMS .
This warning is also bypassed for nested functions because that feature is already a GCC extension and thus not relevant to traditional C compatibility.
.Pp
.El
.It Fl Wdeclaration-after-statement (C only)
Warn when a declaration is found after a statement in a block.
This construct, known from C++, was introduced with ISO C99 and is by default allowed in GCC.
It is not supported by ISO C90 and was not supported by GCC versions before GCC 3.0.
.Pp
.It Fl Wundef
Warn if an undefined identifier is evaluated in an
.Sy #if
directive.
.Pp
.It Fl Wno-endif-labels
Do not warn whenever an
.Sy #else
or an
.Sy #endif
are followed by text.
.Pp
.It Fl Wshadow
Warn whenever a local variable shadows another local variable, parameter or global variable or whenever a built-in function is shadowed.
.Pp
.It Fl Wlarger-than- Ns Ar len
Warn whenever an object of larger than
.Em len
bytes is defined.
.Pp
.It Fl Wunsafe-loop-optimizations
Warn if the loop cannot be optimized because the compiler could not assume anything on the bounds of the loop indices.
With
.Fl funsafe-loop-optimizations
warn if the compiler made such assumptions.
.Pp
.It Fl Wpointer-arith
Warn about anything that depends on the "size of" a function type or of
.Va void .
GNU C assigns these types a size of 1, for convenience in calculations with
.Va void *
pointers and pointers to functions.
.Pp
.It Fl Wbad-function-cast (C only)
Warn whenever a function call is cast to a non-matching type.
For example, warn if
.Va int malloc()
is cast to
.Va anything * .
.Pp
.It Fl Wc++-compat
Warn about ISO C constructs that are outside of the common subset of ISO C and ISO C++, e.g. request for implicit conversion from
.Va void *
to a pointer to non-
.Va void
type.
.Pp
.It Fl Wcast-qual
Warn whenever a pointer is cast so as to remove a type qualifier from the target type.
For example, warn if a
.Va const char *
is cast to an ordinary
.Va char * .
.Pp
.It Fl Wcast-align
Warn whenever a pointer is cast such that the required alignment of the target is increased.
For example, warn if a
.Va char *
is cast to an
.Va int *
on machines where integers can only be accessed at two- or four-byte boundaries.
.Pp
.It Fl Wwrite-strings
When compiling C, give string constants the type
.Va const char [length]
so that copying the address of one into a non-
.Va const char *
pointer will get a warning; when compiling C++, warn about the deprecated conversion from string constants to
.Va char * .
These warnings will help you find at compile time code that can try to write into a string constant, but only if you have been very careful about using
.Va const
in declarations and prototypes.
Otherwise, it will just be a nuisance; this is why we did not make
.Fl Wall
request these warnings.
.Pp
.It Fl Wconversion
Warn if a prototype causes a type conversion that is different from what would happen to the same argument in the absence of a prototype.
This includes conversions of fixed point to floating and vice versa, and conversions changing the width or signedness of a fixed point argument except when the same as the default promotion.
.Pp
Also, warn if a negative integer constant expression is implicitly converted to an unsigned type.
For example, warn about the assignment
.Va x = -1
if
.Va x
is unsigned.
But do not warn about explicit casts like
.Va (unsigned) -1 .
.Pp
.It Fl Wsign-compare
Warn when a comparison between signed and unsigned values could produce an incorrect result when the signed value is converted to unsigned.
This warning is also enabled by
.Fl Wextra ;
to get the other warnings of
.Fl Wextra
without this warning, use
.Fl Wextra Fl Wno-sign-compare .
.Pp
.It Fl Waggregate-return
Warn if any functions that return structures or unions are defined or called.
(In languages where you can return an array, this also elicits a warning.)
.Pp
.It Fl Wno-attributes
Do not warn if an unexpected
.Va __attribute__
is used, such as unrecognized attributes, function attributes applied to variables, etc.
This will not stop errors for incorrect use of supported attributes.
.Pp
.It Fl Wstrict-prototypes (C only)
Warn if a function is declared or defined without specifying the argument types.
(An old-style function definition is permitted without a warning if preceded by a declaration which specifies the argument types.)
.Pp
.It Fl Wold-style-definition (C only)
Warn if an old-style function definition is used.
A warning is given even if there is a previous prototype.
.Pp
.It Fl Wmissing-prototypes (C only)
Warn if a global function is defined without a previous prototype declaration.
This warning is issued even if the definition itself provides a prototype.
The aim is to detect global functions that fail to be declared in header files.
.Pp
.It Fl Wmissing-declarations (C only)
Warn if a global function is defined without a previous declaration.
Do so even if the definition itself provides a prototype.
Use this option to detect global functions that are not declared in header files.
.Pp
.It Fl Wmissing-field-initializers
Warn if a structure's initializer has some fields missing.
For example, the following code would cause such a warning, because
.Va x.h
is implicitly zero:
.Pp
.Bd -literal -offset indent
struct s { int f, g, h; };
struct s x = { 3, 4 };
.Ed
This option does not warn about designated initializers, so the following modification would not trigger a warning:
.Pp
.Bd -literal -offset indent
struct s { int f, g, h; };
struct s x = { .f = 3, .g = 4 };
.Ed
This warning is included in
.Fl Wextra .
To get other
.Fl Wextra
warnings without this one, use
.Fl Wextra Fl Wno-missing-field-initializers .
.Pp
.It Fl Wmissing-noreturn
Warn about functions which might be candidates for attribute
.Va noreturn .
Note these are only possible candidates, not absolute ones.
Care should be taken to manually verify functions actually do not ever return before adding the
.Va noreturn
attribute, otherwise subtle code generation bugs could be introduced.
You will not get a warning for
.Va main
in hosted C environments.
.Pp
.It Fl Wmissing-format-attribute
Warn about function pointers which might be candidates for
.Va format
attributes.
Note these are only possible candidates, not absolute ones.
GCC will guess that function pointers with
.Va format
attributes that are used in assignment, initialization, parameter passing or return statements should have a corresponding
.Va format
attribute in the resulting type.
I.e. the left-hand side of the assignment or initialization, the type of the parameter variable, or the return type of the containing function respectively should also have a
.Va format
attribute to avoid the warning.
.Pp
GCC will also warn about function definitions which might be candidates for
.Va format
attributes.
Again, these are only possible candidates.
GCC will guess that
.Va format
attributes might be appropriate for any function that calls a function like
.Va vprintf
or
.Va vscanf ,
but this might not always be the case, and some functions for which
.Va format
attributes are appropriate may not be detected.
.Pp
.It Fl Wno-multichar
Do not warn if a multicharacter constant
.Sy ( 'FOOF' )
is used.
Usually they indicate a typo in the user's code, as they have implementation-defined values, and should not be used in portable code.
.Pp
.It Sy -Wnormalized=\*[Lt]none|id|nfc|nfkc\*[Gt] Ns
In ISO C and ISO C++, two identifiers are different if they are different sequences of characters.
However, sometimes when characters outside the basic ASCII character set are used, you can have two different character sequences that look the same.
To avoid confusion, the ISO 10646 standard sets out some
.Em normalization rules
which when applied ensure that two sequences that look the same are turned into the same sequence.
GCC can warn you if you are using identifiers which have not been normalized; this option controls that warning.
.Pp
There are four levels of warning that GCC supports.
The default is
.Fl Wnormalized=nfc ,
which warns about any identifier which is not in the ISO 10646 "C" normalized form,
.Em NFC .
NFC is the recommended form for most uses.
.Pp
Unfortunately, there are some characters which ISO C and ISO C++ allow in identifiers that when turned into NFC aren't allowable as identifiers.
That is, there's no way to use these symbols in portable ISO C or C++ and have all your identifiers in NFC.
.Fl Wnormalized=id
suppresses the warning for these characters.
It is hoped that future versions of the standards involved will correct this, which is why this option is not the default.
.Pp
You can switch the warning off for all characters by writing
.Fl Wnormalized=none .
You would only want to do this if you were using some other normalization scheme (like "D"), because otherwise you can easily create bugs that are literally impossible to see.
.Pp
Some characters in ISO 10646 have distinct meanings but look identical in some fonts or display methodologies, especially once formatting has been applied.
For instance
.Va \eu207F ,
"SUPERSCRIPT LATIN SMALL LETTER N", will display just like a regular
.Va n
which has been placed in a superscript.
ISO 10646 defines the
.Em NFKC
normalisation scheme to convert all these into a standard form as well, and GCC will warn if your code is not in NFKC if you use
.Fl Wnormalized=nfkc .
This warning is comparable to warning about every identifier that contains the letter O because it might be confused with the digit 0, and so is not the default, but may be useful as a local coding convention if the programming environment is unable to be fixed to display these characters distinctly.
.Pp
.It Fl Wno-deprecated-declarations
Do not warn about uses of functions, variables, and types marked as deprecated by using the
.Va deprecated
attribute.
(@pxref{Function Attributes}, @pxref{Variable Attributes}, @pxref{Type Attributes}.)
.Pp
.It Fl Wpacked
Warn if a structure is given the packed attribute, but the packed attribute has no effect on the layout or size of the structure.
Such structures may be mis-aligned for little benefit.
For instance, in this code, the variable
.Va f.x
in
.Va struct bar
will be misaligned even though
.Va struct bar
does not itself have the packed attribute:
.Pp
.Bd -literal -offset indent
struct foo {
  int x;
  char a, b, c, d;
} __attribute__((packed));
struct bar {
  char z;
  struct foo f;
};
.Ed
.It Fl Wpadded
Warn if padding is included in a structure, either to align an element of the structure or to align the whole structure.
Sometimes when this happens it is possible to rearrange the fields of the structure to reduce the padding and so make the structure smaller.
.Pp
.It Fl Wredundant-decls
Warn if anything is declared more than once in the same scope, even in cases where multiple declaration is valid and changes nothing.
.Pp
.It Fl Wnested-externs (C only)
Warn if an
.Va extern
declaration is encountered within a function.
.Pp
.It Fl Wunreachable-code
Warn if the compiler detects that code will never be executed.
.Pp
This option is intended to warn when the compiler detects that at least a whole line of source code will never be executed, because some condition is never satisfied or because it is after a procedure that never returns.
.Pp
It is possible for this option to produce a warning even though there are circumstances under which part of the affected line can be executed, so care should be taken when removing apparently-unreachable code.
.Pp
For instance, when a function is inlined, a warning may mean that the line is unreachable in only one inlined copy of the function.
.Pp
This option is not made part of
.Fl Wall
because in a debugging version of a program there is often substantial code which checks correct functioning of the program and is, hopefully, unreachable because the program does work.
Another common use of unreachable code is to provide behavior which is selectable at compile-time.
.Pp
.It Fl Winline
Warn if a function can not be inlined and it was declared as inline.
Even with this option, the compiler will not warn about failures to inline functions declared in system headers.
.Pp
The compiler uses a variety of heuristics to determine whether or not to inline a function.
For example, the compiler takes into account the size of the function being inlined and the amount of inlining that has already been done in the current function.
Therefore, seemingly insignificant changes in the source program can cause the warnings produced by
.Fl Winline
to appear or disappear.
.Pp
.It Fl Wno-invalid-offsetof (C++ only)
Suppress warnings from applying the
.Sy offsetof
macro to a non-POD type.
According to the 1998 ISO C++ standard, applying
.Sy offsetof
to a non-POD type is undefined.
In existing C++ implementations, however,
.Sy offsetof
typically gives meaningful results even when applied to certain kinds of non-POD types. (Such as a simple
.Sy struct
that fails to be a POD type only by virtue of having a constructor.) This flag is for users who are aware that they are writing nonportable code and who have deliberately chosen to ignore the warning about it.
.Pp
The restrictions on
.Sy offsetof
may be relaxed in a future version of the C++ standard.
.Pp
.It Fl Wno-int-to-pointer-cast (C only)
Suppress warnings from casts to pointer type of an integer of a different size.
.Pp
.It Fl Wno-pointer-to-int-cast (C only)
Suppress warnings from casts from a pointer to an integer type of a different size.
.Pp
.It Fl Winvalid-pch
Warn if a precompiled header is found in the search path but can't be used.
.Pp
.It Fl Wlong-long
Warn if
.Sy long long
type is used.
This is default.
To inhibit the warning messages, use
.Fl Wno-long-long .
Flags
.Fl Wlong-long
and
.Fl Wno-long-long
are taken into account only when
.Fl pedantic
flag is used.
.Pp
.It Fl Wvariadic-macros
Warn if variadic macros are used in pedantic ISO C90 mode, or the GNU alternate syntax when in pedantic ISO C99 mode.
This is default.
To inhibit the warning messages, use
.Fl Wno-variadic-macros .
.Pp
.It Fl Wvolatile-register-var
Warn if a register variable is declared volatile.
The volatile modifier does not inhibit all optimizations that may eliminate reads and/or writes to register variables.
.Pp
.It Fl Wdisabled-optimization
Warn if a requested optimization pass is disabled.
This warning does not generally indicate that there is anything wrong with your code; it merely indicates that GCC's optimizers were unable to handle the code effectively.
Often, the problem is that your code is too big or too complex; GCC will refuse to optimize programs when the optimization itself is likely to take inordinate amounts of time.
.Pp
.It Fl Wpointer-sign
Warn for pointer argument passing or assignment with different signedness.
This option is only supported for C and Objective-C.
It is implied by
.Fl Wall
and by
.Fl pedantic ,
which can be disabled with
.Fl Wno-pointer-sign .
.Pp
.It Fl Werror
Make all warnings into errors.
.Pp
.It Fl Wstack-protector
This option is only active when
.Fl fstack-protector
is active.
It warns about functions that will not be protected against stack smashing.
.Pp
.El
.Ss Options for Debugging Your Program or GCC
GCC has various special options that are used for debugging either your program or GCC:
.Pp
.Bl -tag -width xx
.It Fl g
Produce debugging information in the operating system's native format (stabs, COFF, XCOFF, or DWARF 2).
GDB can work with this debugging information.
.Pp
On most systems that use stabs format,
.Fl g
enables use of extra debugging information that only GDB can use; this extra information makes debugging work better in GDB but will probably make other debuggers crash or refuse to read the program.
If you want to control for certain whether to generate the extra information, use
.Fl gstabs+ ,
.Fl gstabs ,
.Fl gxcoff+ ,
.Fl gxcoff ,
or
.Fl gvms
(see below).
.Pp
GCC allows you to use
.Fl g
with
.Fl O .
The shortcuts taken by optimized code may occasionally produce surprising results: some variables you declared may not exist at all; flow of control may briefly move where you did not expect it; some statements may not be executed because they compute constant results or their values were already at hand; some statements may execute in different places because they were moved out of loops.
.Pp
Nevertheless it proves possible to debug optimized output.
This makes it reasonable to use the optimizer for programs that might have bugs.
.Pp
The following options are useful when GCC is generated with the capability for more than one debugging format.
.Pp
.It Fl ggdb
Produce debugging information for use by GDB.
This means to use the most expressive format available (DWARF 2, stabs, or the native format if neither of those are supported), including GDB extensions if at all possible.
.Pp
.It Fl gstabs
Produce debugging information in stabs format (if that is supported), without GDB extensions.
This is the format used by DBX on most BSD systems.
On MIPS, Alpha and System V Release 4 systems this option produces stabs debugging output which is not understood by DBX or SDB.
On System V Release 4 systems this option requires the GNU assembler.
.Pp
.It Fl feliminate-unused-debug-symbols
Produce debugging information in stabs format (if that is supported), for only symbols that are actually used.
.Pp
.It Fl gstabs+
Produce debugging information in stabs format (if that is supported), using GNU extensions understood only by the GNU debugger (GDB).
The use of these extensions is likely to make other debuggers crash or refuse to read the program.
.Pp
.It Fl gcoff
Produce debugging information in COFF format (if that is supported).
This is the format used by SDB on most System V systems prior to System V Release 4.
.Pp
.It Fl gxcoff
Produce debugging information in XCOFF format (if that is supported).
This is the format used by the DBX debugger on IBM RS/6000 systems.
.Pp
.It Fl gxcoff+
Produce debugging information in XCOFF format (if that is supported), using GNU extensions understood only by the GNU debugger (GDB).
The use of these extensions is likely to make other debuggers crash or refuse to read the program, and may cause assemblers other than the GNU assembler (GAS) to fail with an error.
.Pp
.It Fl gdwarf-2
Produce debugging information in DWARF version 2 format (if that is supported).
This is the format used by DBX on IRIX 6.
With this option, GCC uses features of DWARF version 3 when they are useful; version 3 is upward compatible with version 2, but may still cause problems for older debuggers.
.Pp
.It Fl gvms
Produce debugging information in VMS debug format (if that is supported).
This is the format used by DEBUG on VMS systems.
.Pp
.It Fl g Ns Ar level
.It Fl ggdb Ns Ar level
.It Fl gstabs Ns Ar level
.It Fl gcoff Ns Ar level
.It Fl gxcoff Ns Ar level
.It Fl gvms Ns Ar level
Request debugging information and also use
.Em level
to specify how much information.
The default level is 2.
.Pp
Level 1 produces minimal information, enough for making backtraces in parts of the program that you don't plan to debug.
This includes descriptions of functions and external variables, but no information about local variables and no line numbers.
.Pp
Level 3 includes extra information, such as all the macro definitions present in the program.
Some debuggers support macro expansion when you use
.Fl g3 .
.Pp
.Fl gdwarf-2
does not accept a concatenated debug level, because GCC used to support an option
.Fl gdwarf
that meant to generate debug information in version 1 of the DWARF format (which is very different from version 2), and it would have been too confusing.
That debug format is long obsolete, but the option cannot be changed now.
Instead use an additional
.Fl g Ns Ar level
option to change the debug level for DWARF2.
.Pp
.It Fl feliminate-dwarf2-dups
Compress DWARF2 debugging information by eliminating duplicated information about each symbol.
This option only makes sense when generating DWARF2 debugging information with
.Fl gdwarf-2 .
.Pp
.It Fl p
Generate extra code to write profile information suitable for the analysis program
.Sy prof .
You must use this option when compiling the source files you want data about, and you must also use it when linking.
.Pp
.It Fl pg
Generate extra code to write profile information suitable for the analysis program
.Sy gprof .
You must use this option when compiling the source files you want data about, and you must also use it when linking.
.Pp
.It Fl Q
Makes the compiler print out each function name as it is compiled, and print some statistics about each pass when it finishes.
.Pp
.It Fl ftime-report
Makes the compiler print some statistics about the time consumed by each pass when it finishes.
.Pp
.It Fl fmem-report
Makes the compiler print some statistics about permanent memory allocation when it finishes.
.Pp
.It Fl fprofile-arcs
Add code so that program flow
.Em arcs
are instrumented.
During execution the program records how many times each branch and call is executed and how many times it is taken or returns.
When the compiled program exits it saves this data to a file called
.Pa auxname.gcda
for each source file.
The data may be used for profile-directed optimizations
.Fl ( fbranch-probabilities ) ,
or for test coverage analysis
.Fl ( ftest-coverage ) .
Each object file's
.Em auxname
is generated from the name of the output file, if explicitly specified and it is not the final executable, otherwise it is the basename of the source file.
In both cases any suffix is removed (e.g.
.Pa foo.gcda
for input file
.Pa dir/foo.c ,
or
.Pa dir/foo.gcda
for output file specified as
.Sy -o dir/foo.o ) .
.Pp
.It Fl -coverage
This option is used to compile and link code instrumented for coverage analysis.
The option is a synonym for
.Fl fprofile-arcs
.Fl ftest-coverage
(when compiling) and
.Fl lgcov
(when linking).
See the documentation for those options for more details.
.Pp
.Bl -tag -width xx
.It @bullet
Compile the source files with
.Fl fprofile-arcs
plus optimization and code generation options.
For test coverage analysis, use the additional
.Fl ftest-coverage
option.
You do not need to profile every source file in a program.
.Pp
.It @cvmmfu
Link your object files with
.Fl lgcov
or
.Fl fprofile-arcs
(the latter implies the former).
.Pp
.It @dwnngv
Run the program on a representative workload to generate the arc profile information.
This may be repeated any number of times.
You can run concurrent instances of your program, and provided that the file system supports locking, the data files will be correctly updated.
Also
.Va fork
calls are detected and correctly handled (double counting will not happen).
.Pp
.It @exoohw
For profile-directed optimizations, compile the source files again with the same optimization and code generation options plus
.Fl fbranch-probabilities .
.Pp
.It @fyppix
For test coverage analysis, use
.Sy gcov
to produce human readable information from the
.Pa .gcno
and
.Pa .gcda
files.
Refer to the
.Sy gcov
documentation for further information.
.Pp
.El
With
.Fl fprofile-arcs ,
for each function of your program GCC creates a program flow graph, then finds a spanning tree for the graph.
Only arcs that are not on the spanning tree have to be instrumented: the compiler adds code to count the number of times that these arcs are executed.
When an arc is the only exit or only entrance to a block, the instrumentation code can be added to the block; otherwise, a new basic block must be created to hold the instrumentation code.
.Pp
.It Fl ftest-coverage
Produce a notes file that the
.Sy gcov
code-coverage utility can use to show program coverage.
Each source file's note file is called
.Pa auxname.gcno .
Refer to the
.Fl fprofile-arcs
option above for a description of
.Em auxname
and instructions on how to generate test coverage data.
Coverage data will match the source files more closely, if you do not optimize.
.Pp
.It Fl d Ns Ar letters
.It Fl fdump-rtl- Ns Ar pass
Says to make debugging dumps during compilation at times specified by
.Em letters .
This is used for debugging the RTL-based passes of the compiler.
The file names for most of the dumps are made by appending a pass number and a word to the
.Em dumpname .
.Em dumpname
is generated from the name of the output file, if explicitly specified and it is not an executable, otherwise it is the basename of the source file.
.Pp
Most debug dumps can be enabled either passing a letter to the
.Fl d
option, or with a long
.Fl fdump-rtl
switch; here are the possible letters for use in
.Em letters
and
.Em pass ,
and their meanings:
.Pp
.Bl -tag -width xx
.It Fl dA
Annotate the assembler output with miscellaneous debugging information.
.Pp
.It Fl db
.It Fl fdump-rtl-bp
Dump after computing branch probabilities, to
.Pa file.09.bp .
.Pp
.It Fl dB
.It Fl fdump-rtl-bbro
Dump after block reordering, to
.Pa file.30.bbro .
.Pp
.It Fl dc
.It Fl fdump-rtl-combine
Dump after instruction combination, to the file
.Pa file.17.combine .
.Pp
.It Fl dC
.It Fl fdump-rtl-ce1
.It Fl fdump-rtl-ce2
.Fl dC
and
.Fl fdump-rtl-ce1
enable dumping after the first if conversion, to the file
.Pa file.11.ce1 .
.Fl dC
and
.Fl fdump-rtl-ce2
enable dumping after the second if conversion, to the file
.Pa file.18.ce2 .
.Pp
.It Fl dd
.It Fl fdump-rtl-btl
.It Fl fdump-rtl-dbr
.Fl dd
and
.Fl fdump-rtl-btl
enable dumping after branch target load optimization, to
.Pa file.31.btl .
.Fl dd
and
.Fl fdump-rtl-dbr
enable dumping after delayed branch scheduling, to
.Pa file.36.dbr .
.Pp
.It Fl dD
Dump all macro definitions, at the end of preprocessing, in addition to normal output.
.Pp
.It Fl dE
.It Fl fdump-rtl-ce3
Dump after the third if conversion, to
.Pa file.28.ce3 .
.Pp
.It Fl df
.It Fl fdump-rtl-cfg
.It Fl fdump-rtl-life
.Fl df
and
.Fl fdump-rtl-cfg
enable dumping after control and data flow analysis, to
.Pa file.08.cfg .
.Fl df
and
.Fl fdump-rtl-cfg
enable dumping dump after life analysis, to
.Pa file.16.life .
.Pp
.It Fl dg
.It Fl fdump-rtl-greg
Dump after global register allocation, to
.Pa file.23.greg .
.Pp
.It Fl dG
.It Fl fdump-rtl-gcse
.It Fl fdump-rtl-bypass
.Fl dG
and
.Fl fdump-rtl-gcse
enable dumping after GCSE, to
.Pa file.05.gcse .
.Fl dG
and
.Fl fdump-rtl-bypass
enable dumping after jump bypassing and control flow optimizations, to
.Pa file.07.bypass .
.Pp
.It Fl dh
.It Fl fdump-rtl-eh
Dump after finalization of EH handling code, to
.Pa file.02.eh .
.Pp
.It Fl di
.It Fl fdump-rtl-sibling
Dump after sibling call optimizations, to
.Pa file.01.sibling .
.Pp
.It Fl dj
.It Fl fdump-rtl-jump
Dump after the first jump optimization, to
.Pa file.03.jump .
.Pp
.It Fl dk
.It Fl fdump-rtl-stack
Dump after conversion from registers to stack, to
.Pa file.33.stack .
.Pp
.It Fl dl
.It Fl fdump-rtl-lreg
Dump after local register allocation, to
.Pa file.22.lreg .
.Pp
.It Fl dL
.It Fl fdump-rtl-loop
.It Fl fdump-rtl-loop2
.Fl dL
and
.Fl fdump-rtl-loop
enable dumping after the first loop optimization pass, to
.Pa file.06.loop .
.Fl dL
and
.Fl fdump-rtl-loop2
enable dumping after the second pass, to
.Pa file.13.loop2 .
.Pp
.It Fl dm
.It Fl fdump-rtl-sms
Dump after modulo scheduling, to
.Pa file.20.sms .
.Pp
.It Fl dM
.It Fl fdump-rtl-mach
Dump after performing the machine dependent reorganization pass, to
.Pa file.35.mach .
.Pp
.It Fl dn
.It Fl fdump-rtl-rnreg
Dump after register renumbering, to
.Pa file.29.rnreg .
.Pp
.It Fl dN
.It Fl fdump-rtl-regmove
Dump after the register move pass, to
.Pa file.19.regmove .
.Pp
.It Fl do
.It Fl fdump-rtl-postreload
Dump after post-reload optimizations, to
.Pa file.24.postreload .
.Pp
.It Fl dr
.It Fl fdump-rtl-expand
Dump after RTL generation, to
.Pa file.00.expand .
.Pp
.It Fl dR
.It Fl fdump-rtl-sched2
Dump after the second scheduling pass, to
.Pa file.32.sched2 .
.Pp
.It Fl ds
.It Fl fdump-rtl-cse
Dump after CSE (including the jump optimization that sometimes follows CSE), to
.Pa file.04.cse .
.Pp
.It Fl dS
.It Fl fdump-rtl-sched
Dump after the first scheduling pass, to
.Pa file.21.sched .
.Pp
.It Fl dt
.It Fl fdump-rtl-cse2
Dump after the second CSE pass (including the jump optimization that sometimes follows CSE), to
.Pa file.15.cse2 .
.Pp
.It Fl dT
.It Fl fdump-rtl-tracer
Dump after running tracer, to
.Pa file.12.tracer .
.Pp
.It Fl dV
.It Fl fdump-rtl-vpt
.It Fl fdump-rtl-vartrack
.Fl dV
and
.Fl fdump-rtl-vpt
enable dumping after the value profile transformations, to
.Pa file.10.vpt .
.Fl dV
and
.Fl fdump-rtl-vartrack
enable dumping after variable tracking, to
.Pa file.34.vartrack .
.Pp
.It Fl dw
.It Fl fdump-rtl-flow2
Dump after the second flow pass, to
.Pa file.26.flow2 .
.Pp
.It Fl dz
.It Fl fdump-rtl-peephole2
Dump after the peephole pass, to
.Pa file.27.peephole2 .
.Pp
.It Fl dZ
.It Fl fdump-rtl-web
Dump after live range splitting, to
.Pa file.14.web .
.Pp
.It Fl da
.It Fl fdump-rtl-all
Produce all the dumps listed above.
.Pp
.It Fl dH
Produce a core dump whenever an error occurs.
.Pp
.It Fl dm
Print statistics on memory usage, at the end of the run, to standard error.
.Pp
.It Fl dp
Annotate the assembler output with a comment indicating which pattern and alternative was used.
The length of each instruction is also printed.
.Pp
.It Fl dP
Dump the RTL in the assembler output as a comment before each instruction.
Also turns on
.Fl dp
annotation.
.Pp
.It Fl dv
For each of the other indicated dump files (either with
.Fl d
or
.Fl fdump-rtl- Ns Ar pass ) ,
dump a representation of the control flow graph suitable for viewing with VCG to
.Pa file.pass.vcg .
.Pp
.It Fl dx
Just generate RTL for a function instead of compiling it.
Usually used with
.Sy r
.Fl ( fdump-rtl-expand ) .
.Pp
.It Fl dy
Dump debugging information during parsing, to standard error.
.Pp
.El
.It Fl fdump-unnumbered
When doing debugging dumps (see
.Fl d
option above), suppress instruction numbers and line number note output.
This makes it more feasible to use diff on debugging dumps for compiler invocations with different options, in particular with and without
.Fl g .
.Pp
.It Fl fdump-translation-unit (C++ only)
.It Fl fdump-translation-unit- Ns Ar options \~(C++ only)
Dump a representation of the tree structure for the entire translation unit to a file.
The file name is made by appending
.Pa .tu
to the source file name.
If the
.Sy -
.Em options
form is used,
.Em options
controls the details of the dump as described for the
.Fl fdump-tree
options.
.Pp
.It Fl fdump-class-hierarchy (C++ only)
.It Fl fdump-class-hierarchy- Ns Ar options \~(C++ only)
Dump a representation of each class's hierarchy and virtual function table layout to a file.
The file name is made by appending
.Pa .class
to the source file name.
If the
.Sy -
.Em options
form is used,
.Em options
controls the details of the dump as described for the
.Fl fdump-tree
options.
.Pp
.It Fl fdump-ipa- Ns Ar switch
Control the dumping at various stages of inter-procedural analysis language tree to a file.
The file name is generated by appending a switch specific suffix to the source file name.
The following dumps are possible:
.Pp
.Bl -tag -width xx
.It Sy all Ns
Enables all inter-procedural analysis dumps; currently the only produced dump is the
.Sy cgraph
dump.
.Pp
.It Sy cgraph Ns
Dumps information about call-graph optimization, unused function removal, and inlining decisions.
.Pp
.El
.It Fl fdump-tree- Ns Ar switch
.It Fl fdump-tree- Ns Ar switch Ns - Ns Ar options
Control the dumping at various stages of processing the intermediate language tree to a file.
The file name is generated by appending a switch specific suffix to the source file name.
If the
.Sy -
.Em options
form is used,
.Em options
is a list of
.Sy -
separated options that control the details of the dump.
Not all options are applicable to all dumps, those which are not meaningful will be ignored.
The following options are available
.Pp
.Bl -tag -width xx
.It Sy address Ns
Print the address of each node.
Usually this is not meaningful as it changes according to the environment and source file.
Its primary use is for tying up a dump file with a debug environment.
.Pp
.It Sy slim Ns
Inhibit dumping of members of a scope or body of a function merely because that scope has been reached.
Only dump such items when they are directly reachable by some other path.
When dumping pretty-printed trees, this option inhibits dumping the bodies of control structures.
.Pp
.It Sy raw Ns
Print a raw representation of the tree.
By default, trees are pretty-printed into a C-like representation.
.Pp
.It Sy details Ns
Enable more detailed dumps (not honored by every dump option).
.Pp
.It Sy stats Ns
Enable dumping various statistics about the pass (not honored by every dump option).
.Pp
.It Sy blocks Ns
Enable showing basic block boundaries (disabled in raw dumps).
.Pp
.It Sy vops Ns
Enable showing virtual operands for every statement.
.Pp
.It Sy lineno Ns
Enable showing line numbers for statements.
.Pp
.It Sy uid Ns
Enable showing the unique ID
.Va ( DECL_UID )
for each variable.
.Pp
.It Sy all Ns
Turn on all options, except
.Sy raw ,
.Sy slim
and
.Sy lineno .
.Pp
.El
The following tree dumps are possible:
.Pp
.Bl -tag -width xx
.It Sy original Ns
Dump before any tree based optimization, to
.Pa file.original .
.Pp
.It Sy optimized Ns
Dump after all tree based optimization, to
.Pa file.optimized .
.Pp
.It Sy inlined Ns
Dump after function inlining, to
.Pa file.inlined .
.Pp
.It Sy gimple Ns
Dump each function before and after the gimplification pass to a file.
The file name is made by appending
.Pa .gimple
to the source file name.
.Pp
.It Sy cfg Ns
Dump the control flow graph of each function to a file.
The file name is made by appending
.Pa .cfg
to the source file name.
.Pp
.It Sy vcg Ns
Dump the control flow graph of each function to a file in VCG format.
The file name is made by appending
.Pa .vcg
to the source file name.
Note that if the file contains more than one function, the generated file cannot be used directly by VCG.
You will need to cut and paste each function's graph into its own separate file first.
.Pp
.It Sy ch Ns
Dump each function after copying loop headers.
The file name is made by appending
.Pa .ch
to the source file name.
.Pp
.It Sy ssa Ns
Dump SSA related information to a file.
The file name is made by appending
.Pa .ssa
to the source file name.
.Pp
.It Sy salias Ns
Dump structure aliasing variable information to a file.
This file name is made by appending
.Pa .salias
to the source file name.
.Pp
.It Sy alias Ns
Dump aliasing information for each function.
The file name is made by appending
.Pa .alias
to the source file name.
.Pp
.It Sy ccp Ns
Dump each function after CCP.
The file name is made by appending
.Pa .ccp
to the source file name.
.Pp
.It Sy storeccp Ns
Dump each function after STORE-CCP.
The file name is made by appending
.Pa .storeccp
to the source file name.
.Pp
.It Sy pre Ns
Dump trees after partial redundancy elimination.
The file name is made by appending
.Pa .pre
to the source file name.
.Pp
.It Sy fre Ns
Dump trees after full redundancy elimination.
The file name is made by appending
.Pa .fre
to the source file name.
.Pp
.It Sy copyprop Ns
Dump trees after copy propagation.
The file name is made by appending
.Pa .copyprop
to the source file name.
.Pp
.It Sy store_copyprop Ns
Dump trees after store copy-propagation.
The file name is made by appending
.Pa .store_copyprop
to the source file name.
.Pp
.It Sy dce Ns
Dump each function after dead code elimination.
The file name is made by appending
.Pa .dce
to the source file name.
.Pp
.It Sy mudflap Ns
Dump each function after adding mudflap instrumentation.
The file name is made by appending
.Pa .mudflap
to the source file name.
.Pp
.It Sy sra Ns
Dump each function after performing scalar replacement of aggregates.
The file name is made by appending
.Pa .sra
to the source file name.
.Pp
.It Sy sink Ns
Dump each function after performing code sinking.
The file name is made by appending
.Pa .sink
to the source file name.
.Pp
.It Sy dom Ns
Dump each function after applying dominator tree optimizations.
The file name is made by appending
.Pa .dom
to the source file name.
.Pp
.It Sy dse Ns
Dump each function after applying dead store elimination.
The file name is made by appending
.Pa .dse
to the source file name.
.Pp
.It Sy phiopt Ns
Dump each function after optimizing PHI nodes into straightline code.
The file name is made by appending
.Pa .phiopt
to the source file name.
.Pp
.It Sy forwprop Ns
Dump each function after forward propagating single use variables.
The file name is made by appending
.Pa .forwprop
to the source file name.
.Pp
.It Sy copyrename Ns
Dump each function after applying the copy rename optimization.
The file name is made by appending
.Pa .copyrename
to the source file name.
.Pp
.It Sy nrv Ns
Dump each function after applying the named return value optimization on generic trees.
The file name is made by appending
.Pa .nrv
to the source file name.
.Pp
.It Sy vect Ns
Dump each function after applying vectorization of loops.
The file name is made by appending
.Pa .vect
to the source file name.
.Pp
.It Sy vrp Ns
Dump each function after Value Range Propagation (VRP).
The file name is made by appending
.Pa .vrp
to the source file name.
.Pp
.It Sy all Ns
Enable all the available tree dumps with the flags provided in this option.
.Pp
.El
.It Fl ftree-vectorizer-verbose= Ns Ar n
This option controls the amount of debugging output the vectorizer prints.
This information is written to standard error, unless
.Fl fdump-tree-all
or
.Fl fdump-tree-vect
is specified, in which case it is output to the usual dump listing file,
.Pa .vect .
.Pp
.It Fl frandom-seed= Ns Ar string
This option provides a seed that GCC uses when it would otherwise use random numbers.
It is used to generate certain symbol names that have to be different in every compiled file.
It is also used to place unique stamps in coverage data files and the object files that produce them.
You can use the
.Fl frandom-seed
option to produce reproducibly identical object files.
.Pp
The
.Em string
should be different for every file you compile.
.Pp
.It Fl fsched-verbose= Ns Ar n
On targets that use instruction scheduling, this option controls the amount of debugging output the scheduler prints.
This information is written to standard error, unless
.Fl dS
or
.Fl dR
is specified, in which case it is output to the usual dump listing file,
.Pa .sched
or
.Pa .sched2
respectively.
However for
.Em n
greater than nine, the output is always printed to standard error.
.Pp
For
.Em n
greater than zero,
.Fl fsched-verbose
outputs the same information as
.Fl dRS .
For
.Em n
greater than one, it also output basic block probabilities, detailed ready list information and unit/insn info.
For
.Em n
greater than two, it includes RTL at abort point, control-flow and regions info.
And for
.Em n
over four,
.Fl fsched-verbose
also includes dependence info.
.Pp
.It Fl save-temps
Store the usual "temporary" intermediate files permanently; place them in the current directory and name them based on the source file.
Thus, compiling
.Pa foo.c
with
.Fl c Fl save-temps
would produce files
.Pa foo.i
and
.Pa foo.s ,
as well as
.Pa foo.o .
This creates a preprocessed
.Pa foo.i
output file even though the compiler now normally uses an integrated preprocessor.
.Pp
When used in combination with the
.Fl x
command line option,
.Fl save-temps
is sensible enough to avoid over writing an input source file with the same extension as an intermediate file.
The corresponding intermediate file may be obtained by renaming the source file before using
.Fl save-temps .
.Pp
.It Fl time
Report the CPU time taken by each subprocess in the compilation sequence.
For C source files, this is the compiler proper and assembler (plus the linker if linking is done).
The output looks like this:
.Pp
.Bd -literal -offset indent
# cc1 0.12 0.01
# as 0.00 0.01
.Ed
The first number on each line is the "user time", that is time spent executing the program itself.
The second number is "system time", time spent executing operating system routines on behalf of the program.
Both numbers are in seconds.
.Pp
.It Fl fvar-tracking
Run variable tracking pass.
It computes where variables are stored at each position in code.
Better debugging information is then generated (if the debugging information format supports this information).
.Pp
It is enabled by default when compiling with optimization
.Fl ( \&Os ,
.Fl O ,
.Fl O2 , . . . ) ,
debugging information
.Fl ( g )
and the debug info format supports it.
.Pp
.It Fl print-file-name= Ns Ar library
Print the full absolute name of the library file
.Em library
that would be used when linking---and don't do anything else.
With this option, GCC does not compile or link anything; it just prints the file name.
.Pp
.It Fl print-multi-directory
Print the directory name corresponding to the multilib selected by any other switches present in the command line.
This directory is supposed to exist in
.Sy GCC_EXEC_PREFIX .
.Pp
.It Fl print-multi-lib
Print the mapping from multilib directory names to compiler switches that enable them.
The directory name is separated from the switches by
.Sy ; ,
and each switch starts with an
.Sy @} instead of the @samp{- ,
without spaces between multiple switches.
This is supposed to ease shell-processing.
.Pp
.It Fl print-prog-name= Ns Ar program
Like
.Fl print-file-name ,
but searches for a program such as
.Sy cpp .
.Pp
.It Fl print-libgcc-file-name
Same as
.Sy -print-file-name=libgcc.a .
.Pp
This is useful when you use
.Fl nostdlib
or
.Fl nodefaultlibs
but you do want to link with
.Pa libgcc.a .
You can do
.Pp
.Bd -literal -offset indent
gcc -nostdlib \*[Lt]files\*[Gt]... `gcc -print-libgcc-file-name`
.Ed
.It Fl print-search-dirs
Print the name of the configured installation directory and a list of program and library directories
.Nm gcc
will search---and don't do anything else.
.Pp
This is useful when
.Nm gcc
prints the error message
.Sy installation problem, cannot exec cpp0: No such file or directory .
To resolve this you either need to put
.Pa cpp0
and the other compiler components where
.Nm gcc
expects to find them, or you can set the environment variable
.Sy GCC_EXEC_PREFIX
to the directory where you installed them.
Don't forget the trailing
.Sy / .
.Pp
.It Fl dumpmachine
Print the compiler's target machine (for example,
.Sy i686-pc-linux-gnu )
---and don't do anything else.
.Pp
.It Fl dumpversion
Print the compiler version (for example,
.Sy 3.0 )
---and don't do anything else.
.Pp
.It Fl dumpspecs
Print the compiler's built-in specs---and don't do anything else.
(This is used when GCC itself is being built.)
.Pp
.It Fl feliminate-unused-debug-types
Normally, when producing DWARF2 output, GCC will emit debugging information for all types declared in a compilation unit, regardless of whether or not they are actually used in that compilation unit.
Sometimes this is useful, such as if, in the debugger, you want to cast a value to a type that is not actually used in your program (but is declared).
More often, however, this results in a significant amount of wasted space.
With this option, GCC will avoid producing debug symbol output for types that are nowhere used in the source file being compiled.
.Pp
.El
.Ss Options That Control Optimization
These options control various sorts of optimizations.
.Pp
Without any optimization option, the compiler's goal is to reduce the cost of compilation and to make debugging produce the expected results.
Statements are independent: if you stop the program with a breakpoint between statements, you can then assign a new value to any variable or change the program counter to any other statement in the function and get exactly the results you would expect from the source code.
.Pp
Turning on optimization flags makes the compiler attempt to improve the performance and/or code size at the expense of compilation time and possibly the ability to debug the program.
.Pp
The compiler performs optimization based on the knowledge it has of the program.
Optimization levels
.Fl O
and above, in particular, enable
.Em unit-at-a-time
mode, which allows the compiler to consider information gained from later functions in the file when compiling a function.
Compiling multiple files at once to a single output file in
.Em unit-at-a-time
mode allows the compiler to use information gained from all of the files when compiling each of them.
.Pp
Not all optimizations are controlled directly by a flag.
Only optimizations that have a flag are listed.
.Pp
.Bl -tag -width xx
.It Fl O
.It Fl O1
Optimize.
Optimizing compilation takes somewhat more time, and a lot more memory for a large function.
.Pp
With
.Fl O ,
the compiler tries to reduce code size and execution time, without performing any optimizations that take a great deal of compilation time.
.Pp
.Fl O
turns on the following optimization flags:
.Fl fdefer-pop Fl fdelayed-branch Fl fguess-branch-probability Fl fcprop-registers Fl floop-optimize Fl fif-conversion Fl fif-conversion2 Fl ftree-ccp Fl ftree-dce Fl ftree-dominator-opts Fl ftree-dse Fl ftree-ter Fl ftree-lrs Fl ftree-sra Fl ftree-copyrename Fl ftree-fre Fl ftree-ch Fl funit-at-a-time Fl fmerge-constants
.Pp
.Fl O
also turns on
.Fl fomit-frame-pointer
on machines where doing so does not interfere with debugging.
.Pp
.Fl O
doesn't turn on
.Fl ftree-sra
for the Ada compiler.
This option must be explicitly specified on the command line to be enabled for the Ada compiler.
.Pp
.It Fl O2
Optimize even more.
GCC performs nearly all supported optimizations that do not involve a space-speed tradeoff.
The compiler does not perform loop unrolling or function inlining when you specify
.Fl O2 .
As compared to
.Fl O ,
this option increases both compilation time and the performance of the generated code.
.Pp
.Fl O2
turns on all optimization flags specified by
.Fl O .
It also turns on the following optimization flags:
.Fl fthread-jumps Fl fcrossjumping Fl foptimize-sibling-calls Fl fcse-follow-jumps Fl fcse-skip-blocks Fl fgcse Fl fgcse-lm Fl fexpensive-optimizations Fl fstrength-reduce Fl frerun-cse-after-loop Fl frerun-loop-opt Fl fcaller-saves Fl fpeephole2 Fl fschedule-insns Fl fschedule-insns2 Fl fsched-interblock Fl fsched-spec Fl fregmove Fl fstrict-aliasing Fl fdelete-null-pointer-checks Fl freorder-blocks Fl freorder-functions Fl falign-functions Fl falign-jumps Fl falign-loops Fl falign-labels Fl ftree-vrp Fl ftree-pre
.Pp
Please note the warning under
.Fl fgcse
about invoking
.Fl O2
on programs that use computed gotos.
.Pp
.It Fl O3
Optimize yet more.
.Fl O3
turns on all optimizations specified by
.Fl O2
and also turns on the
.Fl finline-functions ,
.Fl funswitch-loops
and
.Fl fgcse-after-reload
options.
.Pp
.It Fl O0
Do not optimize.
This is the default.
.Pp
.It Fl \&Os
Optimize for size.
.Fl \&Os
enables all
.Fl O2
optimizations that do not typically increase code size.
It also performs further optimizations designed to reduce code size.
.Pp
.Fl \&Os
disables the following optimization flags:
.Fl falign-functions Fl falign-jumps Fl falign-loops Fl falign-labels Fl freorder-blocks Fl freorder-blocks-and-partition Fl fprefetch-loop-arrays Fl ftree-vect-loop-version
.Pp
If you use multiple
.Fl O
options, with or without level numbers, the last such option is the one that is effective.
.Pp
.El
Options of the form
.Fl f Ns Ar flag
specify machine-independent flags.
Most flags have both positive and negative forms; the negative form of
.Fl ffoo
would be
.Fl fno-foo .
In the table below, only one of the forms is listed---the one you typically will use.
You can figure out the other form by either removing
.Sy no-
or adding it.
.Pp
The following options control specific optimizations.
They are either activated by
.Fl O
options or are related to ones that are.
You can use the following flags in the rare cases when "fine-tuning" of optimizations to be performed is desired.
.Pp
.Bl -tag -width xx
.It Fl fno-default-inline
Do not make member functions inline by default merely because they are defined inside the class scope (C++ only).
Otherwise, when you specify
.Fl O ,
member functions defined inside class scope are compiled inline by default; i.e., you don't need to add
.Sy inline
in front of the member function name.
.Pp
.It Fl fno-defer-pop
Always pop the arguments to each function call as soon as that function returns.
For machines which must pop arguments after a function call, the compiler normally lets arguments accumulate on the stack for several function calls and pops them all at once.
.Pp
Disabled at levels
.Fl O ,
.Fl O2 ,
.Fl O3 ,
.Fl \&Os .
.Pp
.It Fl fforce-mem
Force memory operands to be copied into registers before doing arithmetic on them.
This produces better code by making all memory references potential common subexpressions.
When they are not common subexpressions, instruction combination should eliminate the separate register-load.
This option is now a nop and will be removed in 4.2.
.Pp
.It Fl fforce-addr
Force memory address constants to be copied into registers before doing arithmetic on them.
.Pp
.It Fl fomit-frame-pointer
Don't keep the frame pointer in a register for functions that don't need one.
This avoids the instructions to save, set up and restore frame pointers; it also makes an extra register available in many functions.
.Sy \&It also makes debugging impossible on some machines.
.Pp
On some machines, such as the VAX, this flag has no effect, because the standard calling sequence automatically handles the frame pointer and nothing is saved by pretending it doesn't exist.
The machine-description macro
.Va FRAME_POINTER_REQUIRED
controls whether a target machine supports this flag.
.Pp
Enabled at levels
.Fl O ,
.Fl O2 ,
.Fl O3 ,
.Fl \&Os .
.Pp
.It Fl foptimize-sibling-calls
Optimize sibling and tail recursive calls.
.Pp
Enabled at levels
.Fl O2 ,
.Fl O3 ,
.Fl \&Os .
.Pp
.It Fl fno-inline
Don't pay attention to the
.Va inline
keyword.
Normally this option is used to keep the compiler from expanding any functions inline.
Note that if you are not optimizing, no functions can be expanded inline.
.Pp
.It Fl finline-functions
Integrate all simple functions into their callers.
The compiler heuristically decides which functions are simple enough to be worth integrating in this way.
.Pp
If all calls to a given function are integrated, and the function is declared
.Va static ,
then the function is normally not output as assembler code in its own right.
.Pp
Enabled at level
.Fl O3 .
.Pp
.It Fl finline-functions-called-once
Consider all
.Va static
functions called once for inlining into their caller even if they are not marked
.Va inline .
If a call to a given function is integrated, then the function is not output as assembler code in its own right.
.Pp
Enabled if
.Fl funit-at-a-time
is enabled.
.Pp
.It Fl fearly-inlining
Inline functions marked by
.Va always_inline
and functions whose body seems smaller than the function call overhead early before doing
.Fl fprofile-generate
instrumentation and real inlining pass.
Doing so makes profiling significantly cheaper and usually inlining faster on programs having large chains of nested wrapper functions.
.Pp
Enabled by default.
.Pp
.It Fl finline-limit= Ns Ar n
By default, GCC limits the size of functions that can be inlined.
This flag allows the control of this limit for functions that are explicitly marked as inline (i.e., marked with the inline keyword or defined within the class definition in c++).
.Em n
is the size of functions that can be inlined in number of pseudo instructions (not counting parameter handling).
The default value of
.Em n
is 600.
Increasing this value can result in more inlined code at the cost of compilation time and memory consumption.
Decreasing usually makes the compilation faster and less code will be inlined (which presumably means slower programs).
This option is particularly useful for programs that use inlining heavily such as those based on recursive templates with C++.
.Pp
Inlining is actually controlled by a number of parameters, which may be specified individually by using
.Fl -param Ar name Ns = Ns Ar value .
The
.Fl finline-limit= Ns Ar n
option sets some of these parameters as follows:
.Pp
.Bl -tag -width xx
.It Sy max-inline-insns-single Ns
 is set to
.Em n
/2.
.Pp
.It Sy max-inline-insns-auto Ns
 is set to
.Em n
/2.
.Pp
.It Sy min-inline-insns Ns
 is set to 130 or
.Em n
/4, whichever is smaller.
.Pp
.It Sy max-inline-insns-rtl Ns
 is set to
.Em n .
.Pp
.El
See below for a documentation of the individual parameters controlling inlining.
.Pp
.Em Note:
pseudo instruction represents, in this particular context, an abstract measurement of function's size.
In no way does it represent a count of assembly instructions and as such its exact meaning might change from one release to an another.
.Pp
.It Fl fkeep-inline-functions
In C, emit
.Va static
functions that are declared
.Va inline
into the object file, even if the function has been inlined into all of its callers.
This switch does not affect functions using the
.Va extern inline
extension in GNU C.
In C++, emit any and all inline functions into the object file.
.Pp
.It Fl fkeep-static-consts
Emit variables declared
.Va static const
when optimization isn't turned on, even if the variables aren't referenced.
.Pp
GCC enables this option by default.
If you want to force the compiler to check if the variable was referenced, regardless of whether or not optimization is turned on, use the
.Fl fno-keep-static-consts
option.
.Pp
.It Fl fmerge-constants
Attempt to merge identical constants (string constants and floating point constants) across compilation units.
.Pp
This option is the default for optimized compilation if the assembler and linker support it.
Use
.Fl fno-merge-constants
to inhibit this behavior.
.Pp
Enabled at levels
.Fl O ,
.Fl O2 ,
.Fl O3 ,
.Fl \&Os .
.Pp
.It Fl fmerge-all-constants
Attempt to merge identical constants and identical variables.
.Pp
This option implies
.Fl fmerge-constants .
In addition to
.Fl fmerge-constants
this considers e.g. even constant initialized arrays or initialized constant variables with integral or floating point types.
Languages like C or C++ require each non-automatic variable to have distinct location, so using this option will result in non-conforming behavior.
.Pp
.It Fl fmodulo-sched
Perform swing modulo scheduling immediately before the first scheduling pass.
This pass looks at innermost loops and reorders their instructions by overlapping different iterations.
.Pp
.It Fl fno-branch-count-reg
Do not use "decrement and branch" instructions on a count register, but instead generate a sequence of instructions that decrement a register, compare it against zero, then branch based upon the result.
This option is only meaningful on architectures that support such instructions, which include x86, PowerPC, IA-64 and S/390.
.Pp
The default is
.Fl fbranch-count-reg ,
enabled when
.Fl fstrength-reduce
is enabled.
.Pp
.It Fl fno-function-cse
Do not put function addresses in registers; make each instruction that calls a constant function contain the function's address explicitly.
.Pp
This option results in less efficient code, but some strange hacks that alter the assembler output may be confused by the optimizations performed when this option is not used.
.Pp
The default is
.Fl ffunction-cse
.Pp
.It Fl fno-zero-initialized-in-bss
If the target supports a BSS section, GCC by default puts variables that are initialized to zero into BSS.
This can save space in the resulting code.
.Pp
This option turns off this behavior because some programs explicitly rely on variables going to the data section.
E.g., so that the resulting executable can find the beginning of that section and/or make assumptions based on that.
.Pp
The default is
.Fl fzero-initialized-in-bss .
.Pp
.It Fl fmudflap Fl fmudflapth Fl fmudflapir
For front-ends that support it (C and C++), instrument all risky pointer/array dereferencing operations, some standard library string/heap functions, and some other associated constructs with range/validity tests.
Modules so instrumented should be immune to buffer overflows, invalid heap use, and some other classes of C/C++ programming errors.
The instrumentation relies on a separate runtime library
.Pa ( libmudflap ) ,
which will be linked into a program if
.Fl fmudflap
is given at link time.
Run-time behavior of the instrumented program is controlled by the
.Sy MUDFLAP_OPTIONS
environment variable.
See
.Va env MUDFLAP_OPTIONS=-help a.out
for its options.
.Pp
Use
.Fl fmudflapth
instead of
.Fl fmudflap
to compile and to link if your program is multi-threaded.
Use
.Fl fmudflapir ,
in addition to
.Fl fmudflap
or
.Fl fmudflapth ,
if instrumentation should ignore pointer reads.
This produces less instrumentation (and therefore faster execution) and still provides some protection against outright memory corrupting writes, but allows erroneously read data to propagate within a program.
.Pp
.It Fl fstrength-reduce
Perform the optimizations of loop strength reduction and elimination of iteration variables.
.Pp
Enabled at levels
.Fl O2 ,
.Fl O3 ,
.Fl \&Os .
.Pp
.It Fl fthread-jumps
Perform optimizations where we check to see if a jump branches to a location where another comparison subsumed by the first is found.
If so, the first branch is redirected to either the destination of the second branch or a point immediately following it, depending on whether the condition is known to be true or false.
.Pp
Enabled at levels
.Fl O2 ,
.Fl O3 ,
.Fl \&Os .
.Pp
.It Fl fcse-follow-jumps
In common subexpression elimination, scan through jump instructions when the target of the jump is not reached by any other path.
For example, when CSE encounters an
.Va if
statement with an
.Va else
clause, CSE will follow the jump when the condition tested is false.
.Pp
Enabled at levels
.Fl O2 ,
.Fl O3 ,
.Fl \&Os .
.Pp
.It Fl fcse-skip-blocks
This is similar to
.Fl fcse-follow-jumps ,
but causes CSE to follow jumps which conditionally skip over blocks.
When CSE encounters a simple
.Va if
statement with no else clause,
.Fl fcse-skip-blocks
causes CSE to follow the jump around the body of the
.Va if .
.Pp
Enabled at levels
.Fl O2 ,
.Fl O3 ,
.Fl \&Os .
.Pp
.It Fl frerun-cse-after-loop
Re-run common subexpression elimination after loop optimizations has been performed.
.Pp
Enabled at levels
.Fl O2 ,
.Fl O3 ,
.Fl \&Os .
.Pp
.It Fl frerun-loop-opt
Run the loop optimizer twice.
.Pp
Enabled at levels
.Fl O2 ,
.Fl O3 ,
.Fl \&Os .
.Pp
.It Fl fgcse
Perform a global common subexpression elimination pass.
This pass also performs global constant and copy propagation.
.Pp
.Em Note:
When compiling a program using computed gotos, a GCC extension, you may get better runtime performance if you disable the global common subexpression elimination pass by adding
.Fl fno-gcse
to the command line.
.Pp
Enabled at levels
.Fl O2 ,
.Fl O3 ,
.Fl \&Os .
.Pp
.It Fl fgcse-lm
When
.Fl fgcse-lm
is enabled, global common subexpression elimination will attempt to move loads which are only killed by stores into themselves.
This allows a loop containing a load/store sequence to be changed to a load outside the loop, and a copy/store within the loop.
.Pp
Enabled by default when gcse is enabled.
.Pp
.It Fl fgcse-sm
When
.Fl fgcse-sm
is enabled, a store motion pass is run after global common subexpression elimination.
This pass will attempt to move stores out of loops.
When used in conjunction with
.Fl fgcse-lm ,
loops containing a load/store sequence can be changed to a load before the loop and a store after the loop.
.Pp
Not enabled at any optimization level.
.Pp
.It Fl fgcse-las
When
.Fl fgcse-las
is enabled, the global common subexpression elimination pass eliminates redundant loads that come after stores to the same memory location (both partial and full redundancies).
.Pp
Not enabled at any optimization level.
.Pp
.It Fl fgcse-after-reload
When
.Fl fgcse-after-reload
is enabled, a redundant load elimination pass is performed after reload.
The purpose of this pass is to cleanup redundant spilling.
.Pp
.It Fl floop-optimize
Perform loop optimizations: move constant expressions out of loops, simplify exit test conditions and optionally do strength-reduction as well.
.Pp
Enabled at levels
.Fl O ,
.Fl O2 ,
.Fl O3 ,
.Fl \&Os .
.Pp
.It Fl floop-optimize2
Perform loop optimizations using the new loop optimizer.
The optimizations (loop unrolling, peeling and unswitching, loop invariant motion) are enabled by separate flags.
.Pp
.It Fl funsafe-loop-optimizations
If given, the loop optimizer will assume that loop indices do not overflow, and that the loops with nontrivial exit condition are not infinite.
This enables a wider range of loop optimizations even if the loop optimizer itself cannot prove that these assumptions are valid.
Using
.Fl Wunsafe-loop-optimizations ,
the compiler will warn you if it finds this kind of loop.
.Pp
.It Fl fcrossjumping
Perform cross-jumping transformation.
This transformation unifies equivalent code and save code size.
The resulting code may or may not perform better than without cross-jumping.
.Pp
Enabled at levels
.Fl O2 ,
.Fl O3 ,
.Fl \&Os .
.Pp
.It Fl fif-conversion
Attempt to transform conditional jumps into branch-less equivalents.
This include use of conditional moves, min, max, set flags and abs instructions, and some tricks doable by standard arithmetics.
The use of conditional execution on chips where it is available is controlled by
.Va if-conversion2 .
.Pp
Enabled at levels
.Fl O ,
.Fl O2 ,
.Fl O3 ,
.Fl \&Os .
.Pp
.It Fl fif-conversion2
Use conditional execution (where available) to transform conditional jumps into branch-less equivalents.
.Pp
Enabled at levels
.Fl O ,
.Fl O2 ,
.Fl O3 ,
.Fl \&Os .
.Pp
.It Fl fdelete-null-pointer-checks
Use global dataflow analysis to identify and eliminate useless checks for null pointers.
The compiler assumes that dereferencing a null pointer would have halted the program.
If a pointer is checked after it has already been dereferenced, it cannot be null.
.Pp
In some environments, this assumption is not true, and programs can safely dereference null pointers.
Use
.Fl fno-delete-null-pointer-checks
to disable this optimization for programs which depend on that behavior.
.Pp
Enabled at levels
.Fl O2 ,
.Fl O3 ,
.Fl \&Os .
.Pp
.It Fl fexpensive-optimizations
Perform a number of minor optimizations that are relatively expensive.
.Pp
Enabled at levels
.Fl O2 ,
.Fl O3 ,
.Fl \&Os .
.Pp
.It Fl foptimize-register-move
.It Fl fregmove
Attempt to reassign register numbers in move instructions and as operands of other simple instructions in order to maximize the amount of register tying.
This is especially helpful on machines with two-operand instructions.
.Pp
Note
.Fl fregmove
and
.Fl foptimize-register-move
are the same optimization.
.Pp
Enabled at levels
.Fl O2 ,
.Fl O3 ,
.Fl \&Os .
.Pp
.It Fl fdelayed-branch
If supported for the target machine, attempt to reorder instructions to exploit instruction slots available after delayed branch instructions.
.Pp
Enabled at levels
.Fl O ,
.Fl O2 ,
.Fl O3 ,
.Fl \&Os .
.Pp
.It Fl fschedule-insns
If supported for the target machine, attempt to reorder instructions to eliminate execution stalls due to required data being unavailable.
This helps machines that have slow floating point or memory load instructions by allowing other instructions to be issued until the result of the load or floating point instruction is required.
.Pp
Enabled at levels
.Fl O2 ,
.Fl O3 ,
.Fl \&Os .
.Pp
.It Fl fschedule-insns2
Similar to
.Fl fschedule-insns ,
but requests an additional pass of instruction scheduling after register allocation has been done.
This is especially useful on machines with a relatively small number of registers and where memory load instructions take more than one cycle.
.Pp
Enabled at levels
.Fl O2 ,
.Fl O3 ,
.Fl \&Os .
.Pp
.It Fl fno-sched-interblock
Don't schedule instructions across basic blocks.
This is normally enabled by default when scheduling before register allocation, i.e.
with
.Fl fschedule-insns
or at
.Fl O2
or higher.
.Pp
.It Fl fno-sched-spec
Don't allow speculative motion of non-load instructions.
This is normally enabled by default when scheduling before register allocation, i.e.
with
.Fl fschedule-insns
or at
.Fl O2
or higher.
.Pp
.It Fl fsched-spec-load
Allow speculative motion of some load instructions.
This only makes sense when scheduling before register allocation, i.e. with
.Fl fschedule-insns
or at
.Fl O2
or higher.
.Pp
.It Fl fsched-spec-load-dangerous
Allow speculative motion of more load instructions.
This only makes sense when scheduling before register allocation, i.e. with
.Fl fschedule-insns
or at
.Fl O2
or higher.
.Pp
.It Fl fsched-stalled-insns
.It Fl fsched-stalled-insns= Ns Ar n
Define how many insns (if any) can be moved prematurely from the queue of stalled insns into the ready list, during the second scheduling pass.
.Fl fno-fsched-stalled-insns
and
.Fl fsched-stalled-insns=0
are equivalent and mean that no insns will be moved prematurely.
If
.Em n
is unspecified then there is no limit on how many queued insns can be moved prematurely.
.Pp
.It Fl fsched-stalled-insns-dep
.It Fl fsched-stalled-insns-dep= Ns Ar n
Define how many insn groups (cycles) will be examined for a dependency on a stalled insn that is candidate for premature removal from the queue of stalled insns.
This has an effect only during the second scheduling pass, and only if
.Fl fsched-stalled-insns
is used and its value is not zero.
+
.Fl fno-sched-stalled-insns-dep
is equivalent to +
.Fl fsched-stalled-insns-dep=0 .
+
.Fl fsched-stalled-insns-dep
without a value is equivalent to +
.Fl fsched-stalled-insns-dep=1 .
.Pp
.It Fl fsched2-use-superblocks
When scheduling after register allocation, do use superblock scheduling algorithm.
Superblock scheduling allows motion across basic block boundaries resulting on faster schedules.
This option is experimental, as not all machine descriptions used by GCC model the CPU closely enough to avoid unreliable results from the algorithm.
.Pp
This only makes sense when scheduling after register allocation, i.e. with
.Fl fschedule-insns2
or at
.Fl O2
or higher.
.Pp
.It Fl fsched2-use-traces
Use
.Fl fsched2-use-superblocks
algorithm when scheduling after register allocation and additionally perform code duplication in order to increase the size of superblocks using tracer pass.
See
.Fl ftracer
for details on trace formation.
.Pp
This mode should produce faster but significantly longer programs.
Also without
.Fl fbranch-probabilities
the traces constructed may not match the reality and hurt the performance.
This only makes sense when scheduling after register allocation, i.e. with
.Fl fschedule-insns2
or at
.Fl O2
or higher.
.Pp
.It Fl freschedule-modulo-scheduled-loops
The modulo scheduling comes before the traditional scheduling, if a loop was modulo scheduled we may want to prevent the later scheduling passes from changing its schedule, we use this option to control that.
.Pp
.It Fl fcaller-saves
Enable values to be allocated in registers that will be clobbered by function calls, by emitting extra instructions to save and restore the registers around such calls.
Such allocation is done only when it seems to result in better code than would otherwise be produced.
.Pp
This option is always enabled by default on certain machines, usually those which have no call-preserved registers to use instead.
.Pp
Enabled at levels
.Fl O2 ,
.Fl O3 ,
.Fl \&Os .
.Pp
.It Fl ftree-pre
Perform Partial Redundancy Elimination (PRE) on trees.
This flag is enabled by default at
.Fl O2
and
.Fl O3 .
.Pp
.It Fl ftree-fre
Perform Full Redundancy Elimination (FRE) on trees.
The difference between FRE and PRE is that FRE only considers expressions that are computed on all paths leading to the redundant computation.
This analysis faster than PRE, though it exposes fewer redundancies.
This flag is enabled by default at
.Fl O
and higher.
.Pp
.It Fl ftree-copy-prop
Perform copy propagation on trees.
This pass eliminates unnecessary copy operations.
This flag is enabled by default at
.Fl O
and higher.
.Pp
.It Fl ftree-store-copy-prop
Perform copy propagation of memory loads and stores.
This pass eliminates unnecessary copy operations in memory references (structures, global variables, arrays, etc).
This flag is enabled by default at
.Fl O2
and higher.
.Pp
.It Fl ftree-salias
Perform structural alias analysis on trees.
This flag is enabled by default at
.Fl O
and higher.
.Pp
.It Fl ftree-sink
Perform forward store motion on trees.
This flag is enabled by default at
.Fl O
and higher.
.Pp
.It Fl ftree-ccp
Perform sparse conditional constant propagation (CCP) on trees.
This pass only operates on local scalar variables and is enabled by default at
.Fl O
and higher.
.Pp
.It Fl ftree-store-ccp
Perform sparse conditional constant propagation (CCP) on trees.
This pass operates on both local scalar variables and memory stores and loads (global variables, structures, arrays, etc).
This flag is enabled by default at
.Fl O2
and higher.
.Pp
.It Fl ftree-dce
Perform dead code elimination (DCE) on trees.
This flag is enabled by default at
.Fl O
and higher.
.Pp
.It Fl ftree-dominator-opts
Perform a variety of simple scalar cleanups (constant/copy propagation, redundancy elimination, range propagation and expression simplification) based on a dominator tree traversal.
This also performs jump threading (to reduce jumps to jumps).
This flag is enabled by default at
.Fl O
and higher.
.Pp
.It Fl ftree-ch
Perform loop header copying on trees.
This is beneficial since it increases effectiveness of code motion optimizations.
It also saves one jump.
This flag is enabled by default at
.Fl O
and higher.
It is not enabled for
.Fl \&Os ,
since it usually increases code size.
.Pp
.It Fl ftree-loop-optimize
Perform loop optimizations on trees.
This flag is enabled by default at
.Fl O
and higher.
.Pp
.It Fl ftree-loop-linear
Perform linear loop transformations on tree.
This flag can improve cache performance and allow further loop optimizations to take place.
.Pp
.It Fl ftree-loop-im
Perform loop invariant motion on trees.
This pass moves only invariants that would be hard to handle at RTL level (function calls, operations that expand to nontrivial sequences of insns).
With
.Fl funswitch-loops
it also moves operands of conditions that are invariant out of the loop, so that we can use just trivial invariantness analysis in loop unswitching.
The pass also includes store motion.
.Pp
.It Fl ftree-loop-ivcanon
Create a canonical counter for number of iterations in the loop for that determining number of iterations requires complicated analysis.
Later optimizations then may determine the number easily.
Useful especially in connection with unrolling.
.Pp
.It Fl fivopts
Perform induction variable optimizations (strength reduction, induction variable merging and induction variable elimination) on trees.
.Pp
.It Fl ftree-sra
Perform scalar replacement of aggregates.
This pass replaces structure references with scalars to prevent committing structures to memory too early.
This flag is enabled by default at
.Fl O
and higher.
.Pp
.It Fl ftree-copyrename
Perform copy renaming on trees.
This pass attempts to rename compiler temporaries to other variables at copy locations, usually resulting in variable names which more closely resemble the original variables.
This flag is enabled by default at
.Fl O
and higher.
.Pp
.It Fl ftree-ter
Perform temporary expression replacement during the SSA-\*[Gt]normal phase.
Single use/single def temporaries are replaced at their use location with their defining expression.
This results in non-GIMPLE code, but gives the expanders much more complex trees to work on resulting in better RTL generation.
This is enabled by default at
.Fl O
and higher.
.Pp
.It Fl ftree-lrs
Perform live range splitting during the SSA-\*[Gt]normal phase.
Distinct live ranges of a variable are split into unique variables, allowing for better optimization later.
This is enabled by default at
.Fl O
and higher.
.Pp
.It Fl ftree-vectorize
Perform loop vectorization on trees.
.Pp
.It Fl ftree-vect-loop-version
Perform loop versioning when doing loop vectorization on trees.
When a loop appears to be vectorizable except that data alignment or data dependence cannot be determined at compile time then vectorized and non-vectorized versions of the loop are generated along with runtime checks for alignment or dependence to control which version is executed.
This option is enabled by default except at level
.Fl \&Os
where it is disabled.
.Pp
.It Fl ftree-vrp
Perform Value Range Propagation on trees.
This is similar to the constant propagation pass, but instead of values, ranges of values are propagated.
This allows the optimizers to remove unnecessary range checks like array bound checks and null pointer checks.
This is enabled by default at
.Fl O2
and higher.
Null pointer check elimination is only done if
.Fl fdelete-null-pointer-checks
is enabled.
.Pp
.It Fl ftracer
Perform tail duplication to enlarge superblock size.
This transformation simplifies the control flow of the function allowing other optimizations to do better job.
.Pp
.It Fl funroll-loops
Unroll loops whose number of iterations can be determined at compile time or upon entry to the loop.
.Fl funroll-loops
implies both
.Fl fstrength-reduce
and
.Fl frerun-cse-after-loop .
This option makes code larger, and may or may not make it run faster.
.Pp
.It Fl funroll-all-loops
Unroll all loops, even if their number of iterations is uncertain when the loop is entered.
This usually makes programs run more slowly.
.Fl funroll-all-loops
implies the same options as
.Fl funroll-loops ,
.Pp
.It Fl fsplit-ivs-in-unroller
Enables expressing of values of induction variables in later iterations of the unrolled loop using the value in the first iteration.
This breaks long dependency chains, thus improving efficiency of the scheduling passes.
.Pp
Combination of
.Fl fweb
and CSE is often sufficient to obtain the same effect.
However in cases the loop body is more complicated than a single basic block, this is not reliable.
It also does not work at all on some of the architectures due to restrictions in the CSE pass.
.Pp
This optimization is enabled by default.
.Pp
.It Fl fvariable-expansion-in-unroller
With this option, the compiler will create multiple copies of some local variables when unrolling a loop which can result in superior code.
.Pp
.It Fl fprefetch-loop-arrays
If supported by the target machine, generate instructions to prefetch memory to improve the performance of loops that access large arrays.
.Pp
These options may generate better or worse code; results are highly dependent on the structure of loops within the source code.
.Pp
.It Fl fno-peephole
.It Fl fno-peephole2
Disable any machine-specific peephole optimizations.
The difference between
.Fl fno-peephole
and
.Fl fno-peephole2
is in how they are implemented in the compiler; some targets use one, some use the other, a few use both.
.Pp
.Fl fpeephole
is enabled by default.
.Fl fpeephole2
enabled at levels
.Fl O2 ,
.Fl O3 ,
.Fl \&Os .
.Pp
.It Fl fno-guess-branch-probability
Do not guess branch probabilities using heuristics.
.Pp
GCC will use heuristics to guess branch probabilities if they are not provided by profiling feedback
.Fl ( fprofile-arcs ) .
These heuristics are based on the control flow graph.
If some branch probabilities are specified by
.Sy __builtin_expect ,
then the heuristics will be used to guess branch probabilities for the rest of the control flow graph, taking the
.Sy __builtin_expect
info into account.
The interactions between the heuristics and
.Sy __builtin_expect
can be complex, and in some cases, it may be useful to disable the heuristics so that the effects of
.Sy __builtin_expect
are easier to understand.
.Pp
The default is
.Fl fguess-branch-probability
at levels
.Fl O ,
.Fl O2 ,
.Fl O3 ,
.Fl \&Os .
.Pp
.It Fl freorder-blocks
Reorder basic blocks in the compiled function in order to reduce number of taken branches and improve code locality.
.Pp
Enabled at levels
.Fl O2 ,
.Fl O3 .
.Pp
.It Fl freorder-blocks-and-partition
In addition to reordering basic blocks in the compiled function, in order to reduce number of taken branches, partitions hot and cold basic blocks into separate sections of the assembly and .o files, to improve paging and cache locality performance.
.Pp
This optimization is automatically turned off in the presence of exception handling, for linkonce sections, for functions with a user-defined section attribute and on any architecture that does not support named sections.
.Pp
.It Fl freorder-functions
Reorder functions in the object file in order to improve code locality.
This is implemented by using special subsections
.Va .text.hot
for most frequently executed functions and
.Va .text.unlikely
for unlikely executed functions.
Reordering is done by the linker so object file format must support named sections and linker must place them in a reasonable way.
.Pp
Also profile feedback must be available in to make this option effective.
See
.Fl fprofile-arcs
for details.
.Pp
Enabled at levels
.Fl O2 ,
.Fl O3 ,
.Fl \&Os .
.Pp
.It Fl fstrict-aliasing
Allows the compiler to assume the strictest aliasing rules applicable to the language being compiled.
For C (and C++), this activates optimizations based on the type of expressions.
In particular, an object of one type is assumed never to reside at the same address as an object of a different type, unless the types are almost the same.
For example, an
.Va unsigned int
can alias an
.Va int ,
but not a
.Va void*
or a
.Va double .
A character type may alias any other type.
.Pp
Pay special attention to code like this:
.Pp
.Bd -literal -offset indent
union a_union {
  int i;
  double d;
};

int f() {
  a_union t;
  t.d = 3.0;
  return t.i;
}
.Ed
The practice of reading from a different union member than the one most recently written to (called "type-punning") is common.
Even with
.Fl fstrict-aliasing ,
type-punning is allowed, provided the memory is accessed through the union type.
So, the code above will work as expected.
However, this code might not:
.Pp
.Bd -literal -offset indent
int f() {
  a_union t;
  int* ip;
  t.d = 3.0;
  ip = &t.i;
  return *ip;
}
.Ed
Every language that wishes to perform language-specific alias analysis should define a function that computes, given an
.Va tree
node, an alias set for the node.
Nodes in different alias sets are not allowed to alias.
For an example, see the C front-end function
.Va c_get_alias_set .
.Pp
Enabled at levels
.Fl O2 ,
.Fl O3 ,
.Fl \&Os .
.Pp
.It Fl falign-functions
.It Fl falign-functions= Ns Ar n
Align the start of functions to the next power-of-two greater than
.Em n ,
skipping up to
.Em n
bytes.
For instance,
.Fl falign-functions=32
aligns functions to the next 32-byte boundary, but
.Fl falign-functions=24
would align to the next 32-byte boundary only if this can be done by skipping 23 bytes or less.
.Pp
.Fl fno-align-functions
and
.Fl falign-functions=1
are equivalent and mean that functions will not be aligned.
.Pp
Some assemblers only support this flag when
.Em n
is a power of two; in that case, it is rounded up.
.Pp
If
.Em n
is not specified or is zero, use a machine-dependent default.
.Pp
Enabled at levels
.Fl O2 ,
.Fl O3 .
.Pp
.It Fl falign-labels
.It Fl falign-labels= Ns Ar n
Align all branch targets to a power-of-two boundary, skipping up to
.Em n
bytes like
.Fl falign-functions .
This option can easily make code slower, because it must insert dummy operations for when the branch target is reached in the usual flow of the code.
.Pp
.Fl fno-align-labels
and
.Fl falign-labels=1
are equivalent and mean that labels will not be aligned.
.Pp
If
.Fl falign-loops
or
.Fl falign-jumps
are applicable and are greater than this value, then their values are used instead.
.Pp
If
.Em n
is not specified or is zero, use a machine-dependent default which is very likely to be
.Sy 1 ,
meaning no alignment.
.Pp
Enabled at levels
.Fl O2 ,
.Fl O3 .
.Pp
.It Fl falign-loops
.It Fl falign-loops= Ns Ar n
Align loops to a power-of-two boundary, skipping up to
.Em n
bytes like
.Fl falign-functions .
The hope is that the loop will be executed many times, which will make up for any execution of the dummy operations.
.Pp
.Fl fno-align-loops
and
.Fl falign-loops=1
are equivalent and mean that loops will not be aligned.
.Pp
If
.Em n
is not specified or is zero, use a machine-dependent default.
.Pp
Enabled at levels
.Fl O2 ,
.Fl O3 .
.Pp
.It Fl falign-jumps
.It Fl falign-jumps= Ns Ar n
Align branch targets to a power-of-two boundary, for branch targets where the targets can only be reached by jumping, skipping up to
.Em n
bytes like
.Fl falign-functions .
In this case, no dummy operations need be executed.
.Pp
.Fl fno-align-jumps
and
.Fl falign-jumps=1
are equivalent and mean that loops will not be aligned.
.Pp
If
.Em n
is not specified or is zero, use a machine-dependent default.
.Pp
Enabled at levels
.Fl O2 ,
.Fl O3 .
.Pp
.It Fl funit-at-a-time
Parse the whole compilation unit before starting to produce code.
This allows some extra optimizations to take place but consumes more memory (in general).
There are some compatibility issues with
.Em unit-at-at-time
mode:
.Pp
.Bl -bullet
.It
enabling
.Em unit-at-a-time
mode may change the order in which functions, variables, and top-level
.Va asm
statements are emitted, and will likely break code relying on some particular ordering.
The majority of such top-level
.Va asm
statements, though, can be replaced by
.Va section
attributes.
.Pp
.It
.Em unit-at-a-time
mode removes unreferenced static variables and functions.
This may result in undefined references when an
.Va asm
statement refers directly to variables or functions that are otherwise unused.
In that case either the variable/function shall be listed as an operand of the
.Va asm
statement operand or, in the case of top-level
.Va asm
statements the attribute
.Va used
shall be used on the declaration.
.Pp
.It
Static functions now can use non-standard passing conventions that may break
.Va asm
statements calling functions directly.
Again, attribute
.Va used
will prevent this behavior.
.Pp
.El
As a temporary workaround,
.Fl fno-unit-at-a-time
can be used, but this scheme may not be supported by future releases of GCC.
.Pp
Enabled at levels
.Fl O ,
.Fl O2 ,
.Fl O3 ,
.Fl \&Os .
.Pp
.It Fl fweb
Constructs webs as commonly used for register allocation purposes and assign each web individual pseudo register.
This allows the register allocation pass to operate on pseudos directly, but also strengthens several other optimization passes, such as CSE, loop optimizer and trivial dead code remover.
It can, however, make debugging impossible, since variables will no longer stay in a "home register".
.Pp
Enabled by default with
.Fl funroll-loops .
.Pp
.It Fl fwhole-program
Assume that the current compilation unit represents whole program being compiled.
All public functions and variables with the exception of
.Va main
and those merged by attribute
.Va externally_visible
become static functions and in a affect gets more aggressively optimized by interprocedural optimizers.
While this option is equivalent to proper use of
.Va static
keyword for programs consisting of single file, in combination with option
.Fl -combine
this flag can be used to compile most of smaller scale C programs since the functions and variables become local for the whole combined compilation unit, not for the single source file itself.
.Pp
.It Fl fcprop-registers
After register allocation and post-register allocation instruction splitting, we perform a copy-propagation pass to try to reduce scheduling dependencies and occasionally eliminate the copy.
.Pp
Enabled at levels
.Fl O ,
.Fl O2 ,
.Fl O3 ,
.Fl \&Os .
.Pp
.It Fl fprofile-generate
Enable options usually used for instrumenting application to produce profile useful for later recompilation with profile feedback based optimization.
You must use
.Fl fprofile-generate
both when compiling and when linking your program.
.Pp
The following options are enabled:
.Va -fprofile-arcs ,
.Va -fprofile-values ,
.Va -fvpt .
.Pp
.It Fl fprofile-use
Enable profile feedback directed optimizations, and optimizations generally profitable only with profile feedback available.
.Pp
The following options are enabled:
.Va -fbranch-probabilities ,
.Va -fvpt ,
.Va -funroll-loops ,
.Va -fpeel-loops ,
.Va -ftracer ,
.Va -fno-loop-optimize .
.Pp
.El
The following options control compiler behavior regarding floating point arithmetic.
These options trade off between speed and correctness.
All must be specifically enabled.
.Pp
.Bl -tag -width xx
.It Fl ffloat-store
Do not store floating point variables in registers, and inhibit other options that might change whether a floating point value is taken from a register or memory.
.Pp
This option prevents undesirable excess precision on machines such as the 68000 where the floating registers (of the 68881) keep more precision than a
.Va double
is supposed to have.
Similarly for the x86 architecture.
For most programs, the excess precision does only good, but a few programs rely on the precise definition of IEEE floating point.
Use
.Fl ffloat-store
for such programs, after modifying them to store all pertinent intermediate computations into variables.
.Pp
.It Fl ffast-math
Sets
.Fl fno-math-errno ,
.Fl funsafe-math-optimizations ,
.Fl fno-trapping-math ,
.Fl ffinite-math-only ,
.Fl fno-rounding-math ,
.Fl fno-signaling-nans
and
.Sy fcx-limited-range .
.Pp
This option causes the preprocessor macro
.Va __FAST_MATH__
to be defined.
.Pp
This option should never be turned on by any
.Fl O
option since it can result in incorrect output for programs which depend on an exact implementation of IEEE or ISO rules/specifications for math functions.
.Pp
.It Fl fno-math-errno
Do not set ERRNO after calling math functions that are executed with a single instruction, e.g., sqrt.
A program that relies on IEEE exceptions for math error handling may want to use this flag for speed while maintaining IEEE arithmetic compatibility.
.Pp
This option should never be turned on by any
.Fl O
option since it can result in incorrect output for programs which depend on an exact implementation of IEEE or ISO rules/specifications for math functions.
.Pp
The default is
.Fl fmath-errno .
.Pp
On Darwin systems, the math library never sets
.Va errno .
There is therefore no reason for the compiler to consider the possibility that it might, and
.Fl fno-math-errno
is the default.
.Pp
.It Fl funsafe-math-optimizations
Allow optimizations for floating-point arithmetic that (a) assume that arguments and results are valid and (b) may violate IEEE or ANSI standards.
When used at link-time, it may include libraries or startup files that change the default FPU control word or other similar optimizations.
.Pp
This option should never be turned on by any
.Fl O
option since it can result in incorrect output for programs which depend on an exact implementation of IEEE or ISO rules/specifications for math functions.
.Pp
The default is
.Fl fno-unsafe-math-optimizations .
.Pp
.It Fl ffinite-math-only
Allow optimizations for floating-point arithmetic that assume that arguments and results are not NaNs or +-Infs.
.Pp
This option should never be turned on by any
.Fl O
option since it can result in incorrect output for programs which depend on an exact implementation of IEEE or ISO rules/specifications.
.Pp
The default is
.Fl fno-finite-math-only .
.Pp
.It Fl fno-trapping-math
Compile code assuming that floating-point operations cannot generate user-visible traps.
These traps include division by zero, overflow, underflow, inexact result and invalid operation.
This option implies
.Fl fno-signaling-nans .
Setting this option may allow faster code if one relies on "non-stop" IEEE arithmetic, for example.
.Pp
This option should never be turned on by any
.Fl O
option since it can result in incorrect output for programs which depend on an exact implementation of IEEE or ISO rules/specifications for math functions.
.Pp
The default is
.Fl ftrapping-math .
.Pp
.It Fl frounding-math
Disable transformations and optimizations that assume default floating point rounding behavior.
This is round-to-zero for all floating point to integer conversions, and round-to-nearest for all other arithmetic truncations.
This option should be specified for programs that change the FP rounding mode dynamically, or that may be executed with a non-default rounding mode.
This option disables constant folding of floating point expressions at compile-time (which may be affected by rounding mode) and arithmetic transformations that are unsafe in the presence of sign-dependent rounding modes.
.Pp
The default is
.Fl fno-rounding-math .
.Pp
This option is experimental and does not currently guarantee to disable all GCC optimizations that are affected by rounding mode.
Future versions of GCC may provide finer control of this setting using C99's
.Va FENV_ACCESS
pragma.
This command line option will be used to specify the default state for
.Va FENV_ACCESS .
.Pp
.It Fl fsignaling-nans
Compile code assuming that IEEE signaling NaNs may generate user-visible traps during floating-point operations.
Setting this option disables optimizations that may change the number of exceptions visible with signaling NaNs.
This option implies
.Fl ftrapping-math .
.Pp
This option causes the preprocessor macro
.Va __SUPPORT_SNAN__
to be defined.
.Pp
The default is
.Fl fno-signaling-nans .
.Pp
This option is experimental and does not currently guarantee to disable all GCC optimizations that affect signaling NaN behavior.
.Pp
.It Fl fsingle-precision-constant
Treat floating point constant as single precision constant instead of implicitly converting it to double precision constant.
.Pp
.It Fl fcx-limited-range
When enabled, this option states that a range reduction step is not needed when performing complex division.
The default is
.Fl fno-cx-limited-range ,
but is enabled by
.Fl ffast-math .
.Pp
This option controls the default setting of the ISO C99
.Va CX_LIMITED_RANGE
pragma.
Nevertheless, the option applies to all languages.
.Pp
.El
The following options control optimizations that may improve performance, but are not enabled by any
.Fl O
options.
This section includes experimental options that may produce broken code.
.Pp
.Bl -tag -width xx
.It Fl fbranch-probabilities
After running a program compiled with
.Fl fprofile-arcs ,
you can compile it a second time using
.Fl fbranch-probabilities ,
to improve optimizations based on the number of times each branch was taken.
When the program compiled with
.Fl fprofile-arcs
exits it saves arc execution counts to a file called
.Pa sourcename.gcda
for each source file The information in this data file is very dependent on the structure of the generated code, so you must use the same source code and the same optimization options for both compilations.
.Pp
With
.Fl fbranch-probabilities ,
GCC puts a
.Sy REG_BR_PROB
note on each
.Sy JUMP_INSN
and
.Sy CALL_INSN .
These can be used to improve optimization.
Currently, they are only used in one place: in
.Pa reorg.c ,
instead of guessing which path a branch is mostly to take, the
.Sy REG_BR_PROB
values are used to exactly determine which path is taken more often.
.Pp
.It Fl fprofile-values
If combined with
.Fl fprofile-arcs ,
it adds code so that some data about values of expressions in the program is gathered.
.Pp
With
.Fl fbranch-probabilities ,
it reads back the data gathered from profiling values of expressions and adds
.Sy REG_VALUE_PROFILE
notes to instructions for their later usage in optimizations.
.Pp
Enabled with
.Fl fprofile-generate
and
.Fl fprofile-use .
.Pp
.It Fl fvpt
If combined with
.Fl fprofile-arcs ,
it instructs the compiler to add a code to gather information about values of expressions.
.Pp
With
.Fl fbranch-probabilities ,
it reads back the data gathered and actually performs the optimizations based on them.
Currently the optimizations include specialization of division operation using the knowledge about the value of the denominator.
.Pp
.It Fl frename-registers
Attempt to avoid false dependencies in scheduled code by making use of registers left over after register allocation.
This optimization will most benefit processors with lots of registers.
Depending on the debug information format adopted by the target, however, it can make debugging impossible, since variables will no longer stay in a "home register".
.Pp
Enabled by default with
.Fl funroll-loops .
.Pp
.It Fl ftracer
Perform tail duplication to enlarge superblock size.
This transformation simplifies the control flow of the function allowing other optimizations to do better job.
.Pp
Enabled with
.Fl fprofile-use .
.Pp
.It Fl funroll-loops
Unroll loops whose number of iterations can be determined at compile time or upon entry to the loop.
.Fl funroll-loops
implies
.Fl frerun-cse-after-loop ,
.Fl fweb
and
.Fl frename-registers .
It also turns on complete loop peeling (i.e. complete removal of loops with small constant number of iterations).
This option makes code larger, and may or may not make it run faster.
.Pp
Enabled with
.Fl fprofile-use .
.Pp
.It Fl funroll-all-loops
Unroll all loops, even if their number of iterations is uncertain when the loop is entered.
This usually makes programs run more slowly.
.Fl funroll-all-loops
implies the same options as
.Fl funroll-loops .
.Pp
.It Fl fpeel-loops
Peels the loops for that there is enough information that they do not roll much (from profile feedback).
It also turns on complete loop peeling (i.e. complete removal of loops with small constant number of iterations).
.Pp
Enabled with
.Fl fprofile-use .
.Pp
.It Fl fmove-loop-invariants
Enables the loop invariant motion pass in the new loop optimizer.
Enabled at level
.Fl O1
.Pp
.It Fl funswitch-loops
Move branches with loop invariant conditions out of the loop, with duplicates of the loop on both branches (modified according to result of the condition).
.Pp
.It Fl fprefetch-loop-arrays
If supported by the target machine, generate instructions to prefetch memory to improve the performance of loops that access large arrays.
.Pp
Disabled at level
.Fl \&Os .
.Pp
.It Fl ffunction-sections
.It Fl fdata-sections
Place each function or data item into its own section in the output file if the target supports arbitrary sections.
The name of the function or the name of the data item determines the section's name in the output file.
.Pp
Use these options on systems where the linker can perform optimizations to improve locality of reference in the instruction space.
Most systems using the ELF object format and SPARC processors running Solaris 2 have linkers with such optimizations.
AIX may have these optimizations in the future.
.Pp
Only use these options when there are significant benefits from doing so.
When you specify these options, the assembler and linker will create larger object and executable files and will also be slower.
You will not be able to use
.Va gprof
on all systems if you specify this option and you may have problems with debugging if you specify both this option and
.Fl g .
.Pp
.It Fl fbranch-target-load-optimize
Perform branch target register load optimization before prologue / epilogue threading.
The use of target registers can typically be exposed only during reload, thus hoisting loads out of loops and doing inter-block scheduling needs a separate optimization pass.
.Pp
.It Fl fbranch-target-load-optimize2
Perform branch target register load optimization after prologue / epilogue threading.
.Pp
.It Fl fbtr-bb-exclusive
When performing branch target register load optimization, don't reuse branch target registers in within any basic block.
.Pp
.It Fl fstack-protector
Emit extra code to check for buffer overflows, such as stack smashing attacks.
This is done by adding a guard variable to functions with vulnerable objects.
This includes functions that call alloca, and functions with buffers larger than 8 bytes.
The guards are initialized when a function is entered and then checked when the function exits.
If a guard check fails, an error message is printed and the program exits.
.Pp
.It Fl fstack-protector-all
Like
.Fl fstack-protector
except that all functions are protected.
.Pp
.It Fl -param Ar name Ns = Ns Ar value
In some places, GCC uses various constants to control the amount of optimization that is done.
For example, GCC will not inline functions that contain more that a certain number of instructions.
You can control some of these constants on the command-line using the
.Fl -param
option.
.Pp
The names of specific parameters, and the meaning of the values, are tied to the internals of the compiler, and are subject to change without notice in future releases.
.Pp
In each case, the
.Em value
is an integer.
The allowable choices for
.Em name
are given in the following table:
.Pp
.Bl -tag -width xx
.It Sy salias-max-implicit-fields Ns
The maximum number of fields in a variable without direct structure accesses for which structure aliasing will consider trying to track each field.
The default is 5
.Pp
.It Sy sra-max-structure-size Ns
The maximum structure size, in bytes, at which the scalar replacement of aggregates (SRA) optimization will perform block copies.
The default value, 0, implies that GCC will select the most appropriate size itself.
.Pp
.It Sy sra-field-structure-ratio Ns
The threshold ratio (as a percentage) between instantiated fields and the complete structure size.
We say that if the ratio of the number of bytes in instantiated fields to the number of bytes in the complete structure exceeds this parameter, then block copies are not used.
The default is 75.
.Pp
.It Sy max-crossjump-edges Ns
The maximum number of incoming edges to consider for crossjumping.
The algorithm used by
.Fl fcrossjumping
is O(N^2) in the number of edges incoming to each block.
Increasing values mean more aggressive optimization, making the compile time increase with probably small improvement in executable size.
.Pp
.It Sy min-crossjump-insns Ns
The minimum number of instructions which must be matched at the end of two blocks before crossjumping will be performed on them.
This value is ignored in the case where all instructions in the block being crossjumped from are matched.
The default value is 5.
.Pp
.It Sy max-grow-copy-bb-insns Ns
The maximum code size expansion factor when copying basic blocks instead of jumping.
The expansion is relative to a jump instruction.
The default value is 8.
.Pp
.It Sy max-goto-duplication-insns Ns
The maximum number of instructions to duplicate to a block that jumps to a computed goto.
To avoid O(N^2) behavior in a number of passes, GCC factors computed gotos early in the compilation process, and unfactors them as late as possible.
Only computed jumps at the end of a basic blocks with no more than max-goto-duplication-insns are unfactored.
The default value is 8.
.Pp
.It Sy max-delay-slot-insn-search Ns
The maximum number of instructions to consider when looking for an instruction to fill a delay slot.
If more than this arbitrary number of instructions is searched, the time savings from filling the delay slot will be minimal so stop searching.
Increasing values mean more aggressive optimization, making the compile time increase with probably small improvement in executable run time.
.Pp
.It Sy max-delay-slot-live-search Ns
When trying to fill delay slots, the maximum number of instructions to consider when searching for a block with valid live register information.
Increasing this arbitrarily chosen value means more aggressive optimization, increasing the compile time.
This parameter should be removed when the delay slot code is rewritten to maintain the control-flow graph.
.Pp
.It Sy max-gcse-memory Ns
The approximate maximum amount of memory that will be allocated in order to perform the global common subexpression elimination optimization.
If more memory than specified is required, the optimization will not be done.
.Pp
.It Sy max-gcse-passes Ns
The maximum number of passes of GCSE to run.
The default is 1.
.Pp
.It Sy max-pending-list-length Ns
The maximum number of pending dependencies scheduling will allow before flushing the current state and starting over.
Large functions with few branches or calls can create excessively large lists which needlessly consume memory and resources.
.Pp
.It Sy max-inline-insns-single Ns
Several parameters control the tree inliner used in gcc.
This number sets the maximum number of instructions (counted in GCC's internal representation) in a single function that the tree inliner will consider for inlining.
This only affects functions declared inline and methods implemented in a class declaration (C++).
The default value is 450.
.Pp
.It Sy max-inline-insns-auto Ns
When you use
.Fl finline-functions
(included in
.Fl O3 ) ,
a lot of functions that would otherwise not be considered for inlining by the compiler will be investigated.
To those functions, a different (more restrictive) limit compared to functions declared inline can be applied.
The default value is 90.
.Pp
.It Sy large-function-insns Ns
The limit specifying really large functions.
For functions larger than this limit after inlining inlining is constrained by
.Fl -param Ar large-function-growth .
This parameter is useful primarily to avoid extreme compilation time caused by non-linear algorithms used by the backend.
This parameter is ignored when
.Fl funit-at-a-time
is not used.
The default value is 2700.
.Pp
.It Sy large-function-growth Ns
Specifies maximal growth of large function caused by inlining in percents.
This parameter is ignored when
.Fl funit-at-a-time
is not used.
The default value is 100 which limits large function growth to 2.0 times the original size.
.Pp
.It Sy large-unit-insns Ns
The limit specifying large translation unit.
Growth caused by inlining of units larger than this limit is limited by
.Fl -param Ar inline-unit-growth .
For small units this might be too tight (consider unit consisting of function A that is inline and B that just calls A three time.
If B is small relative to A, the growth of unit is 300% and yet such inlining is very sane.
For very large units consisting of small inlininable functions however the overall unit growth limit is needed to avoid exponential explosion of code size.
Thus for smaller units, the size is increased to
.Fl -param Ar large-unit-insns
before aplying
.Fl -param Ar inline-unit-growth .
The default is 10000
.Pp
.It Sy inline-unit-growth Ns
Specifies maximal overall growth of the compilation unit caused by inlining.
This parameter is ignored when
.Fl funit-at-a-time
is not used.
The default value is 50 which limits unit growth to 1.5 times the original size.
.Pp
.It Sy max-inline-insns-recursive Ns
.It Sy max-inline-insns-recursive-auto Ns
Specifies maximum number of instructions out-of-line copy of self recursive inline function can grow into by performing recursive inlining.
.Pp
For functions declared inline
.Fl -param Ar max-inline-insns-recursive
is taken into account.
For function not declared inline, recursive inlining happens only when
.Fl finline-functions
(included in
.Fl O3 )
is enabled and
.Fl -param Ar max-inline-insns-recursive-auto
is used.
The default value is 450.
.Pp
.It Sy max-inline-recursive-depth Ns
.It Sy max-inline-recursive-depth-auto Ns
Specifies maximum recursion depth used by the recursive inlining.
.Pp
For functions declared inline
.Fl -param Ar max-inline-recursive-depth
is taken into account.
For function not declared inline, recursive inlining happens only when
.Fl finline-functions
(included in
.Fl O3 )
is enabled and
.Fl -param Ar max-inline-recursive-depth-auto
is used.
The default value is 450.
.Pp
.It Sy min-inline-recursive-probability Ns
Recursive inlining is profitable only for function having deep recursion in average and can hurt for function having little recursion depth by increasing the prologue size or complexity of function body to other optimizers.
.Pp
When profile feedback is available (see
.Fl fprofile-generate )
the actual recursion depth can be guessed from probability that function will recurse via given call expression.
This parameter limits inlining only to call expression whose probability exceeds given threshold (in percents).
The default value is 10.
.Pp
.It Sy inline-call-cost Ns
Specify cost of call instruction relative to simple arithmetics operations (having cost of 1).
Increasing this cost disqualifies inlining of non-leaf functions and at the same time increases size of leaf function that is believed to reduce function size by being inlined.
In effect it increases amount of inlining for code having large abstraction penalty (many functions that just pass the arguments to other functions) and decrease inlining for code with low abstraction penalty.
The default value is 16.
.Pp
.It Sy max-unrolled-insns Ns
The maximum number of instructions that a loop should have if that loop is unrolled, and if the loop is unrolled, it determines how many times the loop code is unrolled.
.Pp
.It Sy max-average-unrolled-insns Ns
The maximum number of instructions biased by probabilities of their execution that a loop should have if that loop is unrolled, and if the loop is unrolled, it determines how many times the loop code is unrolled.
.Pp
.It Sy max-unroll-times Ns
The maximum number of unrollings of a single loop.
.Pp
.It Sy max-peeled-insns Ns
The maximum number of instructions that a loop should have if that loop is peeled, and if the loop is peeled, it determines how many times the loop code is peeled.
.Pp
.It Sy max-peel-times Ns
The maximum number of peelings of a single loop.
.Pp
.It Sy max-completely-peeled-insns Ns
The maximum number of insns of a completely peeled loop.
.Pp
.It Sy max-completely-peel-times Ns
The maximum number of iterations of a loop to be suitable for complete peeling.
.Pp
.It Sy max-unswitch-insns Ns
The maximum number of insns of an unswitched loop.
.Pp
.It Sy max-unswitch-level Ns
The maximum number of branches unswitched in a single loop.
.Pp
.It Sy lim-expensive Ns
The minimum cost of an expensive expression in the loop invariant motion.
.Pp
.It Sy iv-consider-all-candidates-bound Ns
Bound on number of candidates for induction variables below that all candidates are considered for each use in induction variable optimizations.
Only the most relevant candidates are considered if there are more candidates, to avoid quadratic time complexity.
.Pp
.It Sy iv-max-considered-uses Ns
The induction variable optimizations give up on loops that contain more induction variable uses.
.Pp
.It Sy iv-always-prune-cand-set-bound Ns
If number of candidates in the set is smaller than this value, we always try to remove unnecessary ivs from the set during its optimization when a new iv is added to the set.
.Pp
.It Sy scev-max-expr-size Ns
Bound on size of expressions used in the scalar evolutions analyzer.
Large expressions slow the analyzer.
.Pp
.It Sy vect-max-version-checks Ns
The maximum number of runtime checks that can be performed when doing loop versioning in the vectorizer.
See option ftree-vect-loop-version for more information.
.Pp
.It Sy max-iterations-to-track Ns
The maximum number of iterations of a loop the brute force algorithm for analysis of # of iterations of the loop tries to evaluate.
.Pp
.It Sy hot-bb-count-fraction Ns
Select fraction of the maximal count of repetitions of basic block in program given basic block needs to have to be considered hot.
.Pp
.It Sy hot-bb-frequency-fraction Ns
Select fraction of the maximal frequency of executions of basic block in function given basic block needs to have to be considered hot
.Pp
.It Sy max-predicted-iterations Ns
The maximum number of loop iterations we predict statically.
This is useful in cases where function contain single loop with known bound and other loop with unknown.
We predict the known number of iterations correctly, while the unknown number of iterations average to roughly 10.
This means that the loop without bounds would appear artificially cold relative to the other one.
.Pp
.It Sy tracer-dynamic-coverage Ns
.It Sy tracer-dynamic-coverage-feedback Ns
This value is used to limit superblock formation once the given percentage of executed instructions is covered.
This limits unnecessary code size expansion.
.Pp
The
.Sy tracer-dynamic-coverage-feedback
is used only when profile feedback is available.
The real profiles (as opposed to statically estimated ones) are much less balanced allowing the threshold to be larger value.
.Pp
.It Sy tracer-max-code-growth Ns
Stop tail duplication once code growth has reached given percentage.
This is rather hokey argument, as most of the duplicates will be eliminated later in cross jumping, so it may be set to much higher values than is the desired code growth.
.Pp
.It Sy tracer-min-branch-ratio Ns
Stop reverse growth when the reverse probability of best edge is less than this threshold (in percent).
.Pp
.It Sy tracer-min-branch-ratio Ns
.It Sy tracer-min-branch-ratio-feedback Ns
Stop forward growth if the best edge do have probability lower than this threshold.
.Pp
Similarly to
.Sy tracer-dynamic-coverage
two values are present, one for compilation for profile feedback and one for compilation without.
The value for compilation with profile feedback needs to be more conservative (higher) in order to make tracer effective.
.Pp
.It Sy max-cse-path-length Ns
Maximum number of basic blocks on path that cse considers.
The default is 10.
.Pp
.It Sy max-cse-insns Ns
The maximum instructions CSE process before flushing.
The default is 1000.
.Pp
.It Sy global-var-threshold Ns
Counts the number of function calls
.Em ( n )
and the number of call-clobbered variables
.Em ( v ) .
If
.Em n
x
.Em v
is larger than this limit, a single artificial variable will be created to represent all the call-clobbered variables at function call sites.
This artificial variable will then be made to alias every call-clobbered variable.
(done as
.Va int * size_t
on the host machine; beware overflow).
.Pp
.It Sy max-aliased-vops Ns
Maximum number of virtual operands allowed to represent aliases before triggering the alias grouping heuristic.
Alias grouping reduces compile times and memory consumption needed for aliasing at the expense of precision loss in alias information.
.Pp
.It Sy ggc-min-expand Ns
GCC uses a garbage collector to manage its own memory allocation.
This parameter specifies the minimum percentage by which the garbage collector's heap should be allowed to expand between collections.
Tuning this may improve compilation speed; it has no effect on code generation.
.Pp
The default is 30% + 70% * (RAM/1GB) with an upper bound of 100% when RAM \*[Gt]= 1GB.
If
.Va getrlimit
is available, the notion of "RAM" is the smallest of actual RAM and
.Va RLIMIT_DATA
or
.Va RLIMIT_AS .
If GCC is not able to calculate RAM on a particular platform, the lower bound of 30% is used.
Setting this parameter and
.Sy ggc-min-heapsize
to zero causes a full collection to occur at every opportunity.
This is extremely slow, but can be useful for debugging.
.Pp
.It Sy ggc-min-heapsize Ns
Minimum size of the garbage collector's heap before it begins bothering to collect garbage.
The first collection occurs after the heap expands by
.Sy ggc-min-expand
% beyond
.Sy ggc-min-heapsize .
Again, tuning this may improve compilation speed, and has no effect on code generation.
.Pp
The default is the smaller of RAM/8, RLIMIT_RSS, or a limit which tries to ensure that RLIMIT_DATA or RLIMIT_AS are not exceeded, but with a lower bound of 4096 (four megabytes) and an upper bound of 131072 (128 megabytes).
If GCC is not able to calculate RAM on a particular platform, the lower bound is used.
Setting this parameter very large effectively disables garbage collection.
Setting this parameter and
.Sy ggc-min-expand
to zero causes a full collection to occur at every opportunity.
.Pp
.It Sy max-reload-search-insns Ns
The maximum number of instruction reload should look backward for equivalent register.
Increasing values mean more aggressive optimization, making the compile time increase with probably slightly better performance.
The default value is 100.
.Pp
.It Sy max-cselib-memory-location Ns
The maximum number of memory locations cselib should take into account.
Increasing values mean more aggressive optimization, making the compile time increase with probably slightly better performance.
The default value is 500.
.Pp
.It Sy max-flow-memory-location Ns
Similar as
.Sy max-cselib-memory-location
but for dataflow liveness.
The default value is 100.
.Pp
.It Sy reorder-blocks-duplicate Ns
.It Sy reorder-blocks-duplicate-feedback Ns
Used by basic block reordering pass to decide whether to use unconditional branch or duplicate the code on its destination.
Code is duplicated when its estimated size is smaller than this value multiplied by the estimated size of unconditional jump in the hot spots of the program.
.Pp
The
.Sy reorder-block-duplicate-feedback
is used only when profile feedback is available and may be set to higher values than
.Sy reorder-block-duplicate
since information about the hot spots is more accurate.
.Pp
.It Sy max-sched-ready-insns Ns
The maximum number of instructions ready to be issued the scheduler should consider at any given time during the first scheduling pass.
Increasing values mean more thorough searches, making the compilation time increase with probably little benefit.
The default value is 100.
.Pp
.It Sy max-sched-region-blocks Ns
The maximum number of blocks in a region to be considered for interblock scheduling.
The default value is 10.
.Pp
.It Sy max-sched-region-insns Ns
The maximum number of insns in a region to be considered for interblock scheduling.
The default value is 100.
.Pp
.It Sy min-sched-prob Ns
The minimum probability of reaching a source block for interblock speculative scheduling.
The default value is 40.
.Pp
.It Sy max-last-value-rtl Ns
The maximum size measured as number of RTLs that can be recorded in an expression in combiner for a pseudo register as last known value of that register.
The default is 10000.
.Pp
.It Sy integer-share-limit Ns
Small integer constants can use a shared data structure, reducing the compiler's memory usage and increasing its speed.
This sets the maximum value of a shared integer constant's.
The default value is 256.
.Pp
.It Sy min-virtual-mappings Ns
Specifies the minimum number of virtual mappings in the incremental SSA updater that should be registered to trigger the virtual mappings heuristic defined by virtual-mappings-ratio.
The default value is 100.
.Pp
.It Sy virtual-mappings-ratio Ns
If the number of virtual mappings is virtual-mappings-ratio bigger than the number of virtual symbols to be updated, then the incremental SSA updater switches to a full update for those symbols.
The default ratio is 3.
.Pp
.It Sy ssp-buffer-size Ns
The minimum size of buffers (i.e. arrays) that will receive stack smashing protection when
.Fl fstack-protection
is used.
.Pp
.It Sy max-jump-thread-duplication-stmts Ns
Maximum number of statements allowed in a block that needs to be duplicated when threading jumps.
.Pp
.It Sy max-fields-for-field-sensitive Ns
Maximum number of fields in a structure we will treat in a field sensitive manner during pointer analysis.
.Pp
.El
.El
.Ss Options Controlling the Preprocessor
These options control the C preprocessor, which is run on each C source file before actual compilation.
.Pp
If you use the
.Fl E
option, nothing is done except preprocessing.
Some of these options make sense only together with
.Fl E
because they cause the preprocessor output to be unsuitable for actual compilation.
.Pp
.Bl -tag -width xx
.It Fl Wp, Ns Ar option
You can use
.Fl Wp, Ns Ar option
to bypass the compiler driver and pass
.Em option
directly through to the preprocessor.
If
.Em option
contains commas, it is split into multiple options at the commas.
However, many options are modified, translated or interpreted by the compiler driver before being passed to the preprocessor, and
.Fl Wp
forcibly bypasses this phase.
The preprocessor's direct interface is undocumented and subject to change, so whenever possible you should avoid using
.Fl Wp
and let the driver handle the options instead.
.Pp
.It Fl Xpreprocessor Ar option
Pass
.Em option
as an option to the preprocessor.
You can use this to supply system-specific preprocessor options which GCC does not know how to recognize.
.Pp
If you want to pass an option that takes an argument, you must use
.Fl Xpreprocessor
twice, once for the option and once for the argument.
.Pp
.El
.Bl -tag -width xx
.It Fl D Ar name
Predefine
.Em name
as a macro, with definition
.Va 1 .
.Pp
.It Fl D Ar name Ns = Ns Ar definition
The contents of
.Em definition
are tokenized and processed as if they appeared during translation phase three in a
.Sy #define
directive.
In particular, the definition will be truncated by embedded newline characters.
.Pp
If you are invoking the preprocessor from a shell or shell-like program you may need to use the shell's quoting syntax to protect characters such as spaces that have a meaning in the shell syntax.
.Pp
If you wish to define a function-like macro on the command line, write its argument list with surrounding parentheses before the equals sign (if any).
Parentheses are meaningful to most shells, so you will need to quote the option.
With
.Sy sh
and
.Sy csh ,
.Sy -D'
.Em name
.Sy (
.Em args...
.Sy )=
.Em definition
.Sy '
works.
.Pp
.Fl D
and
.Fl U
options are processed in the order they are given on the command line.
All
.Fl imacros Ar file
and
.Fl include Ar file
options are processed after all
.Fl D
and
.Fl U
options.
.Pp
.It Fl U Ar name
Cancel any previous definition of
.Em name ,
either built in or provided with a
.Fl D
option.
.Pp
.It Fl undef
Do not predefine any system-specific or GCC-specific macros.
The standard predefined macros remain defined.
.Pp
.It Fl I Ar dir
Add the directory
.Em dir
to the list of directories to be searched for header files.
Directories named by
.Fl I
are searched before the standard system include directories.
If the directory
.Em dir
is a standard system include directory, the option is ignored to ensure that the default search order for system directories and the special treatment of system headers are not defeated .
.Pp
.It Fl o Ar file
Write output to
.Em file .
This is the same as specifying
.Em file
as the second non-option argument to
.Sy cpp .
.Nm gcc
has a different interpretation of a second non-option argument, so you must use
.Fl o
to specify the output file.
.Pp
.It Fl Wall
Turns on all optional warnings which are desirable for normal code.
At present this is
.Fl Wcomment ,
.Fl Wtrigraphs ,
.Fl Wmultichar
and a warning about integer promotion causing a change of sign in
.Va #if
expressions.
Note that many of the preprocessor's warnings are on by default and have no options to control them.
.Pp
.It Fl Wcomment
.It Fl Wcomments
Warn whenever a comment-start sequence
.Sy /*
appears in a
.Sy /*
comment, or whenever a backslash-newline appears in a
.Sy //
comment.
(Both forms have the same effect.)
.Pp
.It Fl Wtrigraphs
@anchor{Wtrigraphs} Most trigraphs in comments cannot affect the meaning of the program.
However, a trigraph that would form an escaped newline
.Sy ( ??/
at the end of a line) can, by changing where the comment begins or ends.
Therefore, only trigraphs that would form escaped newlines produce warnings inside a comment.
.Pp
This option is implied by
.Fl Wall .
If
.Fl Wall
is not given, this option is still enabled unless trigraphs are enabled.
To get trigraph conversion without warnings, but get the other
.Fl Wall
warnings, use
.Fl trigraphs Fl Wall Fl Wno-trigraphs .
.Pp
.It Fl Wtraditional
Warn about certain constructs that behave differently in traditional and ISO C.
Also warn about ISO C constructs that have no traditional C equivalent, and problematic constructs which should be avoided.
.Pp
.It Fl Wimport
Warn the first time
.Sy #import
is used.
.Pp
.It Fl Wundef
Warn whenever an identifier which is not a macro is encountered in an
.Sy #if
directive, outside of
.Sy defined .
Such identifiers are replaced with zero.
.Pp
.It Fl Wunused-macros
Warn about macros defined in the main file that are unused.
A macro is
.Em used
if it is expanded or tested for existence at least once.
The preprocessor will also warn if the macro has not been used at the time it is redefined or undefined.
.Pp
Built-in macros, macros defined on the command line, and macros defined in include files are not warned about.
.Pp
.Em Note:
If a macro is actually used, but only used in skipped conditional blocks, then CPP will report it as unused.
To avoid the warning in such a case, you might improve the scope of the macro's definition by, for example, moving it into the first skipped block.
Alternatively, you could provide a dummy use with something like:
.Pp
.Bd -literal -offset indent
#if defined the_macro_causing_the_warning
#endif
.Ed
.It Fl Wendif-labels
Warn whenever an
.Sy #else
or an
.Sy #endif
are followed by text.
This usually happens in code of the form
.Pp
.Bd -literal -offset indent
#if FOO
\&...
#else FOO
\&...
#endif FOO
.Ed
The second and third
.Va FOO
should be in comments, but often are not in older programs.
This warning is on by default.
.Pp
.It Fl Werror
Make all warnings into hard errors.
Source code which triggers warnings will be rejected.
.Pp
.It Fl Wsystem-headers
Issue warnings for code in system headers.
These are normally unhelpful in finding bugs in your own code, therefore suppressed.
If you are responsible for the system library, you may want to see them.
.Pp
.It Fl w
Suppress all warnings, including those which GNU CPP issues by default.
.Pp
.It Fl pedantic
Issue all the mandatory diagnostics listed in the C standard.
Some of them are left out by default, since they trigger frequently on harmless code.
.Pp
.It Fl pedantic-errors
Issue all the mandatory diagnostics, and make all mandatory diagnostics into errors.
This includes mandatory diagnostics that GCC issues without
.Fl pedantic
but treats as warnings.
.Pp
.It Fl M
Instead of outputting the result of preprocessing, output a rule suitable for
.Sy make
describing the dependencies of the main source file.
The preprocessor outputs one
.Sy make
rule containing the object file name for that source file, a colon, and the names of all the included files, including those coming from
.Fl include
or
.Fl imacros
command line options.
.Pp
Unless specified explicitly (with
.Fl MT
or
.Fl MQ ) ,
the object file name consists of the basename of the source file with any suffix replaced with object file suffix.
If there are many included files then the rule is split into several lines using
.Sy \e
-newline.
The rule has no commands.
.Pp
This option does not suppress the preprocessor's debug output, such as
.Fl dM .
To avoid mixing such debug output with the dependency rules you should explicitly specify the dependency output file with
.Fl MF ,
or use an environment variable like
.Sy DEPENDENCIES_OUTPUT .
Debug output will still be sent to the regular output stream as normal.
.Pp
Passing
.Fl M
to the driver implies
.Fl E ,
and suppresses warnings with an implicit
.Fl w .
.Pp
.It Fl MM
Like
.Fl M
but do not mention header files that are found in system header directories, nor header files that are included, directly or indirectly, from such a header.
.Pp
This implies that the choice of angle brackets or double quotes in an
.Sy #include
directive does not in itself determine whether that header will appear in
.Fl MM
dependency output.
This is a slight change in semantics from GCC versions 3.0 and earlier.
.Pp
@anchor{dashMF}
.Pp
.It Fl MF Ar file
When used with
.Fl M
or
.Fl MM ,
specifies a file to write the dependencies to.
If no
.Fl MF
switch is given the preprocessor sends the rules to the same place it would have sent preprocessed output.
.Pp
When used with the driver options
.Fl MD
or
.Fl MMD ,
.Fl MF
overrides the default dependency output file.
.Pp
.It Fl MG
In conjunction with an option such as
.Fl M
requesting dependency generation,
.Fl MG
assumes missing header files are generated files and adds them to the dependency list without raising an error.
The dependency filename is taken directly from the
.Va #include
directive without prepending any path.
.Fl MG
also suppresses preprocessed output, as a missing header file renders this useless.
.Pp
This feature is used in automatic updating of makefiles.
.Pp
.It Fl MP
This option instructs CPP to add a phony target for each dependency other than the main file, causing each to depend on nothing.
These dummy rules work around errors
.Sy make
gives if you remove header files without updating the
.Pa Makefile
to match.
.Pp
This is typical output:
.Pp
.Bd -literal -offset indent
test.o: test.c test.h

test.h:
.Ed
.It Fl MT Ar target
Change the target of the rule emitted by dependency generation.
By default CPP takes the name of the main input file, including any path, deletes any file suffix such as
.Sy .c ,
and appends the platform's usual object suffix.
The result is the target.
.Pp
An
.Fl MT
option will set the target to be exactly the string you specify.
If you want multiple targets, you can specify them as a single argument to
.Fl MT ,
or use multiple
.Fl MT
options.
.Pp
For example,
.Sy -MT '$(objpfx)foo.o'
might give
.Pp
.Bd -literal -offset indent
$(objpfx)foo.o: foo.c
.Ed
.It Fl MQ Ar target
Same as
.Fl MT ,
but it quotes any characters which are special to Make.
.Sy -MQ '$(objpfx)foo.o'
gives
.Pp
.Bd -literal -offset indent
$$(objpfx)foo.o: foo.c
.Ed
The default target is automatically quoted, as if it were given with
.Fl MQ .
.Pp
.It Fl MD
.Fl MD
is equivalent to
.Fl M Fl MF Ar file ,
except that
.Fl E
is not implied.
The driver determines
.Em file
based on whether an
.Fl o
option is given.
If it is, the driver uses its argument but with a suffix of
.Pa .d ,
otherwise it take the basename of the input file and applies a
.Pa .d
suffix.
.Pp
If
.Fl MD
is used in conjunction with
.Fl E ,
any
.Fl o
switch is understood to specify the dependency output file (but @pxref{dashMF,,-MF}), but if used without
.Fl E ,
each
.Fl o
is understood to specify a target object file.
.Pp
Since
.Fl E
is not implied,
.Fl MD
can be used to generate a dependency output file as a side-effect of the compilation process.
.Pp
.It Fl MMD
Like
.Fl MD
except mention only user header files, not system header files.
.Pp
.It Fl fpch-deps
When using precompiled headers, this flag will cause the dependency-output flags to also list the files from the precompiled header's dependencies.
If not specified only the precompiled header would be listed and not the files that were used to create it because those files are not consulted when a precompiled header is used.
.Pp
.It Fl fpch-preprocess
This option allows use of a precompiled header together with
.Fl E .
It inserts a special
.Va #pragma ,
.Va #pragma GCC pch_preprocess \&"\*[Lt]filename\*[Gt]"
in the output to mark the place where the precompiled header was found, and its filename.
When
.Fl fpreprocessed
is in use, GCC recognizes this
.Va #pragma
and loads the PCH.
.Pp
This option is off by default, because the resulting preprocessed output is only really suitable as input to GCC.
It is switched on by
.Fl save-temps .
.Pp
You should not write this
.Va #pragma
in your own code, but it is safe to edit the filename if the PCH file is available in a different location.
The filename may be absolute or it may be relative to GCC's current directory.
.Pp
.It Fl x Ar c
.It Fl x Ar c++
.It Fl x Ar objective-c
.It Fl x Ar assembler-with-cpp
Specify the source language: C, C++, Objective-C, or assembly.
This has nothing to do with standards conformance or extensions; it merely selects which base syntax to expect.
If you give none of these options, cpp will deduce the language from the extension of the source file:
.Sy .c ,
.Sy .cc ,
.Sy .m ,
or
.Sy .S .
Some other common extensions for C++ and assembly are also recognized.
If cpp does not recognize the extension, it will treat the file as C; this is the most generic mode.
.Pp
.Em Note:
Previous versions of cpp accepted a
.Fl lang
option which selected both the language and the standards conformance level.
This option has been removed, because it conflicts with the
.Fl l
option.
.Pp
.It Fl std= Ns Ar standard
.It Fl ansi
Specify the standard to which the code should conform.
Currently CPP knows about C and C++ standards; others may be added in the future.
.Pp
.Em standard
may be one of:
.Pp
.Bl -tag -width xx
.It Sy iso9899:1990 Ns
.It Sy c89 Ns
The ISO C standard from 1990.
.Sy c89
is the customary shorthand for this version of the standard.
.Pp
The
.Fl ansi
option is equivalent to
.Fl std=c89 .
.Pp
.It Sy iso9899:199409 Ns
The 1990 C standard, as amended in 1994.
.Pp
.It Sy iso9899:1999 Ns
.It Sy c99 Ns
.It Sy iso9899:199x Ns
.It Sy c9x Ns
The revised ISO C standard, published in December 1999.
Before publication, this was known as C9X.
.Pp
.It Sy gnu89 Ns
The 1990 C standard plus GNU extensions.
This is the default.
.Pp
.It Sy gnu99 Ns
.It Sy gnu9x Ns
The 1999 C standard plus GNU extensions.
.Pp
.It Sy c++98 Ns
The 1998 ISO C++ standard plus amendments.
.Pp
.It Sy gnu++98 Ns
The same as
.Fl std=c++98
plus GNU extensions.
This is the default for C++ code.
.Pp
.El
.It Fl I-
Split the include path.
Any directories specified with
.Fl I
options before
.Fl I-
are searched only for headers requested with
.Va .Sy #include \&"file" ;
they are not searched for
.Va .Sy #include \*[Lt]file\*[Gt] .
If additional directories are specified with
.Fl I
options after the
.Fl I- ,
those directories are searched for all
.Sy #include
directives.
.Pp
In addition,
.Fl I-
inhibits the use of the directory of the current file directory as the first search directory for
.Va .Sy #include \&"file" .
This option has been deprecated.
.Pp
.It Fl nostdinc
Do not search the standard system directories for header files.
Only the directories you have specified with
.Fl I
options (and the directory of the current file, if appropriate) are searched.
.Pp
.It Fl nostdinc++
Do not search for header files in the C++-specific standard directories, but do still search the other standard directories.
(This option is used when building the C++ library.)
.Pp
.It Fl include Ar file
Process
.Em file
as if
.Va #include \&"file"
appeared as the first line of the primary source file.
However, the first directory searched for
.Em file
is the preprocessor's working directory
.Em instead of
the directory containing the main source file.
If not found there, it is searched for in the remainder of the
.Va #include \&"..."
search chain as normal.
.Pp
If multiple
.Fl include
options are given, the files are included in the order they appear on the command line.
.Pp
.It Fl imacros Ar file
Exactly like
.Fl include ,
except that any output produced by scanning
.Em file
is thrown away.
Macros it defines remain defined.
This allows you to acquire all the macros from a header without also processing its declarations.
.Pp
All files specified by
.Fl imacros
are processed before all files specified by
.Fl include .
.Pp
.It Fl idirafter Ar dir
Search
.Em dir
for header files, but do it
.Em after
all directories specified with
.Fl I
and the standard system directories have been exhausted.
.Em dir
is treated as a system include directory.
.Pp
.It Fl iprefix Ar prefix
Specify
.Em prefix
as the prefix for subsequent
.Fl iwithprefix
options.
If the prefix represents a directory, you should include the final
.Sy / .
.Pp
.It Fl iwithprefix Ar dir
.It Fl iwithprefixbefore Ar dir
Append
.Em dir
to the prefix specified previously with
.Fl iprefix ,
and add the resulting directory to the include search path.
.Fl iwithprefixbefore
puts it in the same place
.Fl I
would;
.Fl iwithprefix
puts it where
.Fl idirafter
would.
.Pp
.It Fl isysroot Ar dir
This option is like the
.Fl -sysroot
option, but applies only to header files.
See the
.Fl -sysroot
option for more information.
.Pp
.It Fl isystem Ar dir
Search
.Em dir
for header files, after all directories specified by
.Fl I
but before the standard system directories.
Mark it as a system directory, so that it gets the same special treatment as is applied to the standard system directories.
.Pp
.It Fl cxx-isystem Ar dir
Search
.Em dir
for C++ header files, after all directories specified by
.Fl I
but before the standard system directories.
Mark it as a system directory, so that it gets the same special treatment as is applied to the standard system directories.
.Pp
.It Fl iquote Ar dir
Search
.Em dir
only for header files requested with
.Va .Sy #include \&"file" ;
they are not searched for
.Va .Sy #include \*[Lt]file\*[Gt] ,
before all directories specified by
.Fl I
and before the standard system directories.
.Pp
.It Fl fdollars-in-identifiers
@anchor{fdollars-in-identifiers} Accept
.Sy $
in identifiers.
.Pp
.It Fl fextended-identifiers
Accept universal character names in identifiers.
This option is experimental; in a future version of GCC, it will be enabled by default for C99 and C++.
.Pp
.It Fl fpreprocessed
Indicate to the preprocessor that the input file has already been preprocessed.
This suppresses things like macro expansion, trigraph conversion, escaped newline splicing, and processing of most directives.
The preprocessor still recognizes and removes comments, so that you can pass a file preprocessed with
.Fl C
to the compiler without problems.
In this mode the integrated preprocessor is little more than a tokenizer for the front ends.
.Pp
.Fl fpreprocessed
is implicit if the input file has one of the extensions
.Sy .i ,
.Sy .ii
or
.Sy .mi .
These are the extensions that GCC uses for preprocessed files created by
.Fl save-temps .
.Pp
.It Fl ftabstop= Ns Ar width
Set the distance between tab stops.
This helps the preprocessor report correct column numbers in warnings or errors, even if tabs appear on the line.
If the value is less than 1 or greater than 100, the option is ignored.
The default is 8.
.Pp
.It Fl fexec-charset= Ns Ar charset
Set the execution character set, used for string and character constants.
The default is UTF-8.
.Em charset
can be any encoding supported by the system's
.Va iconv
library routine.
.Pp
.It Fl fwide-exec-charset= Ns Ar charset
Set the wide execution character set, used for wide string and character constants.
The default is UTF-32 or UTF-16, whichever corresponds to the width of
.Va wchar_t .
As with
.Fl fexec-charset ,
.Em charset
can be any encoding supported by the system's
.Va iconv
library routine; however, you will have problems with encodings that do not fit exactly in
.Va wchar_t .
.Pp
.It Fl finput-charset= Ns Ar charset
Set the input character set, used for translation from the character set of the input file to the source character set used by GCC.
If the locale does not specify, or GCC cannot get this information from the locale, the default is UTF-8.
This can be overridden by either the locale or this command line option.
Currently the command line option takes precedence if there's a conflict.
.Em charset
can be any encoding supported by the system's
.Va iconv
library routine.
.Pp
.It Fl fworking-directory
Enable generation of linemarkers in the preprocessor output that will let the compiler know the current working directory at the time of preprocessing.
When this option is enabled, the preprocessor will emit, after the initial linemarker, a second linemarker with the current working directory followed by two slashes.
GCC will use this directory, when it's present in the preprocessed input, as the directory emitted as the current working directory in some debugging information formats.
This option is implicitly enabled if debugging information is enabled, but this can be inhibited with the negated form
.Fl fno-working-directory .
If the
.Fl P
flag is present in the command line, this option has no effect, since no
.Va #line
directives are emitted whatsoever.
.Pp
.It Fl fno-show-column
Do not print column numbers in diagnostics.
This may be necessary if diagnostics are being scanned by a program that does not understand the column numbers, such as
.Sy dejagnu .
.Pp
.It Fl A Ar predicate Ns = Ns Ar answer
Make an assertion with the predicate
.Em predicate
and answer
.Em answer .
This form is preferred to the older form
.Fl A Ar predicate
.Sy (
.Em answer
.Sy ) ,
which is still supported, because it does not use shell special characters.
.Pp
.It Fl A Fl  Ns Ar predicate Ns = Ns Ar answer
Cancel an assertion with the predicate
.Em predicate
and answer
.Em answer .
.Pp
.It Fl dCHARS
.Em CHARS
is a sequence of one or more of the following characters, and must not be preceded by a space.
Other characters are interpreted by the compiler proper, or reserved for future versions of GCC, and so are silently ignored.
If you specify characters whose behavior conflicts, the result is undefined.
.Pp
.Bl -tag -width xx
.It Sy M Ns
Instead of the normal output, generate a list of
.Sy #define
directives for all the macros defined during the execution of the preprocessor, including predefined macros.
This gives you a way of finding out what is predefined in your version of the preprocessor.
Assuming you have no file
.Pa foo.h ,
the command
.Pp
.Bd -literal -offset indent
touch foo.h; cpp -dM foo.h
.Ed
will show all the predefined macros.
.Pp
.It Sy D Ns
Like
.Sy M
except in two respects: it does
.Em not
include the predefined macros, and it outputs
.Em both
the
.Sy #define
directives and the result of preprocessing.
Both kinds of output go to the standard output file.
.Pp
.It Sy N Ns
Like
.Sy D ,
but emit only the macro names, not their expansions.
.Pp
.It Sy I Ns
Output
.Sy #include
directives in addition to the result of preprocessing.
.Pp
.El
.It Fl P
Inhibit generation of linemarkers in the output from the preprocessor.
This might be useful when running the preprocessor on something that is not C code, and will be sent to a program which might be confused by the linemarkers.
.Pp
.It Fl C
Do not discard comments.
All comments are passed through to the output file, except for comments in processed directives, which are deleted along with the directive.
.Pp
You should be prepared for side effects when using
.Fl C ;
it causes the preprocessor to treat comments as tokens in their own right.
For example, comments appearing at the start of what would be a directive line have the effect of turning that line into an ordinary source line, since the first token on the line is no longer a
.Sy # .
.Pp
.It Fl CC
Do not discard comments, including during macro expansion.
This is like
.Fl C ,
except that comments contained within macros are also passed through to the output file where the macro is expanded.
.Pp
In addition to the side-effects of the
.Fl C
option, the
.Fl CC
option causes all C++-style comments inside a macro to be converted to C-style comments.
This is to prevent later use of that macro from inadvertently commenting out the remainder of the source line.
.Pp
The
.Fl CC
option is generally used to support lint comments.
.Pp
.It Fl traditional-cpp
Try to imitate the behavior of old-fashioned C preprocessors, as opposed to ISO C preprocessors.
.Pp
.It Fl trigraphs
Process trigraph sequences.
These are three-character sequences, all starting with
.Sy ?? ,
that are defined by ISO C to stand for single characters.
For example,
.Sy ??/
stands for
.Sy \e ,
so
.Sy '??/n'
is a character constant for a newline.
By default, GCC ignores trigraphs, but in standard-conforming modes it converts them.
See the
.Fl std
and
.Fl ansi
options.
.Pp
The nine trigraphs and their replacements are
.Pp
.Bd -literal -offset indent
Trigraph:       ??(  ??)  ??\*[Lt]  ??\*[Gt]  ??=  ??/  ??'  ??!  ??-
Replacement:      [    ]    {    }    #    \e    ^    |    ~
.Ed
.It Fl remap
Enable special code to work around file systems which only permit very short file names, such as MS-DOS.
.Pp
.It Fl -help
.It Fl -target-help
Print text describing all the command line options instead of preprocessing anything.
.Pp
.It Fl v
Verbose mode.
Print out GNU CPP's version number at the beginning of execution, and report the final form of the include path.
.Pp
.It Fl H
Print the name of each header file used, in addition to other normal activities.
Each name is indented to show how deep in the
.Sy #include
stack it is.
Precompiled header files are also printed, even if they are found to be invalid; an invalid precompiled header file is printed with
.Sy ...x
and a valid one with
.Sy ...! .
.Pp
.It Fl version
.It Fl -version
Print out GNU CPP's version number.
With one dash, proceed to preprocess as normal.
With two dashes, exit immediately.
.Pp
.El
.Ss Passing Options to the Assembler
You can pass options to the assembler.
.Pp
.Bl -tag -width xx
.It Fl Wa, Ns Ar option
Pass
.Em option
as an option to the assembler.
If
.Em option
contains commas, it is split into multiple options at the commas.
.Pp
.It Fl Xassembler Ar option
Pass
.Em option
as an option to the assembler.
You can use this to supply system-specific assembler options which GCC does not know how to recognize.
.Pp
If you want to pass an option that takes an argument, you must use
.Fl Xassembler
twice, once for the option and once for the argument.
.Pp
.El
.Ss Options for Linking
These options come into play when the compiler links object files into an executable output file.
They are meaningless if the compiler is not doing a link step.
.Pp
.Bl -tag -width xx
.It Em object-file-name Ns
A file name that does not end in a special recognized suffix is considered to name an object file or library.
(Object files are distinguished from libraries by the linker according to the file contents.) If linking is done, these object files are used as input to the linker.
.Pp
.It Fl c
.It Fl S
.It Fl E
If any of these options is used, then the linker is not run, and object file names should not be used as arguments.
.Pp
.It Fl l Ns Ar library
.It Fl l Ar library
Search the library named
.Em library
when linking.
(The second alternative with the library as a separate argument is only for POSIX compliance and is not recommended.)
.Pp
It makes a difference where in the command you write this option; the linker searches and processes libraries and object files in the order they are specified.
Thus,
.Sy foo.o -lz bar.o
searches library
.Sy z
after file
.Pa foo.o
but before
.Pa bar.o .
If
.Pa bar.o
refers to functions in
.Sy z ,
those functions may not be loaded.
.Pp
The linker searches a standard list of directories for the library, which is actually a file named
.Pa liblibrary.a .
The linker then uses this file as if it had been specified precisely by name.
.Pp
The directories searched include several standard system directories plus any that you specify with
.Fl L .
.Pp
Normally the files found this way are library files---archive files whose members are object files.
The linker handles an archive file by scanning through it for members which define symbols that have so far been referenced but not defined.
But if the file that is found is an ordinary object file, it is linked in the usual fashion.
The only difference between using an
.Fl l
option and specifying a file name is that
.Fl l
surrounds
.Em library
with
.Sy lib
and
.Sy .a
and searches several directories.
.Pp
.It Fl lobjc
You need this special case of the
.Fl l
option in order to link an Objective-C or Objective-C++ program.
.Pp
.It Fl nostartfiles
Do not use the standard system startup files when linking.
The standard system libraries are used normally, unless
.Fl nostdlib
or
.Fl nodefaultlibs
is used.
.Pp
.It Fl nodefaultlibs
Do not use the standard system libraries when linking.
Only the libraries you specify will be passed to the linker.
The standard startup files are used normally, unless
.Fl nostartfiles
is used.
The compiler may generate calls to
.Va memcmp ,
.Va memset ,
.Va memcpy
and
.Va memmove .
These entries are usually resolved by entries in libc.
These entry points should be supplied through some other mechanism when this option is specified.
.Pp
.It Fl nostdlib
Do not use the standard system startup files or libraries when linking.
No startup files and only the libraries you specify will be passed to the linker.
The compiler may generate calls to
.Va memcmp ,
.Va memset ,
.Va memcpy
and
.Va memmove .
These entries are usually resolved by entries in libc.
These entry points should be supplied through some other mechanism when this option is specified.
.Pp
One of the standard libraries bypassed by
.Fl nostdlib
and
.Fl nodefaultlibs
is
.Pa libgcc.a ,
a library of internal subroutines that GCC uses to overcome shortcomings of particular machines, or special needs for some languages.
.Pp
In most cases, you need
.Pa libgcc.a
even when you want to avoid other standard libraries.
In other words, when you specify
.Fl nostdlib
or
.Fl nodefaultlibs
you should usually specify
.Fl lgcc
as well.
This ensures that you have no unresolved references to internal GCC library subroutines.
(For example,
.Sy __main ,
used to ensure C++ constructors will be called.)
.Pp
.It Fl pie
Produce a position independent executable on targets which support it.
For predictable results, you must also specify the same set of options that were used to generate code
.Fl ( fpie ,
.Fl fPIE ,
or model suboptions) when you specify this option.
.Pp
.It Fl rdynamic
Pass the flag
.Fl export-dynamic
to the ELF linker, on targets that support it.
This instructs the linker to add all symbols, not only used ones, to the dynamic symbol table.
This option is needed for some uses of
.Va dlopen
or to allow obtaining backtraces from within a program.
.Pp
.It Fl s
Remove all symbol table and relocation information from the executable.
.Pp
.It Fl static
On systems that support dynamic linking, this prevents linking with the shared libraries.
On other systems, this option has no effect.
.Pp
.It Fl shared
Produce a shared object which can then be linked with other objects to form an executable.
Not all systems support this option.
For predictable results, you must also specify the same set of options that were used to generate code
.Fl ( fpic ,
.Fl fPIC ,
or model suboptions) when you specify this option.[1]
.Pp
.It Fl shared-libgcc
.It Fl static-libgcc
On systems that provide
.Pa libgcc
as a shared library, these options force the use of either the shared or static version respectively.
If no shared version of
.Pa libgcc
was built when the compiler was configured, these options have no effect.
.Pp
There are several situations in which an application should use the shared
.Pa libgcc
instead of the static version.
The most common of these is when the application wishes to throw and catch exceptions across different shared libraries.
In that case, each of the libraries as well as the application itself should use the shared
.Pa libgcc .
.Pp
Therefore, the G++ and GCJ drivers automatically add
.Fl shared-libgcc
whenever you build a shared library or a main executable, because C++ and Java programs typically use exceptions, so this is the right thing to do.
.Pp
If, instead, you use the GCC driver to create shared libraries, you may find that they will not always be linked with the shared
.Pa libgcc .
If GCC finds, at its configuration time, that you have a non-GNU linker or a GNU linker that does not support option
.Fl -eh-frame-hdr ,
it will link the shared version of
.Pa libgcc
into shared libraries by default.
Otherwise, it will take advantage of the linker and optimize away the linking with the shared version of
.Pa libgcc ,
linking with the static version of libgcc by default.
This allows exceptions to propagate through such shared libraries, without incurring relocation costs at library load time.
.Pp
However, if a library or main executable is supposed to throw or catch exceptions, you must link it using the G++ or GCJ driver, as appropriate for the languages used in the program, or using the option
.Fl shared-libgcc ,
such that it is linked with the shared
.Pa libgcc .
.Pp
.It Fl symbolic
Bind references to global symbols when building a shared object.
Warn about any unresolved references (unless overridden by the link editor option
.Fl Xlinker Fl z Fl Xlinker Ar defs ) .
Only a few systems support this option.
.Pp
.It Fl Xlinker Ar option
Pass
.Em option
as an option to the linker.
You can use this to supply system-specific linker options which GCC does not know how to recognize.
.Pp
If you want to pass an option that takes an argument, you must use
.Fl Xlinker
twice, once for the option and once for the argument.
For example, to pass
.Fl assert Ar definitions ,
you must write
.Fl Xlinker Fl assert Fl Xlinker Ar definitions .
It does not work to write
.Sy -Xlinker \&"-assert definitions" ,
because this passes the entire string as a single argument, which is not what the linker expects.
.Pp
.It Fl Wl, Ns Ar option
Pass
.Em option
as an option to the linker.
If
.Em option
contains commas, it is split into multiple options at the commas.
.Pp
.It Fl u Ar symbol
Pretend the symbol
.Em symbol
is undefined, to force linking of library modules to define it.
You can use
.Fl u
multiple times with different symbols to force loading of additional library modules.
.Pp
.El
.Ss Options for Directory Search
These options specify directories to search for header files, for libraries and for parts of the compiler:
.Pp
.Bl -tag -width xx
.It Fl I Ns Ar dir
Add the directory
.Em dir
to the head of the list of directories to be searched for header files.
This can be used to override a system header file, substituting your own version, since these directories are searched before the system header file directories.
However, you should not use this option to add directories that contain vendor-supplied system header files (use
.Fl isystem
for that).
If you use more than one
.Fl I
option, the directories are scanned in left-to-right order; the standard system directories come after.
.Pp
If a standard system include directory, or a directory specified with
.Fl isystem ,
is also specified with
.Fl I ,
the
.Fl I
option will be ignored.
The directory will still be searched but as a system directory at its normal position in the system include chain.
This is to ensure that GCC's procedure to fix buggy system headers and the ordering for the include_next directive are not inadvertently changed.
If you really need to change the search order for system directories, use the
.Fl nostdinc
and/or
.Fl isystem
options.
.Pp
.It Fl iquote Ns Ar dir
Add the directory
.Em dir
to the head of the list of directories to be searched for header files only for the case of
.Sy #include \&"
.Em file
.Sy \&" ;
they are not searched for
.Sy #include \*[Lt]
.Em file
.Sy \*[Gt] ,
otherwise just like
.Fl I .
.Pp
.It Fl L Ns Ar dir
Add directory
.Em dir
to the list of directories to be searched for
.Fl l .
.Pp
.It Fl B Ns Ar prefix
This option specifies where to find the executables, libraries, include files, and data files of the compiler itself.
.Pp
The compiler driver program runs one or more of the subprograms
.Pa cpp ,
.Pa cc1 ,
.Pa as
and
.Pa ld .
It tries
.Em prefix
as a prefix for each program it tries to run, both with and without
.Em machine
.Sy /
.Em version
.Sy / .
.Pp
For each subprogram to be run, the compiler driver first tries the
.Fl B
prefix, if any.
If that name is not found, or if
.Fl B
was not specified, the driver tries two standard prefixes, which are
.Pa /usr/lib/gcc/
and
.Pa /usr/local/lib/gcc/ .
If neither of those results in a file name that is found, the unmodified program name is searched for using the directories specified in your
.Sy PATH
environment variable.
.Pp
The compiler will check to see if the path provided by the
.Fl B
refers to a directory, and if necessary it will add a directory separator character at the end of the path.
.Pp
.Fl B
prefixes that effectively specify directory names also apply to libraries in the linker, because the compiler translates these options into
.Fl L
options for the linker.
They also apply to includes files in the preprocessor, because the compiler translates these options into
.Fl isystem
options for the preprocessor.
In this case, the compiler appends
.Sy include
to the prefix.
.Pp
The run-time support file
.Pa libgcc.a
can also be searched for using the
.Fl B
prefix, if needed.
If it is not found there, the two standard prefixes above are tried, and that is all.
The file is left out of the link if it is not found by those means.
.Pp
Another way to specify a prefix much like the
.Fl B
prefix is to use the environment variable
.Sy GCC_EXEC_PREFIX .
.Pp
As a special kludge, if the path provided by
.Fl B
is
.Pa [dir/]stageN/ ,
where
.Em N
is a number in the range 0 to 9, then it will be replaced by
.Pa [dir/]include .
This is to help with boot-strapping the compiler.
.Pp
.It Fl specs= Ns Ar file
Process
.Em file
after the compiler reads in the standard
.Pa specs
file, in order to override the defaults that the
.Pa gcc
driver program uses when determining what switches to pass to
.Pa cc1 ,
.Pa cc1plus ,
.Pa as ,
.Pa ld ,
etc.
More than one
.Fl specs= Ns Ar file
can be specified on the command line, and they are processed in order, from left to right.
.Pp
.It Fl -sysroot= Ns Ar dir
Use
.Em dir
as the logical root directory for headers and libraries.
For example, if the compiler would normally search for headers in
.Pa /usr/include
and libraries in
.Pa /usr/lib ,
it will instead search
.Pa dir/usr/include
and
.Pa dir/usr/lib .
.Pp
If you use both this option and the
.Fl isysroot
option, then the
.Fl -sysroot
option will apply to libraries, but the
.Fl isysroot
option will apply to header files.
.Pp
The GNU linker (beginning with version 2.16) has the necessary support for this option.
If your linker does not support this option, the header file aspect of
.Fl -sysroot
will still work, but the library aspect will not.
.Pp
.It Fl I-
This option has been deprecated.
Please use
.Fl iquote
instead for
.Fl I
directories before the
.Fl I-
and remove the
.Fl I- .
Any directories you specify with
.Fl I
options before the
.Fl I-
option are searched only for the case of
.Sy #include \&"
.Em file
.Sy \&" ;
they are not searched for
.Sy #include \*[Lt]
.Em file
.Sy \*[Gt] .
.Pp
If additional directories are specified with
.Fl I
options after the
.Fl I- ,
these directories are searched for all
.Sy #include
directives.
(Ordinarily
.Em all
.Fl I
directories are used this way.)
.Pp
In addition, the
.Fl I-
option inhibits the use of the current directory (where the current input file came from) as the first search directory for
.Sy #include \&"
.Em file
.Sy \&" .
There is no way to override this effect of
.Fl I- .
With
.Sy -I.
you can specify searching the directory which was current when the compiler was invoked.
That is not exactly the same as what the preprocessor does by default, but it is often satisfactory.
.Pp
.Fl I-
does not inhibit the use of the standard system directories for header files.
Thus,
.Fl I-
and
.Fl nostdinc
are independent.
.Pp
.El
.Ss Specifying Target Machine and Compiler Version
The usual way to run GCC is to run the executable called
.Pa gcc ,
or
.Pa \*[Lt]machine\*[Gt]-gcc
when cross-compiling, or
.Pa \*[Lt]machine\*[Gt]-gcc-\*[Lt]version\*[Gt]
to run a version other than the one that was installed last.
Sometimes this is inconvenient, so GCC provides options that will switch to another cross-compiler or version.
.Pp
.Bl -tag -width xx
.It Fl b Ar machine
The argument
.Em machine
specifies the target machine for compilation.
.Pp
The value to use for
.Em machine
is the same as was specified as the machine type when configuring GCC as a cross-compiler.
For example, if a cross-compiler was configured with
.Sy configure arm-elf ,
meaning to compile for an arm processor with elf binaries, then you would specify
.Fl b Ar arm-elf
to run that cross compiler.
Because there are other options beginning with
.Fl b ,
the configuration must contain a hyphen.
.Pp
.It Fl V Ar version
The argument
.Em version
specifies which version of GCC to run.
This is useful when multiple versions are installed.
For example,
.Em version
might be
.Sy 4.0 ,
meaning to run GCC version 4.0.
.Pp
.El
The
.Fl V
and
.Fl b
options work by running the
.Pa \*[Lt]machine\*[Gt]-gcc-\*[Lt]version\*[Gt]
executable, so there's no real reason to use them if you can just run that directly.
.Ss Hardware Models and Configurations
Earlier we discussed the standard option
.Fl b
which chooses among different installed compilers for completely different target machines, such as VAX vs. 68000 vs. 80386.
.Pp
In addition, each of these target machine types can have its own special options, starting with
.Fl m ,
to choose among various hardware models or configurations---for example, 68010 vs 68020, floating coprocessor or none.
A single installed version of the compiler can compile for any model or configuration, according to the options specified.
.Pp
Some configurations of the compiler also support additional special options, usually for compatibility with other compilers on the same platform.
.Pp
.Bl -tag -width xx
.It Sy ARC Options
These options are defined for ARC implementations:
.Pp
.Bl -tag -width xx
.It Fl EL
Compile code for little endian mode.
This is the default.
.Pp
.It Fl EB
Compile code for big endian mode.
.Pp
.It Fl mmangle-cpu
Prepend the name of the cpu to all public symbol names.
In multiple-processor systems, there are many ARC variants with different instruction and register set characteristics.
This flag prevents code compiled for one cpu to be linked with code compiled for another.
No facility exists for handling variants that are "almost identical".
This is an all or nothing option.
.Pp
.It Fl mcpu= Ns Ar cpu
Compile code for ARC variant
.Em cpu .
Which variants are supported depend on the configuration.
All variants support
.Fl mcpu=base ,
this is the default.
.Pp
.It Fl mtext= Ns Ar text-section
.It Fl mdata= Ns Ar data-section
.It Fl mrodata= Ns Ar readonly-data-section
Put functions, data, and readonly data in
.Em text-section ,
.Em data-section ,
and
.Em readonly-data-section
respectively by default.
This can be overridden with the
.Va section
attribute.
.Pp
.El
.It Sy ARM Options
These
.Fl m
options are defined for Advanced RISC Machines (ARM) architectures:
.Pp
.Bl -tag -width xx
.It Fl mabi= Ns Ar name
Generate code for the specified ABI.
Permissible values are:
.Sy apcs-gnu ,
.Sy atpcs ,
.Sy aapcs ,
.Sy aapcs-linux
and
.Sy iwmmxt .
.Pp
.It Fl mapcs-frame
Generate a stack frame that is compliant with the ARM Procedure Call Standard for all functions, even if this is not strictly necessary for correct execution of the code.
Specifying
.Fl fomit-frame-pointer
with this option will cause the stack frames not to be generated for leaf functions.
The default is
.Fl mno-apcs-frame .
.Pp
.It Fl mapcs
This is a synonym for
.Fl mapcs-frame .
.Pp
.It Fl mthumb-interwork
Generate code which supports calling between the ARM and Thumb instruction sets.
Without this option the two instruction sets cannot be reliably used inside one program.
The default is
.Fl mno-thumb-interwork ,
since slightly larger code is generated when
.Fl mthumb-interwork
is specified.
.Pp
.It Fl mno-sched-prolog
Prevent the reordering of instructions in the function prolog, or the merging of those instruction with the instructions in the function's body.
This means that all functions will start with a recognizable set of instructions (or in fact one of a choice from a small set of different function prologues), and this information can be used to locate the start if functions inside an executable piece of code.
The default is
.Fl msched-prolog .
.Pp
.It Fl mhard-float
Generate output containing floating point instructions.
This is the default.
.Pp
.It Fl msoft-float
Generate output containing library calls for floating point.
.Sy Warning:
the requisite libraries are not available for all ARM targets.
Normally the facilities of the machine's usual C compiler are used, but this cannot be done directly in cross-compilation.
You must make your own arrangements to provide suitable library functions for cross-compilation.
.Pp
.Fl msoft-float
changes the calling convention in the output file; therefore, it is only useful if you compile
.Em all
of a program with this option.
In particular, you need to compile
.Pa libgcc.a ,
the library that comes with GCC, with
.Fl msoft-float
in order for this to work.
.Pp
.It Fl mfloat-abi= Ns Ar name
Specifies which ABI to use for floating point values.
Permissible values are:
.Sy soft ,
.Sy softfp
and
.Sy hard .
.Pp
.Sy soft
and
.Sy hard
are equivalent to
.Fl msoft-float
and
.Fl mhard-float
respectively.
.Sy softfp
allows the generation of floating point instructions, but still uses the soft-float calling conventions.
.Pp
.It Fl mlittle-endian
Generate code for a processor running in little-endian mode.
This is the default for all standard configurations.
.Pp
.It Fl mbig-endian
Generate code for a processor running in big-endian mode; the default is to compile code for a little-endian processor.
.Pp
.It Fl mwords-little-endian
This option only applies when generating code for big-endian processors.
Generate code for a little-endian word order but a big-endian byte order.
That is, a byte order of the form
.Sy 32107654 .
Note: this option should only be used if you require compatibility with code for big-endian ARM processors generated by versions of the compiler prior to 2.8.
.Pp
.It Fl mcpu= Ns Ar name
This specifies the name of the target ARM processor.
GCC uses this name to determine what kind of instructions it can emit when generating assembly code.
Permissible names are:
.Sy arm2 ,
.Sy arm250 ,
.Sy arm3 ,
.Sy arm6 ,
.Sy arm60 ,
.Sy arm600 ,
.Sy arm610 ,
.Sy arm620 ,
.Sy arm7 ,
.Sy arm7m ,
.Sy arm7d ,
.Sy arm7dm ,
.Sy arm7di ,
.Sy arm7dmi ,
.Sy arm70 ,
.Sy arm700 ,
.Sy arm700i ,
.Sy arm710 ,
.Sy arm710c ,
.Sy arm7100 ,
.Sy arm7500 ,
.Sy arm7500fe ,
.Sy arm7tdmi ,
.Sy arm7tdmi-s ,
.Sy arm8 ,
.Sy strongarm ,
.Sy strongarm110 ,
.Sy strongarm1100 ,
.Sy arm8 ,
.Sy arm810 ,
.Sy arm9 ,
.Sy arm9e ,
.Sy arm920 ,
.Sy arm920t ,
.Sy arm922t ,
.Sy arm946e-s ,
.Sy arm966e-s ,
.Sy arm968e-s ,
.Sy arm926ej-s ,
.Sy arm940t ,
.Sy arm9tdmi ,
.Sy arm10tdmi ,
.Sy arm1020t ,
.Sy arm1026ej-s ,
.Sy arm10e ,
.Sy arm1020e ,
.Sy arm1022e ,
.Sy arm1136j-s ,
.Sy arm1136jf-s ,
.Sy mpcore ,
.Sy mpcorenovfp ,
.Sy arm1176jz-s ,
.Sy arm1176jzf-s ,
.Sy xscale ,
.Sy iwmmxt ,
.Sy ep9312 .
.Pp
.It Fl mtune= Ns Ar name
This option is very similar to the
.Fl mcpu=
option, except that instead of specifying the actual target processor type, and hence restricting which instructions can be used, it specifies that GCC should tune the performance of the code as if the target were of the type specified in this option, but still choosing the instructions that it will generate based on the cpu specified by a
.Fl mcpu=
option.
For some ARM implementations better performance can be obtained by using this option.
.Pp
.It Fl march= Ns Ar name
This specifies the name of the target ARM architecture.
GCC uses this name to determine what kind of instructions it can emit when generating assembly code.
This option can be used in conjunction with or instead of the
.Fl mcpu=
option.
Permissible names are:
.Sy armv2 ,
.Sy armv2a ,
.Sy armv3 ,
.Sy armv3m ,
.Sy armv4 ,
.Sy armv4t ,
.Sy armv5 ,
.Sy armv5t ,
.Sy armv5te ,
.Sy armv6 ,
.Sy armv6j ,
.Sy iwmmxt ,
.Sy ep9312 .
.Pp
.It Fl mfpu= Ns Ar name
.It Fl mfpe= Ns Ar number
.It Fl mfp= Ns Ar number
This specifies what floating point hardware (or hardware emulation) is available on the target.
Permissible names are:
.Sy fpa ,
.Sy fpe2 ,
.Sy fpe3 ,
.Sy maverick ,
.Sy vfp .
.Fl mfp
and
.Fl mfpe
are synonyms for
.Fl mfpu
=
.Sy fpe
.Em number ,
for compatibility with older versions of GCC.
.Pp
If
.Fl msoft-float
is specified this specifies the format of floating point values.
.Pp
.It Fl mstructure-size-boundary= Ns Ar n
The size of all structures and unions will be rounded up to a multiple of the number of bits set by this option.
Permissible values are 8, 32 and 64.
The default value varies for different toolchains.
For the COFF targeted toolchain the default value is 8.
A value of 64 is only allowed if the underlying ABI supports it.
.Pp
Specifying the larger number can produce faster, more efficient code, but can also increase the size of the program.
Different values are potentially incompatible.
Code compiled with one value cannot necessarily expect to work with code or libraries compiled with another value, if they exchange information using structures or unions.
.Pp
.It Fl mabort-on-noreturn
Generate a call to the function
.Va abort
at the end of a
.Va noreturn
function.
It will be executed if the function tries to return.
.Pp
.It Fl mlong-calls
.It Fl mno-long-calls
Tells the compiler to perform function calls by first loading the address of the function into a register and then performing a subroutine call on this register.
This switch is needed if the target function will lie outside of the 64 megabyte addressing range of the offset based version of subroutine call instruction.
.Pp
Even if this switch is enabled, not all function calls will be turned into long calls.
The heuristic is that static functions, functions which have the
.Sy short-call
attribute, functions that are inside the scope of a
.Sy #pragma no_long_calls
directive and functions whose definitions have already been compiled within the current compilation unit, will not be turned into long calls.
The exception to this rule is that weak function definitions, functions with the
.Sy long-call
attribute or the
.Sy section
attribute, and functions that are within the scope of a
.Sy #pragma long_calls
directive, will always be turned into long calls.
.Pp
This feature is not enabled by default.
Specifying
.Fl mno-long-calls
will restore the default behavior, as will placing the function calls within the scope of a
.Sy #pragma long_calls_off
directive.
Note these switches have no effect on how the compiler generates code to handle function calls via function pointers.
.Pp
.It Fl mnop-fun-dllimport
Disable support for the
.Va dllimport
attribute.
.Pp
.It Fl msingle-pic-base
Treat the register used for PIC addressing as read-only, rather than loading it in the prologue for each function.
The run-time system is responsible for initializing this register with an appropriate value before execution begins.
.Pp
.It Fl mpic-register= Ns Ar reg
Specify the register to be used for PIC addressing.
The default is R10 unless stack-checking is enabled, when R9 is used.
.Pp
.It Fl mcirrus-fix-invalid-insns
Insert NOPs into the instruction stream to in order to work around problems with invalid Maverick instruction combinations.
This option is only valid if the
.Fl mcpu=ep9312
option has been used to enable generation of instructions for the Cirrus Maverick floating point co-processor.
This option is not enabled by default, since the problem is only present in older Maverick implementations.
The default can be re-enabled by use of the
.Fl mno-cirrus-fix-invalid-insns
switch.
.Pp
.It Fl mpoke-function-name
Write the name of each function into the text section, directly preceding the function prologue.
The generated code is similar to this:
.Pp
.Bd -literal -offset indent
     t0
         .ascii "arm_poke_function_name", 0
         .align
     t1
         .word 0xff000000 + (t1 - t0)
     arm_poke_function_name
         mov     ip, sp
         stmfd   sp!, {fp, ip, lr, pc}
         sub     fp, ip, #4
.Ed
When performing a stack backtrace, code can inspect the value of
.Va pc
stored at
.Va fp + 0 .
If the trace function then looks at location
.Va pc - 12
and the top 8 bits are set, then we know that there is a function name embedded immediately preceding this location and has length
.Va ((pc[-3]) & 0xff000000) .
.Pp
.It Fl mthumb
Generate code for the 16-bit Thumb instruction set.
The default is to use the 32-bit ARM instruction set.
.Pp
.It Fl mtpcs-frame
Generate a stack frame that is compliant with the Thumb Procedure Call Standard for all non-leaf functions.
(A leaf function is one that does not call any other functions.) The default is
.Fl mno-tpcs-frame .
.Pp
.It Fl mtpcs-leaf-frame
Generate a stack frame that is compliant with the Thumb Procedure Call Standard for all leaf functions.
(A leaf function is one that does not call any other functions.) The default is
.Fl mno-apcs-leaf-frame .
.Pp
.It Fl mcallee-super-interworking
Gives all externally visible functions in the file being compiled an ARM instruction set header which switches to Thumb mode before executing the rest of the function.
This allows these functions to be called from non-interworking code.
.Pp
.It Fl mcaller-super-interworking
Allows calls via function pointers (including virtual functions) to execute correctly regardless of whether the target code has been compiled for interworking or not.
There is a small overhead in the cost of executing a function pointer if this option is enabled.
.Pp
.It Fl mtp= Ns Ar name
Specify the access model for the thread local storage pointer.
The valid models are
.Sy soft ,
which generates calls to
.Va __aeabi_read_tp ,
.Sy cp15 ,
which fetches the thread pointer from
.Va cp15
directly (supported in the arm6k architecture), and
.Sy auto ,
which uses the best available method for the selected processor.
The default setting is
.Sy auto .
.Pp
.El
.It Sy AVR Options
These options are defined for AVR implementations:
.Pp
.Bl -tag -width xx
.It Fl mmcu= Ns Ar mcu
Specify ATMEL AVR instruction set or MCU type.
.Pp
Instruction set avr1 is for the minimal AVR core, not supported by the C compiler, only for assembler programs (MCU types: at90s1200, attiny10, attiny11, attiny12, attiny15, attiny28).
.Pp
Instruction set avr2 (default) is for the classic AVR core with up to 8K program memory space (MCU types: at90s2313, at90s2323, attiny22, at90s2333, at90s2343, at90s4414, at90s4433, at90s4434, at90s8515, at90c8534, at90s8535).
.Pp
Instruction set avr3 is for the classic AVR core with up to 128K program memory space (MCU types: atmega103, atmega603, at43usb320, at76c711).
.Pp
Instruction set avr4 is for the enhanced AVR core with up to 8K program memory space (MCU types: atmega8, atmega83, atmega85).
.Pp
Instruction set avr5 is for the enhanced AVR core with up to 128K program memory space (MCU types: atmega16, atmega161, atmega163, atmega32, atmega323, atmega64, atmega128, at43usb355, at94k).
.Pp
.It Fl msize
Output instruction sizes to the asm file.
.Pp
.It Fl minit-stack= Ns Ar N
Specify the initial stack address, which may be a symbol or numeric value,
.Sy __stack
is the default.
.Pp
.It Fl mno-interrupts
Generated code is not compatible with hardware interrupts.
Code size will be smaller.
.Pp
.It Fl mcall-prologues
Functions prologues/epilogues expanded as call to appropriate subroutines.
Code size will be smaller.
.Pp
.It Fl mno-tablejump
Do not generate tablejump insns which sometimes increase code size.
.Pp
.It Fl mtiny-stack
Change only the low 8 bits of the stack pointer.
.Pp
.It Fl mint8
Assume int to be 8 bit integer.
This affects the sizes of all types: A char will be 1 byte, an int will be 1 byte, an long will be 2 bytes and long long will be 4 bytes.
Please note that this option does not comply to the C standards, but it will provide you with smaller code size.
.Pp
.El
.It Sy Blackfin Options
.Bl -tag -width xx
.It Fl momit-leaf-frame-pointer
Don't keep the frame pointer in a register for leaf functions.
This avoids the instructions to save, set up and restore frame pointers and makes an extra register available in leaf functions.
The option
.Fl fomit-frame-pointer
removes the frame pointer for all functions which might make debugging harder.
.Pp
.It Fl mspecld-anomaly
When enabled, the compiler will ensure that the generated code does not contain speculative loads after jump instructions.
This option is enabled by default.
.Pp
.It Fl mno-specld-anomaly
Don't generate extra code to prevent speculative loads from occurring.
.Pp
.It Fl mcsync-anomaly
When enabled, the compiler will ensure that the generated code does not contain CSYNC or SSYNC instructions too soon after conditional branches.
This option is enabled by default.
.Pp
.It Fl mno-csync-anomaly
Don't generate extra code to prevent CSYNC or SSYNC instructions from occurring too soon after a conditional branch.
.Pp
.It Fl mlow-64k
When enabled, the compiler is free to take advantage of the knowledge that the entire program fits into the low 64k of memory.
.Pp
.It Fl mno-low-64k
Assume that the program is arbitrarily large.
This is the default.
.Pp
.It Fl mid-shared-library
Generate code that supports shared libraries via the library ID method.
This allows for execute in place and shared libraries in an environment without virtual memory management.
This option implies
.Fl fPIC .
.Pp
.It Fl mno-id-shared-library
Generate code that doesn't assume ID based shared libraries are being used.
This is the default.
.Pp
.It Fl mshared-library-id=n
Specified the identification number of the ID based shared library being compiled.
Specifying a value of 0 will generate more compact code, specifying other values will force the allocation of that number to the current library but is no more space or time efficient than omitting this option.
.Pp
.It Fl mlong-calls
.It Fl mno-long-calls
Tells the compiler to perform function calls by first loading the address of the function into a register and then performing a subroutine call on this register.
This switch is needed if the target function will lie outside of the 24 bit addressing range of the offset based version of subroutine call instruction.
.Pp
This feature is not enabled by default.
Specifying
.Fl mno-long-calls
will restore the default behavior.
Note these switches have no effect on how the compiler generates code to handle function calls via function pointers.
.Pp
.El
.It Sy CRIS Options
These options are defined specifically for the CRIS ports.
.Pp
.Bl -tag -width xx
.It Fl march= Ns Ar architecture-type
.It Fl mcpu= Ns Ar architecture-type
Generate code for the specified architecture.
The choices for
.Em architecture-type
are
.Sy v3 ,
.Sy v8
and
.Sy v10
for respectively ETRAX\~4, ETRAX\~100, and ETRAX\~100\~LX.
Default is
.Sy v0
except for cris-axis-linux-gnu, where the default is
.Sy v10 .
.Pp
.It Fl mtune= Ns Ar architecture-type
Tune to
.Em architecture-type
everything applicable about the generated code, except for the ABI and the set of available instructions.
The choices for
.Em architecture-type
are the same as for
.Fl march= Ns Ar architecture-type .
.Pp
.It Fl mmax-stack-frame= Ns Ar n
Warn when the stack frame of a function exceeds
.Em n
bytes.
.Pp
.It Fl melinux-stacksize= Ns Ar n
Only available with the
.Sy cris-axis-aout
target.
Arranges for indications in the program to the kernel loader that the stack of the program should be set to
.Em n
bytes.
.Pp
.It Fl metrax4
.It Fl metrax100
The options
.Fl metrax4
and
.Fl metrax100
are synonyms for
.Fl march=v3
and
.Fl march=v8
respectively.
.Pp
.It Fl mmul-bug-workaround
.It Fl mno-mul-bug-workaround
Work around a bug in the
.Va muls
and
.Va mulu
instructions for CPU models where it applies.
This option is active by default.
.Pp
.It Fl mpdebug
Enable CRIS-specific verbose debug-related information in the assembly code.
This option also has the effect to turn off the
.Sy #NO_APP
formatted-code indicator to the assembler at the beginning of the assembly file.
.Pp
.It Fl mcc-init
Do not use condition-code results from previous instruction; always emit compare and test instructions before use of condition codes.
.Pp
.It Fl mno-side-effects
Do not emit instructions with side-effects in addressing modes other than post-increment.
.Pp
.It Fl mstack-align
.It Fl mno-stack-align
.It Fl mdata-align
.It Fl mno-data-align
.It Fl mconst-align
.It Fl mno-const-align
These options (no-options) arranges (eliminate arrangements) for the stack-frame, individual data and constants to be aligned for the maximum single data access size for the chosen CPU model.
The default is to arrange for 32-bit alignment.
ABI details such as structure layout are not affected by these options.
.Pp
.It Fl m32-bit
.It Fl m16-bit
.It Fl m8-bit
Similar to the stack- data- and const-align options above, these options arrange for stack-frame, writable data and constants to all be 32-bit, 16-bit or 8-bit aligned.
The default is 32-bit alignment.
.Pp
.It Fl mno-prologue-epilogue
.It Fl mprologue-epilogue
With
.Fl mno-prologue-epilogue ,
the normal function prologue and epilogue that sets up the stack-frame are omitted and no return instructions or return sequences are generated in the code.
Use this option only together with visual inspection of the compiled code: no warnings or errors are generated when call-saved registers must be saved, or storage for local variable needs to be allocated.
.Pp
.It Fl mno-gotplt
.It Fl mgotplt
With
.Fl fpic
and
.Fl fPIC ,
don't generate (do generate) instruction sequences that load addresses for functions from the PLT part of the GOT rather than (traditional on other architectures) calls to the PLT.
The default is
.Fl mgotplt .
.Pp
.It Fl maout
Legacy no-op option only recognized with the cris-axis-aout target.
.Pp
.It Fl melf
Legacy no-op option only recognized with the cris-axis-elf and cris-axis-linux-gnu targets.
.Pp
.It Fl melinux
Only recognized with the cris-axis-aout target, where it selects a GNU/linux-like multilib, include files and instruction set for
.Fl march=v8 .
.Pp
.It Fl mlinux
Legacy no-op option only recognized with the cris-axis-linux-gnu target.
.Pp
.It Fl sim
This option, recognized for the cris-axis-aout and cris-axis-elf arranges to link with input-output functions from a simulator library.
Code, initialized data and zero-initialized data are allocated consecutively.
.Pp
.It Fl sim2
Like
.Fl sim ,
but pass linker options to locate initialized data at 0x40000000 and zero-initialized data at 0x80000000.
.Pp
.El
.It Sy CRX Options
These options are defined specifically for the CRX ports.
.Pp
.Bl -tag -width xx
.It Fl mmac
Enable the use of multiply-accumulate instructions.
Disabled by default.
.Pp
.It Fl mpush-args
Push instructions will be used to pass outgoing arguments when functions are called.
Enabled by default.
.Pp
.El
.It Sy Darwin Options
These options are defined for all architectures running the Darwin operating system.
.Pp
FSF GCC on Darwin does not create "fat" object files; it will create an object file for the single architecture that it was built to target.
Apple's GCC on Darwin does create "fat" files if multiple
.Fl arch
options are used; it does so by running the compiler or linker multiple times and joining the results together with
.Pa lipo .
.Pp
The subtype of the file created (like
.Sy ppc7400
or
.Sy ppc970
or
.Sy i686 )
is determined by the flags that specify the ISA that GCC is targetting, like
.Fl mcpu
or
.Fl march .
The
.Fl force_cpusubtype_ALL
option can be used to override this.
.Pp
The Darwin tools vary in their behavior when presented with an ISA mismatch.
The assembler,
.Pa as ,
will only permit instructions to be used that are valid for the subtype of the file it is generating, so you cannot put 64-bit instructions in an
.Sy ppc750
object file.
The linker for shared libraries,
.Pa /usr/bin/libtool ,
will fail and print an error if asked to create a shared library with a less restrictive subtype than its input files (for instance, trying to put a
.Sy ppc970
object file in a
.Sy ppc7400
library).
The linker for executables,
.Pa ld ,
will quietly give the executable the most restrictive subtype of any of its input files.
.Pp
.Bl -tag -width xx
.It Fl F Ns Ar dir
Add the framework directory
.Em dir
to the head of the list of directories to be searched for header files.
These directories are interleaved with those specified by
.Fl I
options and are scanned in a left-to-right order.
.Pp
A framework directory is a directory with frameworks in it.
A framework is a directory with a
.Sy \&"Headers"
and/or
.Sy \&"PrivateHeaders"
directory contained directly in it that ends in
.Sy \&".framework" .
The name of a framework is the name of this directory excluding the
.Sy \&".framework" .
Headers associated with the framework are found in one of those two directories, with
.Sy \&"Headers"
being searched first.
A subframework is a framework directory that is in a framework's
.Sy \&"Frameworks"
directory.
Includes of subframework headers can only appear in a header of a framework that contains the subframework, or in a sibling subframework header.
Two subframeworks are siblings if they occur in the same framework.
A subframework should not have the same name as a framework, a warning will be issued if this is violated.
Currently a subframework cannot have subframeworks, in the future, the mechanism may be extended to support this.
The standard frameworks can be found in
.Sy \&"/System/Library/Frameworks"
and
.Sy \&"/Library/Frameworks" .
An example include looks like
.Va #include \*[Lt]Framework/header.h\*[Gt] ,
where
.Sy Framework
denotes the name of the framework and header.h is found in the
.Sy \&"PrivateHeaders"
or
.Sy \&"Headers"
directory.
.Pp
.It Fl gused
Emit debugging information for symbols that are used.
For STABS debugging format, this enables
.Fl feliminate-unused-debug-symbols .
This is by default ON.
.Pp
.It Fl gfull
Emit debugging information for all symbols and types.
.Pp
.It Fl mmacosx-version-min= Ns Ar version
The earliest version of MacOS X that this executable will run on is
.Em version .
Typical values of
.Em version
include
.Va 10.1 ,
.Va 10.2 ,
and
.Va 10.3.9 .
.Pp
The default for this option is to make choices that seem to be most useful.
.Pp
.It Fl mone-byte-bool
Override the defaults for
.Sy bool
so that
.Sy sizeof(bool)==1 .
By default
.Sy sizeof(bool)
is
.Sy 4
when compiling for Darwin/PowerPC and
.Sy 1
when compiling for Darwin/x86, so this option has no effect on x86.
.Pp
.Sy Warning:
The
.Fl mone-byte-bool
switch causes GCC to generate code that is not binary compatible with code generated without that switch.
Using this switch may require recompiling all other modules in a program, including system libraries.
Use this switch to conform to a non-default data model.
.Pp
.It Fl mfix-and-continue
.It Fl ffix-and-continue
.It Fl findirect-data
Generate code suitable for fast turn around development.
Needed to enable gdb to dynamically load
.Va .o
files into already running programs.
.Fl findirect-data
and
.Fl ffix-and-continue
are provided for backwards compatibility.
.Pp
.It Fl all_load
Loads all members of static archive libraries.
See man ld(1) for more information.
.Pp
.It Fl arch_errors_fatal
Cause the errors having to do with files that have the wrong architecture to be fatal.
.Pp
.It Fl bind_at_load
Causes the output file to be marked such that the dynamic linker will bind all undefined references when the file is loaded or launched.
.Pp
.It Fl bundle
Produce a Mach-o bundle format file.
See man ld(1) for more information.
.Pp
.It Fl bundle_loader Ar executable
This option specifies the
.Em executable
that will be loading the build output file being linked.
See man ld(1) for more information.
.Pp
.It Fl dynamiclib
When passed this option, GCC will produce a dynamic library instead of an executable when linking, using the Darwin
.Pa libtool
command.
.Pp
.It Fl force_cpusubtype_ALL
This causes GCC's output file to have the
.Em ALL
subtype, instead of one controlled by the
.Fl mcpu
or
.Fl march
option.
.Pp
.It Fl allowable_client Ar client_name
.It Fl client_name
.It Fl compatibility_version
.It Fl current_version
.It Fl dead_strip
.It Fl dependency-file
.It Fl dylib_file
.It Fl dylinker_install_name
.It Fl dynamic
.It Fl exported_symbols_list
.It Fl filelist
.It Fl flat_namespace
.It Fl force_flat_namespace
.It Fl headerpad_max_install_names
.It Fl image_base
.It Fl init
.It Fl install_name
.It Fl keep_private_externs
.It Fl multi_module
.It Fl multiply_defined
.It Fl multiply_defined_unused
.It Fl noall_load
.It Fl no_dead_strip_inits_and_terms
.It Fl nofixprebinding
.It Fl nomultidefs
.It Fl noprebind
.It Fl noseglinkedit
.It Fl pagezero_size
.It Fl prebind
.It Fl prebind_all_twolevel_modules
.It Fl private_bundle
.It Fl read_only_relocs
.It Fl sectalign
.It Fl sectobjectsymbols
.It Fl whyload
.It Fl seg1addr
.It Fl sectcreate
.It Fl sectobjectsymbols
.It Fl sectorder
.It Fl segaddr
.It Fl segs_read_only_addr
.It Fl segs_read_write_addr
.It Fl seg_addr_table
.It Fl seg_addr_table_filename
.It Fl seglinkedit
.It Fl segprot
.It Fl segs_read_only_addr
.It Fl segs_read_write_addr
.It Fl single_module
.It Fl static
.It Fl sub_library
.It Fl sub_umbrella
.It Fl twolevel_namespace
.It Fl umbrella
.It Fl undefined
.It Fl unexported_symbols_list
.It Fl weak_reference_mismatches
.It Fl whatsloaded
These options are passed to the Darwin linker.
The Darwin linker man page describes them in detail.
.Pp
.El
.It Sy DEC Alpha Options
These
.Fl m
options are defined for the DEC Alpha implementations:
.Pp
.Bl -tag -width xx
.It Fl mno-soft-float
.It Fl msoft-float
Use (do not use) the hardware floating-point instructions for floating-point operations.
When
.Fl msoft-float
is specified, functions in
.Pa libgcc.a
will be used to perform floating-point operations.
Unless they are replaced by routines that emulate the floating-point operations, or compiled in such a way as to call such emulations routines, these routines will issue floating-point operations.
If you are compiling for an Alpha without floating-point operations, you must ensure that the library is built so as not to call them.
.Pp
Note that Alpha implementations without floating-point operations are required to have floating-point registers.
.Pp
.It Fl mfp-reg
.It Fl mno-fp-regs
Generate code that uses (does not use) the floating-point register set.
.Fl mno-fp-regs
implies
.Fl msoft-float .
If the floating-point register set is not used, floating point operands are passed in integer registers as if they were integers and floating-point results are passed in
.Va $0
instead of
.Va $f0 .
This is a non-standard calling sequence, so any function with a floating-point argument or return value called by code compiled with
.Fl mno-fp-regs
must also be compiled with that option.
.Pp
A typical use of this option is building a kernel that does not use, and hence need not save and restore, any floating-point registers.
.Pp
.It Fl mieee
The Alpha architecture implements floating-point hardware optimized for maximum performance.
It is mostly compliant with the IEEE floating point standard.
However, for full compliance, software assistance is required.
This option generates code fully IEEE compliant code
.Em except
that the
.Em inexact-flag
is not maintained (see below).
If this option is turned on, the preprocessor macro
.Va _IEEE_FP
is defined during compilation.
The resulting code is less efficient but is able to correctly support denormalized numbers and exceptional IEEE values such as not-a-number and plus/minus infinity.
Other Alpha compilers call this option
.Fl ieee_with_no_inexact .
.Pp
.It Fl mieee-with-inexact
This is like
.Fl mieee
except the generated code also maintains the IEEE
.Em inexact-flag .
Turning on this option causes the generated code to implement fully-compliant IEEE math.
In addition to
.Va _IEEE_FP ,
.Va _IEEE_FP_EXACT
is defined as a preprocessor macro.
On some Alpha implementations the resulting code may execute significantly slower than the code generated by default.
Since there is very little code that depends on the
.Em inexact-flag ,
you should normally not specify this option.
Other Alpha compilers call this option
.Fl ieee_with_inexact .
.Pp
.It Fl mfp-trap-mode= Ns Ar trap-mode
This option controls what floating-point related traps are enabled.
Other Alpha compilers call this option
.Fl fptm Ar trap-mode .
The trap mode can be set to one of four values:
.Pp
.Bl -tag -width xx
.It Sy n Ns
This is the default (normal) setting.
The only traps that are enabled are the ones that cannot be disabled in software (e.g., division by zero trap).
.Pp
.It Sy u Ns
In addition to the traps enabled by
.Sy n ,
underflow traps are enabled as well.
.Pp
.It Sy su Ns
Like
.Sy su ,
but the instructions are marked to be safe for software completion (see Alpha architecture manual for details).
.Pp
.It Sy sui Ns
Like
.Sy su ,
but inexact traps are enabled as well.
.Pp
.El
.It Fl mfp-rounding-mode= Ns Ar rounding-mode
Selects the IEEE rounding mode.
Other Alpha compilers call this option
.Fl fprm Ar rounding-mode .
The
.Em rounding-mode
can be one of:
.Pp
.Bl -tag -width xx
.It Sy n Ns
Normal IEEE rounding mode.
Floating point numbers are rounded towards the nearest machine number or towards the even machine number in case of a tie.
.Pp
.It Sy m Ns
Round towards minus infinity.
.Pp
.It Sy c Ns
Chopped rounding mode.
Floating point numbers are rounded towards zero.
.Pp
.It Sy d Ns
Dynamic rounding mode.
A field in the floating point control register
.Em ( fpcr ,
see Alpha architecture reference manual) controls the rounding mode in effect.
The C library initializes this register for rounding towards plus infinity.
Thus, unless your program modifies the
.Em fpcr ,
.Sy d
corresponds to round towards plus infinity.
.Pp
.El
.It Fl mtrap-precision= Ns Ar trap-precision
In the Alpha architecture, floating point traps are imprecise.
This means without software assistance it is impossible to recover from a floating trap and program execution normally needs to be terminated.
GCC can generate code that can assist operating system trap handlers in determining the exact location that caused a floating point trap.
Depending on the requirements of an application, different levels of precisions can be selected:
.Pp
.Bl -tag -width xx
.It Sy p Ns
Program precision.
This option is the default and means a trap handler can only identify which program caused a floating point exception.
.Pp
.It Sy f Ns
Function precision.
The trap handler can determine the function that caused a floating point exception.
.Pp
.It Sy i Ns
Instruction precision.
The trap handler can determine the exact instruction that caused a floating point exception.
.Pp
.El
Other Alpha compilers provide the equivalent options called
.Fl scope_safe
and
.Fl resumption_safe .
.Pp
.It Fl mieee-conformant
This option marks the generated code as IEEE conformant.
You must not use this option unless you also specify
.Fl mtrap-precision=i
and either
.Fl mfp-trap-mode=su
or
.Fl mfp-trap-mode=sui .
Its only effect is to emit the line
.Sy .eflag 48
in the function prologue of the generated assembly file.
Under DEC Unix, this has the effect that IEEE-conformant math library routines will be linked in.
.Pp
.It Fl mbuild-constants
Normally GCC examines a 32- or 64-bit integer constant to see if it can construct it from smaller constants in two or three instructions.
If it cannot, it will output the constant as a literal and generate code to load it from the data segment at runtime.
.Pp
Use this option to require GCC to construct
.Em all
integer constants using code, even if it takes more instructions (the maximum is six).
.Pp
You would typically use this option to build a shared library dynamic loader.
Itself a shared library, it must relocate itself in memory before it can find the variables and constants in its own data segment.
.Pp
.It Fl malpha-as
.It Fl mgas
Select whether to generate code to be assembled by the vendor-supplied assembler
.Fl ( malpha-as )
or by the GNU assembler
.Fl mgas .
.Pp
.It Fl mbwx
.It Fl mno-bwx
.It Fl mcix
.It Fl mno-cix
.It Fl mfix
.It Fl mno-fix
.It Fl mmax
.It Fl mno-max
Indicate whether GCC should generate code to use the optional BWX, CIX, FIX and MAX instruction sets.
The default is to use the instruction sets supported by the CPU type specified via
.Fl mcpu=
option or that of the CPU on which GCC was built if none was specified.
.Pp
.It Fl mfloat-vax
.It Fl mfloat-ieee
Generate code that uses (does not use) VAX F and G floating point arithmetic instead of IEEE single and double precision.
.Pp
.It Fl mexplicit-relocs
.It Fl mno-explicit-relocs
Older Alpha assemblers provided no way to generate symbol relocations except via assembler macros.
Use of these macros does not allow optimal instruction scheduling.
GNU binutils as of version 2.12 supports a new syntax that allows the compiler to explicitly mark which relocations should apply to which instructions.
This option is mostly useful for debugging, as GCC detects the capabilities of the assembler when it is built and sets the default accordingly.
.Pp
.It Fl msmall-data
.It Fl mlarge-data
When
.Fl mexplicit-relocs
is in effect, static data is accessed via
.Em gp-relative
relocations.
When
.Fl msmall-data
is used, objects 8 bytes long or smaller are placed in a
.Em small data area
(the
.Va .sdata
and
.Va .sbss
sections) and are accessed via 16-bit relocations off of the
.Va $gp
register.
This limits the size of the small data area to 64KB, but allows the variables to be directly accessed via a single instruction.
.Pp
The default is
.Fl mlarge-data .
With this option the data area is limited to just below 2GB.
Programs that require more than 2GB of data must use
.Va malloc
or
.Va mmap
to allocate the data in the heap instead of in the program's data segment.
.Pp
When generating code for shared libraries,
.Fl fpic
implies
.Fl msmall-data
and
.Fl fPIC
implies
.Fl mlarge-data .
.Pp
.It Fl msmall-text
.It Fl mlarge-text
When
.Fl msmall-text
is used, the compiler assumes that the code of the entire program (or shared library) fits in 4MB, and is thus reachable with a branch instruction.
When
.Fl msmall-data
is used, the compiler can assume that all local symbols share the same
.Va $gp
value, and thus reduce the number of instructions required for a function call from 4 to 1.
.Pp
The default is
.Fl mlarge-text .
.Pp
.It Fl mcpu= Ns Ar cpu_type
Set the instruction set and instruction scheduling parameters for machine type
.Em cpu_type .
You can specify either the
.Sy EV
style name or the corresponding chip number.
GCC supports scheduling parameters for the EV4, EV5 and EV6 family of processors and will choose the default values for the instruction set from the processor you specify.
If you do not specify a processor type, GCC will default to the processor on which the compiler was built.
.Pp
Supported values for
.Em cpu_type
are
.Pp
.Bl -tag -width xx
.It Sy ev4 Ns
.It Sy ev45 Ns
.It Sy 21064 Ns
Schedules as an EV4 and has no instruction set extensions.
.Pp
.It Sy ev5 Ns
.It Sy 21164 Ns
Schedules as an EV5 and has no instruction set extensions.
.Pp
.It Sy ev56 Ns
.It Sy 21164a Ns
Schedules as an EV5 and supports the BWX extension.
.Pp
.It Sy pca56 Ns
.It Sy 21164pc Ns
.It Sy 21164PC Ns
Schedules as an EV5 and supports the BWX and MAX extensions.
.Pp
.It Sy ev6 Ns
.It Sy 21264 Ns
Schedules as an EV6 and supports the BWX, FIX, and MAX extensions.
.Pp
.It Sy ev67 Ns
.It Sy 21264a Ns
Schedules as an EV6 and supports the BWX, CIX, FIX, and MAX extensions.
.Pp
.El
.It Fl mtune= Ns Ar cpu_type
Set only the instruction scheduling parameters for machine type
.Em cpu_type .
The instruction set is not changed.
.Pp
.It Fl mmemory-latency= Ns Ar time
Sets the latency the scheduler should assume for typical memory references as seen by the application.
This number is highly dependent on the memory access patterns used by the application and the size of the external cache on the machine.
.Pp
Valid options for
.Em time
are
.Pp
.Bl -tag -width xx
.It Em number Ns
A decimal number representing clock cycles.
.Pp
.It Sy L1 Ns
.It Sy L2 Ns
.It Sy L3 Ns
.It Sy main Ns
The compiler contains estimates of the number of clock cycles for "typical" EV4 & EV5 hardware for the Level 1, 2 & 3 caches (also called Dcache, Scache, and Bcache), as well as to main memory.
Note that L3 is only valid for EV5.
.Pp
.El
.El
.It Sy DEC Alpha/VMS Options
These
.Fl m
options are defined for the DEC Alpha/VMS implementations:
.Pp
.Bl -tag -width xx
.It Fl mvms-return-codes
Return VMS condition codes from main.
The default is to return POSIX style condition (e.g. error) codes.
.Pp
.El
.It Sy FRV Options
.Bl -tag -width xx
.It Fl mgpr-32
Only use the first 32 general purpose registers.
.Pp
.It Fl mgpr-64
Use all 64 general purpose registers.
.Pp
.It Fl mfpr-32
Use only the first 32 floating point registers.
.Pp
.It Fl mfpr-64
Use all 64 floating point registers
.Pp
.It Fl mhard-float
Use hardware instructions for floating point operations.
.Pp
.It Fl msoft-float
Use library routines for floating point operations.
.Pp
.It Fl malloc-cc
Dynamically allocate condition code registers.
.Pp
.It Fl mfixed-cc
Do not try to dynamically allocate condition code registers, only use
.Va icc0
and
.Va fcc0 .
.Pp
.It Fl mdword
Change ABI to use double word insns.
.Pp
.It Fl mno-dword
Do not use double word instructions.
.Pp
.It Fl mdouble
Use floating point double instructions.
.Pp
.It Fl mno-double
Do not use floating point double instructions.
.Pp
.It Fl mmedia
Use media instructions.
.Pp
.It Fl mno-media
Do not use media instructions.
.Pp
.It Fl mmuladd
Use multiply and add/subtract instructions.
.Pp
.It Fl mno-muladd
Do not use multiply and add/subtract instructions.
.Pp
.It Fl mfdpic
Select the FDPIC ABI, that uses function descriptors to represent pointers to functions.
Without any PIC/PIE-related options, it implies
.Fl fPIE .
With
.Fl fpic
or
.Fl fpie ,
it assumes GOT entries and small data are within a 12-bit range from the GOT base address; with
.Fl fPIC
or
.Fl fPIE ,
GOT offsets are computed with 32 bits.
.Pp
.It Fl minline-plt
Enable inlining of PLT entries in function calls to functions that are not known to bind locally.
It has no effect without
.Fl mfdpic .
It's enabled by default if optimizing for speed and compiling for shared libraries (i.e.,
.Fl fPIC
or
.Fl fpic ) ,
or when an optimization option such as
.Fl O3
or above is present in the command line.
.Pp
.It Fl mTLS
Assume a large TLS segment when generating thread-local code.
.Pp
.It Fl mtls
Do not assume a large TLS segment when generating thread-local code.
.Pp
.It Fl mgprel-ro
Enable the use of
.Va GPREL
relocations in the FDPIC ABI for data that is known to be in read-only sections.
It's enabled by default, except for
.Fl fpic
or
.Fl fpie :
even though it may help make the global offset table smaller, it trades 1 instruction for 4.
With
.Fl fPIC
or
.Fl fPIE ,
it trades 3 instructions for 4, one of which may be shared by multiple symbols, and it avoids the need for a GOT entry for the referenced symbol, so it's more likely to be a win.
If it is not,
.Fl mno-gprel-ro
can be used to disable it.
.Pp
.It Fl multilib-library-pic
Link with the (library, not FD) pic libraries.
It's implied by
.Fl mlibrary-pic ,
as well as by
.Fl fPIC
and
.Fl fpic
without
.Fl mfdpic .
You should never have to use it explicitly.
.Pp
.It Fl mlinked-fp
Follow the EABI requirement of always creating a frame pointer whenever a stack frame is allocated.
This option is enabled by default and can be disabled with
.Fl mno-linked-fp .
.Pp
.It Fl mlong-calls
Use indirect addressing to call functions outside the current compilation unit.
This allows the functions to be placed anywhere within the 32-bit address space.
.Pp
.It Fl malign-labels
Try to align labels to an 8-byte boundary by inserting nops into the previous packet.
This option only has an effect when VLIW packing is enabled.
It doesn't create new packets; it merely adds nops to existing ones.
.Pp
.It Fl mlibrary-pic
Generate position-independent EABI code.
.Pp
.It Fl macc-4
Use only the first four media accumulator registers.
.Pp
.It Fl macc-8
Use all eight media accumulator registers.
.Pp
.It Fl mpack
Pack VLIW instructions.
.Pp
.It Fl mno-pack
Do not pack VLIW instructions.
.Pp
.It Fl mno-eflags
Do not mark ABI switches in e_flags.
.Pp
.It Fl mcond-move
Enable the use of conditional-move instructions (default).
.Pp
This switch is mainly for debugging the compiler and will likely be removed in a future version.
.Pp
.It Fl mno-cond-move
Disable the use of conditional-move instructions.
.Pp
This switch is mainly for debugging the compiler and will likely be removed in a future version.
.Pp
.It Fl mscc
Enable the use of conditional set instructions (default).
.Pp
This switch is mainly for debugging the compiler and will likely be removed in a future version.
.Pp
.It Fl mno-scc
Disable the use of conditional set instructions.
.Pp
This switch is mainly for debugging the compiler and will likely be removed in a future version.
.Pp
.It Fl mcond-exec
Enable the use of conditional execution (default).
.Pp
This switch is mainly for debugging the compiler and will likely be removed in a future version.
.Pp
.It Fl mno-cond-exec
Disable the use of conditional execution.
.Pp
This switch is mainly for debugging the compiler and will likely be removed in a future version.
.Pp
.It Fl mvliw-branch
Run a pass to pack branches into VLIW instructions (default).
.Pp
This switch is mainly for debugging the compiler and will likely be removed in a future version.
.Pp
.It Fl mno-vliw-branch
Do not run a pass to pack branches into VLIW instructions.
.Pp
This switch is mainly for debugging the compiler and will likely be removed in a future version.
.Pp
.It Fl mmulti-cond-exec
Enable optimization of
.Va &&
and
.Va ||
in conditional execution (default).
.Pp
This switch is mainly for debugging the compiler and will likely be removed in a future version.
.Pp
.It Fl mno-multi-cond-exec
Disable optimization of
.Va &&
and
.Va ||
in conditional execution.
.Pp
This switch is mainly for debugging the compiler and will likely be removed in a future version.
.Pp
.It Fl mnested-cond-exec
Enable nested conditional execution optimizations (default).
.Pp
This switch is mainly for debugging the compiler and will likely be removed in a future version.
.Pp
.It Fl mno-nested-cond-exec
Disable nested conditional execution optimizations.
.Pp
This switch is mainly for debugging the compiler and will likely be removed in a future version.
.Pp
.It Fl moptimize-membar
This switch removes redundant
.Va membar
instructions from the compiler generated code.
It is enabled by default.
.Pp
.It Fl mno-optimize-membar
This switch disables the automatic removal of redundant
.Va membar
instructions from the generated code.
.Pp
.It Fl mtomcat-stats
Cause gas to print out tomcat statistics.
.Pp
.It Fl mcpu= Ns Ar cpu
Select the processor type for which to generate code.
Possible values are
.Sy frv ,
.Sy fr550 ,
.Sy tomcat ,
.Sy fr500 ,
.Sy fr450 ,
.Sy fr405 ,
.Sy fr400 ,
.Sy fr300
and
.Sy simple .
.Pp
.El
.It Sy H8/300 Options
These
.Fl m
options are defined for the H8/300 implementations:
.Pp
.Bl -tag -width xx
.It Fl mrelax
Shorten some address references at link time, when possible; uses the linker option
.Fl relax .
.Pp
.It Fl mh
Generate code for the H8/300H.
.Pp
.It Fl ms
Generate code for the H8S.
.Pp
.It Fl mn
Generate code for the H8S and H8/300H in the normal mode.
This switch must be used either with
.Fl mh
or
.Fl ms .
.Pp
.It Fl ms2600
Generate code for the H8S/2600.
This switch must be used with
.Fl ms .
.Pp
.It Fl mint32
Make
.Va int
data 32 bits by default.
.Pp
.It Fl malign-300
On the H8/300H and H8S, use the same alignment rules as for the H8/300.
The default for the H8/300H and H8S is to align longs and floats on 4 byte boundaries.
.Fl malign-300
causes them to be aligned on 2 byte boundaries.
This option has no effect on the H8/300.
.Pp
.El
.It Sy HPPA Options
These
.Fl m
options are defined for the HPPA family of computers:
.Pp
.Bl -tag -width xx
.It Fl march= Ns Ar architecture-type
Generate code for the specified architecture.
The choices for
.Em architecture-type
are
.Sy 1.0
for PA 1.0,
.Sy 1.1
for PA 1.1, and
.Sy 2.0
for PA 2.0 processors.
Refer to
.Pa /usr/lib/sched.models
on an HP-UX system to determine the proper architecture option for your machine.
Code compiled for lower numbered architectures will run on higher numbered architectures, but not the other way around.
.Pp
.It Fl mpa-risc-1-0
.It Fl mpa-risc-1-1
.It Fl mpa-risc-2-0
Synonyms for
.Sy -march=1.0 ,
.Sy -march=1.1 ,
and
.Sy -march=2.0
respectively.
.Pp
.It Fl mbig-switch
Generate code suitable for big switch tables.
Use this option only if the assembler/linker complain about out of range branches within a switch table.
.Pp
.It Fl mjump-in-delay
Fill delay slots of function calls with unconditional jump instructions by modifying the return pointer for the function call to be the target of the conditional jump.
.Pp
.It Fl mdisable-fpregs
Prevent floating point registers from being used in any manner.
This is necessary for compiling kernels which perform lazy context switching of floating point registers.
If you use this option and attempt to perform floating point operations, the compiler will abort.
.Pp
.It Fl mdisable-indexing
Prevent the compiler from using indexing address modes.
This avoids some rather obscure problems when compiling MIG generated code under MACH.
.Pp
.It Fl mno-space-regs
Generate code that assumes the target has no space registers.
This allows GCC to generate faster indirect calls and use unscaled index address modes.
.Pp
Such code is suitable for level 0 PA systems and kernels.
.Pp
.It Fl mfast-indirect-calls
Generate code that assumes calls never cross space boundaries.
This allows GCC to emit code which performs faster indirect calls.
.Pp
This option will not work in the presence of shared libraries or nested functions.
.Pp
.It Fl mfixed-range= Ns Ar register-range
Generate code treating the given register range as fixed registers.
A fixed register is one that the register allocator can not use.
This is useful when compiling kernel code.
A register range is specified as two registers separated by a dash.
Multiple register ranges can be specified separated by a comma.
.Pp
.It Fl mlong-load-store
Generate 3-instruction load and store sequences as sometimes required by the HP-UX 10 linker.
This is equivalent to the
.Sy +k
option to the HP compilers.
.Pp
.It Fl mportable-runtime
Use the portable calling conventions proposed by HP for ELF systems.
.Pp
.It Fl mgas
Enable the use of assembler directives only GAS understands.
.Pp
.It Fl mschedule= Ns Ar cpu-type
Schedule code according to the constraints for the machine type
.Em cpu-type .
The choices for
.Em cpu-type
are
.Sy 700
.Sy 7100 ,
.Sy 7100LC ,
.Sy 7200 ,
.Sy 7300
and
.Sy 8000 .
Refer to
.Pa /usr/lib/sched.models
on an HP-UX system to determine the proper scheduling option for your machine.
The default scheduling is
.Sy 8000 .
.Pp
.It Fl mlinker-opt
Enable the optimization pass in the HP-UX linker.
Note this makes symbolic debugging impossible.
It also triggers a bug in the HP-UX 8 and HP-UX 9 linkers in which they give bogus error messages when linking some programs.
.Pp
.It Fl msoft-float
Generate output containing library calls for floating point.
.Sy Warning:
the requisite libraries are not available for all HPPA targets.
Normally the facilities of the machine's usual C compiler are used, but this cannot be done directly in cross-compilation.
You must make your own arrangements to provide suitable library functions for cross-compilation.
The embedded target
.Sy hppa1.1-*-pro
does provide software floating point support.
.Pp
.Fl msoft-float
changes the calling convention in the output file; therefore, it is only useful if you compile
.Em all
of a program with this option.
In particular, you need to compile
.Pa libgcc.a ,
the library that comes with GCC, with
.Fl msoft-float
in order for this to work.
.Pp
.It Fl msio
Generate the predefine,
.Va _SIO ,
for server IO.
The default is
.Fl mwsio .
This generates the predefines,
.Va __hp9000s700 ,
.Va __hp9000s700__
and
.Va _WSIO ,
for workstation IO.
These options are available under HP-UX and HI-UX.
.Pp
.It Fl mgnu-ld
Use GNU ld specific options.
This passes
.Fl shared
to ld when building a shared library.
It is the default when GCC is configured, explicitly or implicitly, with the GNU linker.
This option does not have any affect on which ld is called, it only changes what parameters are passed to that ld.
The ld that is called is determined by the
.Fl -with-ld
configure option, GCC's program search path, and finally by the user's
.Sy PATH .
The linker used by GCC can be printed using
.Sy which `gcc -print-prog-name=ld` .
This option is only available on the 64 bit HP-UX GCC, i.e. configured with
.Sy hppa*64*-*-hpux* .
.Pp
.It Fl mhp-ld
Use HP ld specific options.
This passes
.Fl b
to ld when building a shared library and passes
.Sy +Accept TypeMismatch
to ld on all links.
It is the default when GCC is configured, explicitly or implicitly, with the HP linker.
This option does not have any affect on which ld is called, it only changes what parameters are passed to that ld.
The ld that is called is determined by the
.Fl -with-ld
configure option, GCC's program search path, and finally by the user's
.Sy PATH .
The linker used by GCC can be printed using
.Sy which `gcc -print-prog-name=ld` .
This option is only available on the 64 bit HP-UX GCC, i.e. configured with
.Sy hppa*64*-*-hpux* .
.Pp
.It Fl mlong-calls
Generate code that uses long call sequences.
This ensures that a call is always able to reach linker generated stubs.
The default is to generate long calls only when the distance from the call site to the beginning of the function or translation unit, as the case may be, exceeds a predefined limit set by the branch type being used.
The limits for normal calls are 7,600,000 and 240,000 bytes, respectively for the PA 2.0 and PA 1.X architectures.
Sibcalls are always limited at 240,000 bytes.
.Pp
Distances are measured from the beginning of functions when using the
.Fl ffunction-sections
option, or when using the
.Fl mgas
and
.Fl mno-portable-runtime
options together under HP-UX with the SOM linker.
.Pp
It is normally not desirable to use this option as it will degrade performance.
However, it may be useful in large applications, particularly when partial linking is used to build the application.
.Pp
The types of long calls used depends on the capabilities of the assembler and linker, and the type of code being generated.
The impact on systems that support long absolute calls, and long pic symbol-difference or pc-relative calls should be relatively small.
However, an indirect call is used on 32-bit ELF systems in pic code and it is quite long.
.Pp
.It Fl munix= Ns Ar unix-std
Generate compiler predefines and select a startfile for the specified UNIX standard.
The choices for
.Em unix-std
are
.Sy 93 ,
.Sy 95
and
.Sy 98 .
.Sy 93
is supported on all HP-UX versions.
.Sy 95
is available on HP-UX 10.10 and later.
.Sy 98
is available on HP-UX 11.11 and later.
The default values are
.Sy 93
for HP-UX 10.00,
.Sy 95
for HP-UX 10.10 though to 11.00, and
.Sy 98
for HP-UX 11.11 and later.
.Pp
.Fl munix=93
provides the same predefines as GCC 3.3 and 3.4.
.Fl munix=95
provides additional predefines for
.Va XOPEN_UNIX
and
.Va _XOPEN_SOURCE_EXTENDED ,
and the startfile
.Pa unix95.o .
.Fl munix=98
provides additional predefines for
.Va _XOPEN_UNIX ,
.Va _XOPEN_SOURCE_EXTENDED ,
.Va _INCLUDE__STDC_A1_SOURCE
and
.Va _INCLUDE_XOPEN_SOURCE_500 ,
and the startfile
.Pa unix98.o .
.Pp
It is
.Em important
to note that this option changes the interfaces for various library routines.
It also affects the operational behavior of the C library.
Thus,
.Em extreme
care is needed in using this option.
.Pp
Library code that is intended to operate with more than one UNIX standard must test, set and restore the variable
.Em __xpg4_extended_mask
as appropriate.
Most GNU software doesn't provide this capability.
.Pp
.It Fl nolibdld
Suppress the generation of link options to search libdld.sl when the
.Fl static
option is specified on HP-UX 10 and later.
.Pp
.It Fl static
The HP-UX implementation of setlocale in libc has a dependency on libdld.sl.
There isn't an archive version of libdld.sl.
Thus, when the
.Fl static
option is specified, special link options are needed to resolve this dependency.
.Pp
On HP-UX 10 and later, the GCC driver adds the necessary options to link with libdld.sl when the
.Fl static
option is specified.
This causes the resulting binary to be dynamic.
On the 64-bit port, the linkers generate dynamic binaries by default in any case.
The
.Fl nolibdld
option can be used to prevent the GCC driver from adding these link options.
.Pp
.It Fl threads
Add support for multithreading with the
.Em dce thread
library under HP-UX.
This option sets flags for both the preprocessor and linker.
.Pp
.El
.It Sy Intel 386 and AMD x86-64 Options
These
.Fl m
options are defined for the i386 and x86-64 family of computers:
.Pp
.Bl -tag -width xx
.It Fl mtune= Ns Ar cpu-type
Tune to
.Em cpu-type
everything applicable about the generated code, except for the ABI and the set of available instructions.
The choices for
.Em cpu-type
are:
.Pp
.Bl -tag -width xx
.It Sy i386
Original Intel's i386 CPU.
.Pp
.It Sy i486
Intel's i486 CPU.
(No scheduling is implemented for this chip.)
.Pp
.It Sy i586, pentium
Intel Pentium CPU with no MMX support.
.Pp
.It Sy pentium-mmx
Intel PentiumMMX CPU based on Pentium core with MMX instruction set support.
.Pp
.It Sy i686, pentiumpro
Intel PentiumPro CPU.
.Pp
.It Sy pentium2
Intel Pentium2 CPU based on PentiumPro core with MMX instruction set support.
.Pp
.It Sy pentium3, pentium3m
Intel Pentium3 CPU based on PentiumPro core with MMX and SSE instruction set support.
.Pp
.It Sy pentium-m
Low power version of Intel Pentium3 CPU with MMX, SSE and SSE2 instruction set support.
Used by Centrino notebooks.
.Pp
.It Sy pentium4, pentium4m
Intel Pentium4 CPU with MMX, SSE and SSE2 instruction set support.
.Pp
.It Sy prescott
Improved version of Intel Pentium4 CPU with MMX, SSE, SSE2 and SSE3 instruction set support.
.Pp
.It Sy nocona
Improved version of Intel Pentium4 CPU with 64-bit extensions, MMX, SSE, SSE2 and SSE3 instruction set support.
.Pp
.It Sy k6
AMD K6 CPU with MMX instruction set support.
.Pp
.It Sy k6-2, k6-3
Improved versions of AMD K6 CPU with MMX and 3dNOW! instruction set support.
.Pp
.It Sy athlon, athlon-tbird
AMD Athlon CPU with MMX, 3dNOW!, enhanced 3dNOW! and SSE prefetch instructions support.
.Pp
.It Sy athlon-4, athlon-xp, athlon-mp
Improved AMD Athlon CPU with MMX, 3dNOW!, enhanced 3dNOW! and full SSE instruction set support.
.Pp
.It Sy k8, opteron, athlon64, athlon-fx
AMD K8 core based CPUs with x86-64 instruction set support.
(This supersets MMX, SSE, SSE2, 3dNOW!, enhanced 3dNOW! and 64-bit instruction set extensions.)
.Pp
.It Sy winchip-c6
IDT Winchip C6 CPU, dealt in same way as i486 with additional MMX instruction set support.
.Pp
.It Sy winchip2
IDT Winchip2 CPU, dealt in same way as i486 with additional MMX and 3dNOW! instruction set support.
.Pp
.It Sy c3
Via C3 CPU with MMX and 3dNOW! instruction set support.
(No scheduling is implemented for this chip.)
.Pp
.It Sy c3-2
Via C3-2 CPU with MMX and SSE instruction set support.
(No scheduling is implemented for this chip.)
.Pp
.El
While picking a specific
.Em cpu-type
will schedule things appropriately for that particular chip, the compiler will not generate any code that does not run on the i386 without the
.Fl march= Ns Ar cpu-type
option being used.
.Pp
.It Fl march= Ns Ar cpu-type
Generate instructions for the machine type
.Em cpu-type .
The choices for
.Em cpu-type
are the same as for
.Fl mtune .
Moreover, specifying
.Fl march= Ns Ar cpu-type
implies
.Fl mtune= Ns Ar cpu-type .
.Pp
.It Fl mcpu= Ns Ar cpu-type
A deprecated synonym for
.Fl mtune .
.Pp
.It Fl m386
.It Fl m486
.It Fl mpentium
.It Fl mpentiumpro
These options are synonyms for
.Fl mtune=i386 ,
.Fl mtune=i486 ,
.Fl mtune=pentium ,
and
.Fl mtune=pentiumpro
respectively.
These synonyms are deprecated.
.Pp
.It Fl mfpmath= Ns Ar unit
Generate floating point arithmetics for selected unit
.Em unit .
The choices for
.Em unit
are:
.Pp
.Bl -tag -width xx
.It Sy 387 Ns
Use the standard 387 floating point coprocessor present majority of chips and emulated otherwise.
Code compiled with this option will run almost everywhere.
The temporary results are computed in 80bit precision instead of precision specified by the type resulting in slightly different results compared to most of other chips.
See
.Fl ffloat-store
for more detailed description.
.Pp
This is the default choice for i386 compiler.
.Pp
.It Sy sse Ns
Use scalar floating point instructions present in the SSE instruction set.
This instruction set is supported by Pentium3 and newer chips, in the AMD line by Athlon-4, Athlon-xp and Athlon-mp chips.
The earlier version of SSE instruction set supports only single precision arithmetics, thus the double and extended precision arithmetics is still done using 387.
Later version, present only in Pentium4 and the future AMD x86-64 chips supports double precision arithmetics too.
.Pp
For the i386 compiler, you need to use
.Fl march= Ns Ar cpu-type ,
.Fl msse
or
.Fl msse2
switches to enable SSE extensions and make this option effective.
For the x86-64 compiler, these extensions are enabled by default.
.Pp
The resulting code should be considerably faster in the majority of cases and avoid the numerical instability problems of 387 code, but may break some existing code that expects temporaries to be 80bit.
.Pp
This is the default choice for the x86-64 compiler.
.Pp
.It Sy sse,387 Ns
Attempt to utilize both instruction sets at once.
This effectively double the amount of available registers and on chips with separate execution units for 387 and SSE the execution resources too.
Use this option with care, as it is still experimental, because the GCC register allocator does not model separate functional units well resulting in instable performance.
.Pp
.El
.It Fl masm= Ns Ar dialect
Output asm instructions using selected
.Em dialect .
Supported choices are
.Sy intel
or
.Sy att
(the default one).
Darwin does not support
.Sy intel .
.Pp
.It Fl mieee-fp
.It Fl mno-ieee-fp
Control whether or not the compiler uses IEEE floating point comparisons.
These handle correctly the case where the result of a comparison is unordered.
.Pp
.It Fl msoft-float
Generate output containing library calls for floating point.
.Sy Warning:
the requisite libraries are not part of GCC.
Normally the facilities of the machine's usual C compiler are used, but this can't be done directly in cross-compilation.
You must make your own arrangements to provide suitable library functions for cross-compilation.
.Pp
On machines where a function returns floating point results in the 80387 register stack, some floating point opcodes may be emitted even if
.Fl msoft-float
is used.
.Pp
.It Fl mno-fp-ret-in-387
Do not use the FPU registers for return values of functions.
.Pp
The usual calling convention has functions return values of types
.Va float
and
.Va double
in an FPU register, even if there is no FPU.
The idea is that the operating system should emulate an FPU.
.Pp
The option
.Fl mno-fp-ret-in-387
causes such values to be returned in ordinary CPU registers instead.
.Pp
.It Fl mno-fancy-math-387
Some 387 emulators do not support the
.Va sin ,
.Va cos
and
.Va sqrt
instructions for the 387.
Specify this option to avoid generating those instructions.
This option is the default on FreeBSD, OpenBSD and NetBSD.
This option is overridden when
.Fl march
indicates that the target cpu will always have an FPU and so the instruction will not need emulation.
As of revision 2.6.1, these instructions are not generated unless you also use the
.Fl funsafe-math-optimizations
switch.
.Pp
.It Fl malign-double
.It Fl mno-align-double
Control whether GCC aligns
.Va double ,
.Va long double ,
and
.Va long long
variables on a two word boundary or a one word boundary.
Aligning
.Va double
variables on a two word boundary will produce code that runs somewhat faster on a
.Sy Pentium
at the expense of more memory.
.Pp
On x86-64,
.Fl malign-double
is enabled by default.
.Pp
.Sy Warning:
if you use the
.Fl malign-double
switch, structures containing the above types will be aligned differently than the published application binary interface specifications for the 386 and will not be binary compatible with structures in code compiled without that switch.
.Pp
.It Fl m96bit-long-double
.It Fl m128bit-long-double
These switches control the size of
.Va long double
type.
The i386 application binary interface specifies the size to be 96 bits, so
.Fl m96bit-long-double
is the default in 32 bit mode.
.Pp
Modern architectures (Pentium and newer) would prefer
.Va long double
to be aligned to an 8 or 16 byte boundary.
In arrays or structures conforming to the ABI, this would not be possible.
So specifying a
.Fl m128bit-long-double
will align
.Va long double
to a 16 byte boundary by padding the
.Va long double
with an additional 32 bit zero.
.Pp
In the x86-64 compiler,
.Fl m128bit-long-double
is the default choice as its ABI specifies that
.Va long double
is to be aligned on 16 byte boundary.
.Pp
Notice that neither of these options enable any extra precision over the x87 standard of 80 bits for a
.Va long double .
.Pp
.Sy Warning:
if you override the default value for your target ABI, the structures and arrays containing
.Va long double
variables will change their size as well as function calling convention for function taking
.Va long double
will be modified.
Hence they will not be binary compatible with arrays or structures in code compiled without that switch.
.Pp
.It Fl mmlarge-data-threshold= Ns Ar number
When
.Fl mcmodel=medium
is specified, the data greater than
.Em threshold
are placed in large data section.
This value must be the same across all object linked into the binary and defaults to 65535.
.Pp
.It Fl msvr3-shlib
.It Fl mno-svr3-shlib
Control whether GCC places uninitialized local variables into the
.Va bss
or
.Va data
segments.
.Fl msvr3-shlib
places them into
.Va bss .
These options are meaningful only on System V Release 3.
.Pp
.It Fl mrtd
Use a different function-calling convention, in which functions that take a fixed number of arguments return with the
.Va ret
.Em num
instruction, which pops their arguments while returning.
This saves one instruction in the caller since there is no need to pop the arguments there.
.Pp
You can specify that an individual function is called with this calling sequence with the function attribute
.Sy stdcall .
You can also override the
.Fl mrtd
option by using the function attribute
.Sy cdecl .
.Pp
.Sy Warning:
this calling convention is incompatible with the one normally used on Unix, so you cannot use it if you need to call libraries compiled with the Unix compiler.
.Pp
Also, you must provide function prototypes for all functions that take variable numbers of arguments (including
.Va printf ) ;
otherwise incorrect code will be generated for calls to those functions.
.Pp
In addition, seriously incorrect code will result if you call a function with too many arguments.
(Normally, extra arguments are harmlessly ignored.)
.Pp
.It Fl mregparm= Ns Ar num
Control how many registers are used to pass integer arguments.
By default, no registers are used to pass arguments, and at most 3 registers can be used.
You can control this behavior for a specific function by using the function attribute
.Sy regparm .
.Pp
.Sy Warning:
if you use this switch, and
.Em num
is nonzero, then you must build all modules with the same value, including any libraries.
This includes the system libraries and startup modules.
.Pp
.It Fl msseregparm
Use SSE register passing conventions for float and double arguments and return values.
You can control this behavior for a specific function by using the function attribute
.Sy sseregparm .
.Pp
.Sy Warning:
if you use this switch then you must build all modules with the same value, including any libraries.
This includes the system libraries and startup modules.
.Pp
.It Fl mpreferred-stack-boundary= Ns Ar num
Attempt to keep the stack boundary aligned to a 2 raised to
.Em num
byte boundary.
If
.Fl mpreferred-stack-boundary
is not specified, the default is 4 (16 bytes or 128 bits).
.Pp
On Pentium and PentiumPro,
.Va double
and
.Va long double
values should be aligned to an 8 byte boundary (see
.Fl malign-double )
or suffer significant run time performance penalties.
On Pentium III, the Streaming SIMD Extension (SSE) data type
.Va __m128
may not work properly if it is not 16 byte aligned.
.Pp
To ensure proper alignment of this values on the stack, the stack boundary must be as aligned as that required by any value stored on the stack.
Further, every function must be generated such that it keeps the stack aligned.
Thus calling a function compiled with a higher preferred stack boundary from a function compiled with a lower preferred stack boundary will most likely misalign the stack.
It is recommended that libraries that use callbacks always use the default setting.
.Pp
This extra alignment does consume extra stack space, and generally increases code size.
Code that is sensitive to stack space usage, such as embedded systems and operating system kernels, may want to reduce the preferred alignment to
.Fl mpreferred-stack-boundary=2 .
.Pp
.It Fl mmmx
.It Fl mno-mmx
.It Fl msse
.It Fl mno-sse
.It Fl msse2
.It Fl mno-sse2
.It Fl msse3
.It Fl mno-sse3
.It Fl m3dnow
.It Fl mno-3dnow
These switches enable or disable the use of instructions in the MMX, SSE, SSE2 or 3DNow! extended instruction sets.
These extensions are also available as built-in functions: see
.Sy X86 Built-in Functions ,
for details of the functions enabled and disabled by these switches.
.Pp
To have SSE/SSE2 instructions generated automatically from floating-point code (as opposed to 387 instructions), see
.Fl mfpmath=sse .
.Pp
These options will enable GCC to use these extended instructions in generated code, even without
.Fl mfpmath=sse .
Applications which perform runtime CPU detection must compile separate files for each supported architecture, using the appropriate flags.
In particular, the file containing the CPU detection code should be compiled without these options.
.Pp
.It Fl mpush-args
.It Fl mno-push-args
Use PUSH operations to store outgoing parameters.
This method is shorter and usually equally fast as method using SUB/MOV operations and is enabled by default.
In some cases disabling it may improve performance because of improved scheduling and reduced dependencies.
.Pp
.It Fl maccumulate-outgoing-args
If enabled, the maximum amount of space required for outgoing arguments will be computed in the function prologue.
This is faster on most modern CPUs because of reduced dependencies, improved scheduling and reduced stack usage when preferred stack boundary is not equal to 2.
The drawback is a notable increase in code size.
This switch implies
.Fl mno-push-args .
.Pp
.It Fl mthreads
Support thread-safe exception handling on
.Sy Mingw32 .
Code that relies on thread-safe exception handling must compile and link all code with the
.Fl mthreads
option.
When compiling,
.Fl mthreads
defines
.Fl D_MT ;
when linking, it links in a special thread helper library
.Fl lmingwthrd
which cleans up per thread exception handling data.
.Pp
.It Fl mno-align-stringops
Do not align destination of inlined string operations.
This switch reduces code size and improves performance in case the destination is already aligned, but GCC doesn't know about it.
.Pp
.It Fl minline-all-stringops
By default GCC inlines string operations only when destination is known to be aligned at least to 4 byte boundary.
This enables more inlining, increase code size, but may improve performance of code that depends on fast memcpy, strlen and memset for short lengths.
.Pp
.It Fl momit-leaf-frame-pointer
Don't keep the frame pointer in a register for leaf functions.
This avoids the instructions to save, set up and restore frame pointers and makes an extra register available in leaf functions.
The option
.Fl fomit-frame-pointer
removes the frame pointer for all functions which might make debugging harder.
.Pp
.It Fl mtls-direct-seg-refs
.It Fl mno-tls-direct-seg-refs
Controls whether TLS variables may be accessed with offsets from the TLS segment register
.Va ( %gs
for 32-bit,
.Va %fs
for 64-bit), or whether the thread base pointer must be added.
Whether or not this is legal depends on the operating system, and whether it maps the segment to cover the entire TLS area.
.Pp
For systems that use GNU libc, the default is on.
.Pp
.El
These
.Fl m
switches are supported in addition to the above on AMD x86-64 processors in 64-bit environments.
.Pp
.Bl -tag -width xx
.It Fl m32
.It Fl m64
Generate code for a 32-bit or 64-bit environment.
The 32-bit environment sets int, long and pointer to 32 bits and generates code that runs on any i386 system.
The 64-bit environment sets int to 32 bits and long and pointer to 64 bits and generates code for AMD's x86-64 architecture.
.Pp
.It Fl mno-red-zone
Do not use a so called red zone for x86-64 code.
The red zone is mandated by the x86-64 ABI, it is a 128-byte area beyond the location of the stack pointer that will not be modified by signal or interrupt handlers and therefore can be used for temporary data without adjusting the stack pointer.
The flag
.Fl mno-red-zone
disables this red zone.
.Pp
.It Fl mcmodel=small
Generate code for the small code model: the program and its symbols must be linked in the lower 2 GB of the address space.
Pointers are 64 bits.
Programs can be statically or dynamically linked.
This is the default code model.
.Pp
.It Fl mcmodel=kernel
Generate code for the kernel code model.
The kernel runs in the negative 2 GB of the address space.
This model has to be used for Linux kernel code.
.Pp
.It Fl mcmodel=medium
Generate code for the medium model: The program is linked in the lower 2 GB of the address space but symbols can be located anywhere in the address space.
Programs can be statically or dynamically linked, but building of shared libraries are not supported with the medium model.
.Pp
.It Fl mcmodel=large
Generate code for the large model: This model makes no assumptions about addresses and sizes of sections.
Currently GCC does not implement this model.
.Pp
.El
.It Sy IA-64 Options
These are the
.Fl m
options defined for the Intel IA-64 architecture.
.Pp
.Bl -tag -width xx
.It Fl mbig-endian
Generate code for a big endian target.
This is the default for HP-UX.
.Pp
.It Fl mlittle-endian
Generate code for a little endian target.
This is the default for AIX5 and GNU/Linux.
.Pp
.It Fl mgnu-as
.It Fl mno-gnu-as
Generate (or don't) code for the GNU assembler.
This is the default.
.Pp
.It Fl mgnu-ld
.It Fl mno-gnu-ld
Generate (or don't) code for the GNU linker.
This is the default.
.Pp
.It Fl mno-pic
Generate code that does not use a global pointer register.
The result is not position independent code, and violates the IA-64 ABI.
.Pp
.It Fl mvolatile-asm-stop
.It Fl mno-volatile-asm-stop
Generate (or don't) a stop bit immediately before and after volatile asm statements.
.Pp
.It Fl mregister-names
.It Fl mno-register-names
Generate (or don't)
.Sy in ,
.Sy loc ,
and
.Sy out
register names for the stacked registers.
This may make assembler output more readable.
.Pp
.It Fl mno-sdata
.It Fl msdata
Disable (or enable) optimizations that use the small data section.
This may be useful for working around optimizer bugs.
.Pp
.It Fl mconstant-gp
Generate code that uses a single constant global pointer value.
This is useful when compiling kernel code.
.Pp
.It Fl mauto-pic
Generate code that is self-relocatable.
This implies
.Fl mconstant-gp .
This is useful when compiling firmware code.
.Pp
.It Fl minline-float-divide-min-latency
Generate code for inline divides of floating point values using the minimum latency algorithm.
.Pp
.It Fl minline-float-divide-max-throughput
Generate code for inline divides of floating point values using the maximum throughput algorithm.
.Pp
.It Fl minline-int-divide-min-latency
Generate code for inline divides of integer values using the minimum latency algorithm.
.Pp
.It Fl minline-int-divide-max-throughput
Generate code for inline divides of integer values using the maximum throughput algorithm.
.Pp
.It Fl minline-sqrt-min-latency
Generate code for inline square roots using the minimum latency algorithm.
.Pp
.It Fl minline-sqrt-max-throughput
Generate code for inline square roots using the maximum throughput algorithm.
.Pp
.It Fl mno-dwarf2-asm
.It Fl mdwarf2-asm
Don't (or do) generate assembler code for the DWARF2 line number debugging info.
This may be useful when not using the GNU assembler.
.Pp
.It Fl mearly-stop-bits
.It Fl mno-early-stop-bits
Allow stop bits to be placed earlier than immediately preceding the instruction that triggered the stop bit.
This can improve instruction scheduling, but does not always do so.
.Pp
.It Fl mfixed-range= Ns Ar register-range
Generate code treating the given register range as fixed registers.
A fixed register is one that the register allocator can not use.
This is useful when compiling kernel code.
A register range is specified as two registers separated by a dash.
Multiple register ranges can be specified separated by a comma.
.Pp
.It Fl mtls-size= Ns Ar tls-size
Specify bit size of immediate TLS offsets.
Valid values are 14, 22, and 64.
.Pp
.It Fl mtune= Ns Ar cpu-type
Tune the instruction scheduling for a particular CPU, Valid values are itanium, itanium1, merced, itanium2, and mckinley.
.Pp
.It Fl mt
.It Fl pthread
Add support for multithreading using the POSIX threads library.
This option sets flags for both the preprocessor and linker.
It does not affect the thread safety of object code produced by the compiler or that of libraries supplied with it.
These are HP-UX specific flags.
.Pp
.It Fl milp32
.It Fl mlp64
Generate code for a 32-bit or 64-bit environment.
The 32-bit environment sets int, long and pointer to 32 bits.
The 64-bit environment sets int to 32 bits and long and pointer to 64 bits.
These are HP-UX specific flags.
.Pp
.El
.It Sy M32C Options
.Bl -tag -width xx
.It Fl mcpu= Ns Ar name
Select the CPU for which code is generated.
.Em name
may be one of
.Sy r8c
for the R8C/Tiny series,
.Sy m16c
for the M16C (up to /60) series,
.Sy m32cm
for the M16C/80 series, or
.Sy m32c
for the M32C/80 series.
.Pp
.It Fl msim
Specifies that the program will be run on the simulator.
This causes an alternate runtime library to be linked in which supports, for example, file I/O.
You must not use this option when generating programs that will run on real hardware; you must provide your own runtime library for whatever I/O functions are needed.
.Pp
.It Fl memregs= Ns Ar number
Specifies the number of memory-based pseudo-registers GCC will use during code generation.
These pseudo-registers will be used like real registers, so there is a tradeoff between GCC's ability to fit the code into available registers, and the performance penalty of using memory instead of registers.
Note that all modules in a program must be compiled with the same value for this option.
Because of that, you must not use this option with the default runtime libraries gcc builds.
.Pp
.El
.It Sy M32R/D Options
These
.Fl m
options are defined for Renesas M32R/D architectures:
.Pp
.Bl -tag -width xx
.It Fl m32r2
Generate code for the M32R/2.
.Pp
.It Fl m32rx
Generate code for the M32R/X.
.Pp
.It Fl m32r
Generate code for the M32R.
This is the default.
.Pp
.It Fl mmodel=small
Assume all objects live in the lower 16MB of memory (so that their addresses can be loaded with the
.Va ld24
instruction), and assume all subroutines are reachable with the
.Va bl
instruction.
This is the default.
.Pp
The addressability of a particular object can be set with the
.Va model
attribute.
.Pp
.It Fl mmodel=medium
Assume objects may be anywhere in the 32-bit address space (the compiler will generate
.Va seth/add3
instructions to load their addresses), and assume all subroutines are reachable with the
.Va bl
instruction.
.Pp
.It Fl mmodel=large
Assume objects may be anywhere in the 32-bit address space (the compiler will generate
.Va seth/add3
instructions to load their addresses), and assume subroutines may not be reachable with the
.Va bl
instruction (the compiler will generate the much slower
.Va seth/add3/jl
instruction sequence).
.Pp
.It Fl msdata=none
Disable use of the small data area.
Variables will be put into one of
.Sy .data ,
.Sy bss ,
or
.Sy .rodata
(unless the
.Va section
attribute has been specified).
This is the default.
.Pp
The small data area consists of sections
.Sy .sdata
and
.Sy .sbss .
Objects may be explicitly put in the small data area with the
.Va section
attribute using one of these sections.
.Pp
.It Fl msdata=sdata
Put small global and static data in the small data area, but do not generate special code to reference them.
.Pp
.It Fl msdata=use
Put small global and static data in the small data area, and generate special instructions to reference them.
.Pp
.It Fl G Ar num
Put global and static objects less than or equal to
.Em num
bytes into the small data or bss sections instead of the normal data or bss sections.
The default value of
.Em num
is 8.
The
.Fl msdata
option must be set to one of
.Sy sdata
or
.Sy use
for this option to have any effect.
.Pp
All modules should be compiled with the same
.Fl G Ar num
value.
Compiling with different values of
.Em num
may or may not work; if it doesn't the linker will give an error message---incorrect code will not be generated.
.Pp
.It Fl mdebug
Makes the M32R specific code in the compiler display some statistics that might help in debugging programs.
.Pp
.It Fl malign-loops
Align all loops to a 32-byte boundary.
.Pp
.It Fl mno-align-loops
Do not enforce a 32-byte alignment for loops.
This is the default.
.Pp
.It Fl missue-rate= Ns Ar number
Issue
.Em number
instructions per cycle.
.Em number
can only be 1 or 2.
.Pp
.It Fl mbranch-cost= Ns Ar number
.Em number
can only be 1 or 2.
If it is 1 then branches will be preferred over conditional code, if it is 2, then the opposite will apply.
.Pp
.It Fl mflush-trap= Ns Ar number
Specifies the trap number to use to flush the cache.
The default is 12.
Valid numbers are between 0 and 15 inclusive.
.Pp
.It Fl mno-flush-trap
Specifies that the cache cannot be flushed by using a trap.
.Pp
.It Fl mflush-func= Ns Ar name
Specifies the name of the operating system function to call to flush the cache.
The default is
.Em _flush_cache ,
but a function call will only be used if a trap is not available.
.Pp
.It Fl mno-flush-func
Indicates that there is no OS function for flushing the cache.
.Pp
.El
.It Sy M680x0 Options
These are the
.Fl m
options defined for the 68000 series.
The default values for these options depends on which style of 68000 was selected when the compiler was configured; the defaults for the most common choices are given below.
.Pp
.Bl -tag -width xx
.It Fl m68000
.It Fl mc68000
Generate output for a 68000.
This is the default when the compiler is configured for 68000-based systems.
.Pp
Use this option for microcontrollers with a 68000 or EC000 core, including the 68008, 68302, 68306, 68307, 68322, 68328 and 68356.
.Pp
.It Fl m68020
.It Fl mc68020
Generate output for a 68020.
This is the default when the compiler is configured for 68020-based systems.
.Pp
.It Fl m68881
Generate output containing 68881 instructions for floating point.
This is the default for most 68020 systems unless
.Fl -nfp
was specified when the compiler was configured.
.Pp
.It Fl m68030
Generate output for a 68030.
This is the default when the compiler is configured for 68030-based systems.
.Pp
.It Fl m68040
Generate output for a 68040.
This is the default when the compiler is configured for 68040-based systems.
.Pp
This option inhibits the use of 68881/68882 instructions that have to be emulated by software on the 68040.
Use this option if your 68040 does not have code to emulate those instructions.
.Pp
.It Fl m68060
Generate output for a 68060.
This is the default when the compiler is configured for 68060-based systems.
.Pp
This option inhibits the use of 68020 and 68881/68882 instructions that have to be emulated by software on the 68060.
Use this option if your 68060 does not have code to emulate those instructions.
.Pp
.It Fl mcpu32
Generate output for a CPU32.
This is the default when the compiler is configured for CPU32-based systems.
.Pp
Use this option for microcontrollers with a CPU32 or CPU32+ core, including the 68330, 68331, 68332, 68333, 68334, 68336, 68340, 68341, 68349 and 68360.
.Pp
.It Fl m5200
Generate output for a 520X "coldfire" family cpu.
This is the default when the compiler is configured for 520X-based systems.
.Pp
Use this option for microcontroller with a 5200 core, including the MCF5202, MCF5203, MCF5204 and MCF5202.
.Pp
.It Fl m68020-40
Generate output for a 68040, without using any of the new instructions.
This results in code which can run relatively efficiently on either a 68020/68881 or a 68030 or a 68040.
The generated code does use the 68881 instructions that are emulated on the 68040.
.Pp
.It Fl m68020-60
Generate output for a 68060, without using any of the new instructions.
This results in code which can run relatively efficiently on either a 68020/68881 or a 68030 or a 68040.
The generated code does use the 68881 instructions that are emulated on the 68060.
.Pp
.It Fl msoft-float
Generate output containing library calls for floating point.
.Sy Warning:
the requisite libraries are not available for all m68k targets.
Normally the facilities of the machine's usual C compiler are used, but this can't be done directly in cross-compilation.
You must make your own arrangements to provide suitable library functions for cross-compilation.
The embedded targets
.Sy m68k-*-aout
and
.Sy m68k-*-coff
do provide software floating point support.
.Pp
.It Fl mshort
Consider type
.Va int
to be 16 bits wide, like
.Va short int .
Additionally, parameters passed on the stack are also aligned to a 16-bit boundary even on targets whose API mandates promotion to 32-bit.
.Pp
.It Fl mnobitfield
Do not use the bit-field instructions.
The
.Fl m68000 ,
.Fl mcpu32
and
.Fl m5200
options imply
.Fl mnobitfield .
.Pp
.It Fl mbitfield
Do use the bit-field instructions.
The
.Fl m68020
option implies
.Fl mbitfield .
This is the default if you use a configuration designed for a 68020.
.Pp
.It Fl mrtd
Use a different function-calling convention, in which functions that take a fixed number of arguments return with the
.Va rtd
instruction, which pops their arguments while returning.
This saves one instruction in the caller since there is no need to pop the arguments there.
.Pp
This calling convention is incompatible with the one normally used on Unix, so you cannot use it if you need to call libraries compiled with the Unix compiler.
.Pp
Also, you must provide function prototypes for all functions that take variable numbers of arguments (including
.Va printf ) ;
otherwise incorrect code will be generated for calls to those functions.
.Pp
In addition, seriously incorrect code will result if you call a function with too many arguments.
(Normally, extra arguments are harmlessly ignored.)
.Pp
The
.Va rtd
instruction is supported by the 68010, 68020, 68030, 68040, 68060 and CPU32 processors, but not by the 68000 or 5200.
.Pp
.It Fl malign-int
.It Fl mno-align-int
Control whether GCC aligns
.Va int ,
.Va long ,
.Va long long ,
.Va float ,
.Va double ,
and
.Va long double
variables on a 32-bit boundary
.Fl ( malign-int )
or a 16-bit boundary
.Fl ( mno-align-int ) .
Aligning variables on 32-bit boundaries produces code that runs somewhat faster on processors with 32-bit busses at the expense of more memory.
.Pp
.Sy Warning:
if you use the
.Fl malign-int
switch, GCC will align structures containing the above types differently than most published application binary interface specifications for the m68k.
.Pp
.It Fl mpcrel
Use the pc-relative addressing mode of the 68000 directly, instead of using a global offset table.
At present, this option implies
.Fl fpic ,
allowing at most a 16-bit offset for pc-relative addressing.
.Fl fPIC
is not presently supported with
.Fl mpcrel ,
though this could be supported for 68020 and higher processors.
.Pp
.It Fl mno-strict-align
.It Fl mstrict-align
Do not (do) assume that unaligned memory references will be handled by the system.
.Pp
.It Fl msep-data
Generate code that allows the data segment to be located in a different area of memory from the text segment.
This allows for execute in place in an environment without virtual memory management.
This option implies
.Fl fPIC .
.Pp
.It Fl mno-sep-data
Generate code that assumes that the data segment follows the text segment.
This is the default.
.Pp
.It Fl mid-shared-library
Generate code that supports shared libraries via the library ID method.
This allows for execute in place and shared libraries in an environment without virtual memory management.
This option implies
.Fl fPIC .
.Pp
.It Fl mno-id-shared-library
Generate code that doesn't assume ID based shared libraries are being used.
This is the default.
.Pp
.It Fl mshared-library-id=n
Specified the identification number of the ID based shared library being compiled.
Specifying a value of 0 will generate more compact code, specifying other values will force the allocation of that number to the current library but is no more space or time efficient than omitting this option.
.Pp
.El
.It Sy M68hc1x Options
These are the
.Fl m
options defined for the 68hc11 and 68hc12 microcontrollers.
The default values for these options depends on which style of microcontroller was selected when the compiler was configured; the defaults for the most common choices are given below.
.Pp
.Bl -tag -width xx
.It Fl m6811
.It Fl m68hc11
Generate output for a 68HC11.
This is the default when the compiler is configured for 68HC11-based systems.
.Pp
.It Fl m6812
.It Fl m68hc12
Generate output for a 68HC12.
This is the default when the compiler is configured for 68HC12-based systems.
.Pp
.It Fl m68S12
.It Fl m68hcs12
Generate output for a 68HCS12.
.Pp
.It Fl mauto-incdec
Enable the use of 68HC12 pre and post auto-increment and auto-decrement addressing modes.
.Pp
.It Fl minmax
.It Fl nominmax
Enable the use of 68HC12 min and max instructions.
.Pp
.It Fl mlong-calls
.It Fl mno-long-calls
Treat all calls as being far away (near).
If calls are assumed to be far away, the compiler will use the
.Va call
instruction to call a function and the
.Va rtc
instruction for returning.
.Pp
.It Fl mshort
Consider type
.Va int
to be 16 bits wide, like
.Va short int .
.Pp
.It Fl msoft-reg-count= Ns Ar count
Specify the number of pseudo-soft registers which are used for the code generation.
The maximum number is 32.
Using more pseudo-soft register may or may not result in better code depending on the program.
The default is 4 for 68HC11 and 2 for 68HC12.
.Pp
.El
.It Sy MCore Options
These are the
.Fl m
options defined for the Motorola M*Core processors.
.Pp
.Bl -tag -width xx
.It Fl mhardlit
.It Fl mno-hardlit
Inline constants into the code stream if it can be done in two instructions or less.
.Pp
.It Fl mdiv
.It Fl mno-div
Use the divide instruction.
(Enabled by default).
.Pp
.It Fl mrelax-immediate
.It Fl mno-relax-immediate
Allow arbitrary sized immediates in bit operations.
.Pp
.It Fl mwide-bitfields
.It Fl mno-wide-bitfields
Always treat bit-fields as int-sized.
.Pp
.It Fl m4byte-functions
.It Fl mno-4byte-functions
Force all functions to be aligned to a four byte boundary.
.Pp
.It Fl mcallgraph-data
.It Fl mno-callgraph-data
Emit callgraph information.
.Pp
.It Fl mslow-bytes
.It Fl mno-slow-bytes
Prefer word access when reading byte quantities.
.Pp
.It Fl mlittle-endian
.It Fl mbig-endian
Generate code for a little endian target.
.Pp
.It Fl m210
.It Fl m340
Generate code for the 210 processor.
.Pp
.El
.It Sy MIPS Options
.Bl -tag -width xx
.It Fl EB
Generate big-endian code.
.Pp
.It Fl EL
Generate little-endian code.
This is the default for
.Sy mips*el-*-*
configurations.
.Pp
.It Fl march= Ns Ar arch
Generate code that will run on
.Em arch ,
which can be the name of a generic MIPS ISA, or the name of a particular processor.
The ISA names are:
.Sy mips1 ,
.Sy mips2 ,
.Sy mips3 ,
.Sy mips4 ,
.Sy mips32 ,
.Sy mips32r2 ,
and
.Sy mips64 .
The processor names are:
.Sy 4kc ,
.Sy 4km ,
.Sy 4kp ,
.Sy 5kc ,
.Sy 5kf ,
.Sy 20kc ,
.Sy 24k ,
.Sy 24kc ,
.Sy 24kf ,
.Sy 24kx ,
.Sy m4k ,
.Sy orion ,
.Sy r2000 ,
.Sy r3000 ,
.Sy r3900 ,
.Sy r4000 ,
.Sy r4400 ,
.Sy r4600 ,
.Sy r4650 ,
.Sy r6000 ,
.Sy r8000 ,
.Sy rm7000 ,
.Sy rm9000 ,
.Sy sb1 ,
.Sy sr71000 ,
.Sy vr4100 ,
.Sy vr4111 ,
.Sy vr4120 ,
.Sy vr4130 ,
.Sy vr4300 ,
.Sy vr5000 ,
.Sy vr5400
and
.Sy vr5500 .
The special value
.Sy from-abi
selects the most compatible architecture for the selected ABI (that is,
.Sy mips1
for 32-bit ABIs and
.Sy mips3
for 64-bit ABIs).
.Pp
In processor names, a final
.Sy 000
can be abbreviated as
.Sy k
(for example,
.Fl march=r2k ) .
Prefixes are optional, and
.Sy vr
may be written
.Sy r .
.Pp
GCC defines two macros based on the value of this option.
The first is
.Sy _MIPS_ARCH ,
which gives the name of target architecture, as a string.
The second has the form
.Sy _MIPS_ARCH_
.Em foo ,
where
.Em foo
is the capitalized value of
.Sy _MIPS_ARCH .
For example,
.Fl march=r2000
will set
.Sy _MIPS_ARCH
to
.Sy \&"r2000"
and define the macro
.Sy _MIPS_ARCH_R2000 .
.Pp
Note that the
.Sy _MIPS_ARCH
macro uses the processor names given above.
In other words, it will have the full prefix and will not abbreviate
.Sy 000
as
.Sy k .
In the case of
.Sy from-abi ,
the macro names the resolved architecture (either
.Sy \&"mips1"
or
.Sy \&"mips3" ) .
It names the default architecture when no
.Fl march
option is given.
.Pp
.It Fl mtune= Ns Ar arch
Optimize for
.Em arch .
Among other things, this option controls the way instructions are scheduled, and the perceived cost of arithmetic operations.
The list of
.Em arch
values is the same as for
.Fl march .
.Pp
When this option is not used, GCC will optimize for the processor specified by
.Fl march .
By using
.Fl march
and
.Fl mtune
together, it is possible to generate code that will run on a family of processors, but optimize the code for one particular member of that family.
.Pp
.Fl mtune
defines the macros
.Sy _MIPS_TUNE
and
.Sy _MIPS_TUNE_
.Em foo ,
which work in the same way as the
.Fl march
ones described above.
.Pp
.It Fl mips1
Equivalent to
.Fl march=mips1 .
.Pp
.It Fl mips2
Equivalent to
.Fl march=mips2 .
.Pp
.It Fl mips3
Equivalent to
.Fl march=mips3 .
.Pp
.It Fl mips4
Equivalent to
.Fl march=mips4 .
.Pp
.It Fl mips32
Equivalent to
.Fl march=mips32 .
.Pp
.It Fl mips32r2
Equivalent to
.Fl march=mips32r2 .
.Pp
.It Fl mips64
Equivalent to
.Fl march=mips64 .
.Pp
.It Fl mips16
.It Fl mno-mips16
Generate (do not generate) MIPS16 code.
If GCC is targetting a MIPS32 or MIPS64 architecture, it will make use of the MIPS16e ASE.
.Pp
.It Fl mabi=32
.It Fl mabi=o64
.It Fl mabi=n32
.It Fl mabi=64
.It Fl mabi=eabi
Generate code for the given ABI.
.Pp
Note that the EABI has a 32-bit and a 64-bit variant.
GCC normally generates 64-bit code when you select a 64-bit architecture, but you can use
.Fl mgp32
to get 32-bit code instead.
.Pp
For information about the O64 ABI, see
.Lk http://gcc.gnu.org/projects/mipso64-abi.html .
.Pp
.It Fl mabicalls
.It Fl mno-abicalls
Generate (do not generate) SVR4-style position-independent code.
.Fl mabicalls
is the default for SVR4-based systems.
.Pp
.It Fl mxgot
.It Fl mno-xgot
Lift (do not lift) the usual restrictions on the size of the global offset table.
.Pp
GCC normally uses a single instruction to load values from the GOT.
While this is relatively efficient, it will only work if the GOT is smaller than about 64k.
Anything larger will cause the linker to report an error such as:
.Pp
.Bd -literal -offset indent
relocation truncated to fit: R_MIPS_GOT16 foobar
.Ed
If this happens, you should recompile your code with
.Fl mxgot .
It should then work with very large GOTs, although it will also be less efficient, since it will take three instructions to fetch the value of a global symbol.
.Pp
Note that some linkers can create multiple GOTs.
If you have such a linker, you should only need to use
.Fl mxgot
when a single object file accesses more than 64k's worth of GOT entries.
Very few do.
.Pp
These options have no effect unless GCC is generating position independent code.
.Pp
.It Fl mgp32
Assume that general-purpose registers are 32 bits wide.
.Pp
.It Fl mgp64
Assume that general-purpose registers are 64 bits wide.
.Pp
.It Fl mfp32
Assume that floating-point registers are 32 bits wide.
.Pp
.It Fl mfp64
Assume that floating-point registers are 64 bits wide.
.Pp
.It Fl mhard-float
Use floating-point coprocessor instructions.
.Pp
.It Fl msoft-float
Do not use floating-point coprocessor instructions.
Implement floating-point calculations using library calls instead.
.Pp
.It Fl msingle-float
Assume that the floating-point coprocessor only supports single-precision operations.
.Pp
.It Fl mdouble-float
Assume that the floating-point coprocessor supports double-precision operations.
This is the default.
.Pp
.It Fl mdsp
.It Fl mno-dsp
Use (do not use) the MIPS DSP ASE.
.Pp
.It Fl mpaired-single
.It Fl mno-paired-single
Use (do not use) paired-single floating-point instructions.
This option can only be used when generating 64-bit code and requires hardware floating-point support to be enabled.
.Pp
.It Fl mips3d
.It Fl mno-mips3d
Use (do not use) the MIPS-3D ASE.
The option
.Fl mips3d
implies
.Fl mpaired-single .
.Pp
.It Fl mlong64
Force
.Va long
types to be 64 bits wide.
See
.Fl mlong32
for an explanation of the default and the way that the pointer size is determined.
.Pp
.It Fl mlong32
Force
.Va long ,
.Va int ,
and pointer types to be 32 bits wide.
.Pp
The default size of
.Va int
s,
.Va long
s and pointers depends on the ABI.
All the supported ABIs use 32-bit
.Va int
s.
The n64 ABI uses 64-bit
.Va long
s, as does the 64-bit EABI; the others use 32-bit
.Va long
s.
Pointers are the same size as
.Va long
s, or the same size as integer registers, whichever is smaller.
.Pp
.It Fl msym32
.It Fl mno-sym32
Assume (do not assume) that all symbols have 32-bit values, regardless of the selected ABI.
This option is useful in combination with
.Fl mabi=64
and
.Fl mno-abicalls
because it allows GCC to generate shorter and faster references to symbolic addresses.
.Pp
.It Fl G Ar num
Put global and static items less than or equal to
.Em num
bytes into the small data or bss section instead of the normal data or bss section.
This allows the data to be accessed using a single instruction.
.Pp
All modules should be compiled with the same
.Fl G Ar num
value.
.Pp
.It Fl membedded-data
.It Fl mno-embedded-data
Allocate variables to the read-only data section first if possible, then next in the small data section if possible, otherwise in data.
This gives slightly slower code than the default, but reduces the amount of RAM required when executing, and thus may be preferred for some embedded systems.
.Pp
.It Fl muninit-const-in-rodata
.It Fl mno-uninit-const-in-rodata
Put uninitialized
.Va const
variables in the read-only data section.
This option is only meaningful in conjunction with
.Fl membedded-data .
.Pp
.It Fl msplit-addresses
.It Fl mno-split-addresses
Enable (disable) use of the
.Va %hi()
and
.Va %lo()
assembler relocation operators.
This option has been superseded by
.Fl mexplicit-relocs
but is retained for backwards compatibility.
.Pp
.It Fl mexplicit-relocs
.It Fl mno-explicit-relocs
Use (do not use) assembler relocation operators when dealing with symbolic addresses.
The alternative, selected by
.Fl mno-explicit-relocs ,
is to use assembler macros instead.
.Pp
.Fl mexplicit-relocs
is the default if GCC was configured to use an assembler that supports relocation operators.
.Pp
.It Fl mcheck-zero-division
.It Fl mno-check-zero-division
Trap (do not trap) on integer division by zero.
The default is
.Fl mcheck-zero-division .
.Pp
.It Fl mdivide-traps
.It Fl mdivide-breaks
MIPS systems check for division by zero by generating either a conditional trap or a break instruction.
Using traps results in smaller code, but is only supported on MIPS II and later.
Also, some versions of the Linux kernel have a bug that prevents trap from generating the proper signal
.Va ( SIGFPE ) .
Use
.Fl mdivide-traps
to allow conditional traps on architectures that support them and
.Fl mdivide-breaks
to force the use of breaks.
.Pp
The default is usually
.Fl mdivide-traps ,
but this can be overridden at configure time using
.Fl -with-divide=breaks .
Divide-by-zero checks can be completely disabled using
.Fl mno-check-zero-division .
.Pp
.It Fl mmemcpy
.It Fl mno-memcpy
Force (do not force) the use of
.Va memcpy()
for non-trivial block moves.
The default is
.Fl mno-memcpy ,
which allows GCC to inline most constant-sized copies.
.Pp
.It Fl mlong-calls
.It Fl mno-long-calls
Disable (do not disable) use of the
.Va jal
instruction.
Calling functions using
.Va jal
is more efficient but requires the caller and callee to be in the same 256 megabyte segment.
.Pp
This option has no effect on abicalls code.
The default is
.Fl mno-long-calls .
.Pp
.It Fl mmad
.It Fl mno-mad
Enable (disable) use of the
.Va mad ,
.Va madu
and
.Va mul
instructions, as provided by the R4650 ISA.
.Pp
.It Fl mfused-madd
.It Fl mno-fused-madd
Enable (disable) use of the floating point multiply-accumulate instructions, when they are available.
The default is
.Fl mfused-madd .
.Pp
When multiply-accumulate instructions are used, the intermediate product is calculated to infinite precision and is not subject to the FCSR Flush to Zero bit.
This may be undesirable in some circumstances.
.Pp
.It Fl nocpp
Tell the MIPS assembler to not run its preprocessor over user assembler files (with a
.Sy .s
suffix) when assembling them.
.Pp
.It Fl mfix-r4000
.It Fl mno-fix-r4000
Work around certain R4000 CPU errata:
.Pp
.Bl -dash
.It
A double-word or a variable shift may give an incorrect result if executed immediately after starting an integer division.
.Pp
.It
A double-word or a variable shift may give an incorrect result if executed while an integer multiplication is in progress.
.Pp
.It
An integer division may give an incorrect result if started in a delay slot of a taken branch or a jump.
.Pp
.El
.It Fl mfix-r4400
.It Fl mno-fix-r4400
Work around certain R4400 CPU errata:
.Pp
.Bl -dash
.It
A double-word or a variable shift may give an incorrect result if executed immediately after starting an integer division.
.Pp
.El
.It Fl mfix-vr4120
.It Fl mno-fix-vr4120
Work around certain VR4120 errata:
.Pp
.Bl -dash
.It
.Va dmultu
does not always produce the correct result.
.Pp
.It
.Va div
and
.Va ddiv
do not always produce the correct result if one of the operands is negative.
.Pp
.El
The workarounds for the division errata rely on special functions in
.Pa libgcc.a .
At present, these functions are only provided by the
.Va mips64vr*-elf
configurations.
.Pp
Other VR4120 errata require a nop to be inserted between certain pairs of instructions.
These errata are handled by the assembler, not by GCC itself.
.Pp
.It Fl mfix-vr4130
Work around the VR4130
.Va mflo
/
.Va mfhi
errata.
The workarounds are implemented by the assembler rather than by GCC, although GCC will avoid using
.Va mflo
and
.Va mfhi
if the VR4130
.Va macc ,
.Va macchi ,
.Va dmacc
and
.Va dmacchi
instructions are available instead.
.Pp
.It Fl mfix-sb1
.It Fl mno-fix-sb1
Work around certain SB-1 CPU core errata.
(This flag currently works around the SB-1 revision 2 "F1" and "F2" floating point errata.)
.Pp
.It Fl mflush-func= Ns Ar func
.It Fl mno-flush-func
Specifies the function to call to flush the I and D caches, or to not call any such function.
If called, the function must take the same arguments as the common
.Va _flush_func() ,
that is, the address of the memory range for which the cache is being flushed, the size of the memory range, and the number 3 (to flush both caches).
The default depends on the target GCC was configured for, but commonly is either
.Sy _flush_func
or
.Sy __cpu_flush .
.Pp
.It Fl mbranch-likely
.It Fl mno-branch-likely
Enable or disable use of Branch Likely instructions, regardless of the default for the selected architecture.
By default, Branch Likely instructions may be generated if they are supported by the selected architecture.
An exception is for the MIPS32 and MIPS64 architectures and processors which implement those architectures; for those, Branch Likely instructions will not be generated by default because the MIPS32 and MIPS64 architectures specifically deprecate their use.
.Pp
.It Fl mfp-exceptions
.It Fl mno-fp-exceptions
Specifies whether FP exceptions are enabled.
This affects how we schedule FP instructions for some processors.
The default is that FP exceptions are enabled.
.Pp
For instance, on the SB-1, if FP exceptions are disabled, and we are emitting 64-bit code, then we can use both FP pipes.
Otherwise, we can only use one FP pipe.
.Pp
.It Fl mvr4130-align
.It Fl mno-vr4130-align
The VR4130 pipeline is two-way superscalar, but can only issue two instructions together if the first one is 8-byte aligned.
When this option is enabled, GCC will align pairs of instructions that it thinks should execute in parallel.
.Pp
This option only has an effect when optimizing for the VR4130.
It normally makes code faster, but at the expense of making it bigger.
It is enabled by default at optimization level
.Fl O3 .
.Pp
.El
.It Sy MMIX Options
These options are defined for the MMIX:
.Pp
.Bl -tag -width xx
.It Fl mlibfuncs
.It Fl mno-libfuncs
Specify that intrinsic library functions are being compiled, passing all values in registers, no matter the size.
.Pp
.It Fl mepsilon
.It Fl mno-epsilon
Generate floating-point comparison instructions that compare with respect to the
.Va rE
epsilon register.
.Pp
.It Fl mabi=mmixware
.It Fl mabi=gnu
Generate code that passes function parameters and return values that (in the called function) are seen as registers
.Va $0
and up, as opposed to the GNU ABI which uses global registers
.Va $231
and up.
.Pp
.It Fl mzero-extend
.It Fl mno-zero-extend
When reading data from memory in sizes shorter than 64 bits, use (do not use) zero-extending load instructions by default, rather than sign-extending ones.
.Pp
.It Fl mknuthdiv
.It Fl mno-knuthdiv
Make the result of a division yielding a remainder have the same sign as the divisor.
With the default,
.Fl mno-knuthdiv ,
the sign of the remainder follows the sign of the dividend.
Both methods are arithmetically valid, the latter being almost exclusively used.
.Pp
.It Fl mtoplevel-symbols
.It Fl mno-toplevel-symbols
Prepend (do not prepend) a
.Sy :
to all global symbols, so the assembly code can be used with the
.Va PREFIX
assembly directive.
.Pp
.It Fl melf
Generate an executable in the ELF format, rather than the default
.Sy mmo
format used by the
.Sy mmix
simulator.
.Pp
.It Fl mbranch-predict
.It Fl mno-branch-predict
Use (do not use) the probable-branch instructions, when static branch prediction indicates a probable branch.
.Pp
.It Fl mbase-addresses
.It Fl mno-base-addresses
Generate (do not generate) code that uses
.Em base addresses .
Using a base address automatically generates a request (handled by the assembler and the linker) for a constant to be set up in a global register.
The register is used for one or more base address requests within the range 0 to 255 from the value held in the register.
The generally leads to short and fast code, but the number of different data items that can be addressed is limited.
This means that a program that uses lots of static data may require
.Fl mno-base-addresses .
.Pp
.It Fl msingle-exit
.It Fl mno-single-exit
Force (do not force) generated code to have a single exit point in each function.
.Pp
.El
.It Sy MN10300 Options
These
.Fl m
options are defined for Matsushita MN10300 architectures:
.Pp
.Bl -tag -width xx
.It Fl mmult-bug
Generate code to avoid bugs in the multiply instructions for the MN10300 processors.
This is the default.
.Pp
.It Fl mno-mult-bug
Do not generate code to avoid bugs in the multiply instructions for the MN10300 processors.
.Pp
.It Fl mam33
Generate code which uses features specific to the AM33 processor.
.Pp
.It Fl mno-am33
Do not generate code which uses features specific to the AM33 processor.
This is the default.
.Pp
.It Fl mreturn-pointer-on-d0
When generating a function which returns a pointer, return the pointer in both
.Va a0
and
.Va d0 .
Otherwise, the pointer is returned only in a0, and attempts to call such functions without a prototype would result in errors.
Note that this option is on by default; use
.Fl mno-return-pointer-on-d0
to disable it.
.Pp
.It Fl mno-crt0
Do not link in the C run-time initialization object file.
.Pp
.It Fl mrelax
Indicate to the linker that it should perform a relaxation optimization pass to shorten branches, calls and absolute memory addresses.
This option only has an effect when used on the command line for the final link step.
.Pp
This option makes symbolic debugging impossible.
.Pp
.El
.It Sy MT Options
These
.Fl m
options are defined for Morpho MT architectures:
.Pp
.Bl -tag -width xx
.It Fl march= Ns Ar cpu-type
Generate code that will run on
.Em cpu-type ,
which is the name of a system representing a certain processor type.
Possible values for
.Em cpu-type
are
.Sy ms1-64-001 ,
.Sy ms1-16-002 ,
.Sy ms1-16-003
and
.Sy ms2 .
.Pp
When this option is not used, the default is
.Fl march=ms1-16-002 .
.Pp
.It Fl mbacc
Use byte loads and stores when generating code.
.Pp
.It Fl mno-bacc
Do not use byte loads and stores when generating code.
.Pp
.It Fl msim
Use simulator runtime
.Pp
.It Fl mno-crt0
Do not link in the C run-time initialization object file
.Pa crti.o .
Other run-time initialization and termination files such as
.Pa startup.o
and
.Pa exit.o
are still included on the linker command line.
.Pp
.El
.It Sy PDP-11 Options
These options are defined for the PDP-11:
.Pp
.Bl -tag -width xx
.It Fl mfpu
Use hardware FPP floating point.
This is the default.
(FIS floating point on the PDP-11/40 is not supported.)
.Pp
.It Fl msoft-float
Do not use hardware floating point.
.Pp
.It Fl mac0
Return floating-point results in ac0 (fr0 in Unix assembler syntax).
.Pp
.It Fl mno-ac0
Return floating-point results in memory.
This is the default.
.Pp
.It Fl m40
Generate code for a PDP-11/40.
.Pp
.It Fl m45
Generate code for a PDP-11/45.
This is the default.
.Pp
.It Fl m10
Generate code for a PDP-11/10.
.Pp
.It Fl mbcopy-builtin
Use inline
.Va movmemhi
patterns for copying memory.
This is the default.
.Pp
.It Fl mbcopy
Do not use inline
.Va movmemhi
patterns for copying memory.
.Pp
.It Fl mint16
.It Fl mno-int32
Use 16-bit
.Va int .
This is the default.
.Pp
.It Fl mint32
.It Fl mno-int16
Use 32-bit
.Va int .
.Pp
.It Fl mfloat64
.It Fl mno-float32
Use 64-bit
.Va float .
This is the default.
.Pp
.It Fl mfloat32
.It Fl mno-float64
Use 32-bit
.Va float .
.Pp
.It Fl mabshi
Use
.Va abshi2
pattern.
This is the default.
.Pp
.It Fl mno-abshi
Do not use
.Va abshi2
pattern.
.Pp
.It Fl mbranch-expensive
Pretend that branches are expensive.
This is for experimenting with code generation only.
.Pp
.It Fl mbranch-cheap
Do not pretend that branches are expensive.
This is the default.
.Pp
.It Fl msplit
Generate code for a system with split I&D.
.Pp
.It Fl mno-split
Generate code for a system without split I&D.
This is the default.
.Pp
.It Fl munix-asm
Use Unix assembler syntax.
This is the default when configured for
.Sy pdp11-*-bsd .
.Pp
.It Fl mdec-asm
Use DEC assembler syntax.
This is the default when configured for any PDP-11 target other than
.Sy pdp11-*-bsd .
.Pp
.El
.It Sy PowerPC Options
These are listed under
.It Sy IBM RS/6000 and PowerPC Options
These
.Fl m
options are defined for the IBM RS/6000 and PowerPC:
.Pp
.Bl -tag -width xx
.It Fl mpower
.It Fl mno-power
.It Fl mpower2
.It Fl mno-power2
.It Fl mpowerpc
.It Fl mno-powerpc
.It Fl mpowerpc-gpopt
.It Fl mno-powerpc-gpopt
.It Fl mpowerpc-gfxopt
.It Fl mno-powerpc-gfxopt
.It Fl mpowerpc64
.It Fl mno-powerpc64
.It Fl mmfcrf
.It Fl mno-mfcrf
.It Fl mpopcntb
.It Fl mno-popcntb
.It Fl mfprnd
.It Fl mno-fprnd
GCC supports two related instruction set architectures for the RS/6000 and PowerPC.
The
.Em POWER
instruction set are those instructions supported by the
.Sy rios
chip set used in the original RS/6000 systems and the
.Em PowerPC
instruction set is the architecture of the Freescale MPC5xx, MPC6xx, MPC8xx microprocessors, and the IBM 4xx, 6xx, and follow-on microprocessors.
.Pp
Neither architecture is a subset of the other.
However there is a large common subset of instructions supported by both.
An MQ register is included in processors supporting the POWER architecture.
.Pp
You use these options to specify which instructions are available on the processor you are using.
The default value of these options is determined when configuring GCC.
Specifying the
.Fl mcpu= Ns Ar cpu_type
overrides the specification of these options.
We recommend you use the
.Fl mcpu= Ns Ar cpu_type
option rather than the options listed above.
.Pp
The
.Fl mpower
option allows GCC to generate instructions that are found only in the POWER architecture and to use the MQ register.
Specifying
.Fl mpower2
implies
.Fl power
and also allows GCC to generate instructions that are present in the POWER2 architecture but not the original POWER architecture.
.Pp
The
.Fl mpowerpc
option allows GCC to generate instructions that are found only in the 32-bit subset of the PowerPC architecture.
Specifying
.Fl mpowerpc-gpopt
implies
.Fl mpowerpc
and also allows GCC to use the optional PowerPC architecture instructions in the General Purpose group, including floating-point square root.
Specifying
.Fl mpowerpc-gfxopt
implies
.Fl mpowerpc
and also allows GCC to use the optional PowerPC architecture instructions in the Graphics group, including floating-point select.
.Pp
The
.Fl mmfcrf
option allows GCC to generate the move from condition register field instruction implemented on the POWER4 processor and other processors that support the PowerPC V2.01 architecture.
The
.Fl mpopcntb
option allows GCC to generate the popcount and double precision FP reciprocal estimate instruction implemented on the POWER5 processor and other processors that support the PowerPC V2.02 architecture.
The
.Fl mfprnd
option allows GCC to generate the FP round to integer instructions implemented on the POWER5+ processor and other processors that support the PowerPC V2.03 architecture.
.Pp
The
.Fl mpowerpc64
option allows GCC to generate the additional 64-bit instructions that are found in the full PowerPC64 architecture and to treat GPRs as 64-bit, doubleword quantities.
GCC defaults to
.Fl mno-powerpc64 .
.Pp
If you specify both
.Fl mno-power
and
.Fl mno-powerpc ,
GCC will use only the instructions in the common subset of both architectures plus some special AIX common-mode calls, and will not use the MQ register.
Specifying both
.Fl mpower
and
.Fl mpowerpc
permits GCC to use any instruction from either architecture and to allow use of the MQ register; specify this for the Motorola MPC601.
.Pp
.It Fl mnew-mnemonics
.It Fl mold-mnemonics
Select which mnemonics to use in the generated assembler code.
With
.Fl mnew-mnemonics ,
GCC uses the assembler mnemonics defined for the PowerPC architecture.
With
.Fl mold-mnemonics
it uses the assembler mnemonics defined for the POWER architecture.
Instructions defined in only one architecture have only one mnemonic; GCC uses that mnemonic irrespective of which of these options is specified.
.Pp
GCC defaults to the mnemonics appropriate for the architecture in use.
Specifying
.Fl mcpu= Ns Ar cpu_type
sometimes overrides the value of these option.
Unless you are building a cross-compiler, you should normally not specify either
.Fl mnew-mnemonics
or
.Fl mold-mnemonics ,
but should instead accept the default.
.Pp
.It Fl mcpu= Ns Ar cpu_type
Set architecture type, register usage, choice of mnemonics, and instruction scheduling parameters for machine type
.Em cpu_type .
Supported values for
.Em cpu_type
are
.Sy 401 ,
.Sy 403 ,
.Sy 405 ,
.Sy 405fp ,
.Sy 440 ,
.Sy 440fp ,
.Sy 505 ,
.Sy 601 ,
.Sy 602 ,
.Sy 603 ,
.Sy 603e ,
.Sy 604 ,
.Sy 604e ,
.Sy 620 ,
.Sy 630 ,
.Sy 740 ,
.Sy 7400 ,
.Sy 7450 ,
.Sy 750 ,
.Sy 801 ,
.Sy 821 ,
.Sy 823 ,
.Sy 860 ,
.Sy 970 ,
.Sy 8540 ,
.Sy ec603e ,
.Sy G3 ,
.Sy G4 ,
.Sy G5 ,
.Sy power ,
.Sy power2 ,
.Sy power3 ,
.Sy power4 ,
.Sy power5 ,
.Sy power5+ ,
.Sy power6 ,
.Sy common ,
.Sy powerpc ,
.Sy powerpc64 ,
.Sy rios ,
.Sy rios1 ,
.Sy rios2 ,
.Sy rsc ,
and
.Sy rs64 .
.Pp
.Fl mcpu=common
selects a completely generic processor.
Code generated under this option will run on any POWER or PowerPC processor.
GCC will use only the instructions in the common subset of both architectures, and will not use the MQ register.
GCC assumes a generic processor model for scheduling purposes.
.Pp
.Fl mcpu=power ,
.Fl mcpu=power2 ,
.Fl mcpu=powerpc ,
and
.Fl mcpu=powerpc64
specify generic POWER, POWER2, pure 32-bit PowerPC (i.e., not MPC601), and 64-bit PowerPC architecture machine types, with an appropriate, generic processor model assumed for scheduling purposes.
.Pp
The other options specify a specific processor.
Code generated under those options will run best on that processor, and may not run at all on others.
.Pp
The
.Fl mcpu
options automatically enable or disable the following options:
.Fl maltivec ,
.Fl mfprnd ,
.Fl mhard-float ,
.Fl mmfcrf ,
.Fl mmultiple ,
.Fl mnew-mnemonics ,
.Fl mpopcntb ,
.Fl mpower ,
.Fl mpower2 ,
.Fl mpowerpc64 ,
.Fl mpowerpc-gpopt ,
.Fl mpowerpc-gfxopt ,
.Fl mstring .
The particular options set for any particular CPU will vary between compiler versions, depending on what setting seems to produce optimal code for that CPU; it doesn't necessarily reflect the actual hardware's capabilities.
If you wish to set an individual option to a particular value, you may specify it after the
.Fl mcpu
option, like
.Fl mcpu=970 Fl mno-altivec .
.Pp
On AIX, the
.Fl maltivec
and
.Fl mpowerpc64
options are not enabled or disabled by the
.Fl mcpu
option at present because AIX does not have full support for these options.
You may still enable or disable them individually if you're sure it'll work in your environment.
.Pp
.It Fl mtune= Ns Ar cpu_type
Set the instruction scheduling parameters for machine type
.Em cpu_type ,
but do not set the architecture type, register usage, or choice of mnemonics, as
.Fl mcpu= Ns Ar cpu_type
would.
The same values for
.Em cpu_type
are used for
.Fl mtune
as for
.Fl mcpu .
If both are specified, the code generated will use the architecture, registers, and mnemonics set by
.Fl mcpu ,
but the scheduling parameters set by
.Fl mtune .
.Pp
.It Fl mswdiv
.It Fl mno-swdiv
Generate code to compute division as reciprocal estimate and iterative refinement, creating opportunities for increased throughput.
This feature requires: optional PowerPC Graphics instruction set for single precision and FRE instruction for double precision, assuming divides cannot generate user-visible traps, and the domain values not include Infinities, denormals or zero denominator.
.Pp
.It Fl maltivec
.It Fl mno-altivec
Generate code that uses (does not use) AltiVec instructions, and also enable the use of built-in functions that allow more direct access to the AltiVec instruction set.
You may also need to set
.Fl mabi=altivec
to adjust the current ABI with AltiVec ABI enhancements.
.Pp
.It Fl mvrsave
.It Fl mno-vrsave
Generate VRSAVE instructions when generating AltiVec code.
.Pp
.It Fl msecure-plt
Generate code that allows ld and ld.so to build executables and shared libraries with non-exec .plt and .got sections.
This is a PowerPC 32-bit SYSV ABI option.
.Pp
.It Fl mbss-plt
Generate code that uses a BSS .plt section that ld.so fills in, and requires .plt and .got sections that are both writable and executable.
This is a PowerPC 32-bit SYSV ABI option.
.Pp
.It Fl misel
.It Fl mno-isel
This switch enables or disables the generation of ISEL instructions.
.Pp
.It Fl misel= Ns Ar yes/no
This switch has been deprecated.
Use
.Fl misel
and
.Fl mno-isel
instead.
.Pp
.It Fl mspe
.It Fl mno-isel
This switch enables or disables the generation of SPE simd instructions.
.Pp
.It Fl mspe= Ns Ar yes/no
This option has been deprecated.
Use
.Fl mspe
and
.Fl mno-spe
instead.
.Pp
.It Fl mfloat-gprs= Ns Ar yes/single/double/no
.It Fl mfloat-gprs
This switch enables or disables the generation of floating point operations on the general purpose registers for architectures that support it.
.Pp
The argument
.Em yes
or
.Em single
enables the use of single-precision floating point operations.
.Pp
The argument
.Em double
enables the use of single and double-precision floating point operations.
.Pp
The argument
.Em no
disables floating point operations on the general purpose registers.
.Pp
This option is currently only available on the MPC854x.
.Pp
.It Fl m32
.It Fl m64
Generate code for 32-bit or 64-bit environments of Darwin and SVR4 targets (including GNU/Linux).
The 32-bit environment sets int, long and pointer to 32 bits and generates code that runs on any PowerPC variant.
The 64-bit environment sets int to 32 bits and long and pointer to 64 bits, and generates code for PowerPC64, as for
.Fl mpowerpc64 .
.Pp
.It Fl mfull-toc
.It Fl mno-fp-in-toc
.It Fl mno-sum-in-toc
.It Fl mminimal-toc
Modify generation of the TOC (Table Of Contents), which is created for every executable file.
The
.Fl mfull-toc
option is selected by default.
In that case, GCC will allocate at least one TOC entry for each unique non-automatic variable reference in your program.
GCC will also place floating-point constants in the TOC.
However, only 16,384 entries are available in the TOC.
.Pp
If you receive a linker error message that saying you have overflowed the available TOC space, you can reduce the amount of TOC space used with the
.Fl mno-fp-in-toc
and
.Fl mno-sum-in-toc
options.
.Fl mno-fp-in-toc
prevents GCC from putting floating-point constants in the TOC and
.Fl mno-sum-in-toc
forces GCC to generate code to calculate the sum of an address and a constant at run-time instead of putting that sum into the TOC.
You may specify one or both of these options.
Each causes GCC to produce very slightly slower and larger code at the expense of conserving TOC space.
.Pp
If you still run out of space in the TOC even when you specify both of these options, specify
.Fl mminimal-toc
instead.
This option causes GCC to make only one TOC entry for every file.
When you specify this option, GCC will produce code that is slower and larger but which uses extremely little TOC space.
You may wish to use this option only on files that contain less frequently executed code.
.Pp
.It Fl maix64
.It Fl maix32
Enable 64-bit AIX ABI and calling convention: 64-bit pointers, 64-bit
.Va long
type, and the infrastructure needed to support them.
Specifying
.Fl maix64
implies
.Fl mpowerpc64
and
.Fl mpowerpc ,
while
.Fl maix32
disables the 64-bit ABI and implies
.Fl mno-powerpc64 .
GCC defaults to
.Fl maix32 .
.Pp
.It Fl mxl-compat
.It Fl mno-xl-compat
Produce code that conforms more closely to IBM XL compiler semantics when using AIX-compatible ABI.
Pass floating-point arguments to prototyped functions beyond the register save area (RSA) on the stack in addition to argument FPRs.
Do not assume that most significant double in 128-bit long double value is properly rounded when comparing values and converting to double.
Use XL symbol names for long double support routines.
.Pp
The AIX calling convention was extended but not initially documented to handle an obscure K&R C case of calling a function that takes the address of its arguments with fewer arguments than declared.
IBM XL compilers access floating point arguments which do not fit in the RSA from the stack when a subroutine is compiled without optimization.
Because always storing floating-point arguments on the stack is inefficient and rarely needed, this option is not enabled by default and only is necessary when calling subroutines compiled by IBM XL compilers without optimization.
.Pp
.It Fl mpe
Support
.Em IBM RS/6000 SP
.Em Parallel Environment
(PE).
Link an application written to use message passing with special startup code to enable the application to run.
The system must have PE installed in the standard location
.Pa ( /usr/lpp/ppe.poe/ ) ,
or the
.Pa specs
file must be overridden with the
.Fl specs=
option to specify the appropriate directory location.
The Parallel Environment does not support threads, so the
.Fl mpe
option and the
.Fl pthread
option are incompatible.
.Pp
.It Fl malign-natural
.It Fl malign-power
On AIX, 32-bit Darwin, and 64-bit PowerPC GNU/Linux, the option
.Fl malign-natural
overrides the ABI-defined alignment of larger types, such as floating-point doubles, on their natural size-based boundary.
The option
.Fl malign-power
instructs GCC to follow the ABI-specified alignment rules.
GCC defaults to the standard alignment defined in the ABI.
.Pp
On 64-bit Darwin, natural alignment is the default, and
.Fl malign-power
is not supported.
.Pp
.It Fl msoft-float
.It Fl mhard-float
Generate code that does not use (uses) the floating-point register set.
Software floating point emulation is provided if you use the
.Fl msoft-float
option, and pass the option to GCC when linking.
.Pp
.It Fl mmultiple
.It Fl mno-multiple
Generate code that uses (does not use) the load multiple word instructions and the store multiple word instructions.
These instructions are generated by default on POWER systems, and not generated on PowerPC systems.
Do not use
.Fl mmultiple
on little endian PowerPC systems, since those instructions do not work when the processor is in little endian mode.
The exceptions are PPC740 and PPC750 which permit the instructions usage in little endian mode.
.Pp
.It Fl mstring
.It Fl mno-string
Generate code that uses (does not use) the load string instructions and the store string word instructions to save multiple registers and do small block moves.
These instructions are generated by default on POWER systems, and not generated on PowerPC systems.
Do not use
.Fl mstring
on little endian PowerPC systems, since those instructions do not work when the processor is in little endian mode.
The exceptions are PPC740 and PPC750 which permit the instructions usage in little endian mode.
.Pp
.It Fl mupdate
.It Fl mno-update
Generate code that uses (does not use) the load or store instructions that update the base register to the address of the calculated memory location.
These instructions are generated by default.
If you use
.Fl mno-update ,
there is a small window between the time that the stack pointer is updated and the address of the previous frame is stored, which means code that walks the stack frame across interrupts or signals may get corrupted data.
.Pp
.It Fl mfused-madd
.It Fl mno-fused-madd
Generate code that uses (does not use) the floating point multiply and accumulate instructions.
These instructions are generated by default if hardware floating is used.
.Pp
.It Fl mno-bit-align
.It Fl mbit-align
On System V.4 and embedded PowerPC systems do not (do) force structures and unions that contain bit-fields to be aligned to the base type of the bit-field.
.Pp
For example, by default a structure containing nothing but 8
.Va unsigned
bit-fields of length 1 would be aligned to a 4 byte boundary and have a size of 4 bytes.
By using
.Fl mno-bit-align ,
the structure would be aligned to a 1 byte boundary and be one byte in size.
.Pp
.It Fl mno-strict-align
.It Fl mstrict-align
On System V.4 and embedded PowerPC systems do not (do) assume that unaligned memory references will be handled by the system.
.Pp
.It Fl mrelocatable
.It Fl mno-relocatable
On embedded PowerPC systems generate code that allows (does not allow) the program to be relocated to a different address at runtime.
If you use
.Fl mrelocatable
on any module, all objects linked together must be compiled with
.Fl mrelocatable
or
.Fl mrelocatable-lib .
.Pp
.It Fl mrelocatable-lib
.It Fl mno-relocatable-lib
On embedded PowerPC systems generate code that allows (does not allow) the program to be relocated to a different address at runtime.
Modules compiled with
.Fl mrelocatable-lib
can be linked with either modules compiled without
.Fl mrelocatable
and
.Fl mrelocatable-lib
or with modules compiled with the
.Fl mrelocatable
options.
.Pp
.It Fl mno-toc
.It Fl mtoc
On System V.4 and embedded PowerPC systems do not (do) assume that register 2 contains a pointer to a global area pointing to the addresses used in the program.
.Pp
.It Fl mlittle
.It Fl mlittle-endian
On System V.4 and embedded PowerPC systems compile code for the processor in little endian mode.
The
.Fl mlittle-endian
option is the same as
.Fl mlittle .
.Pp
.It Fl mbig
.It Fl mbig-endian
On System V.4 and embedded PowerPC systems compile code for the processor in big endian mode.
The
.Fl mbig-endian
option is the same as
.Fl mbig .
.Pp
.It Fl mdynamic-no-pic
On Darwin and Mac OS X systems, compile code so that it is not relocatable, but that its external references are relocatable.
The resulting code is suitable for applications, but not shared libraries.
.Pp
.It Fl mprioritize-restricted-insns= Ns Ar priority
This option controls the priority that is assigned to dispatch-slot restricted instructions during the second scheduling pass.
The argument
.Em priority
takes the value
.Em 0/1/2
to assign
.Em no/highest/second-highest
priority to dispatch slot restricted instructions.
.Pp
.It Fl msched-costly-dep= Ns Ar dependence_type
This option controls which dependences are considered costly by the target during instruction scheduling.
The argument
.Em dependence_type
takes one of the following values:
.Em no :
no dependence is costly,
.Em all :
all dependences are costly,
.Em true_store_to_load :
a true dependence from store to load is costly,
.Em store_to_load :
any dependence from store to load is costly,
.Em number :
any dependence which latency \*[Gt]=
.Em number
is costly.
.Pp
.It Fl minsert-sched-nops= Ns Ar scheme
This option controls which nop insertion scheme will be used during the second scheduling pass.
The argument
.Em scheme
takes one of the following values:
.Em no :
Don't insert nops.
.Em pad :
Pad with nops any dispatch group which has vacant issue slots, according to the scheduler's grouping.
.Em regroup_exact :
Insert nops to force costly dependent insns into separate groups.
Insert exactly as many nops as needed to force an insn to a new group, according to the estimated processor grouping.
.Em number :
Insert nops to force costly dependent insns into separate groups.
Insert
.Em number
nops to force an insn to a new group.
.Pp
.It Fl mcall-sysv
On System V.4 and embedded PowerPC systems compile code using calling conventions that adheres to the March 1995 draft of the System V Application Binary Interface, PowerPC processor supplement.
This is the default unless you configured GCC using
.Sy powerpc-*-eabiaix .
.Pp
.It Fl mcall-sysv-eabi
Specify both
.Fl mcall-sysv
and
.Fl meabi
options.
.Pp
.It Fl mcall-sysv-noeabi
Specify both
.Fl mcall-sysv
and
.Fl mno-eabi
options.
.Pp
.It Fl mcall-solaris
On System V.4 and embedded PowerPC systems compile code for the Solaris operating system.
.Pp
.It Fl mcall-linux
On System V.4 and embedded PowerPC systems compile code for the Linux-based GNU system.
.Pp
.It Fl mcall-gnu
On System V.4 and embedded PowerPC systems compile code for the Hurd-based GNU system.
.Pp
.It Fl mcall-netbsd
On System V.4 and embedded PowerPC systems compile code for the NetBSD operating system.
.Pp
.It Fl maix-struct-return
Return all structures in memory (as specified by the AIX ABI).
.Pp
.It Fl msvr4-struct-return
Return structures smaller than 8 bytes in registers (as specified by the SVR4 ABI).
.Pp
.It Fl mabi= Ns Ar abi-type
Extend the current ABI with a particular extension, or remove such extension.
Valid values are
.Em altivec ,
.Em no-altivec ,
.Em spe ,
.Em no-spe ,
.Em ibmlongdouble ,
.Em ieeelongdouble .
.Pp
.It Fl mabi=spe
Extend the current ABI with SPE ABI extensions.
This does not change the default ABI, instead it adds the SPE ABI extensions to the current ABI.
.Pp
.It Fl mabi=no-spe
Disable Booke SPE ABI extensions for the current ABI.
.Pp
.It Fl mabi=ibmlongdouble
Change the current ABI to use IBM extended precision long double.
This is a PowerPC 32-bit SYSV ABI option.
.Pp
.It Fl mabi=ieeelongdouble
Change the current ABI to use IEEE extended precision long double.
This is a PowerPC 32-bit Linux ABI option.
.Pp
.It Fl mprototype
.It Fl mno-prototype
On System V.4 and embedded PowerPC systems assume that all calls to variable argument functions are properly prototyped.
Otherwise, the compiler must insert an instruction before every non prototyped call to set or clear bit 6 of the condition code register
.Em ( CR )
to indicate whether floating point values were passed in the floating point registers in case the function takes a variable arguments.
With
.Fl mprototype ,
only calls to prototyped variable argument functions will set or clear the bit.
.Pp
.It Fl msim
On embedded PowerPC systems, assume that the startup module is called
.Pa sim-crt0.o
and that the standard C libraries are
.Pa libsim.a
and
.Pa libc.a .
This is the default for
.Sy powerpc-*-eabisim .
configurations.
.Pp
.It Fl mmvme
On embedded PowerPC systems, assume that the startup module is called
.Pa crt0.o
and the standard C libraries are
.Pa libmvme.a
and
.Pa libc.a .
.Pp
.It Fl mads
On embedded PowerPC systems, assume that the startup module is called
.Pa crt0.o
and the standard C libraries are
.Pa libads.a
and
.Pa libc.a .
.Pp
.It Fl myellowknife
On embedded PowerPC systems, assume that the startup module is called
.Pa crt0.o
and the standard C libraries are
.Pa libyk.a
and
.Pa libc.a .
.Pp
.It Fl mvxworks
On System V.4 and embedded PowerPC systems, specify that you are compiling for a VxWorks system.
.Pp
.It Fl mwindiss
Specify that you are compiling for the WindISS simulation environment.
.Pp
.It Fl memb
On embedded PowerPC systems, set the
.Em PPC_EMB
bit in the ELF flags header to indicate that
.Sy eabi
extended relocations are used.
.Pp
.It Fl meabi
.It Fl mno-eabi
On System V.4 and embedded PowerPC systems do (do not) adhere to the Embedded Applications Binary Interface (eabi) which is a set of modifications to the System V.4 specifications.
Selecting
.Fl meabi
means that the stack is aligned to an 8 byte boundary, a function
.Va __eabi
is called to from
.Va main
to set up the eabi environment, and the
.Fl msdata
option can use both
.Va r2
and
.Va r13
to point to two separate small data areas.
Selecting
.Fl mno-eabi
means that the stack is aligned to a 16 byte boundary, do not call an initialization function from
.Va main ,
and the
.Fl msdata
option will only use
.Va r13
to point to a single small data area.
The
.Fl meabi
option is on by default if you configured GCC using one of the
.Sy powerpc*-*-eabi*
options.
.Pp
.It Fl msdata=eabi
On System V.4 and embedded PowerPC systems, put small initialized
.Va const
global and static data in the
.Sy .sdata2
section, which is pointed to by register
.Va r2 .
Put small initialized non-
.Va const
global and static data in the
.Sy .sdata
section, which is pointed to by register
.Va r13 .
Put small uninitialized global and static data in the
.Sy .sbss
section, which is adjacent to the
.Sy .sdata
section.
The
.Fl msdata=eabi
option is incompatible with the
.Fl mrelocatable
option.
The
.Fl msdata=eabi
option also sets the
.Fl memb
option.
.Pp
.It Fl msdata=sysv
On System V.4 and embedded PowerPC systems, put small global and static data in the
.Sy .sdata
section, which is pointed to by register
.Va r13 .
Put small uninitialized global and static data in the
.Sy .sbss
section, which is adjacent to the
.Sy .sdata
section.
The
.Fl msdata=sysv
option is incompatible with the
.Fl mrelocatable
option.
.Pp
.It Fl msdata=default
.It Fl msdata
On System V.4 and embedded PowerPC systems, if
.Fl meabi
is used, compile code the same as
.Fl msdata=eabi ,
otherwise compile code the same as
.Fl msdata=sysv .
.Pp
.It Fl msdata-data
On System V.4 and embedded PowerPC systems, put small global and static data in the
.Sy .sdata
section.
Put small uninitialized global and static data in the
.Sy .sbss
section.
Do not use register
.Va r13
to address small data however.
This is the default behavior unless other
.Fl msdata
options are used.
.Pp
.It Fl msdata=none
.It Fl mno-sdata
On embedded PowerPC systems, put all initialized global and static data in the
.Sy .data
section, and all uninitialized data in the
.Sy .bss
section.
.Pp
.It Fl G Ar num
On embedded PowerPC systems, put global and static items less than or equal to
.Em num
bytes into the small data or bss sections instead of the normal data or bss section.
By default,
.Em num
is 8.
The
.Fl G Ar num
switch is also passed to the linker.
All modules should be compiled with the same
.Fl G Ar num
value.
.Pp
.It Fl mregnames
.It Fl mno-regnames
On System V.4 and embedded PowerPC systems do (do not) emit register names in the assembly language output using symbolic forms.
.Pp
.It Fl mlongcall
.It Fl mno-longcall
Default to making all function calls indirectly, using a register, so that functions which reside further than 32 megabytes (33,554,432 bytes) from the current location can be called.
This setting can be overridden by the
.Va shortcall
function attribute, or by
.Va #pragma longcall(0) .
.Pp
Some linkers are capable of detecting out-of-range calls and generating glue code on the fly.
On these systems, long calls are unnecessary and generate slower code.
As of this writing, the AIX linker can do this, as can the GNU linker for PowerPC/64.
It is planned to add this feature to the GNU linker for 32-bit PowerPC systems as well.
.Pp
On Darwin/PPC systems,
.Va #pragma longcall
will generate "jbsr callee, L42", plus a "branch island" (glue code).
The two target addresses represent the callee and the "branch island".
The Darwin/PPC linker will prefer the first address and generate a "bl callee" if the PPC "bl" instruction will reach the callee directly; otherwise, the linker will generate "bl L42" to call the "branch island".
The "branch island" is appended to the body of the calling function; it computes the full 32-bit address of the callee and jumps to it.
.Pp
On Mach-O (Darwin) systems, this option directs the compiler emit to the glue for every direct call, and the Darwin linker decides whether to use or discard it.
.Pp
In the future, we may cause GCC to ignore all longcall specifications when the linker is known to generate glue.
.Pp
.It Fl pthread
Adds support for multithreading with the
.Em pthreads
library.
This option sets flags for both the preprocessor and linker.
.Pp
.El
.It Sy S/390 and zSeries Options
These are the
.Fl m
options defined for the S/390 and zSeries architecture.
.Pp
.Bl -tag -width xx
.It Fl mhard-float
.It Fl msoft-float
Use (do not use) the hardware floating-point instructions and registers for floating-point operations.
When
.Fl msoft-float
is specified, functions in
.Pa libgcc.a
will be used to perform floating-point operations.
When
.Fl mhard-float
is specified, the compiler generates IEEE floating-point instructions.
This is the default.
.Pp
.It Fl mlong-double-64
.It Fl mlong-double-128
These switches control the size of
.Va long double
type.
A size of 64bit makes the
.Va long double
type equivalent to the
.Va double
type.
This is the default.
.Pp
.It Fl mbackchain
.It Fl mno-backchain
Store (do not store) the address of the caller's frame as backchain pointer into the callee's stack frame.
A backchain may be needed to allow debugging using tools that do not understand DWARF-2 call frame information.
When
.Fl mno-packed-stack
is in effect, the backchain pointer is stored at the bottom of the stack frame; when
.Fl mpacked-stack
is in effect, the backchain is placed into the topmost word of the 96/160 byte register save area.
.Pp
In general, code compiled with
.Fl mbackchain
is call-compatible with code compiled with
.Fl mmo-backchain ;
however, use of the backchain for debugging purposes usually requires that the whole binary is built with
.Fl mbackchain .
Note that the combination of
.Fl mbackchain ,
.Fl mpacked-stack
and
.Fl mhard-float
is not supported.
In order to build a linux kernel use
.Fl msoft-float .
.Pp
The default is to not maintain the backchain.
.Pp
.It Fl mpacked-stack
.It Fl mno-packed-stack
Use (do not use) the packed stack layout.
When
.Fl mno-packed-stack
is specified, the compiler uses the all fields of the 96/160 byte register save area only for their default purpose; unused fields still take up stack space.
When
.Fl mpacked-stack
is specified, register save slots are densely packed at the top of the register save area; unused space is reused for other purposes, allowing for more efficient use of the available stack space.
However, when
.Fl mbackchain
is also in effect, the topmost word of the save area is always used to store the backchain, and the return address register is always saved two words below the backchain.
.Pp
As long as the stack frame backchain is not used, code generated with
.Fl mpacked-stack
is call-compatible with code generated with
.Fl mno-packed-stack .
Note that some non-FSF releases of GCC 2.95 for S/390 or zSeries generated code that uses the stack frame backchain at run time, not just for debugging purposes.
Such code is not call-compatible with code compiled with
.Fl mpacked-stack .
Also, note that the combination of
.Fl mbackchain ,
.Fl mpacked-stack
and
.Fl mhard-float
is not supported.
In order to build a linux kernel use
.Fl msoft-float .
.Pp
The default is to not use the packed stack layout.
.Pp
.It Fl msmall-exec
.It Fl mno-small-exec
Generate (or do not generate) code using the
.Va bras
instruction to do subroutine calls.
This only works reliably if the total executable size does not exceed 64k.
The default is to use the
.Va basr
instruction instead, which does not have this limitation.
.Pp
.It Fl m64
.It Fl m31
When
.Fl m31
is specified, generate code compliant to the GNU/Linux for S/390 ABI.
When
.Fl m64
is specified, generate code compliant to the GNU/Linux for zSeries ABI.
This allows GCC in particular to generate 64-bit instructions.
For the
.Sy s390
targets, the default is
.Fl m31 ,
while the
.Sy s390x
targets default to
.Fl m64 .
.Pp
.It Fl mzarch
.It Fl mesa
When
.Fl mzarch
is specified, generate code using the instructions available on z/Architecture.
When
.Fl mesa
is specified, generate code using the instructions available on ESA/390.
Note that
.Fl mesa
is not possible with
.Fl m64 .
When generating code compliant to the GNU/Linux for S/390 ABI, the default is
.Fl mesa .
When generating code compliant to the GNU/Linux for zSeries ABI, the default is
.Fl mzarch .
.Pp
.It Fl mmvcle
.It Fl mno-mvcle
Generate (or do not generate) code using the
.Va mvcle
instruction to perform block moves.
When
.Fl mno-mvcle
is specified, use a
.Va mvc
loop instead.
This is the default unless optimizing for size.
.Pp
.It Fl mdebug
.It Fl mno-debug
Print (or do not print) additional debug information when compiling.
The default is to not print debug information.
.Pp
.It Fl march= Ns Ar cpu-type
Generate code that will run on
.Em cpu-type ,
which is the name of a system representing a certain processor type.
Possible values for
.Em cpu-type
are
.Sy g5 ,
.Sy g6 ,
.Sy z900 ,
and
.Sy z990 .
When generating code using the instructions available on z/Architecture, the default is
.Fl march=z900 .
Otherwise, the default is
.Fl march=g5 .
.Pp
.It Fl mtune= Ns Ar cpu-type
Tune to
.Em cpu-type
everything applicable about the generated code, except for the ABI and the set of available instructions.
The list of
.Em cpu-type
values is the same as for
.Fl march .
The default is the value used for
.Fl march .
.Pp
.It Fl mtpf-trace
.It Fl mno-tpf-trace
Generate code that adds (does not add) in TPF OS specific branches to trace routines in the operating system.
This option is off by default, even when compiling for the TPF OS.
.Pp
.It Fl mfused-madd
.It Fl mno-fused-madd
Generate code that uses (does not use) the floating point multiply and accumulate instructions.
These instructions are generated by default if hardware floating point is used.
.Pp
.It Fl mwarn-framesize= Ns Ar framesize
Emit a warning if the current function exceeds the given frame size.
Because this is a compile time check it doesn't need to be a real problem when the program runs.
It is intended to identify functions which most probably cause a stack overflow.
It is useful to be used in an environment with limited stack size e.g. the linux kernel.
.Pp
.It Fl mwarn-dynamicstack
Emit a warning if the function calls alloca or uses dynamically sized arrays.
This is generally a bad idea with a limited stack size.
.Pp
.It Fl mstack-guard= Ns Ar stack-guard
.It Fl mstack-size= Ns Ar stack-size
These arguments always have to be used in conjunction.
If they are present the s390 back end emits additional instructions in the function prologue which trigger a trap if the stack size is
.Em stack-guard
bytes above the
.Em stack-size
(remember that the stack on s390 grows downward).
These options are intended to be used to help debugging stack overflow problems.
The additionally emitted code causes only little overhead and hence can also be used in production like systems without greater performance degradation.
The given values have to be exact powers of 2 and
.Em stack-size
has to be greater than
.Em stack-guard
without exceeding 64k.
In order to be efficient the extra code makes the assumption that the stack starts at an address aligned to the value given by
.Em stack-size .
.Pp
.El
.It Sy SH Options
These
.Fl m
options are defined for the SH implementations:
.Pp
.Bl -tag -width xx
.It Fl m1
Generate code for the SH1.
.Pp
.It Fl m2
Generate code for the SH2.
.Pp
.It Fl m2e
Generate code for the SH2e.
.Pp
.It Fl m3
Generate code for the SH3.
.Pp
.It Fl m3e
Generate code for the SH3e.
.Pp
.It Fl m4-nofpu
Generate code for the SH4 without a floating-point unit.
.Pp
.It Fl m4-single-only
Generate code for the SH4 with a floating-point unit that only supports single-precision arithmetic.
.Pp
.It Fl m4-single
Generate code for the SH4 assuming the floating-point unit is in single-precision mode by default.
.Pp
.It Fl m4
Generate code for the SH4.
.Pp
.It Fl m4a-nofpu
Generate code for the SH4al-dsp, or for a SH4a in such a way that the floating-point unit is not used.
.Pp
.It Fl m4a-single-only
Generate code for the SH4a, in such a way that no double-precision floating point operations are used.
.Pp
.It Fl m4a-single
Generate code for the SH4a assuming the floating-point unit is in single-precision mode by default.
.Pp
.It Fl m4a
Generate code for the SH4a.
.Pp
.It Fl m4al
Same as
.Fl m4a-nofpu ,
except that it implicitly passes
.Fl dsp
to the assembler.
GCC doesn't generate any DSP instructions at the moment.
.Pp
.It Fl mb
Compile code for the processor in big endian mode.
.Pp
.It Fl ml
Compile code for the processor in little endian mode.
.Pp
.It Fl mdalign
Align doubles at 64-bit boundaries.
Note that this changes the calling conventions, and thus some functions from the standard C library will not work unless you recompile it first with
.Fl mdalign .
.Pp
.It Fl mrelax
Shorten some address references at link time, when possible; uses the linker option
.Fl relax .
.Pp
.It Fl mbigtable
Use 32-bit offsets in
.Va switch
tables.
The default is to use 16-bit offsets.
.Pp
.It Fl mfmovd
Enable the use of the instruction
.Va fmovd .
.Pp
.It Fl mhitachi
Comply with the calling conventions defined by Renesas.
.Pp
.It Fl mrenesas
Comply with the calling conventions defined by Renesas.
.Pp
.It Fl mno-renesas
Comply with the calling conventions defined for GCC before the Renesas conventions were available.
This option is the default for all targets of the SH toolchain except for
.Sy sh-symbianelf .
.Pp
.It Fl mnomacsave
Mark the
.Va MAC
register as call-clobbered, even if
.Fl mhitachi
is given.
.Pp
.It Fl mieee
Increase IEEE-compliance of floating-point code.
At the moment, this is equivalent to
.Fl fno-finite-math-only .
When generating 16 bit SH opcodes, getting IEEE-conforming results for comparisons of NANs / infinities incurs extra overhead in every floating point comparison, therefore the default is set to
.Fl ffinite-math-only .
.Pp
.It Fl misize
Dump instruction size and location in the assembly code.
.Pp
.It Fl mpadstruct
This option is deprecated.
It pads structures to multiple of 4 bytes, which is incompatible with the SH ABI.
.Pp
.It Fl mspace
Optimize for space instead of speed.
Implied by
.Fl \&Os .
.Pp
.It Fl mprefergot
When generating position-independent code, emit function calls using the Global Offset Table instead of the Procedure Linkage Table.
.Pp
.It Fl musermode
Generate a library function call to invalidate instruction cache entries, after fixing up a trampoline.
This library function call doesn't assume it can write to the whole memory address space.
This is the default when the target is
.Va sh-*-linux* .
.Pp
.It Fl multcost= Ns Ar number
Set the cost to assume for a multiply insn.
.Pp
.It Fl mdiv= Ns Ar strategy
Set the division strategy to use for SHmedia code.
.Em strategy
must be one of: call, call2, fp, inv, inv:minlat, inv20u, inv20l, inv:call, inv:call2, inv:fp.
"fp" performs the operation in floating point.
This has a very high latency, but needs only a few instructions, so it might be a good choice if your code has enough easily exploitable ILP to allow the compiler to schedule the floating point instructions together with other instructions.
Division by zero causes a floating point exception.
"inv" uses integer operations to calculate the inverse of the divisor, and then multiplies the dividend with the inverse.
This strategy allows cse and hoisting of the inverse calculation.
Division by zero calculates an unspecified result, but does not trap.
"inv:minlat" is a variant of "inv" where if no cse / hoisting opportunities have been found, or if the entire operation has been hoisted to the same place, the last stages of the inverse calculation are intertwined with the final multiply to reduce the overall latency, at the expense of using a few more instructions, and thus offering fewer scheduling opportunities with other code.
"call" calls a library function that usually implements the inv:minlat strategy.
This gives high code density for m5-*media-nofpu compilations.
"call2" uses a different entry point of the same library function, where it assumes that a pointer to a lookup table has already been set up, which exposes the pointer load to cse / code hoisting optimizations.
"inv:call", "inv:call2" and "inv:fp" all use the "inv" algorithm for initial code generation, but if the code stays unoptimized, revert to the "call", "call2", or "fp" strategies, respectively.
Note that the potentially-trapping side effect of division by zero is carried by a separate instruction, so it is possible that all the integer instructions are hoisted out, but the marker for the side effect stays where it is.
A recombination to fp operations or a call is not possible in that case.
"inv20u" and "inv20l" are variants of the "inv:minlat" strategy.
In the case that the inverse calculation was nor separated from the multiply, they speed up division where the dividend fits into 20 bits (plus sign where applicable), by inserting a test to skip a number of operations in this case; this test slows down the case of larger dividends.
inv20u assumes the case of a such a small dividend to be unlikely, and inv20l assumes it to be likely.
.Pp
.It Fl mdivsi3_libfunc= Ns Ar name
Set the name of the library function used for 32 bit signed division to
.Em name .
This only affect the name used in the call and inv:call division strategies, and the compiler will still expect the same sets of input/output/clobbered registers as if this option was not present.
.Pp
.It Fl madjust-unroll
Throttle unrolling to avoid thrashing target registers.
This option only has an effect if the gcc code base supports the TARGET_ADJUST_UNROLL_MAX target hook.
.Pp
.It Fl mindexed-addressing
Enable the use of the indexed addressing mode for SHmedia32/SHcompact.
This is only safe if the hardware and/or OS implement 32 bit wrap-around semantics for the indexed addressing mode.
The architecture allows the implementation of processors with 64 bit MMU, which the OS could use to get 32 bit addressing, but since no current hardware implementation supports this or any other way to make the indexed addressing mode safe to use in the 32 bit ABI, the default is -mno-indexed-addressing.
.Pp
.It Fl mgettrcost= Ns Ar number
Set the cost assumed for the gettr instruction to
.Em number .
The default is 2 if
.Fl mpt-fixed
is in effect, 100 otherwise.
.Pp
.It Fl mpt-fixed
Assume pt* instructions won't trap.
This will generally generate better scheduled code, but is unsafe on current hardware.
The current architecture definition says that ptabs and ptrel trap when the target anded with 3 is 3.
This has the unintentional effect of making it unsafe to schedule ptabs / ptrel before a branch, or hoist it out of a loop.
For example, __do_global_ctors, a part of libgcc that runs constructors at program startup, calls functions in a list which is delimited by -1.
With the -mpt-fixed option, the ptabs will be done before testing against -1.
That means that all the constructors will be run a bit quicker, but when the loop comes to the end of the list, the program crashes because ptabs loads -1 into a target register.
Since this option is unsafe for any hardware implementing the current architecture specification, the default is -mno-pt-fixed.
Unless the user specifies a specific cost with
.Fl mgettrcost ,
-mno-pt-fixed also implies
.Fl mgettrcost=100 ;
this deters register allocation using target registers for storing ordinary integers.
.Pp
.It Fl minvalid-symbols
Assume symbols might be invalid.
Ordinary function symbols generated by the compiler will always be valid to load with movi/shori/ptabs or movi/shori/ptrel, but with assembler and/or linker tricks it is possible to generate symbols that will cause ptabs / ptrel to trap.
This option is only meaningful when
.Fl mno-pt-fixed
is in effect.
It will then prevent cross-basic-block cse, hoisting and most scheduling of symbol loads.
The default is
.Fl mno-invalid-symbols .
.Pp
.El
.It Sy SPARC Options
These
.Fl m
options are supported on the SPARC:
.Pp
.Bl -tag -width xx
.It Fl mno-app-regs
.It Fl mapp-regs
Specify
.Fl mapp-regs
to generate output using the global registers 2 through 4, which the SPARC SVR4 ABI reserves for applications.
This is the default.
.Pp
To be fully SVR4 ABI compliant at the cost of some performance loss, specify
.Fl mno-app-regs .
You should compile libraries and system software with this option.
.Pp
.It Fl mfpu
.It Fl mhard-float
Generate output containing floating point instructions.
This is the default.
.Pp
.It Fl mno-fpu
.It Fl msoft-float
Generate output containing library calls for floating point.
.Sy Warning:
the requisite libraries are not available for all SPARC targets.
Normally the facilities of the machine's usual C compiler are used, but this cannot be done directly in cross-compilation.
You must make your own arrangements to provide suitable library functions for cross-compilation.
The embedded targets
.Sy sparc-*-aout
and
.Sy sparclite-*-*
do provide software floating point support.
.Pp
.Fl msoft-float
changes the calling convention in the output file; therefore, it is only useful if you compile
.Em all
of a program with this option.
In particular, you need to compile
.Pa libgcc.a ,
the library that comes with GCC, with
.Fl msoft-float
in order for this to work.
.Pp
.It Fl mhard-quad-float
Generate output containing quad-word (long double) floating point instructions.
.Pp
.It Fl msoft-quad-float
Generate output containing library calls for quad-word (long double) floating point instructions.
The functions called are those specified in the SPARC ABI.
This is the default.
.Pp
As of this writing, there are no SPARC implementations that have hardware support for the quad-word floating point instructions.
They all invoke a trap handler for one of these instructions, and then the trap handler emulates the effect of the instruction.
Because of the trap handler overhead, this is much slower than calling the ABI library routines.
Thus the
.Fl msoft-quad-float
option is the default.
.Pp
.It Fl mno-unaligned-doubles
.It Fl munaligned-doubles
Assume that doubles have 8 byte alignment.
This is the default.
.Pp
With
.Fl munaligned-doubles ,
GCC assumes that doubles have 8 byte alignment only if they are contained in another type, or if they have an absolute address.
Otherwise, it assumes they have 4 byte alignment.
Specifying this option avoids some rare compatibility problems with code generated by other compilers.
It is not the default because it results in a performance loss, especially for floating point code.
.Pp
.It Fl mno-faster-structs
.It Fl mfaster-structs
With
.Fl mfaster-structs ,
the compiler assumes that structures should have 8 byte alignment.
This enables the use of pairs of
.Va ldd
and
.Va std
instructions for copies in structure assignment, in place of twice as many
.Va ld
and
.Va st
pairs.
However, the use of this changed alignment directly violates the SPARC ABI.
Thus, it's intended only for use on targets where the developer acknowledges that their resulting code will not be directly in line with the rules of the ABI.
.Pp
.It Fl mimpure-text
.Fl mimpure-text ,
used in addition to
.Fl shared ,
tells the compiler to not pass
.Fl z Ar text
to the linker when linking a shared object.
Using this option, you can link position-dependent code into a shared object.
.Pp
.Fl mimpure-text
suppresses the "relocations remain against allocatable but non-writable sections" linker error message.
However, the necessary relocations will trigger copy-on-write, and the shared object is not actually shared across processes.
Instead of using
.Fl mimpure-text ,
you should compile all source code with
.Fl fpic
or
.Fl fPIC .
.Pp
This option is only available on SunOS and Solaris.
.Pp
.It Fl mcpu= Ns Ar cpu_type
Set the instruction set, register set, and instruction scheduling parameters for machine type
.Em cpu_type .
Supported values for
.Em cpu_type
are
.Sy v7 ,
.Sy cypress ,
.Sy v8 ,
.Sy supersparc ,
.Sy sparclite ,
.Sy f930 ,
.Sy f934 ,
.Sy hypersparc ,
.Sy sparclite86x ,
.Sy sparclet ,
.Sy tsc701 ,
.Sy v9 ,
.Sy ultrasparc ,
and
.Sy ultrasparc3 .
.Pp
Default instruction scheduling parameters are used for values that select an architecture and not an implementation.
These are
.Sy v7 ,
.Sy v8 ,
.Sy sparclite ,
.Sy sparclet ,
.Sy v9 .
.Pp
Here is a list of each supported architecture and their supported implementations.
.Pp
.Bd -literal -offset indent
    v7:             cypress
    v8:             supersparc, hypersparc
    sparclite:      f930, f934, sparclite86x
    sparclet:       tsc701
    v9:             ultrasparc, ultrasparc3
.Ed
By default (unless configured otherwise), GCC generates code for the V7 variant of the SPARC architecture.
With
.Fl mcpu=cypress ,
the compiler additionally optimizes it for the Cypress CY7C602 chip, as used in the SPARCStation/SPARCServer 3xx series.
This is also appropriate for the older SPARCStation 1, 2, IPX etc.
.Pp
With
.Fl mcpu=v8 ,
GCC generates code for the V8 variant of the SPARC architecture.
The only difference from V7 code is that the compiler emits the integer multiply and integer divide instructions which exist in SPARC-V8 but not in SPARC-V7.
With
.Fl mcpu=supersparc ,
the compiler additionally optimizes it for the SuperSPARC chip, as used in the SPARCStation 10, 1000 and 2000 series.
.Pp
With
.Fl mcpu=sparclite ,
GCC generates code for the SPARClite variant of the SPARC architecture.
This adds the integer multiply, integer divide step and scan
.Va ( ffs )
instructions which exist in SPARClite but not in SPARC-V7.
With
.Fl mcpu=f930 ,
the compiler additionally optimizes it for the Fujitsu MB86930 chip, which is the original SPARClite, with no FPU.
With
.Fl mcpu=f934 ,
the compiler additionally optimizes it for the Fujitsu MB86934 chip, which is the more recent SPARClite with FPU.
.Pp
With
.Fl mcpu=sparclet ,
GCC generates code for the SPARClet variant of the SPARC architecture.
This adds the integer multiply, multiply/accumulate, integer divide step and scan
.Va ( ffs )
instructions which exist in SPARClet but not in SPARC-V7.
With
.Fl mcpu=tsc701 ,
the compiler additionally optimizes it for the TEMIC SPARClet chip.
.Pp
With
.Fl mcpu=v9 ,
GCC generates code for the V9 variant of the SPARC architecture.
This adds 64-bit integer and floating-point move instructions, 3 additional floating-point condition code registers and conditional move instructions.
With
.Fl mcpu=ultrasparc ,
the compiler additionally optimizes it for the Sun UltraSPARC I/II chips.
With
.Fl mcpu=ultrasparc3 ,
the compiler additionally optimizes it for the Sun UltraSPARC III chip.
.Pp
.It Fl mtune= Ns Ar cpu_type
Set the instruction scheduling parameters for machine type
.Em cpu_type ,
but do not set the instruction set or register set that the option
.Fl mcpu= Ns Ar cpu_type
would.
.Pp
The same values for
.Fl mcpu= Ns Ar cpu_type
can be used for
.Fl mtune= Ns Ar cpu_type ,
but the only useful values are those that select a particular cpu implementation.
Those are
.Sy cypress ,
.Sy supersparc ,
.Sy hypersparc ,
.Sy f930 ,
.Sy f934 ,
.Sy sparclite86x ,
.Sy tsc701 ,
.Sy ultrasparc ,
and
.Sy ultrasparc3 .
.Pp
.It Fl mv8plus
.It Fl mno-v8plus
With
.Fl mv8plus ,
GCC generates code for the SPARC-V8+ ABI.
The difference from the V8 ABI is that the global and out registers are considered 64-bit wide.
This is enabled by default on Solaris in 32-bit mode for all SPARC-V9 processors.
.Pp
.It Fl mvis
.It Fl mno-vis
With
.Fl mvis ,
GCC generates code that takes advantage of the UltraSPARC Visual Instruction Set extensions.
The default is
.Fl mno-vis .
.Pp
.El
These
.Fl m
options are supported in addition to the above on SPARC-V9 processors in 64-bit environments:
.Pp
.Bl -tag -width xx
.It Fl mlittle-endian
Generate code for a processor running in little-endian mode.
It is only available for a few configurations and most notably not on Solaris and Linux.
.Pp
.It Fl m32
.It Fl m64
Generate code for a 32-bit or 64-bit environment.
The 32-bit environment sets int, long and pointer to 32 bits.
The 64-bit environment sets int to 32 bits and long and pointer to 64 bits.
.Pp
.It Fl mcmodel=medlow
Generate code for the Medium/Low code model: 64-bit addresses, programs must be linked in the low 32 bits of memory.
Programs can be statically or dynamically linked.
.Pp
.It Fl mcmodel=medmid
Generate code for the Medium/Middle code model: 64-bit addresses, programs must be linked in the low 44 bits of memory, the text and data segments must be less than 2GB in size and the data segment must be located within 2GB of the text segment.
.Pp
.It Fl mcmodel=medany
Generate code for the Medium/Anywhere code model: 64-bit addresses, programs may be linked anywhere in memory, the text and data segments must be less than 2GB in size and the data segment must be located within 2GB of the text segment.
.Pp
.It Fl mcmodel=embmedany
Generate code for the Medium/Anywhere code model for embedded systems: 64-bit addresses, the text and data segments must be less than 2GB in size, both starting anywhere in memory (determined at link time).
The global register %g4 points to the base of the data segment.
Programs are statically linked and PIC is not supported.
.Pp
.It Fl mstack-bias
.It Fl mno-stack-bias
With
.Fl mstack-bias ,
GCC assumes that the stack pointer, and frame pointer if present, are offset by -2047 which must be added back when making stack frame references.
This is the default in 64-bit mode.
Otherwise, assume no such offset is present.
.Pp
.El
These switches are supported in addition to the above on Solaris:
.Pp
.Bl -tag -width xx
.It Fl threads
Add support for multithreading using the Solaris threads library.
This option sets flags for both the preprocessor and linker.
This option does not affect the thread safety of object code produced by the compiler or that of libraries supplied with it.
.Pp
.It Fl pthreads
Add support for multithreading using the POSIX threads library.
This option sets flags for both the preprocessor and linker.
This option does not affect the thread safety of object code produced by the compiler or that of libraries supplied with it.
.Pp
.It Fl pthread
This is a synonym for
.Fl pthreads .
.Pp
.El
.It Sy Options for System V
These additional options are available on System V Release 4 for compatibility with other compilers on those systems:
.Pp
.Bl -tag -width xx
.It Fl G
Create a shared object.
It is recommended that
.Fl symbolic
or
.Fl shared
be used instead.
.Pp
.It Fl Qy
Identify the versions of each tool used by the compiler, in a
.Va .ident
assembler directive in the output.
.Pp
.It Fl Qn
Refrain from adding
.Va .ident
directives to the output file (this is the default).
.Pp
.It Fl YP, Ns Ar dirs
Search the directories
.Em dirs ,
and no others, for libraries specified with
.Fl l .
.Pp
.It Fl Ym, Ns Ar dir
Look in the directory
.Em dir
to find the M4 preprocessor.
The assembler uses this option.
.Pp
.El
.It Sy TMS320C3x/C4x Options
These
.Fl m
options are defined for TMS320C3x/C4x implementations:
.Pp
.Bl -tag -width xx
.It Fl mcpu= Ns Ar cpu_type
Set the instruction set, register set, and instruction scheduling parameters for machine type
.Em cpu_type .
Supported values for
.Em cpu_type
are
.Sy c30 ,
.Sy c31 ,
.Sy c32 ,
.Sy c40 ,
and
.Sy c44 .
The default is
.Sy c40
to generate code for the TMS320C40.
.Pp
.It Fl mbig-memory
.It Fl mbig
.It Fl msmall-memory
.It Fl msmall
Generates code for the big or small memory model.
The small memory model assumed that all data fits into one 64K word page.
At run-time the data page (DP) register must be set to point to the 64K page containing the .bss and .data program sections.
The big memory model is the default and requires reloading of the DP register for every direct memory access.
.Pp
.It Fl mbk
.It Fl mno-bk
Allow (disallow) allocation of general integer operands into the block count register BK.
.Pp
.It Fl mdb
.It Fl mno-db
Enable (disable) generation of code using decrement and branch, DBcond(D), instructions.
This is enabled by default for the C4x.
To be on the safe side, this is disabled for the C3x, since the maximum iteration count on the C3x is 2^{23 + 1} (but who iterates loops more than 2^{23} times on the C3x?).
Note that GCC will try to reverse a loop so that it can utilize the decrement and branch instruction, but will give up if there is more than one memory reference in the loop.
Thus a loop where the loop counter is decremented can generate slightly more efficient code, in cases where the RPTB instruction cannot be utilized.
.Pp
.It Fl mdp-isr-reload
.It Fl mparanoid
Force the DP register to be saved on entry to an interrupt service routine (ISR), reloaded to point to the data section, and restored on exit from the ISR.
This should not be required unless someone has violated the small memory model by modifying the DP register, say within an object library.
.Pp
.It Fl mmpyi
.It Fl mno-mpyi
For the C3x use the 24-bit MPYI instruction for integer multiplies instead of a library call to guarantee 32-bit results.
Note that if one of the operands is a constant, then the multiplication will be performed using shifts and adds.
If the
.Fl mmpyi
option is not specified for the C3x, then squaring operations are performed inline instead of a library call.
.Pp
.It Fl mfast-fix
.It Fl mno-fast-fix
The C3x/C4x FIX instruction to convert a floating point value to an integer value chooses the nearest integer less than or equal to the floating point value rather than to the nearest integer.
Thus if the floating point number is negative, the result will be incorrectly truncated an additional code is necessary to detect and correct this case.
This option can be used to disable generation of the additional code required to correct the result.
.Pp
.It Fl mrptb
.It Fl mno-rptb
Enable (disable) generation of repeat block sequences using the RPTB instruction for zero overhead looping.
The RPTB construct is only used for innermost loops that do not call functions or jump across the loop boundaries.
There is no advantage having nested RPTB loops due to the overhead required to save and restore the RC, RS, and RE registers.
This is enabled by default with
.Fl O2 .
.Pp
.It Fl mrpts= Ns Ar count
.It Fl mno-rpts
Enable (disable) the use of the single instruction repeat instruction RPTS.
If a repeat block contains a single instruction, and the loop count can be guaranteed to be less than the value
.Em count ,
GCC will emit a RPTS instruction instead of a RPTB.
If no value is specified, then a RPTS will be emitted even if the loop count cannot be determined at compile time.
Note that the repeated instruction following RPTS does not have to be reloaded from memory each iteration, thus freeing up the CPU buses for operands.
However, since interrupts are blocked by this instruction, it is disabled by default.
.Pp
.It Fl mloop-unsigned
.It Fl mno-loop-unsigned
The maximum iteration count when using RPTS and RPTB (and DB on the C40) is 2^{31 + 1} since these instructions test if the iteration count is negative to terminate the loop.
If the iteration count is unsigned there is a possibility than the 2^{31 + 1} maximum iteration count may be exceeded.
This switch allows an unsigned iteration count.
.Pp
.It Fl mti
Try to emit an assembler syntax that the TI assembler (asm30) is happy with.
This also enforces compatibility with the API employed by the TI C3x C compiler.
For example, long doubles are passed as structures rather than in floating point registers.
.Pp
.It Fl mregparm
.It Fl mmemparm
Generate code that uses registers (stack) for passing arguments to functions.
By default, arguments are passed in registers where possible rather than by pushing arguments on to the stack.
.Pp
.It Fl mparallel-insns
.It Fl mno-parallel-insns
Allow the generation of parallel instructions.
This is enabled by default with
.Fl O2 .
.Pp
.It Fl mparallel-mpy
.It Fl mno-parallel-mpy
Allow the generation of MPY||ADD and MPY||SUB parallel instructions, provided
.Fl mparallel-insns
is also specified.
These instructions have tight register constraints which can pessimize the code generation of large functions.
.Pp
.El
.It Sy V850 Options
These
.Fl m
options are defined for V850 implementations:
.Pp
.Bl -tag -width xx
.It Fl mlong-calls
.It Fl mno-long-calls
Treat all calls as being far away (near).
If calls are assumed to be far away, the compiler will always load the functions address up into a register, and call indirect through the pointer.
.Pp
.It Fl mno-ep
.It Fl mep
Do not optimize (do optimize) basic blocks that use the same index pointer 4 or more times to copy pointer into the
.Va ep
register, and use the shorter
.Va sld
and
.Va sst
instructions.
The
.Fl mep
option is on by default if you optimize.
.Pp
.It Fl mno-prolog-function
.It Fl mprolog-function
Do not use (do use) external functions to save and restore registers at the prologue and epilogue of a function.
The external functions are slower, but use less code space if more than one function saves the same number of registers.
The
.Fl mprolog-function
option is on by default if you optimize.
.Pp
.It Fl mspace
Try to make the code as small as possible.
At present, this just turns on the
.Fl mep
and
.Fl mprolog-function
options.
.Pp
.It Fl mtda= Ns Ar n
Put static or global variables whose size is
.Em n
bytes or less into the tiny data area that register
.Va ep
points to.
The tiny data area can hold up to 256 bytes in total (128 bytes for byte references).
.Pp
.It Fl msda= Ns Ar n
Put static or global variables whose size is
.Em n
bytes or less into the small data area that register
.Va gp
points to.
The small data area can hold up to 64 kilobytes.
.Pp
.It Fl mzda= Ns Ar n
Put static or global variables whose size is
.Em n
bytes or less into the first 32 kilobytes of memory.
.Pp
.It Fl mv850
Specify that the target processor is the V850.
.Pp
.It Fl mbig-switch
Generate code suitable for big switch tables.
Use this option only if the assembler/linker complain about out of range branches within a switch table.
.Pp
.It Fl mapp-regs
This option will cause r2 and r5 to be used in the code generated by the compiler.
This setting is the default.
.Pp
.It Fl mno-app-regs
This option will cause r2 and r5 to be treated as fixed registers.
.Pp
.It Fl mv850e1
Specify that the target processor is the V850E1.
The preprocessor constants
.Sy __v850e1__
and
.Sy __v850e__
will be defined if this option is used.
.Pp
.It Fl mv850e
Specify that the target processor is the V850E.
The preprocessor constant
.Sy __v850e__
will be defined if this option is used.
.Pp
If neither
.Fl mv850
nor
.Fl mv850e
nor
.Fl mv850e1
are defined then a default target processor will be chosen and the relevant
.Sy __v850*__
preprocessor constant will be defined.
.Pp
The preprocessor constants
.Sy __v850
and
.Sy __v851__
are always defined, regardless of which processor variant is the target.
.Pp
.It Fl mdisable-callt
This option will suppress generation of the CALLT instruction for the v850e and v850e1 flavors of the v850 architecture.
The default is
.Fl mno-disable-callt
which allows the CALLT instruction to be used.
.Pp
.El
.It Sy VAX Options
These
.Fl m
options are defined for the VAX:
.Pp
.Bl -tag -width xx
.It Fl munix
Do not output certain jump instructions
.Va ( aobleq
and so on) that the Unix assembler for the VAX cannot handle across long ranges.
.Pp
.It Fl mgnu
Do output those jump instructions, on the assumption that you will assemble with the GNU assembler.
.Pp
.It Fl mg
Output code for g-format floating point numbers instead of d-format.
.Pp
.El
.It Sy x86-64 Options
These are listed under
.It Sy Xstormy16 Options
These options are defined for Xstormy16:
.Pp
.Bl -tag -width xx
.It Fl msim
Choose startup files and linker script suitable for the simulator.
.Pp
.El
.It Sy Xtensa Options
These options are supported for Xtensa targets:
.Pp
.Bl -tag -width xx
.It Fl mconst16
.It Fl mno-const16
Enable or disable use of
.Va CONST16
instructions for loading constant values.
The
.Va CONST16
instruction is currently not a standard option from Tensilica.
When enabled,
.Va CONST16
instructions are always used in place of the standard
.Va L32R
instructions.
The use of
.Va CONST16
is enabled by default only if the
.Va L32R
instruction is not available.
.Pp
.It Fl mfused-madd
.It Fl mno-fused-madd
Enable or disable use of fused multiply/add and multiply/subtract instructions in the floating-point option.
This has no effect if the floating-point option is not also enabled.
Disabling fused multiply/add and multiply/subtract instructions forces the compiler to use separate instructions for the multiply and add/subtract operations.
This may be desirable in some cases where strict IEEE 754-compliant results are required: the fused multiply add/subtract instructions do not round the intermediate result, thereby producing results with
.Em more
bits of precision than specified by the IEEE standard.
Disabling fused multiply add/subtract instructions also ensures that the program output is not sensitive to the compiler's ability to combine multiply and add/subtract operations.
.Pp
.It Fl mtext-section-literals
.It Fl mno-text-section-literals
Control the treatment of literal pools.
The default is
.Fl mno-text-section-literals ,
which places literals in a separate section in the output file.
This allows the literal pool to be placed in a data RAM/ROM, and it also allows the linker to combine literal pools from separate object files to remove redundant literals and improve code size.
With
.Fl mtext-section-literals ,
the literals are interspersed in the text section in order to keep them as close as possible to their references.
This may be necessary for large assembly files.
.Pp
.It Fl mtarget-align
.It Fl mno-target-align
When this option is enabled, GCC instructs the assembler to automatically align instructions to reduce branch penalties at the expense of some code density.
The assembler attempts to widen density instructions to align branch targets and the instructions following call instructions.
If there are not enough preceding safe density instructions to align a target, no widening will be performed.
The default is
.Fl mtarget-align .
These options do not affect the treatment of auto-aligned instructions like
.Va LOOP ,
which the assembler will always align, either by widening density instructions or by inserting no-op instructions.
.Pp
.It Fl mlongcalls
.It Fl mno-longcalls
When this option is enabled, GCC instructs the assembler to translate direct calls to indirect calls unless it can determine that the target of a direct call is in the range allowed by the call instruction.
This translation typically occurs for calls to functions in other source files.
Specifically, the assembler translates a direct
.Va CALL
instruction into an
.Va L32R
followed by a
.Va CALLX
instruction.
The default is
.Fl mno-longcalls .
This option should be used in programs where the call target can potentially be out of range.
This option is implemented in the assembler, not the compiler, so the assembly code generated by GCC will still show direct call instructions---look at the disassembled object code to see the actual instructions.
Note that the assembler will use an indirect call for every cross-file call, not just those that really will be out of range.
.Pp
.El
.It Sy zSeries Options
These are listed under
.El
.Ss Options for Code Generation Conventions
These machine-independent options control the interface conventions used in code generation.
.Pp
Most of them have both positive and negative forms; the negative form of
.Fl ffoo
would be
.Fl fno-foo .
In the table below, only one of the forms is listed---the one which is not the default.
You can figure out the other form by either removing
.Sy no-
or adding it.
.Pp
.Bl -tag -width xx
.It Fl fbounds-check
For front-ends that support it, generate additional code to check that indices used to access arrays are within the declared range.
This is currently only supported by the Java and Fortran front-ends, where this option defaults to true and false respectively.
.Pp
.It Fl ftrapv
This option generates traps for signed overflow on addition, subtraction, multiplication operations.
.Pp
.It Fl fwrapv
This option instructs the compiler to assume that signed arithmetic overflow of addition, subtraction and multiplication wraps around using twos-complement representation.
This flag enables some optimizations and disables others.
This option is enabled by default for the Java front-end, as required by the Java language specification.
.Pp
.It Fl fexceptions
Enable exception handling.
Generates extra code needed to propagate exceptions.
For some targets, this implies GCC will generate frame unwind information for all functions, which can produce significant data size overhead, although it does not affect execution.
If you do not specify this option, GCC will enable it by default for languages like C++ which normally require exception handling, and disable it for languages like C that do not normally require it.
However, you may need to enable this option when compiling C code that needs to interoperate properly with exception handlers written in C++.
You may also wish to disable this option if you are compiling older C++ programs that don't use exception handling.
.Pp
.It Fl fnon-call-exceptions
Generate code that allows trapping instructions to throw exceptions.
Note that this requires platform-specific runtime support that does not exist everywhere.
Moreover, it only allows
.Em trapping
instructions to throw exceptions, i.e. memory references or floating point instructions.
It does not allow exceptions to be thrown from arbitrary signal handlers such as
.Va SIGALRM .
.Pp
.It Fl funwind-tables
Similar to
.Fl fexceptions ,
except that it will just generate any needed static data, but will not affect the generated code in any other way.
You will normally not enable this option; instead, a language processor that needs this handling would enable it on your behalf.
.Pp
.It Fl fasynchronous-unwind-tables
Generate unwind table in dwarf2 format, if supported by target machine.
The table is exact at each instruction boundary, so it can be used for stack unwinding from asynchronous events (such as debugger or garbage collector).
.Pp
.It Fl fpcc-struct-return
Return "short"
.Va struct
and
.Va union
values in memory like longer ones, rather than in registers.
This convention is less efficient, but it has the advantage of allowing intercallability between GCC-compiled files and files compiled with other compilers, particularly the Portable C Compiler (pcc).
.Pp
The precise convention for returning structures in memory depends on the target configuration macros.
.Pp
Short structures and unions are those whose size and alignment match that of some integer type.
.Pp
.Sy Warning:
code compiled with the
.Fl fpcc-struct-return
switch is not binary compatible with code compiled with the
.Fl freg-struct-return
switch.
Use it to conform to a non-default application binary interface.
.Pp
.It Fl freg-struct-return
Return
.Va struct
and
.Va union
values in registers when possible.
This is more efficient for small structures than
.Fl fpcc-struct-return .
.Pp
If you specify neither
.Fl fpcc-struct-return
nor
.Fl freg-struct-return ,
GCC defaults to whichever convention is standard for the target.
If there is no standard convention, GCC defaults to
.Fl fpcc-struct-return ,
except on targets where GCC is the principal compiler.
In those cases, we can choose the standard, and we chose the more efficient register return alternative.
.Pp
.Sy Warning:
code compiled with the
.Fl freg-struct-return
switch is not binary compatible with code compiled with the
.Fl fpcc-struct-return
switch.
Use it to conform to a non-default application binary interface.
.Pp
.It Fl fshort-enums
Allocate to an
.Va enum
type only as many bytes as it needs for the declared range of possible values.
Specifically, the
.Va enum
type will be equivalent to the smallest integer type which has enough room.
.Pp
.Sy Warning:
the
.Fl fshort-enums
switch causes GCC to generate code that is not binary compatible with code generated without that switch.
Use it to conform to a non-default application binary interface.
.Pp
.It Fl fshort-double
Use the same size for
.Va double
as for
.Va float .
.Pp
.Sy Warning:
the
.Fl fshort-double
switch causes GCC to generate code that is not binary compatible with code generated without that switch.
Use it to conform to a non-default application binary interface.
.Pp
.It Fl fshort-wchar
Override the underlying type for
.Sy wchar_t
to be
.Sy short unsigned int
instead of the default for the target.
This option is useful for building programs to run under WINE.
.Pp
.Sy Warning:
the
.Fl fshort-wchar
switch causes GCC to generate code that is not binary compatible with code generated without that switch.
Use it to conform to a non-default application binary interface.
.Pp
.It Fl fshared-data
Requests that the data and non-
.Va const
variables of this compilation be shared data rather than private data.
The distinction makes sense only on certain operating systems, where shared data is shared between processes running the same program, while private data exists in one copy per process.
.Pp
.It Fl fno-common
In C, allocate even uninitialized global variables in the data section of the object file, rather than generating them as common blocks.
This has the effect that if the same variable is declared (without
.Va extern )
in two different compilations, you will get an error when you link them.
The only reason this might be useful is if you wish to verify that the program will work on other systems which always work this way.
.Pp
.It Fl fno-ident
Ignore the
.Sy #ident
directive.
.Pp
.It Fl finhibit-size-directive
Don't output a
.Va .size
assembler directive, or anything else that would cause trouble if the function is split in the middle, and the two halves are placed at locations far apart in memory.
This option is used when compiling
.Pa crtstuff.c ;
you should not need to use it for anything else.
.Pp
.It Fl fverbose-asm
Put extra commentary information in the generated assembly code to make it more readable.
This option is generally only of use to those who actually need to read the generated assembly code (perhaps while debugging the compiler itself).
.Pp
.Fl fno-verbose-asm ,
the default, causes the extra information to be omitted and is useful when comparing two assembler files.
.Pp
.It Fl fpic
Generate position-independent code (PIC) suitable for use in a shared library, if supported for the target machine.
Such code accesses all constant addresses through a global offset table (GOT).
The dynamic loader resolves the GOT entries when the program starts (the dynamic loader is not part of GCC; it is part of the operating system).
If the GOT size for the linked executable exceeds a machine-specific maximum size, you get an error message from the linker indicating that
.Fl fpic
does not work; in that case, recompile with
.Fl fPIC
instead.
(These maximums are 8k on the SPARC and 32k on the m68k and RS/6000.
The 386 has no such limit.)
.Pp
Position-independent code requires special support, and therefore works only on certain machines.
For the 386, GCC supports PIC for System V but not for the Sun 386i.
Code generated for the IBM RS/6000 is always position-independent.
.Pp
.It Fl fPIC
If supported for the target machine, emit position-independent code, suitable for dynamic linking and avoiding any limit on the size of the global offset table.
This option makes a difference on the m68k, PowerPC and SPARC.
.Pp
Position-independent code requires special support, and therefore works only on certain machines.
.Pp
.It Fl fpie
.It Fl fPIE
These options are similar to
.Fl fpic
and
.Fl fPIC ,
but generated position independent code can be only linked into executables.
Usually these options are used when
.Fl pie
GCC option will be used during linking.
.Pp
.It Fl fno-jump-tables
Do not use jump tables for switch statements even where it would be more efficient than other code generation strategies.
This option is of use in conjunction with
.Fl fpic
or
.Fl fPIC
for building code which forms part of a dynamic linker and cannot reference the address of a jump table.
On some targets, jump tables do not require a GOT and this option is not needed.
.Pp
.It Fl ffixed- Ns Ar reg
Treat the register named
.Em reg
as a fixed register; generated code should never refer to it (except perhaps as a stack pointer, frame pointer or in some other fixed role).
.Pp
.Em reg
must be the name of a register.
The register names accepted are machine-specific and are defined in the
.Va REGISTER_NAMES
macro in the machine description macro file.
.Pp
This flag does not have a negative form, because it specifies a three-way choice.
.Pp
.It Fl fcall-used- Ns Ar reg
Treat the register named
.Em reg
as an allocable register that is clobbered by function calls.
It may be allocated for temporaries or variables that do not live across a call.
Functions compiled this way will not save and restore the register
.Em reg .
.Pp
It is an error to used this flag with the frame pointer or stack pointer.
Use of this flag for other registers that have fixed pervasive roles in the machine's execution model will produce disastrous results.
.Pp
This flag does not have a negative form, because it specifies a three-way choice.
.Pp
.It Fl fcall-saved- Ns Ar reg
Treat the register named
.Em reg
as an allocable register saved by functions.
It may be allocated even for temporaries or variables that live across a call.
Functions compiled this way will save and restore the register
.Em reg
if they use it.
.Pp
It is an error to used this flag with the frame pointer or stack pointer.
Use of this flag for other registers that have fixed pervasive roles in the machine's execution model will produce disastrous results.
.Pp
A different sort of disaster will result from the use of this flag for a register in which function values may be returned.
.Pp
This flag does not have a negative form, because it specifies a three-way choice.
.Pp
.It Sy -fpack-struct[= Ns Em n Ns Sy ] Ns
Without a value specified, pack all structure members together without holes.
When a value is specified (which must be a small power of two), pack structure members according to this value, representing the maximum alignment (that is, objects with default alignment requirements larger than this will be output potentially unaligned at the next fitting location.
.Pp
.Sy Warning:
the
.Fl fpack-struct
switch causes GCC to generate code that is not binary compatible with code generated without that switch.
Additionally, it makes the code suboptimal.
Use it to conform to a non-default application binary interface.
.Pp
.It Fl finstrument-functions
Generate instrumentation calls for entry and exit to functions.
Just after function entry and just before function exit, the following profiling functions will be called with the address of the current function and its call site.
(On some platforms,
.Va __builtin_return_address
does not work beyond the current function, so the call site information may not be available to the profiling functions otherwise.)
.Pp
.Bd -literal -offset indent
void __cyg_profile_func_enter (void *this_fn,
                               void *call_site);
void __cyg_profile_func_exit  (void *this_fn,
                               void *call_site);
.Ed
The first argument is the address of the start of the current function, which may be looked up exactly in the symbol table.
.Pp
This instrumentation is also done for functions expanded inline in other functions.
The profiling calls will indicate where, conceptually, the inline function is entered and exited.
This means that addressable versions of such functions must be available.
If all your uses of a function are expanded inline, this may mean an additional expansion of code size.
If you use
.Sy extern inline
in your C code, an addressable version of such functions must be provided.
(This is normally the case anyways, but if you get lucky and the optimizer always expands the functions inline, you might have gotten away without providing static copies.)
.Pp
A function may be given the attribute
.Va no_instrument_function ,
in which case this instrumentation will not be done.
This can be used, for example, for the profiling functions listed above, high-priority interrupt routines, and any functions from which the profiling functions cannot safely be called (perhaps signal handlers, if the profiling routines generate output or allocate memory).
.Pp
.It Fl fstack-check
Generate code to verify that you do not go beyond the boundary of the stack.
You should specify this flag if you are running in an environment with multiple threads, but only rarely need to specify it in a single-threaded environment since stack overflow is automatically detected on nearly all systems if there is only one stack.
.Pp
Note that this switch does not actually cause checking to be done; the operating system must do that.
The switch causes generation of code to ensure that the operating system sees the stack being extended.
.Pp
.It Fl fstack-limit-register= Ns Ar reg
.It Fl fstack-limit-symbol= Ns Ar sym
.It Fl fno-stack-limit
Generate code to ensure that the stack does not grow beyond a certain value, either the value of a register or the address of a symbol.
If the stack would grow beyond the value, a signal is raised.
For most targets, the signal is raised before the stack overruns the boundary, so it is possible to catch the signal without taking special precautions.
.Pp
For instance, if the stack starts at absolute address
.Sy 0x80000000
and grows downwards, you can use the flags
.Fl fstack-limit-symbol=__stack_limit
and
.Fl Wl,--defsym,__stack_limit=0x7ffe0000
to enforce a stack limit of 128KB.
Note that this may only work with the GNU linker.
.Pp
.It Fl fargument-alias
.It Fl fargument-noalias
.It Fl fargument-noalias-global
Specify the possible relationships among parameters and between parameters and global data.
.Pp
.Fl fargument-alias
specifies that arguments (parameters) may alias each other and may alias global storage.
.Fl fargument-noalias
specifies that arguments do not alias each other, but may alias global storage.
.Fl fargument-noalias-global
specifies that arguments do not alias each other and do not alias global storage.
.Pp
Each language will automatically use whatever option is required by the language standard.
You should not need to use these options yourself.
.Pp
.It Fl fleading-underscore
This option and its counterpart,
.Fl fno-leading-underscore ,
forcibly change the way C symbols are represented in the object file.
One use is to help link with legacy assembly code.
.Pp
.Sy Warning:
the
.Fl fleading-underscore
switch causes GCC to generate code that is not binary compatible with code generated without that switch.
Use it to conform to a non-default application binary interface.
Not all targets provide complete support for this switch.
.Pp
.It Fl ftls-model= Ns Ar model
Alter the thread-local storage model to be used.
The
.Em model
argument should be one of
.Va global-dynamic ,
.Va local-dynamic ,
.Va initial-exec
or
.Va local-exec .
.Pp
The default without
.Fl fpic
is
.Va initial-exec ;
with
.Fl fpic
the default is
.Va global-dynamic .
.Pp
.It Fl fvisibility= Ns Ar default|internal|hidden|protected
Set the default ELF image symbol visibility to the specified option---all symbols will be marked with this unless overridden within the code.
Using this feature can very substantially improve linking and load times of shared object libraries, produce more optimized code, provide near-perfect API export and prevent symbol clashes.
It is
.Sy strongly
recommended that you use this in any shared objects you distribute.
.Pp
Despite the nomenclature,
.Va default
always means public ie; available to be linked against from outside the shared object.
.Va protected
and
.Va internal
are pretty useless in real-world usage so the only other commonly used option will be
.Va hidden .
The default if
.Fl fvisibility
isn't specified is
.Va default ,
i.e., make every symbol public---this causes the same behavior as previous versions of GCC.
.Pp
A good explanation of the benefits offered by ensuring ELF symbols have the correct visibility is given by "How To Write Shared Libraries" by Ulrich Drepper (which can be found at
.Lk http://people.redhat.com/~drepper/ )
---however a superior solution made possible by this option to marking things hidden when the default is public is to make the default hidden and mark things public.
This is the norm with DLL's on Windows and with
.Fl fvisibility=hidden
and
.Va __attribute__ ((visibility("default")))
instead of
.Va __declspec(dllexport)
you get almost identical semantics with identical syntax.
This is a great boon to those working with cross-platform projects.
.Pp
For those adding visibility support to existing code, you may find
.Sy #pragma GCC visibility
of use.
This works by you enclosing the declarations you wish to set visibility for with (for example)
.Sy #pragma GCC visibility push(hidden)
and
.Sy #pragma GCC visibility pop .
Bear in mind that symbol visibility should be viewed
.Sy as part of the API interface contract
and thus all new code should always specify visibility when it is not the default ie; declarations only for use within the local DSO should
.Sy always
be marked explicitly as hidden as so to avoid PLT indirection overheads---making this abundantly clear also aids readability and self-documentation of the code.
Note that due to ISO C++ specification requirements, operator new and operator delete must always be of default visibility.
.Pp
An overview of these techniques, their benefits and how to use them is at
.Lk http://gcc.gnu.org/wiki/Visibility .
.Pp
.El
.Sh ENVIRONMENT
This section describes several environment variables that affect how GCC operates.
Some of them work by specifying directories or prefixes to use when searching for various kinds of files.
Some are used to specify other aspects of the compilation environment.
.Pp
Note that you can also specify places to search using options such as
.Fl B ,
.Fl I
and
.Fl L .
These take precedence over places specified using environment variables, which in turn take precedence over those specified by the configuration of GCC.
.Pp
.Bl -tag -width xx
.It Sy LANG Ns
.It Sy LC_CTYPE Ns
.It Sy LC_MESSAGES Ns
.It Sy LC_ALL Ns
These environment variables control the way that GCC uses localization information that allow GCC to work with different national conventions.
GCC inspects the locale categories
.Sy LC_CTYPE
and
.Sy LC_MESSAGES
if it has been configured to do so.
These locale categories can be set to any value supported by your installation.
A typical value is
.Sy en_GB.UTF-8
for English in the United Kingdom encoded in UTF-8.
.Pp
The
.Sy LC_CTYPE
environment variable specifies character classification.
GCC uses it to determine the character boundaries in a string; this is needed for some multibyte encodings that contain quote and escape characters that would otherwise be interpreted as a string end or escape.
.Pp
The
.Sy LC_MESSAGES
environment variable specifies the language to use in diagnostic messages.
.Pp
If the
.Sy LC_ALL
environment variable is set, it overrides the value of
.Sy LC_CTYPE
and
.Sy LC_MESSAGES ;
otherwise,
.Sy LC_CTYPE
and
.Sy LC_MESSAGES
default to the value of the
.Sy LANG
environment variable.
If none of these variables are set, GCC defaults to traditional C English behavior.
.Pp
.It Sy TMPDIR Ns
If
.Sy TMPDIR
is set, it specifies the directory to use for temporary files.
GCC uses temporary files to hold the output of one stage of compilation which is to be used as input to the next stage: for example, the output of the preprocessor, which is the input to the compiler proper.
.Pp
.It Sy GCC_EXEC_PREFIX Ns
If
.Sy GCC_EXEC_PREFIX
is set, it specifies a prefix to use in the names of the subprograms executed by the compiler.
No slash is added when this prefix is combined with the name of a subprogram, but you can specify a prefix that ends with a slash if you wish.
.Pp
If
.Sy GCC_EXEC_PREFIX
is not set, GCC will attempt to figure out an appropriate prefix to use based on the pathname it was invoked with.
.Pp
If GCC cannot find the subprogram using the specified prefix, it tries looking in the usual places for the subprogram.
.Pp
The default value of
.Sy GCC_EXEC_PREFIX
is
.Pa prefix/lib/gcc/
where
.Em prefix
is the value of
.Va prefix
when you ran the
.Pa configure
script.
.Pp
Other prefixes specified with
.Fl B
take precedence over this prefix.
.Pp
This prefix is also used for finding files such as
.Pa crt0.o
that are used for linking.
.Pp
In addition, the prefix is used in an unusual way in finding the directories to search for header files.
For each of the standard directories whose name normally begins with
.Sy /usr/local/lib/gcc
(more precisely, with the value of
.Sy GCC_INCLUDE_DIR ) ,
GCC tries replacing that beginning with the specified prefix to produce an alternate directory name.
Thus, with
.Sy -Bfoo/ ,
GCC will search
.Pa foo/bar
where it would normally search
.Pa /usr/local/lib/bar .
These alternate directories are searched first; the standard directories come next.
.Pp
.It Sy COMPILER_PATH Ns
The value of
.Sy COMPILER_PATH
is a colon-separated list of directories, much like
.Sy PATH .
GCC tries the directories thus specified when searching for subprograms, if it can't find the subprograms using
.Sy GCC_EXEC_PREFIX .
.Pp
.It Sy LIBRARY_PATH Ns
The value of
.Sy LIBRARY_PATH
is a colon-separated list of directories, much like
.Sy PATH .
When configured as a native compiler, GCC tries the directories thus specified when searching for special linker files, if it can't find them using
.Sy GCC_EXEC_PREFIX .
Linking using GCC also uses these directories when searching for ordinary libraries for the
.Fl l
option (but directories specified with
.Fl L
come first).
.Pp
.It Sy LANG Ns
This variable is used to pass locale information to the compiler.
One way in which this information is used is to determine the character set to be used when character literals, string literals and comments are parsed in C and C++.
When the compiler is configured to allow multibyte characters, the following values for
.Sy LANG
are recognized:
.Pp
.Bl -tag -width xx
.It Sy C-JIS Ns
Recognize JIS characters.
.Pp
.It Sy C-SJIS Ns
Recognize SJIS characters.
.Pp
.It Sy C-EUCJP Ns
Recognize EUCJP characters.
.Pp
.El
If
.Sy LANG
is not defined, or if it has some other value, then the compiler will use mblen and mbtowc as defined by the default locale to recognize and translate multibyte characters.
.Pp
.El
Some additional environments variables affect the behavior of the preprocessor.
.Pp
.Bl -tag -width xx
.It Sy CPATH Ns
.It Sy C_INCLUDE_PATH Ns
.It Sy CPLUS_INCLUDE_PATH Ns
.It Sy OBJC_INCLUDE_PATH Ns
Each variable's value is a list of directories separated by a special character, much like
.Sy PATH ,
in which to look for header files.
The special character,
.Va PATH_SEPARATOR ,
is target-dependent and determined at GCC build time.
For Microsoft Windows-based targets it is a semicolon, and for almost all other targets it is a colon.
.Pp
.Sy CPATH
specifies a list of directories to be searched as if specified with
.Fl I ,
but after any paths given with
.Fl I
options on the command line.
This environment variable is used regardless of which language is being preprocessed.
.Pp
The remaining environment variables apply only when preprocessing the particular language indicated.
Each specifies a list of directories to be searched as if specified with
.Fl isystem ,
but after any paths given with
.Fl isystem
options on the command line.
.Pp
In all these variables, an empty element instructs the compiler to search its current working directory.
Empty elements can appear at the beginning or end of a path.
For instance, if the value of
.Sy CPATH
is
.Va :/special/include ,
that has the same effect as
.Sy -I. -I/special/include .
.Pp
.It Sy DEPENDENCIES_OUTPUT Ns
If this variable is set, its value specifies how to output dependencies for Make based on the non-system header files processed by the compiler.
System header files are ignored in the dependency output.
.Pp
The value of
.Sy DEPENDENCIES_OUTPUT
can be just a file name, in which case the Make rules are written to that file, guessing the target name from the source file name.
Or the value can have the form
.Em file
\~
.Em target ,
in which case the rules are written to file
.Em file
using
.Em target
as the target name.
.Pp
In other words, this environment variable is equivalent to combining the options
.Fl MM
and
.Fl MF ,
with an optional
.Fl MT
switch too.
.Pp
.It Sy SUNPRO_DEPENDENCIES Ns
This variable is the same as
.Sy DEPENDENCIES_OUTPUT
(see above), except that system header files are not ignored, so it implies
.Fl M
rather than
.Fl MM .
However, the dependence on the main input file is omitted.
.Pp
.It Sy CPP_RESTRICTED Ns
If this variable is defined, cpp will skip any include file which is not a regular file, and will continue searching for the requested name (this is always done if the found file is a directory).
.Pp
.El
.Sh BUGS
For instructions on reporting bugs, see
.Lk http://gcc.gnu.org/bugs.html .
.Sh FOOTNOTES
.Bl -tag -width xx
.It 1.
On some systems,
.Sy gcc -shared
needs to build supplementary stub code for constructors to work.
On multi-libbed systems,
.Sy gcc -shared
must select the correct support libraries to link against.
Failing to supply the correct flags may lead to subtle defects.
Supplying them in cases where they are not necessary is innocuous.
.Pp
.El
.Sh SEE ALSO
gpl(7), gfdl(7), fsf-funding(7), cpp(1), gcov(1), as(1), ld(1), gdb(1), adb(1), dbx(1), sdb(1) and the Info entries for
.Pa gcc ,
.Pa cpp ,
.Pa as ,
.Pa ld ,
.Pa binutils
and
.Pa gdb .
.Sh AUTHOR
See the Info entry for
.Nm gcc ,
or
.Lk http://gcc.gnu.org/onlinedocs/gcc/Contributors.html ,
for contributors to GCC.
.Sh COPYRIGHT
Copyright (c) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.
.Pp
Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.2 or any later version published by the Free Software Foundation; with the Invariant Sections being "GNU General Public License" and "Funding Free Software", the Front-Cover texts being (a) (see below), and with the Back-Cover Texts being (b) (see below).
A copy of the license is included in the gfdl(7) man page.
.Pp
(a) The FSF's Front-Cover Text is:
.Pp
 A GNU Manual
.Pp
(b) The FSF's Back-Cover Text is:
.Pp
You have freedom to copy and modify this GNU Manual, like GNU software.
Copies published by the Free Software Foundation raise funds for GNU development.

.\" $NetBSD: gcov-contrib.1,v 1.1.2.2 2009/05/13 19:18:18 jym Exp $
.Dd April 30, 2009
.Dt GCOV 1
.Os
.Sh NAME
gcov - coverage testing tool
.Sh SYNOPSIS
gcov
.Oo Fl v
|
.Fl -version Oc
.Oo Fl h
|
.Fl -help Oc
.Oo Fl a
|
.Fl -all-blocks Oc
.Oo Fl b
|
.Fl -branch-probabilities Oc
.Oo Fl c
|
.Fl -branch-counts Oc
.Oo Fl n
|
.Fl -no-output Oc
.Oo Fl l
|
.Fl -long-file-names Oc
.Oo Fl p
|
.Fl -preserve-paths Oc
.Oo Fl f
|
.Fl -function-summaries Oc
.Oo Fl o
|
.Fl -object-directory Ar directory|file Oc
.Oo Fl u
|
.Fl -unconditional-branches Oc
.Em sourcefile
.Sh DESCRIPTION
.Nm gcov
is a test coverage program.
Use it in concert with GCC to analyze your programs to help create more efficient, faster running code and to discover untested parts of your program.
You can use
.Nm gcov
as a profiling tool to help discover where your optimization efforts will best affect your code.
You can also use
.Nm gcov
along with the other profiling tool,
.Sy gprof ,
to assess which parts of your code use the greatest amount of computing time.
.Pp
Profiling tools help you analyze your code's performance.
Using a profiler such as
.Nm gcov
or
.Sy gprof ,
you can find out some basic performance statistics, such as:
.Pp
.Bl -bullet
.It
how often each line of code executes
.Pp
.It
what lines of code are actually executed
.Pp
.It
how much computing time each section of code uses
.Pp
.El
Once you know these things about how your code works when compiled, you can look at each module to see which modules should be optimized.
.Nm gcov
helps you determine where to work on optimization.
.Pp
Software developers also use coverage testing in concert with testsuites, to make sure software is actually good enough for a release.
Testsuites can verify that a program works as expected; a coverage program tests to see how much of the program is exercised by the testsuite.
Developers can then determine what kinds of test cases need to be added to the testsuites to create both better testing and a better final product.
.Pp
You should compile your code without optimization if you plan to use
.Nm gcov
because the optimization, by combining some lines of code into one function, may not give you as much information as you need to look for `hot spots' where the code is using a great deal of computer time.
Likewise, because
.Nm gcov
accumulates statistics by line (at the lowest resolution), it works best with a programming style that places only one statement on each line.
If you use complicated macros that expand to loops or to other control structures, the statistics are less helpful---they only report on the line where the macro call appears.
If your complex macros behave like functions, you can replace them with inline functions to solve this problem.
.Pp
.Nm gcov
creates a logfile called
.Pa sourcefile.gcov
which indicates how many times each line of a source file
.Pa sourcefile.c
has executed.
You can use these logfiles along with
.Sy gprof
to aid in fine-tuning the performance of your programs.
.Sy gprof
gives timing information you can use along with the information you get from
.Nm gcov .
.Pp
.Nm gcov
works only on code compiled with GCC.
It is not compatible with any other profiling or test coverage mechanism.
.Sh OPTIONS
.Bl -tag -width xx
.It Fl h
.It Fl -help
Display help about using
.Nm gcov
(on the standard output), and exit without doing any further processing.
.Pp
.It Fl v
.It Fl -version
Display the
.Nm gcov
version number (on the standard output), and exit without doing any further processing.
.Pp
.It Fl a
.It Fl -all-blocks
Write individual execution counts for every basic block.
Normally gcov outputs execution counts only for the main blocks of a line.
With this option you can determine if blocks within a single line are not being executed.
.Pp
.It Fl b
.It Fl -branch-probabilities
Write branch frequencies to the output file, and write branch summary info to the standard output.
This option allows you to see how often each branch in your program was taken.
Unconditional branches will not be shown, unless the
.Fl u
option is given.
.Pp
.It Fl c
.It Fl -branch-counts
Write branch frequencies as the number of branches taken, rather than the percentage of branches taken.
.Pp
.It Fl n
.It Fl -no-output
Do not create the
.Nm gcov
output file.
.Pp
.It Fl l
.It Fl -long-file-names
Create long file names for included source files.
For example, if the header file
.Pa x.h
contains code, and was included in the file
.Pa a.c ,
then running
.Nm gcov
on the file
.Pa a.c
will produce an output file called
.Pa a.c##x.h.gcov
instead of
.Pa x.h.gcov .
This can be useful if
.Pa x.h
is included in multiple source files.
If you use the
.Fl p
option, both the including and included file names will be complete path names.
.Pp
.It Fl p
.It Fl -preserve-paths
Preserve complete path information in the names of generated
.Pa .gcov
files.
Without this option, just the filename component is used.
With this option, all directories are used, with
.Sy /
characters translated to
.Sy #
characters,
.Pa .
directory components removed and
.Pa ..
components renamed to
.Sy ^ .
This is useful if sourcefiles are in several different directories.
It also affects the
.Fl l
option.
.Pp
.It Fl f
.It Fl -function-summaries
Output summaries for each function in addition to the file level summary.
.Pp
.It Fl o Ar directory|file
.It Fl -object-directory Ar directory
.It Fl -object-file Ar file
Specify either the directory containing the gcov data files, or the object path name.
The
.Pa .gcno ,
and
.Pa .gcda
data files are searched for using this option.
If a directory is specified, the data files are in that directory and named after the source file name, without its extension.
If a file is specified here, the data files are named after that file, without its extension.
If this option is not supplied, it defaults to the current directory.
.Pp
.It Fl u
.It Fl -unconditional-branches
When branch probabilities are given, include those of unconditional branches.
Unconditional branches are normally not interesting.
.Pp
.El
.Nm gcov
should be run with the current directory the same as that when you invoked the compiler.
Otherwise it will not be able to locate the source files.
.Nm gcov
produces files called
.Pa mangledname.gcov
in the current directory.
These contain the coverage information of the source file they correspond to.
One
.Pa .gcov
file is produced for each source file containing code, which was compiled to produce the data files.
The
.Em mangledname
part of the output file name is usually simply the source file name, but can be something more complicated if the
.Fl l
or
.Fl p
options are given.
Refer to those options for details.
.Pp
The
.Pa .gcov
files contain the
.Sy :
separated fields along with program source code.
The format is
.Pp
.Bd -literal -offset indent
\*[Lt]execution_count\*[Gt]:\*[Lt]line_number\*[Gt]:\*[Lt]source line text\*[Gt]
.Ed
Additional block information may succeed each line, when requested by command line option.
The
.Em execution_count
is
.Sy -
for lines containing no code and
.Sy #####
for lines which were never executed.
Some lines of information at the start have
.Em line_number
of zero.
.Pp
The preamble lines are of the form
.Pp
.Bd -literal -offset indent
-:0:\*[Lt]tag\*[Gt]:\*[Lt]value\*[Gt]
.Ed
The ordering and number of these preamble lines will be augmented as
.Nm gcov
development progresses --- do not rely on them remaining unchanged.
Use
.Em tag
to locate a particular preamble line.
.Pp
The additional block information is of the form
.Pp
.Bd -literal -offset indent
\*[Lt]tag\*[Gt] \*[Lt]information\*[Gt]
.Ed
The
.Em information
is human readable, but designed to be simple enough for machine parsing too.
.Pp
When printing percentages, 0% and 100% are only printed when the values are
.Em exactly
0% and 100% respectively.
Other values which would conventionally be rounded to 0% or 100% are instead printed as the nearest non-boundary value.
.Pp
When using
.Nm gcov ,
you must first compile your program with two special GCC options:
.Fl fprofile-arcs Fl ftest-coverage .
This tells the compiler to generate additional information needed by gcov (basically a flow graph of the program) and also includes additional code in the object files for generating the extra profiling information needed by gcov.
These additional files are placed in the directory where the object file is located.
.Pp
Running the program will cause profile output to be generated.
For each source file compiled with
.Fl fprofile-arcs ,
an accompanying
.Pa .gcda
file will be placed in the object file directory.
.Pp
Running
.Nm gcov
with your program's source file names as arguments will now produce a listing of the code along with frequency of execution for each line.
For example, if your program is called
.Pa tmp.c ,
this is what you see when you use the basic
.Nm gcov
facility:
.Pp
.Bd -literal -offset indent
$ gcc -fprofile-arcs -ftest-coverage tmp.c
$ a.out
$ gcov tmp.c
90.00% of 10 source lines executed in file tmp.c
Creating tmp.c.gcov.
.Ed
The file
.Pa tmp.c.gcov
contains output from
.Nm gcov .
Here is a sample:
.Pp
.Bd -literal -offset indent
        -:    0:Source:tmp.c
        -:    0:Graph:tmp.gcno
        -:    0:Data:tmp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include \*[Lt]stdio.h\*[Gt]
        -:    2:
        -:    3:int main (void)
        1:    4:{
        1:    5:  int i, total;
        -:    6:
        1:    7:  total = 0;
        -:    8:
       11:    9:  for (i = 0; i \*[Lt] 10; i++)
       10:   10:    total += i;
        -:   11:
        1:   12:  if (total != 45)
    #####:   13:    printf ("Failure\en");
        -:   14:  else
        1:   15:    printf ("Success\en");
        1:   16:  return 0;
        -:   17:}
.Ed
When you use the
.Fl a
option, you will get individual block counts, and the output looks like this:
.Pp
.Bd -literal -offset indent
        -:    0:Source:tmp.c
        -:    0:Graph:tmp.gcno
        -:    0:Data:tmp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include \*[Lt]stdio.h\*[Gt]
        -:    2:
        -:    3:int main (void)
        1:    4:{
        1:    4-block  0
        1:    5:  int i, total;
        -:    6:
        1:    7:  total = 0;
        -:    8:
       11:    9:  for (i = 0; i \*[Lt] 10; i++)
       11:    9-block  0
       10:   10:    total += i;
       10:   10-block  0
        -:   11:
        1:   12:  if (total != 45)
        1:   12-block  0
    #####:   13:    printf ("Failure\en");
    $$$$$:   13-block  0
        -:   14:  else
        1:   15:    printf ("Success\en");
        1:   15-block  0
        1:   16:  return 0;
        1:   16-block  0
        -:   17:}
.Ed
In this mode, each basic block is only shown on one line -- the last line of the block.
A multi-line block will only contribute to the execution count of that last line, and other lines will not be shown to contain code, unless previous blocks end on those lines.
The total execution count of a line is shown and subsequent lines show the execution counts for individual blocks that end on that line.
After each block, the branch and call counts of the block will be shown, if the
.Fl b
option is given.
.Pp
Because of the way GCC instruments calls, a call count can be shown after a line with no individual blocks.
As you can see, line 13 contains a basic block that was not executed.
.Pp
When you use the
.Fl b
option, your output looks like this:
.Pp
.Bd -literal -offset indent
$ gcov -b tmp.c
90.00% of 10 source lines executed in file tmp.c
80.00% of 5 branches executed in file tmp.c
80.00% of 5 branches taken at least once in file tmp.c
50.00% of 2 calls executed in file tmp.c
Creating tmp.c.gcov.
.Ed
Here is a sample of a resulting
.Pa tmp.c.gcov
file:
.Pp
.Bd -literal -offset indent
        -:    0:Source:tmp.c
        -:    0:Graph:tmp.gcno
        -:    0:Data:tmp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include \*[Lt]stdio.h\*[Gt]
        -:    2:
        -:    3:int main (void)
function main called 1 returned 1 blocks executed 75%
        1:    4:{
        1:    5:  int i, total;
        -:    6:
        1:    7:  total = 0;
        -:    8:
       11:    9:  for (i = 0; i \*[Lt] 10; i++)
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
       10:   10:    total += i;
        -:   11:
        1:   12:  if (total != 45)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   13:    printf ("Failure\en");
call    0 never executed
        -:   14:  else
        1:   15:    printf ("Success\en");
call    0 called 1 returned 100%
        1:   16:  return 0;
        -:   17:}
.Ed
For each function, a line is printed showing how many times the function is called, how many times it returns and what percentage of the function's blocks were executed.
.Pp
For each basic block, a line is printed after the last line of the basic block describing the branch or call that ends the basic block.
There can be multiple branches and calls listed for a single source line if there are multiple basic blocks that end on that line.
In this case, the branches and calls are each given a number.
There is no simple way to map these branches and calls back to source constructs.
In general, though, the lowest numbered branch or call will correspond to the leftmost construct on the source line.
.Pp
For a branch, if it was executed at least once, then a percentage indicating the number of times the branch was taken divided by the number of times the branch was executed will be printed.
Otherwise, the message "never executed" is printed.
.Pp
For a call, if it was executed at least once, then a percentage indicating the number of times the call returned divided by the number of times the call was executed will be printed.
This will usually be 100%, but may be less for functions that call
.Va exit
or
.Va longjmp ,
and thus may not return every time they are called.
.Pp
The execution counts are cumulative.
If the example program were executed again without removing the
.Pa .gcda
file, the count for the number of times each line in the source was executed would be added to the results of the previous run(s).
This is potentially useful in several ways.
For example, it could be used to accumulate data over a number of program runs as part of a test verification suite, or to provide more accurate long-term information over a large number of program runs.
.Pp
The data in the
.Pa .gcda
files is saved immediately before the program exits.
For each source file compiled with
.Fl fprofile-arcs ,
the profiling code first attempts to read in an existing
.Pa .gcda
file; if the file doesn't match the executable (differing number of basic block counts) it will ignore the contents of the file.
It then adds in the new execution counts and finally writes the data to the file.
.Pp
.Ss Using B<gcov> with GCC Optimization
If you plan to use
.Nm gcov
to help optimize your code, you must first compile your program with two special GCC options:
.Fl fprofile-arcs Fl ftest-coverage .
Aside from that, you can use any other GCC options; but if you want to prove that every single line in your program was executed, you should not compile with optimization at the same time.
On some machines the optimizer can eliminate some simple code lines by combining them with other lines.
For example, code like this:
.Pp
.Bd -literal -offset indent
if (a != b)
  c = 1;
else
  c = 0;
.Ed
can be compiled into one instruction on some machines.
In this case, there is no way for
.Nm gcov
to calculate separate execution counts for each line because there isn't separate code for each line.
Hence the
.Nm gcov
output looks like this if you compiled the program with optimization:
.Pp
.Bd -literal -offset indent
      100:   12:if (a != b)
      100:   13:  c = 1;
      100:   14:else
      100:   15:  c = 0;
.Ed
The output shows that this block of code, combined by optimization, executed 100 times.
In one sense this result is correct, because there was only one instruction representing all four of these lines.
However, the output does not indicate how many times the result was 0 and how many times the result was 1.
.Pp
Inlineable functions can create unexpected line counts.
Line counts are shown for the source code of the inlineable function, but what is shown depends on where the function is inlined, or if it is not inlined at all.
.Pp
If the function is not inlined, the compiler must emit an out of line copy of the function, in any object file that needs it.
If
.Pa fileA.o
and
.Pa fileB.o
both contain out of line bodies of a particular inlineable function, they will also both contain coverage counts for that function.
When
.Pa fileA.o
and
.Pa fileB.o
are linked together, the linker will, on many systems, select one of those out of line bodies for all calls to that function, and remove or ignore the other.
Unfortunately, it will not remove the coverage counters for the unused function body.
Hence when instrumented, all but one use of that function will show zero counts.
.Pp
If the function is inlined in several places, the block structure in each location might not be the same.
For instance, a condition might now be calculable at compile time in some instances.
Because the coverage of all the uses of the inline function will be shown for the same source lines, the line counts themselves might seem inconsistent.
.Sh SEE ALSO
gpl(7), gfdl(7), fsf-funding(7), gcc(1) and the Info entry for
.Pa gcc .
.Sh COPYRIGHT
Copyright (c) 1996, 1997, 1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.
.Pp
Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.2 or any later version published by the Free Software Foundation; with the Invariant Sections being "GNU General Public License" and "Funding Free Software", the Front-Cover texts being (a) (see below), and with the Back-Cover Texts being (b) (see below).
A copy of the license is included in the gfdl(7) man page.
.Pp
(a) The FSF's Front-Cover Text is:
.Pp
 A GNU Manual
.Pp
(b) The FSF's Back-Cover Text is:
.Pp
You have freedom to copy and modify this GNU Manual, like GNU software.
Copies published by the Free Software Foundation raise funds for GNU development.

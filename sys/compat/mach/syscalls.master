	$NetBSD: syscalls.master,v 1.5.2.3 2004/09/21 13:25:43 skrll Exp $

;	@(#)syscalls.master	8.1 (Berkeley) 7/19/93

; NetBSD COMPAT_MACH system call name/number "master" file.
; This is used for the negative mach syscalls.
; (See syscalls.conf to see what it is processed into.)
;
; Fields: number type [type-dependent ...]
;	number	system call number, must be in order
;	type	one of STD, OBSOL, UNIMPL, NODEF, NOARGS, or one of
;		the compatibility options defined in syscalls.conf.
;
; types:
;	STD	always included
;	OBSOL	obsolete, not included in system
;	UNIMPL	unimplemented, not included in system
;	NODEF	included, but don't define the syscall number
;	NOARGS	included, but don't define the syscall args structure
;
; The compat options are defined in the syscalls.conf file, and the
; compat option name is prefixed to the syscall name.  Other than
; that, they're like NODEF (for 'compat' options), or STD (for
; 'libcompat' options).
;
; The type-dependent arguments are as follows:
; For STD, NODEF, NOARGS, and compat syscalls:
;	{ pseudo-proto } [alias]
; For other syscalls:
;	[comment]
;
; #ifdef's, etc. may be included, and are copied to the output files.
; #include's are copied to the syscall names and switch definition files only.

#if defined(_KERNEL_OPT)
#include "opt_ntp.h"
#include "opt_sysv.h"
#endif

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/signal.h>
#include <sys/mount.h>
#include <sys/poll.h>
#include <sys/sa.h>
#include <sys/syscallargs.h>

#include <compat/mach/mach_types.h>
#include <compat/mach/mach_message.h>
#include <compat/mach/mach_clock.h>
#include <compat/mach/mach_syscallargs.h>
%%

0	UNIMPL	
1	UNIMPL	
2	UNIMPL	
3	UNIMPL	
4	UNIMPL	
5	UNIMPL	
6	UNIMPL	
7	UNIMPL	
8	UNIMPL	
9	UNIMPL	
10	UNIMPL	
11	UNIMPL	
12	UNIMPL	
13	UNIMPL	
14	UNIMPL	
15	UNIMPL	
16	UNIMPL	
17	UNIMPL	
18	UNIMPL	
19	UNIMPL	
20	UNIMPL	
21	UNIMPL	
22	UNIMPL	
23	UNIMPL	
24	UNIMPL	
25	UNIMPL	
26	STD		{ mach_port_name_t	mach_sys_reply_port(void); }
27	STD		{ mach_port_name_t \
			    mach_sys_thread_self_trap(void); }
28	STD		{ mach_port_name_t	mach_sys_task_self_trap(void); }
29	STD		{ mach_port_name_t	mach_sys_host_self_trap(void); }
30	UNIMPL	
31	STD		{ mach_msg_return_t	mach_sys_msg_trap( \
			    mach_msg_header_t	*msg, \
			    mach_msg_option_t	option, \
			    mach_msg_size_t	send_size, \
			    mach_msg_size_t	rcv_size, \
			    mach_port_name_t	rcv_name, \
			    mach_msg_timeout_t	timeout, \
			    mach_port_name_t	notify); }
32	STD		{ mach_kern_return_t	mach_sys_msg_overwrite_trap( \
			    mach_msg_header_t	*msg, \
			    mach_msg_option_t	option, \
			    mach_msg_size_t	send_size, \
			    mach_msg_size_t	rcv_size, \
			    mach_port_name_t	rcv_name, \
			    mach_msg_timeout_t	timeout, \
			    mach_port_name_t	notify, \
			    mach_msg_header_t	*rcv_msg, \
			    mach_msg_size_t	scatter_list_size); }
33	STD		{ mach_kern_return_t \
			    mach_sys_semaphore_signal_trap( \
			    mach_port_name_t signal_name); }
34	STD		{ mach_kern_return_t \
			    mach_sys_semaphore_signal_all_trap( \
			    mach_port_name_t signal_name); }
35	STD		{ mach_kern_return_t \
			    mach_sys_semaphore_signal_thread_trap( \
			    mach_port_name_t signal_name, \
			    mach_port_name_t thread); }
36	STD		{ mach_kern_return_t \
			    mach_sys_semaphore_wait_trap( \
			    mach_port_name_t wait_name); }
37	STD		{ mach_kern_return_t \
			    mach_sys_semaphore_wait_signal_trap( \
			    mach_port_name_t wait_name, \
			    mach_port_name_t signal_name); }
38	STD		{ mach_kern_return_t \
			    mach_sys_semaphore_timedwait_trap( \
			    mach_port_name_t wait_name, \
			    unsigned int sec, \
			    mach_clock_res_t nsec); }
39	STD		{ mach_kern_return_t \
			    mach_sys_semaphore_timedwait_signal_trap( \
			    mach_port_name_t wait_name, \
			    mach_port_name_t signal_name, \
			    unsigned int sec, \
			    mach_clock_res_t nsec); }
40	UNIMPL
41	STD		{ mach_kern_return_t mach_sys_init_process(void); }
42	UNIMPL
43	STD		{ mach_kern_return_t mach_sys_map_fd(int fd, \
			    mach_vm_offset_t offset, mach_vm_offset_t *va, \
			    mach_boolean_t findspace, mach_vm_size_t size); }
44	UNIMPL
45	STD		{ mach_kern_return_t mach_sys_task_for_pid( \
			    mach_port_t target_tport, int pid, \
			    mach_port_t *t); }
46	STD		{ mach_kern_return_t mach_sys_pid_for_task( \
			    mach_port_t t, int *x); } 
47	UNIMPL
48	STD		{ mach_kern_return_t mach_sys_macx_swapon( \
			    char *name, int flags, int size, int priority); }
49	STD		{ mach_kern_return_t mach_sys_macx_swapoff( \
			    char *name, int flags); }
50	UNIMPL
51	STD		{ mach_kern_return_t mach_sys_macx_triggers( \
			    int hi_water, int low_water, int flags, \
			    mach_port_t alert_port); }
52	UNIMPL
53	UNIMPL
54	UNIMPL
55	UNIMPL
56	UNIMPL
57	UNIMPL
58	UNIMPL
59	STD		{ mach_kern_return_t mach_sys_swtch_pri( \
			    int pri); }
60	STD		{ mach_kern_return_t mach_sys_swtch(void); }
61	STD		{ mach_kern_return_t mach_sys_syscall_thread_switch( \
			    mach_port_name_t thread_name, \
			    int option, \
			    mach_msg_timeout_t option_time); }
62	STD		{ mach_kern_return_t mach_sys_clock_sleep_trap( \
			    mach_port_name_t clock_name, \
			    mach_sleep_type_t sleep_type, \
			    int sleep_sec, int sleep_nsec, \
			    mach_timespec_t *wakeup_time); }
63	UNIMPL
64	UNIMPL
65	UNIMPL
66	UNIMPL
67	UNIMPL
68	UNIMPL
69	UNIMPL
70	UNIMPL
71	UNIMPL
72	UNIMPL
73	UNIMPL
74	UNIMPL
75	UNIMPL
76	UNIMPL
77	UNIMPL
78	UNIMPL
79	UNIMPL
80	UNIMPL
81	UNIMPL
82	UNIMPL
83	UNIMPL
84	UNIMPL
85	UNIMPL
86	UNIMPL
87	UNIMPL
88	UNIMPL
89	STD		{ mach_kern_return_t mach_sys_timebase_info( \
			    mach_timebase_info_t info); }
90	STD		{ mach_kern_return_t mach_sys_wait_until( \
			    u_int64_t deadline); }
91	STD		{ mach_port_name_t mach_sys_timer_create(void); }
92	STD		{ mach_kern_return_t mach_sys_timer_destroy( \
			    mach_port_name_t name); }
93	STD		{ mach_kern_return_t mach_sys_timer_arm( \
			    mach_port_name_t name, \
			    mach_absolute_time_t expire_time); }
94	STD		{ mach_kern_return_t mach_sys_timer_cancel( \
			    mach_port_name_t name, \
			    mach_absolute_time_t *result_time); }
95	STD		{ mach_kern_return_t mach_sys_get_time_base_info(void); }
96	UNIMPL
97	UNIMPL
98	UNIMPL
99	UNIMPL
100	UNIMPL
101	UNIMPL
102	UNIMPL
103	UNIMPL
104	UNIMPL
105	UNIMPL
106	UNIMPL
107	UNIMPL
108	UNIMPL
109	UNIMPL
110	UNIMPL
111	UNIMPL
112	UNIMPL
113	UNIMPL
114	UNIMPL
115	UNIMPL
116	UNIMPL
117	UNIMPL
118	UNIMPL
119	UNIMPL
120	UNIMPL
121	UNIMPL
122	UNIMPL
123	UNIMPL
124	UNIMPL
125	UNIMPL
126	UNIMPL
127	UNIMPL

	$NetBSD: syscalls.master,v 1.2.2.2 2001/02/11 19:15:07 bouyer Exp $

;	@(#)syscalls.master	8.1 (Berkeley) 7/19/93

; NetBSD COMPAT_SVR4 system call name/number "master" file.
; (See syscalls.conf to see what it is processed into.)
;
; Fields: number type [type-dependent ...]
;	number	system call number, must be in order
;	type	one of STD, OBSOL, UNIMPL, NODEF, NOARGS, or one of
;		the compatibility options defined in syscalls.conf.
;
; types:
;	STD	always included
;	OBSOL	obsolete, not included in system
;	UNIMPL	unimplemented, not included in system
;	NODEF	included, but don't define the syscall number
;	NOARGS	included, but don't define the syscall args structure
;
; The compat options are defined in the syscalls.conf file, and the
; compat option name is prefixed to the syscall name.  Other than
; that, they're like NODEF (for 'compat' options), or STD (for
; 'libcompat' options).
;
; The type-dependent arguments are as follows:
; For STD, NODEF, NOARGS, and compat syscalls:
;	{ pseudo-proto } [alias]
; For other syscalls:
;	[comment]
;
; #ifdef's, etc. may be included, and are copied to the output files.
; #include's are copied to the syscall names and switch definition files only.

#if defined(_KERNEL) && !defined(_LKM)
#include "opt_ntp.h"
#include "opt_sysv.h"
#endif

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/signal.h>
#include <sys/mount.h>
#include <sys/poll.h>
#include <sys/syscallargs.h>

#include <compat/svr4_32/svr4_32_types.h>
#include <compat/netbsd32/netbsd32_syscallargs.h>
#include <compat/svr4_32/svr4_32_time.h>
#include <compat/svr4_32/svr4_32_signal.h>
#include <compat/svr4_32/svr4_32_ucontext.h>
#include <compat/svr4_32/svr4_32_lwp.h>
#include <compat/svr4_32/svr4_32_syscallargs.h>
#include <compat/svr4_32/svr4_32_statvfs.h>
#include <compat/svr4_32/svr4_32_resource.h>
#include <compat/svr4_32/svr4_32_acl.h>

%%

0	NOARGS		{ int sys_nosys(void); } syscall
1	NOARGS		{ int netbsd32_exit(int rval); }
2	NOARGS		{ int sys_fork(void); }
3	NOARGS		{ int netbsd32_read(int fd, netbsd32_charp buf, u_int nbyte); }
4	NOARGS		{ int netbsd32_write(int fd, netbsd32_charp buf, u_int nbyte); }
5	STD		{ int svr4_32_sys_open(const netbsd32_charp path, int flags, \
			    int mode); }
6	STD		{ int svr4_32_close(int fd); }
7	STD		{ int svr4_32_sys_wait(netbsd32_intp status); }
8	STD		{ int svr4_32_sys_creat(const netbsd32_charp path, int mode); }
9	NOARGS		{ int netbsd32_link(const netbsd32_charp path, const netbsd32_charp link); }
10	NOARGS		{ int netbsd32_unlink(const netbsd32_charp path); }
11	STD		{ int svr4_32_sys_execv(const netbsd32_charp path, netbsd32_charpp argp); }
12	NOARGS		{ int netbsd32_chdir(const netbsd32_charp path); }
13	STD		{ int svr4_32_sys_time(svr4_32_time_tp t); }
14	STD		{ int svr4_32_sys_mknod(const netbsd32_charp path, int mode, \
			    int dev); }
15	NOARGS		{ int netbsd32_chmod(const netbsd32_charp path, mode_t mode); }
16	NOARGS		{ int netbsd32___posix_chown(const netbsd32_charp path, uid_t \
			    uid, gid_t gid); } chown
17	STD		{ int svr4_32_sys_break(netbsd32_caddr_t nsize); }
18	STD		{ int svr4_32_sys_stat(const netbsd32_charp path, \
			    svr4_32_statp ub); }
19	NOARGS		{ netbsd32_long compat_43_sys_lseek(int fd, netbsd32_long offset, \
			    int whence); }
20	NOARGS		{ pid_t sys_getpid(void); }
21	UNIMPL		old_mount
22	UNIMPL		System V umount
23	NOARGS		{ int netbsd32_setuid(uid_t uid); }
24	NOARGS		{ uid_t sys_getuid_with_euid(void); }
25	UNIMPL		stime
26	UNIMPL		pcsample
27	STD		{ int svr4_32_sys_alarm(unsigned sec); }
28	STD		{ int svr4_32_sys_fstat(int fd, svr4_32_statp sb); }
29	STD		{ int svr4_32_sys_pause(void); }
30	STD		{ int svr4_32_sys_utime(const netbsd32_charp path, \
			     svr4_32_utimbufp ubuf); }
31	UNIMPL		was stty
32	UNIMPL		was gtty
33	STD		{ int svr4_32_sys_access(const netbsd32_charp path, int flags); }
34	STD		{ int svr4_32_sys_nice(int prio); }
35	UNIMPL		statfs
36	NOARGS		{ int sys_sync(void); }
37	STD		{ int svr4_32_sys_kill(int pid, int signum); }
38	UNIMPL		fstatfs
39	STD		{ int svr4_32_sys_pgrpsys(int cmd, int pid, int pgid); }
40	UNIMPL		xenix
41	NOARGS		{ int netbsd32_dup(u_int fd); }
42	NOARGS		{ int sys_pipe(void); }
43	STD		{ int svr4_32_sys_times(svr4_32_tms_tp tp); }
44	UNIMPL		profil
45	UNIMPL		plock
46	NOARGS		{ int netbsd32_setgid(gid_t gid); }
47	NOARGS		{ gid_t sys_getgid_with_egid(void); }
48	STD		{ int svr4_32_sys_signal(int signum, svr4_sig_t handler); }
#ifdef SYSVMSG
49	STD		{ int svr4_32_sys_msgsys(int what, int a2, int a3, \
					      int a4, int a5); }
#else
49	UNIMPL		msgsys
#endif
50	STD		{ int svr4_32_sys_sysarch(int op, netbsd32_voidp a1); }
51	UNIMPL		acct
#ifdef SYSVSHM
52	STD		{ int svr4_32_sys_shmsys(int what, int a2, int a3, \
					      int a4); }
#else
52	UNIMPL		shmsys
#endif
#ifdef SYSVSEM
53	STD		{ int svr4_32_sys_semsys(int what, int a2, int a3, \
					      int a4, int a5); }
#else
53	UNIMPL		semsys
#endif
54	STD		{ int svr4_32_sys_ioctl(int fd, netbsd32_u_long com, \
			    netbsd32_caddr_t data); }
55	UNIMPL		uadmin
56	UNIMPL		exch
57	STD		{ int svr4_32_sys_utssys(netbsd32_voidp a1, \
			    netbsd32_voidp a2, int sel, \
			    netbsd32_voidp a3); }
58	NOARGS		{ int netbsd32_fsync(int fd); }
59	NOARGS		{ int netbsd32_execve(const netbsd32_charp path, netbsd32_charpp argp, \
			    netbsd32_charpp envp); }
60	NOARGS		{ int netbsd32_umask(int newmask); }
61	NOARGS		{ int netbsd32_chroot(const netbsd32_charp path); }
62	STD		{ int svr4_32_sys_fcntl(int fd, int cmd, netbsd32_charp arg); }
63	STD		{ netbsd32_long svr4_32_sys_ulimit(int cmd, netbsd32_long newlimit); }
64	UNIMPL		reserved for unix/pc
65	UNIMPL		reserved for unix/pc
66	UNIMPL		reserved for unix/pc
67	UNIMPL		reserved for unix/pc
68	UNIMPL		reserved for unix/pc
69	UNIMPL		reserved for unix/pc
70	OBSOL		advfs
71	OBSOL		unadvfs
72	OBSOL		rmount
73	OBSOL		rumount
74	OBSOL		rfstart
75	OBSOL		sigret
76	OBSOL		rdebug
77	OBSOL		rfstop
78	UNIMPL		rfsys
79	NOARGS		{ int netbsd32_rmdir(const netbsd32_charp path); }
80	NOARGS		{ int netbsd32_mkdir(const netbsd32_charp path, mode_t mode); }
81	STD		{ int svr4_32_sys_getdents(int fd, netbsd32_charp buf, \
			    int nbytes); }
82	OBSOL		libattach
83	OBSOL		libdetach
84	UNIMPL		sysfs
85	STD		{ int svr4_32_sys_getmsg(int fd, svr4_32_strbuf_tp ctl, \
			    svr4_32_strbuf_tp dat, netbsd32_intp flags); }
86	STD		{ int svr4_32_sys_putmsg(int fd, svr4_32_strbuf_tp ctl, \
			    svr4_32_strbuf_tp dat, int flags); }
87	NOARGS		{ int netbsd32_poll(netbsd32_pollfdp_t fds, u_int nfds, \
			    int timeout); }
88	STD		{ int svr4_32_sys_lstat(const netbsd32_charp path, \
			    svr4_32_stat_tp ub); }
89	NOARGS		{ int netbsd32_symlink(const netbsd32_charp path, const netbsd32_charp link); }
90	NOARGS		{ int netbsd32_readlink(const netbsd32_charp path, netbsd32_charp buf, netbsd32_size_t count); }
91	NOARGS		{ int netbsd32_getgroups(int gidsetsize, netbsd32_gid_tp gidset); }
92	NOARGS		{ int netbsd32_setgroups(int gidsetsize, const netbsd32_gid_tp gidset); }
93	NOARGS		{ int netbsd32_fchmod(int fd, int mode); }
94	NOARGS		{ int netbsd32___posix_fchown(int fd, int uid, int gid); } \
			    fchown
95	STD		{ int svr4_32_sys_sigprocmask(int how, \
			    const svr4_32_sigset_tp set, \
			    svr4_32_sigset_tp oset); }
96	STD		{ int svr4_32_sys_sigsuspend( \
			    const svr4_32_sigset_tp set); }
97	STD		{ int svr4_32_sys_sigaltstack( \
			    const svr4_32_sigaltstack_tp nss, \
			    svr4_32_sigaltstack_tp oss); }
98	STD		{ int svr4_32_sys_sigaction(int signum, \
			    const svr4_32_sigaction_tp nsa, \
			    svr4_32_sigaction_tp osa); }
99	STD		{ int svr4_32_sys_sigpending(int what, \
			    svr4_32_sigset_tp set); }
100	STD		{ int svr4_32_sys_context(int func, \
			    svr4_32_ucontext_tp uc); }
101	UNIMPL		evsys
102	UNIMPL		evtrapret
103	STD		{ int svr4_32_sys_statvfs(const netbsd32_charp path, \
			    svr4_32_statvfs_tp fs); }
104	STD		{ int svr4_32_sys_fstatvfs(int fd, \
			    svr4_32_statvfs_tp fs); }
105	UNIMPL		getloadavg
106	UNIMPL		nfssvc
107	STD		{ int svr4_32_sys_waitsys(int grp, int id, \
			    svr4_32_siginfo_tp info, int options); }
108	UNIMPL		sigsendsys
109	STD		{ int svr4_32_sys_hrtsys(int cmd, int fun, int sub, \
			    netbsd32_voidp rv1, netbsd32_voidp rv2); }
110	UNIMPL		acancel
111	UNIMPL		async
112	UNIMPL		priocntlsys
113	STD		{ int svr4_32_sys_pathconf(const netbsd32_charp path, int name); }
114	UNIMPL		mincore
115	STD		{ netbsd32_voidp svr4_32_sys_mmap(netbsd32_voidp addr, \
			    svr4_32_size_t len, int prot, int flags, int fd, \
			    svr4_32_off_t pos); }
116	NOARGS		{ int netbsd32_mprotect(netbsd32_voidp addr, netbsd32_size_t len, int prot); }
117	NOARGS		{ int netbsd32_munmap(netbsd32_voidp addr, netbsd32_size_t len); }
118	STD		{ int svr4_32_sys_fpathconf(int fd, int name); }
119	NOARGS		{ int sys_vfork(void); }
120	NOARGS		{ int sys_fchdir(int fd); }
121	NOARGS		{ int netbsd32_readv(int fd, const netbsd32_iovecp_t iovp, int iovcnt); }
122	NOARGS		{ int netbsd32_writev(int fd, const netbsd32_iovecp_t iovp, int iovcnt); }
123	STD		{ int svr4_32_sys_xstat(int two, const netbsd32_charp path, \
			    svr4_32_xstat_tp ub); }
124	STD		{ int svr4_32_sys_lxstat(int two, const netbsd32_charp path, \
			    svr4_32_xstat_tp ub); }
125	STD		{ int svr4_32_sys_fxstat(int two, int fd, \
			    svr4_32_xstat_tp sb); }
126	STD		{ int svr4_32_sys_xmknod(int two, netbsd32_charp path, \
			    svr4_32_mode_t mode, svr4_dev_t dev); }
127	UNIMPL		clocal
128	STD		{ int svr4_32_sys_setrlimit(int which, \
			    const svr4_32_rlimit_tp rlp); }
129	STD		{ int svr4_32_sys_getrlimit(int which, \
			    svr4_32_rlimit_tp rlp); }
130	NOARGS		{ int netbsd32_lchown(const netbsd32_charp path, uid_t uid, gid_t gid); } lchown
131	STD		{ int svr4_32_sys_memcntl(netbsd32_voidp  addr, \
			    svr4_32_size_t len, int cmd, netbsd32_voidp  arg, \
			    int attr, int mask); }
132	UNIMPL		getpmsg
133	UNIMPL		putpmsg
134	NOARGS		{ int netbsd32___posix_rename(const netbsd32_charp from, const netbsd32_charp to); } \
			    rename
135	STD		{ int svr4_32_sys_uname(svr4_32_utsnamep name, \
			    int dummy); }
136	NOARGS		{ int netbsd32_setegid(gid_t egid); }
137	STD		{ int svr4_32_sys_sysconfig(int name); }
138	NOARGS		{ int netbsd32_adjtime(const netbsd32_timevalp_t delta, netbsd32_timevalp_t olddelta); }
139	STD		{ netbsd32_long svr4_32_sys_systeminfo(int what, netbsd32_charp buf, \
			    netbsd32_long len); }
140	UNIMPL
141	NOARGS		{ int netbsd32_seteuid(uid_t euid); }
142	UNIMPL		vtrace
143	NOARGS		{ int sys_fork(void); } fork1
144	UNIMPL		sigtimedwait
145	STD		{ int svr4_32_sys__lwp_info(svr4_32_lwpinfop lwpinfo);}
146	UNIMPL		yield
147	UNIMPL		lwp_sema_wait
148	UNIMPL		lwp_sema_post
149	UNIMPL		lwp_sema_trywait
150	UNIMPL
151	UNIMPL		corectl
152	UNIMPL		modctl
153	NOARGS		{ int netbsd32_fchroot(int fd); }
154	STD		{ int svr4_32_sys_utimes(const netbsd32_charp path, \
			    netbsd32_timevalp_t tptr); }
155	STD		{ int svr4_32_sys_vhangup(void); }
156	STD		{ int svr4_32_sys_gettimeofday(netbsd32_timevalp_t tp); }
157	NOARGS		{ int netbsd32_getitimer(int which, netbsd32_itimervalp_t itv); }
158	NOARGS		{ int netbsd32_setitimer(int which, \
			    const netbsd32_itimervalp_t itv, netbsd32_itimervalp_t oitv); }
159	STD		{ int svr4_32_sys__lwp_create(svr4_32_ucontext_tp uc, \
			    netbsd32_u_long flags, svr4_32_lwpid_tp lwpid); }
160	STD		{ int svr4_32_sys__lwp_exit(void); }
161	STD		{ int svr4_32_sys__lwp_suspend(svr4_lwpid_t lwpid); }
162	STD		{ int svr4_32_sys__lwp_continue(svr4_lwpid_t lwpid); }
163	STD		{ int svr4_32_sys__lwp_kill(svr4_lwpid_t lwpid, \
			    int signum); }
164	STD		{ svr4_lwpid_t svr4_sys__lwp_self(void); }
165	STD		{ netbsd32_voidp svr4_32_sys__lwp_getprivate(void); }
166	STD		{ int svr4_32_sys__lwp_setprivate(netbsd32_voidp buffer); }
167	STD		{ int svr4_32_sys__lwp_wait(svr4_lwpid_t wait_for, \
			    svr4_32_lwpid_tp departed_lwp); }
168	UNIMPL		lwp_mutex_wakeup
169	UNIMPL		lwp_mutex_lock
170	UNIMPL		lwp_cond_wait
171	UNIMPL		lwp_cond_signal
172	UNIMPL		lwp_cond_broadcast
173	STD		{ netbsd32_ssize_t svr4_32_sys_pread(int fd, netbsd32_voidp buf, \
			    netbsd32_size_t nbyte, svr4_32_off_t off); }
174	STD		{ netbsd32_ssize_t svr4_32_sys_pwrite(int fd, const netbsd32_voidp buf, \
			    netbsd32_size_t nbyte, svr4_32_off_t off); }
175	STD		{ svr4_32_off64_t svr4_32_sys_llseek(int fd, \
			    netbsd32_long offset1, netbsd32_long offset2, int whence); }
176	UNIMPL		inst_sync
177	UNIMPL		srmlimitsys
178	UNIMPL		kaio
179	UNIMPL		cpc
180	UNIMPL
181	UNIMPL
182	UNIMPL
183	UNIMPL
184	UNIMPL		tsolsys
185	STD		{ int svr4_32_sys_acl(netbsd32_charp path, int cmd, int num, \
			    svr4_32_aclent_tp buf); }
186	STD		{ int svr4_32_sys_auditsys(int code, int a1, int a2, \
			    int a3, int a4, int a5); }
187	UNIMPL		processor_bind
188	UNIMPL		processor_info
189	UNIMPL		p_online
190	UNIMPL		sigqueue
191	UNIMPL		clock_gettime
192	UNIMPL		clock_settime
193	UNIMPL		clock_getres
194	UNIMPL		timer_create
195	UNIMPL		timer_delete
196	UNIMPL		timer_settime
197	UNIMPL		timer_gettime
198	UNIMPL		timer_getoverrun
199	NOARGS		{ int netbsd32_nanosleep(const netbsd32_timespecp_t rqtp, \
			   netbsd32_timespecp_t rmtp); }
200	STD		{ int svr4_32_sys_facl(int fd, int cmd, int num, \
			    svr4_32_aclent_tp buf); }
201	UNIMPL		door
202	NOARGS		{ int netbsd32_setreuid(int ruid, int euid); }
203	NOARGS		{ int netbsd32_setregid(int rgid, int egid); }
204	UNIMPL		install_utrap
205	UNIMPL		signotify
206	UNIMPL		schedctl
207	UNIMPL		pset
208	UNIMPL		sparc_utrap_install
209	STD		{ int svr4_32_sys_resolvepath(const netbsd32_charp path, \
			    netbsd32_charp buf, netbsd32_size_t bufsiz); }
210	UNIMPL		signotifywait
211	UNIMPL		lwp_sigredirect
212	UNIMPL		lwp_alarm
213	STD		{ int svr4_32_sys_getdents64(int fd, \
			    svr4_32_dirent64_tp dp, \
			    int nbytes); }
214	STD		{ netbsd32_voidp svr4_32_sys_mmap64(netbsd32_voidp addr, \
			    svr4_32_size_t len, int prot, int flags, int fd, \
			    svr4_32_off64_t pos); }
215	STD		{ int svr4_32_sys_stat64(const netbsd32_charp path, \
			    svr4_32_stat64_tp sb); }
216	STD		{ int svr4_32_sys_lstat64(const netbsd32_charp path, \
			    svr4_32_stat64_tp sb); }
217	STD		{ int svr4_32_sys_fstat64(int fd, \
			    svr4_32_stat64_tp sb); }
218	STD		{ int svr4_32_sys_statvfs64(const netbsd32_charp path, \
			    svr4_32_statvfs64_tp fs); }
219	STD		{ int svr4_32_sys_fstatvfs64(int fd, \
			    svr4_32_statvfs64_tp fs); }
220	STD		{ int svr4_32_sys_setrlimit64(int which, \
			    const svr4_32_rlimit64_tp rlp); }
221	STD		{ int svr4_32_sys_getrlimit64(int which, \
			    svr4_32_rlimit64_tp rlp); }
222	STD		{ netbsd32_ssize_t svr4_32_sys_pread64(int fd, netbsd32_voidp buf, \
			    netbsd32_size_t nbyte, svr4_32_off64_t off); }
223	STD		{ netbsd32_ssize_t svr4_32_sys_pwrite64(int fd, \
			    const netbsd32_voidp buf, netbsd32_size_t nbyte, svr4_32_off64_t off); }
224	STD		{ int svr4_32_sys_creat64(netbsd32_charp path, int mode); }
225	STD		{ int svr4_32_sys_open64(netbsd32_charp path, int flags, \
			    int mode); }
226	UNIMPL		rpcsys
227	UNIMPL
228	UNIMPL
229	UNIMPL
230	STD		{ int svr4_32_sys_socket(int domain, int type, \
			    int protocol); }
231	NOARGS		{ int netbsd32_socketpair(int domain, int type, \
			    int protocol, netbsd32_intp rsv); }
232	NOARGS		{ int netbsd32_bind(int s, const netbsd32_sockaddrp_t name, \
			    int namelen); }
233	NOARGS		{ int netbsd32_listen(int s, int backlog); }
234	NOARGS		{ int compat_43_netbsd32_oaccept(int s, \
			    netbsd32_sockaddrp_t name, netbsd32_intp anamelen); }
235	NOARGS		{ int netbsd32_connect(int s, const netbsd32_sockaddrp_t name, \
			    int namelen); }
236	NOARGS		{ int netbsd32_shutdown(int s, int how); }
237	NOARGS		{ int compat_43_sys_recv(int s, netbsd32_caddr_t buf, int len, \
			    int flags); }
238	NOARGS		{ netbsd32_ssize_t compat_43_sys_recvfrom(int s, netbsd32_voidp buf, \
			    netbsd32_size_t len, int flags, netbsd32_sockaddrp_t from, \
			    netbsd32_intp fromlenaddr); }
239	NOARGS		{ netbsd32_ssize_t compat_43_sys_recvmsg(int s, \
			    netbsd32_msghdrp_t msg, int flags); }
240	NOARGS		{ int compat_43_sys_send(int s, netbsd32_caddr_t buf, int len, \
			    int flags); }
241	NOARGS		{ netbsd32_ssize_t compat_43_sys_sendmsg(int s, \
			    const netbsd32_msghdrp_t msg, int flags); }
242	NOARGS		{ netbsd32_ssize_t netbsd32_sendto(int s, const netbsd32_voidp buf, \
			    netbsd32_size_t len, int flags, const netbsd32_sockaddrp_t to, \
			    int tolen); }
243	NOARGS		{ int compat_43_sys_getpeername(int fdes, \
			    netbsd32_sockaddrp_t asa, netbsd32_intp alen); }
244	NOARGS		{ int compat_43_sys_getsockname(int fdes, \
			    netbsd32_sockaddrp_t asa, netbsd32_intp alen); }
245	NOARGS		{ int netbsd32_getsockopt(int s, int level, int name, \
			    netbsd32_voidp val, netbsd32_intp avalsize); }
246	NOARGS		{ int netbsd32_setsockopt(int s, int level, int name, \
			    const netbsd32_voidp val, int valsize); }
247	UNIMPL		sockconfig
; For some reason, ntp_gettime doesn't want to raise SIGSYS when it's excluded.
248	NOARGS		{ int netbsd32_ntp_gettime(netbsd32_ntptimevalp_t ntvp); }
#if defined(NTP) || !defined(_KERNEL)
249	NOARGS		{ int netbsd32_ntp_adjtime(netbsd32_timexp_t tp); }
#else
249	EXCL		ntp_adjtime
#endif
250	UNIMPL		lwp_mutex_unlock
251	UNIMPL		lwp_mutex_trylock
252	UNIMPL		lwp_mutex_init
253	UNIMPL		cladm
254	UNIMPL		lwp_sigtimedwait
255	UNIMPL		umount2

	$NetBSD: syscalls.master,v 1.38.4.1 2008/11/20 03:03:05 snj Exp $

; NetBSD i386 COMPAT_LINUX32 system call name/number "master" file.
; (See syscalls.conf to see what it is processed into.)
;
; Fields: number type [type-dependent ...]
;	number	system call number, must be in order
;	type	one of STD, OBSOL, UNIMPL, NODEF, NOARGS, or one of
;		the compatibility options defined in syscalls.conf.
;
; types:
;	STD	always included
;	OBSOL	obsolete, not included in system
;	UNIMPL	unimplemented, not included in system
;	NODEF	included, but don't define the syscall number
;
;	INDIR	included, but don't define the syscall args structure
;		and allow it to be "really" varargs.
;
; The compat options are defined in the syscalls.conf file, and the
; compat option name is prefixed to the syscall name.  Other than
; that, they're like NODEF (for 'compat' options), or STD (for
; 'libcompat' options).
;
; The type-dependent arguments are as follows:
; For STD, NODEF, NOARGS, and compat syscalls:
;	{ pseudo-proto } [alias]
; For other syscalls:
;	[comment]
;
; #ifdef's, etc. may be included, and are copied to the output files.
; #include's are copied to the syscall names and switch definition files only.

#if defined(_KERNEL_OPT)
#include "opt_compat_43.h"
#endif

#include <sys/param.h>
#include <sys/poll.h>
#include <sys/systm.h>
#include <sys/signal.h>
#include <sys/mount.h>
#include <sys/syscallargs.h>

#include <machine/netbsd32_machdep.h>

#include <compat/netbsd32/netbsd32.h>
#include <compat/netbsd32/netbsd32_syscallargs.h>

#include <compat/linux32/common/linux32_types.h>
#include <compat/linux32/common/linux32_signal.h>
#include <compat/linux32/arch/amd64/linux32_missing.h>
#include <compat/linux32/linux32_syscallargs.h>

#include <compat/linux/common/linux_types.h>
#include <compat/linux/common/linux_mmap.h>
#include <compat/linux/common/linux_signal.h>
#include <compat/linux/common/linux_siginfo.h>
#include <compat/linux/common/linux_machdep.h>

#include <compat/linux/linux_syscallargs.h>

%%

0	NOARGS	{ int linux_sys_nosys(void); } syscall
1	NOARGS	{ int netbsd32_exit(int rval); }
2	NOARGS	{ int sys_fork(void); }
3	NOARGS	{ netbsd32_ssize_t netbsd32_read(int fd, \
		    netbsd32_voidp buf, netbsd32_size_t nbyte); }
4	NOARGS	{ netbsd32_ssize_t netbsd32_write(int fd, \
		    netbsd32_voidp buf, netbsd32_size_t nbyte); }
5	STD	{ int linux32_sys_open(netbsd32_charp path, int flags, \
		    int mode); }
6	NOARGS	{ int netbsd32_close(int fd); }
7	STD	{ int linux32_sys_waitpid(int pid, netbsd32_intp status, \
		    int options);}
8	STD	{ int linux32_sys_creat(netbsd32_charp path, int mode); }
9	NOARGS	{ int netbsd32_link(netbsd32_charp path, \
		    netbsd32_charp link); }
10	STD	{ int linux32_sys_unlink(netbsd32_charp path); }
11	NOARGS	{ int netbsd32_execve(netbsd32_charp path, \
		    netbsd32_charpp argp, netbsd32_charpp envp); }
12	NOARGS	{ int netbsd32_chdir(netbsd32_charp path); }
13	STD	{ int linux32_sys_time(linux32_timep_t t); }
14	STD	{ int linux32_sys_mknod(netbsd32_charp path, \
		    int mode, int dev); }
15	NOARGS	{ int netbsd32_chmod(netbsd32_charp path, int mode); }
16	STD	{ int linux32_sys_lchown16(netbsd32_charp path, \
		    linux32_uid16_t uid, linux32_gid16_t gid); }
17	STD	{ int linux32_sys_break(netbsd32_charp nsize); }
18	OBSOL	ostat
19	NOARGS	{ netbsd32_long compat_43_netbsd32_olseek(int fd, \
		    netbsd32_long offset, int chence); }
20	STD	{ pid_t linux_sys_getpid(void); }
21	UNIMPL	mount
22	UNIMPL	umount
23	NOARGS	linux_setuid16 { int netbsd32_setuid(uid_t uid); }
24	NOARGS	linux_getuid16 { uid_t sys_getuid(void); }
25	STD	{ int linux32_sys_stime(linux32_timep_t t); }
26	STD	{ int linux32_sys_ptrace(int request, int pid, \
		  int addr, int data); }
27	STD	{ int linux32_sys_alarm(unsigned int secs); }
28	OBSOL	ofstat
29	NOARGS	{ int linux_sys_pause(void); }
30	STD	{ int linux32_sys_utime(netbsd32_charp path, \
		    linux32_utimbufp_t times); }
31	OBSOL	stty
32	OBSOL	gtty
33	NOARGS	{ int netbsd32_access(netbsd32_charp path, \
		    int flags); }
34	STD	{ int linux32_sys_nice(int incr); }
35	OBSOL	ftime
36	NOARGS	{ int sys_sync(void); }
37	STD	{ int linux32_sys_kill(int pid, int signum); }
38	NOARGS	{ int netbsd32___posix_rename(netbsd32_charp from, \
		    netbsd32_charp to); }
39	NOARGS	{ int netbsd32_mkdir(netbsd32_charp path, int mode); }
40	NOARGS	{ int netbsd32_rmdir(netbsd32_charp path); }
41	NOARGS	{ int netbsd32_dup(u_int fd); }
42	STD	{ int linux32_sys_pipe(netbsd32_intp fd); }
43	STD	{ int linux32_sys_times(linux32_tmsp_t tms); }
44	OBSOL	prof
45	STD	{ int linux32_sys_brk(netbsd32_charp nsize); }
46	NOARGS	linux_setgid16 { int netbsd32_setgid(gid_t gid); }
47	NOARGS	linux_getgid16 { gid_t sys_getgid(void); }
48	STD	{ int linux32_sys_signal(int signum, \
		    linux32_handler_t handler); }
49	NOARGS	linux_geteuid16 { uid_t sys_geteuid(void); }
50	NOARGS	linux_getegid16 { gid_t sys_getegid(void); }
51	NOARGS	{ int netbsd32_acct(netbsd32_charp path); }
52	OBSOL	phys
53	OBSOL	lock
54	STD	{ int linux32_sys_ioctl(int fd, netbsd32_u_long com, \
		    netbsd32_charp data); }
55	STD	{ int linux32_sys_fcntl(int fd, \
		    int cmd, netbsd32_voidp arg); }
56	OBSOL	mpx
57	NOARGS	{ int netbsd32_setpgid(int pid, int pgid); }
58	OBSOL	ulimit
59	STD	{ int linux32_sys_oldolduname( \
		    linux32_oldold_utsnamep_t up); }
60	NOARGS	{ int netbsd32_umask(int newmask); }
61	NOARGS	{ int netbsd32_chroot(netbsd32_charp path); }
62	UNIMPL	ustat
63	NOARGS	{ int netbsd32_dup2(int from, int to); }
64	STD	{ pid_t linux_sys_getppid(void); }
65	NOARGS	{ int sys_getpgrp(void); }
66	NOARGS	{ int sys_setsid(void); }
67	UNIMPL	sigaction
68	UNIMPL	siggetmask
69	UNIMPL	sigsetmask
70	STD	{ int linux32_sys_setreuid16(linux32_uid16_t ruid, \
		    linux32_uid16_t euid); }
71	STD	{ int linux32_sys_setregid16(linux32_gid16_t rgid, \
		    linux32_gid16_t egid); }
72	UNIMPL	sigsuspend
73	UNIMPL	sigpending
74	NOARGS	{ int compat_43_netbsd32_osethostname(netbsd32_charp hostname, \
		    u_int len); }
75	STD	{ int linux32_sys_setrlimit(u_int which, \
		    netbsd32_orlimitp_t rlp); }
76	STD	{ int linux32_sys_getrlimit(u_int which, \
		    netbsd32_orlimitp_t rlp); }
77	NOARGS	{ int netbsd32_getrusage(int who, \
		    netbsd32_rusagep_t rusage); }
78	STD	{ int linux32_sys_gettimeofday(netbsd32_timevalp_t tp, \
		    netbsd32_timezonep_t tzp); }
79	STD	{ int linux32_sys_settimeofday(netbsd32_timevalp_t tp, \
		    netbsd32_timezonep_t tzp); }
80	STD	{ int linux32_sys_getgroups16(int gidsetsize, \
		    linux32_gid16p_t gidset); }
81	STD	{ int linux32_sys_setgroups16(int gidsetsize, \
		    linux32_gid16p_t gidset); }
82	STD	{ int linux32_sys_oldselect(linux32_oldselectp_t lsp); }
83	NOARGS	{ int netbsd32_symlink(netbsd32_charp path, \
		    netbsd32_charp link); }
84	NOARGS	{ int compat_43_netbsd32_lstat43(netbsd32_charp \
		    path, netbsd32_stat43p_t ub); }
85	NOARGS	{ int netbsd32_readlink(netbsd32_charp name, \
		    netbsd32_charp buf, netbsd32_size_t count); }
86	UNIMPL	uselib
87	STD	{ int linux32_sys_swapon(netbsd32_charp name); }
88	STD	{ int linux32_sys_reboot(int magic1, int magic2, int cmd, \
		    netbsd32_voidp arg); }
89	STD	{ int linux32_sys_readdir(int fd, netbsd32_voidp dent, \
		    unsigned int count); }
90	STD	{ int linux32_sys_old_mmap(linux32_oldmmapp lmp); }
91	NOARGS	{ int netbsd32_munmap(netbsd32_voidp addr, \
		    netbsd32_size_t len); }
92	NOARGS	{ int compat_43_netbsd32_otruncate(netbsd32_charp path, \
		    netbsd32_long length); }
93	NOARGS	{ int compat_43_netbsd32_oftruncate(int fd, \
		    netbsd32_long length); }
94	NOARGS	{ int netbsd32_fchmod(int fd, int mode); }
95	STD	{ int linux32_sys_fchown16(int fd, linux32_uid16_t uid, \
		    linux32_gid16_t gid); }
96	STD	{ int linux32_sys_getpriority(int which, int who); }
97	NOARGS	{ int netbsd32_setpriority(int which, int who, int prio); }
98	UNIMPL	profil
99	STD	{ int linux32_sys_statfs(netbsd32_charp path, \
		    linux32_statfsp sp); }
100	UNIMPL	fstatfs
101	UNIMPL	ioperm
102	STD	{ int linux32_sys_socketcall(int what, netbsd32_voidp args); }
103	UNIMPL	syslog
104	NOARGS	{ int netbsd32_setitimer(int which, \
		    netbsd32_itimervalp_t itv, netbsd32_itimervalp_t oitv); }
105	NOARGS	{ int netbsd32_getitimer(int which, \
		    netbsd32_itimervalp_t itv); }
106	UNIMPL	stat
107	UNIMPL	lstat
108	UNIMPL	fstat
109	STD	{ int linux32_sys_olduname(linux32_oldutsnamep_t up); }
110	UNIMPL	iopl
111	UNIMPL	vhangup
112	UNIMPL	idle
113	UNIMPL	vm86old
114	STD	{ int linux32_sys_wait4(int pid, netbsd32_intp status, \
		    int options, netbsd32_rusagep_t rusage); }
115	STD	{ int linux32_sys_swapoff(netbsd32_charp path); }
116	STD	{ int linux32_sys_sysinfo(linux32_sysinfop_t arg); }
117	STD	{ int linux32_sys_ipc(int what, int a1, int a2, int a3, \
		    netbsd32_voidp ptr); }
118	NOARGS	{ int netbsd32_fsync(int fd); }
119	STD	{ int linux32_sys_sigreturn(linux32_sigcontextp_t scp); }
120	STD	{ int linux32_sys_clone(int flags, netbsd32_voidp stack); }
121	UNIMPL	setdomainname
122	STD	{ int linux32_sys_uname(linux32_utsnamep up); }
123	UNIMPL	modify_ldt
124	UNIMPL	adjtimex
125	STD	{ int linux32_sys_mprotect(netbsd32_voidp start, \
		    netbsd32_size_t len, int prot); } 
126	UNIMPL	sigprocmask
127	UNIMPL	create_module
128	UNIMPL	init_module
129	UNIMPL	delete_module
130	UNIMPL	get_kernel_syms
131	UNIMPL	quotactl
132	NOARGS	{ int netbsd32_getpgid(pid_t pid); }
133	NOARGS	{ int netbsd32_fchdir(int fd); }
134	UNIMPL	bdflush
135	UNIMPL	sysfs
136	UNIMPL	personality
137	UNIMPL	afs_syscall
138	NOARGS	setfsuid16 { int linux32_sys_setfsuid(uid_t uid); }
139	NOARGS	setfsgid16 { int linux32_sys_setfsgid(gid_t gid); }
140	STD	{ int linux32_sys_llseek(int fd, u_int32_t ohigh, \
		    u_int32_t olow, netbsd32_caddr_t res, int whence); }
141	STD	{ int linux32_sys_getdents(int fd, \
		    linux32_direntp_t dent, unsigned int count); }
142	STD	{ int linux32_sys_select(int nfds, \
		    netbsd32_fd_setp_t readfds, \
		    netbsd32_fd_setp_t writefds, \
		    netbsd32_fd_setp_t exceptfds, \
		    netbsd32_timevalp_t timeout); }
143	NOARGS	{ int netbsd32_flock(int fd, int how); } 
144	NOARGS	{ int netbsd32___msync13(netbsd32_voidp addr, \
		    netbsd32_size_t len, int flags); }
145	NOARGS	{ int netbsd32_readv(int fd, \
		    netbsd32_iovecp_t iovp, int iovcnt); }
146	NOARGS	{ netbsd32_ssize_t netbsd32_writev(int fd, \
		    netbsd32_iovecp_t iovp, int iovcnt); }
147	NOARGS	{ pid_t netbsd32_getsid(pid_t pid); }
148	STD	{ int linux32_sys_fdatasync(int fd); }
149	STD	{ int linux32_sys___sysctl(linux32___sysctlp_t lsp); }
150	NOARGS	{ int netbsd32_mlock(netbsd32_voidp addr, \
		    netbsd32_size_t len); }
151	NOARGS	{ int netbsd32_munlock(netbsd32_voidp addr, \
		    netbsd32_size_t len); }
152	NOARGS	{ int netbsd32_mlockall(int flags); }
153	NOARGS	{ int sys_munlockall(void); }
154	UNIMPL	sched_setparam
155	STD	{ int linux32_sys_sched_getparam(pid_t pid, \
		    linux32_sched_paramp_t sp); }
156	STD	{ int linux32_sys_sched_setscheduler(pid_t pid, \
		    int policy, linux32_sched_paramp_t sp); }
157	STD	{ int linux32_sys_sched_getscheduler(pid_t pid); }
158	NOARGS	{ int linux_sys_sched_yield(void); }
159	UNIMPL	sched_get_priority_max
160	UNIMPL	sched_get_priority_min
161	UNIMPL	sched_rr_get_interval
162	STD	{ int linux32_sys_nanosleep(linux32_timespecp_t rqtp, \
		    linux32_timespecp_t rmtp); }
163	STD	{ int linux32_sys_mremap(netbsd32_voidp old_address, \
		    netbsd32_size_t old_size, netbsd32_size_t new_size, \
		    netbsd32_u_long flags); }
164	STD	{ int linux32_sys_setresuid16(linux32_uid16_t ruid, \
		    linux32_uid16_t euid, linux32_uid16_t suid); }
165	STD	{ int linux32_sys_getresuid16(linux32_uid16p_t ruid, \
		    linux32_uid16p_t euid, linux32_uid16p_t suid); }
166	UNIMPL	vm86
167	UNIMPL	query_module
168	NOARGS	{ int netbsd32_poll(netbsd32_pollfdp_t fds, u_int nfds, \
		    int timeout); }
169	UNIMPL	nfsservctl
170	STD	{ int linux32_sys_setresgid16(linux32_gid16_t rgid, \
		    linux32_gid16_t egid, linux32_gid16_t sgid); }
171	STD	{ int linux32_sys_getresgid16(linux32_gid16p_t rgid, \
		    linux32_gid16p_t egid, linux32_gid16p_t sgid); }
172	UNIMPL	prctl
173	STD	{ int linux32_sys_rt_sigreturn(linux32_ucontextp_t ucp); }
174	STD	{ int linux32_sys_rt_sigaction(int signum, \
		    linux32_sigactionp_t nsa, \
		    linux32_sigactionp_t osa, \
		    netbsd32_size_t sigsetsize); }
175	STD	{ int linux32_sys_rt_sigprocmask(int how, \
		     linux32_sigsetp_t set, \
		     linux32_sigsetp_t oset, \
		     netbsd32_size_t sigsetsize); }
176	STD	{ int linux32_sys_rt_sigpending(linux32_sigsetp_t set, \
		    netbsd32_size_t sigsetsize); }
177	UNIMPL	rt_sigtimedwait
178	UNIMPL	rt_queueinfo
179	STD	{ int linux32_sys_rt_sigsuspend(linux32_sigsetp_t unewset, \
		    netbsd32_size_t sigsetsize); }
180	STD	{ netbsd32_ssize_t linux32_sys_pread(int fd, \
		    netbsd32_voidp buf, netbsd32_size_t nbyte, \
		    linux32_off_t offset); }
181	STD	{ netbsd32_ssize_t linux32_sys_pwrite(int fd, \
		    netbsd32_voidp buf, netbsd32_size_t nbyte, \
		    linux32_off_t offset); }
182	STD	{ int linux32_sys_chown16(netbsd32_charp path, \
		    linux32_uid16_t uid, linux32_gid16_t gid); }
183	NOARGS	{ int netbsd32___getcwd(netbsd32_charp bufp, \
		    netbsd32_size_t length); } 
184	UNIMPL	capget
185	UNIMPL	capset
186	UNIMPL	sigaltstack
187	UNIMPL	sendfile
188	UNIMPL	getpmsg
189	UNIMPL	putpmsg
190	NOARGS	{ int sys___vfork14(void); }
191	STD	{ int linux32_sys_ugetrlimit(int which, \
		    netbsd32_orlimitp_t rlp); }
192	STD	{ linux32_off_t linux32_sys_mmap2(netbsd32_u_long addr, \
		    netbsd32_size_t len, int prot, int flags, int fd, \
		    linux32_off_t offset); }
193	UNIMPL	truncate64
194	UNIMPL	ftruncate64
195	STD	{ int linux32_sys_stat64(netbsd32_charp path, \
		    linux32_stat64p sp); }
196	STD	{ int linux32_sys_lstat64(netbsd32_charp path, \
		    linux32_stat64p sp); }
197	STD	{ int linux32_sys_fstat64(int fd, \
		    linux32_stat64p sp); }
198	NOARGS	{ int netbsd32___posix_lchown(netbsd32_charp path, \
		    uid_t uid, gid_t gid); }
199	NOARGS	{ uid_t sys_getuid(void); }
200	NOARGS	{ gid_t sys_getgid(void); }
201	NOARGS	{ uid_t sys_geteuid(void); }
202	NOARGS	{ gid_t sys_getegid(void); }
203	NOARGS	{ int netbsd32_setreuid(uid_t ruid, uid_t euid); }
204	NOARGS	{ int netbsd32_setregid(gid_t rgid, gid_t egid); }
205	NOARGS	{ int netbsd32_getgroups(int gidsetsize, \
		    netbsd32_gid_tp gidset); }
206	NOARGS	{ int netbsd32_setgroups(int gidsetsize, \
		    netbsd32_gid_tp gidset); }
207	NOARGS	{ int netbsd32___posix_fchown(int fd, uid_t uid, gid_t gid); }
208	STD	{ int linux32_sys_setresuid(uid_t ruid, uid_t euid, \
		    uid_t suid); }
209	UNIMPL	getresuid
210	STD	{ int linux32_sys_setresgid(gid_t rgid, gid_t egid, \
		    gid_t sgid); }
211	UNIMPL	getresgid
212	NOARGS	{ int netbsd32___posix_chown(netbsd32_charp path, \
		    uid_t uid, gid_t gid); }
213 	NOARGS	{ int netbsd32_setuid(uid_t uid); }
214	NOARGS	{ int netbsd32_setgid(gid_t gid); }
215	STD	{ int linux32_sys_setfsuid(uid_t uid); }
216	STD	{ int linux32_sys_setfsgid(gid_t gid); }
217	UNIMPL	pivot_root
218	UNIMPL	mincore
219	NOARGS	{ int netbsd32_madvise(netbsd32_voidp addr, \
		    netbsd32_size_t len, int behav); }
220	STD	{ int linux32_sys_getdents64(int fd, \
		    linux32_dirent64p_t dent, unsigned int count); }
; fcntl64() - Exactly the same as fcntl()
#define linux32_sys_fcntl64 linux32_sys_fcntl
#define linux32_sys_fcntl64_args linux32_sys_fcntl_args
221	NOARGS	{ int linux32_sys_fcntl64(int fd, \
		    int cmd, netbsd32_voidp arg); }
222	UNIMPL	/*	unused	*/
223	UNIMPL	/*	unused	*/
224	STD	{ pid_t linux_sys_gettid(void); }
225	UNIMPL	readahead
226	UNIMPL	setxattr
227	UNIMPL	lsetxattr
228	UNIMPL	fsetxattr
229	UNIMPL	getxattr
230	UNIMPL	lgetxattr
231	UNIMPL	fgetxattr
232	UNIMPL	listxattr
233	UNIMPL	llistxattr
234	UNIMPL	flistxattr
235	UNIMPL	removexattr
236	UNIMPL	lremovexattr
237	UNIMPL	fremovexattr
238	UNIMPL	tkill
239	UNIMPL	sendfile64
240	UNIMPL	futex
241	UNIMPL	sched_setaffinity
242	UNIMPL	sched_getaffinity
243	UNIMPL	set_thread_area
244	UNIMPL	get_thread_area
245	UNIMPL	io_setup
246	UNIMPL	io_destroy
247	UNIMPL	io_getevents
248	UNIMPL	io_submit
249	UNIMPL	io_cancel
250	UNIMPL	fadvise64
251	UNIMPL	/*	unused	*/
252	STD	{ int linux32_sys_exit_group(int error_code); }
253	UNIMPL	lookup_dcookie
254	UNIMPL	epoll_create
255	UNIMPL	epoll_ctl
256	UNIMPL	epoll_wait
257	UNIMPL	remap_file_pages
258	UNIMPL	set_tid_address
259	UNIMPL	timer_create
260	UNIMPL	timer_settime
261	UNIMPL	timer_gettime
262	UNIMPL	timer_getoverrun
263	UNIMPL	timer_delete
264	STD	{ int linux32_sys_clock_settime(clockid_t which, \
		    linux32_timespecp_t tp); }
265	STD	{ int linux32_sys_clock_gettime(clockid_t which, \
		    linux32_timespecp_t tp); }
266	STD	{ int linux32_sys_clock_getres(clockid_t which, \
		    linux32_timespecp_t tp); }
267	UNIMPL	clock_nanosleep
268	UNIMPL	statfs64
269	UNIMPL	fstatfs64
270	UNIMPL	tgkill
271	UNIMPL	utimes
272	UNIMPL	fadvise64_64
273	UNIMPL	vserver
274	UNIMPL	mbind
275	UNIMPL	get_mempolicy
276	UNIMPL	set_mempolicy
277	UNIMPL	mq_open
278	UNIMPL	mq_unlink
279	UNIMPL	mq_timedsend
280	UNIMPL	mq_timedreceive
281	UNIMPL	mq_notify
282	UNIMPL	mq_getsetattr
283	UNIMPL	kexec_load

	$NetBSD: syscalls.master,v 1.15.2.1 2002/06/23 17:43:40 jdolecek Exp $

;	@(#)syscalls.master	8.2 (Berkeley) 1/13/94

; NetBSD system call name/number "master" file.
; (See syscalls.conf to see what it is processed into.)
;
; Fields: number type [type-dependent ...]
;	number	system call number, must be in order
;	type	one of STD, OBSOL, UNIMPL, NODEF, NOARGS, or one of
;		the compatibility options defined in syscalls.conf.
;
; types:
;	STD	always included
;	OBSOL	obsolete, not included in system
;	UNIMPL	unimplemented, not included in system
;	EXCL	implemented, but not included in system
;	NODEF	included, but don't define the syscall number
;	NOARGS	included, but don't define the syscall args structure
;	INDIR	included, but don't define the syscall args structure,
;		and allow it to be "really" varargs.
;
; The compat options are defined in the syscalls.conf file, and the
; compat option name is prefixed to the syscall name.  Other than
; that, they're like NODEF (for 'compat' options), or STD (for
; 'libcompat' options).
;
; The type-dependent arguments are as follows:
; For STD, NODEF, NOARGS, and compat syscalls:
;	{ pseudo-proto } [alias]
; For other syscalls:
;	[comment]
;
; #ifdef's, etc. may be included, and are copied to the output files.
; #include's are copied to the syscall names and switch definition files only.

#if defined(_KERNEL_OPT)
#include "opt_ktrace.h"
#include "opt_nfsserver.h"
#include "opt_ntp.h"
#include "opt_compat_netbsd.h"
#include "opt_sysv.h"
#include "opt_compat_43.h"

#include "fs_lfs.h"
#include "fs_nfs.h"
#endif

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/signal.h>
#include <sys/mount.h>
#include <sys/syscallargs.h>
#include <compat/aout/aout_syscallargs.h>

%%

; Reserved/unimplemented system calls in the range 0-150 inclusive
; are reserved for use in future Berkeley releases.
; Additional system calls implemented in vendor and other
; redistributions should be placed in the reserved range at the end
; of the current calls.

0	INDIR		{ int sys_syscall(int number, ...); }
1	NOARGS		{ void sys_exit(int rval); }
2	NOARGS		{ int sys_fork(void); }
3	NOARGS		{ ssize_t sys_read(int fd, void *buf, size_t nbyte); }
4	NOARGS		{ ssize_t sys_write(int fd, const void *buf, \
			    size_t nbyte); }
5	STD		{ int aout_sys_open(const char *path, \
			    int flags, ... mode_t mode); }
6	NOARGS		{ int sys_close(int fd); }
7	NOARGS		{ int sys_wait4(int pid, int *status, int options, \
			    struct rusage *rusage); }
8	NOARGS		{ int compat_43_sys_creat(const char *path, mode_t mode); } \
			    ocreat
9	STD		{ int aout_sys_link(const char *path, \
			    const char *link); }
10	STD		{ int aout_sys_unlink(const char *path); }
11	OBSOL		execv
12	STD		{ int aout_sys_chdir(const char *path); }
13	NOARGS		{ int sys_fchdir(int fd); }
14	NOARGS		{ int sys_mknod(const char *path, mode_t mode, \
			    dev_t dev); }
15	STD		{ int aout_sys_chmod(const char *path, mode_t mode); }
16	STD		{ int aout_sys_chown(const char *path, uid_t uid, \
			    gid_t gid); }
17	NOARGS		{ int sys_obreak(char *nsize); } break
18	NOARGS		{ int sys_getfsstat(struct statfs *buf, long bufsize, \
			    int flags); }
19	NOARGS		{ long compat_43_sys_lseek(int fd, long offset, \
			    int whence); } olseek
20	NOARGS MPSAFE	{ pid_t sys_getpid(void); }
21	NOARGS		{ int sys_mount(const char *type, \
			    const char *path, int flags, void *data); }
22	STD		{ int aout_sys_unmount(const char *path, int flags); }
23	NOARGS		{ int sys_setuid(uid_t uid); }
24	NOARGS		{ uid_t sys_getuid(void); }
25	NOARGS		{ uid_t sys_geteuid(void); }
26	NOARGS		{ int sys_ptrace(int req, pid_t pid, caddr_t addr, \
			    int data); }
27	NOARGS		{ ssize_t sys_recvmsg(int s, struct msghdr *msg, \
			    int flags); }
28	NOARGS		{ ssize_t sys_sendmsg(int s, \
			    const struct msghdr *msg, int flags); }
29	NOARGS		{ ssize_t sys_recvfrom(int s, void *buf, size_t len, \
			    int flags, struct sockaddr *from, \
			    int *fromlenaddr); }
30	NOARGS		{ int sys_accept(int s, struct sockaddr *name, \
			    int *anamelen); }
31	NOARGS		{ int sys_getpeername(int fdes, struct sockaddr *asa, \
			    int *alen); }
32	NOARGS		{ int sys_getsockname(int fdes, struct sockaddr *asa, \
			    int *alen); }
33	STD		{ int aout_sys_access(const char *path, int flags); }
34	STD		{ int aout_sys_chflags(const char *path, \
			    u_long flags); }
35	NOARGS		{ int sys_fchflags(int fd, u_long flags); }
36	NOARGS		{ void sys_sync(void); }
37	NOARGS		{ int sys_kill(int pid, int signum); }
38	STD		{ int aout_compat_43_sys_stat(const char *path, \
			    struct stat43 *ub); } stat43
39	NOARGS		{ pid_t sys_getppid(void); }
40	STD		{ int aout_compat_43_sys_lstat(const char *path, \
			    struct stat43 *ub); } lstat43
41	NOARGS		{ int sys_dup(int fd); }
42	NOARGS		{ int sys_pipe(void); }
43	NOARGS		{ gid_t sys_getegid(void); }
44	NOARGS		{ int sys_profil(caddr_t samples, size_t size, \
			    u_long offset, u_int scale); }
#if defined(KTRACE) || !defined(_KERNEL)
45	NOARGS		{ int sys_ktrace(const char *fname, int ops, \
			    int facs, int pid); }
#else
45	EXCL		ktrace
#endif
46	NOARGS		{ int compat_13_sys_sigaction(int signum, \
			    const struct sigaction13 *nsa, \
			    struct sigaction13 *osa); } sigaction13
47	NOARGS		{ gid_t sys_getgid(void); }
48	NOARGS		{ int compat_13_sys_sigprocmask(int how, \
			    int mask); } sigprocmask13
49	NOARGS		{ int sys___getlogin(char *namebuf, size_t namelen); }
50	NOARGS		{ int sys_setlogin(const char *namebuf); }
51	NOARGS		{ int sys_acct(const char *path); }
52	NOARGS		{ int compat_13_sys_sigpending(void); } sigpending13
53	NOARGS		{ int compat_13_sys_sigaltstack( \
			    const struct sigaltstack13 *nss, \
			    struct sigaltstack13 *oss); } sigaltstack13
54	NOARGS		{ int sys_ioctl(int fd, \
			    u_long com, ... void *data); }
55	NOARGS		{ int compat_12_sys_reboot(int opt); } oreboot
56	STD		{ int aout_sys_revoke(const char *path); }
57	STD		{ int aout_sys_symlink(const char *path, \
			    const char *link); }
58	STD		{ int aout_sys_readlink(const char *path, char *buf, \
			    size_t count); }
59	STD		{ int aout_sys_execve(const char *path, \
			    char * const *argp, char * const *envp); }
60	NOARGS		{ mode_t sys_umask(mode_t newmask); }
61	STD		{ int aout_sys_chroot(const char *path); }
62	NOARGS		{ int compat_43_sys_fstat(int fd, \
			    struct stat43 *sb); } fstat43
63	NOARGS		{ int compat_43_sys_getkerninfo(int op, char *where, \
			    int *size, int arg); } ogetkerninfo
64	NOARGS		{ int compat_43_sys_getpagesize(void); } ogetpagesize
65	NOARGS		{ int compat_12_sys_msync(caddr_t addr, size_t len); }
; XXX COMPAT_??? for 4.4BSD-compatible vfork(2)?
66	NOARGS		{ int sys_vfork(void); }
67	OBSOL		vread
68	OBSOL		vwrite
69	NOARGS		{ int sys_sbrk(intptr_t incr); }
70	NOARGS		{ int sys_sstk(int incr); }
71	NOARGS		{ int compat_43_sys_mmap(caddr_t addr, size_t len, \
			    int prot, int flags, int fd, long pos); } ommap
72	NOARGS		{ int sys_ovadvise(int anom); } vadvise
73	NOARGS		{ int sys_munmap(void *addr, size_t len); }
74	NOARGS		{ int sys_mprotect(void *addr, size_t len, \
			    int prot); }
75	NOARGS		{ int sys_madvise(void *addr, size_t len, \
			    int behav); }
76	OBSOL		vhangup
77	OBSOL		vlimit
78	NOARGS		{ int sys_mincore(caddr_t addr, size_t len, \
			    char *vec); }
79	NOARGS		{ int sys_getgroups(int gidsetsize, \
			    gid_t *gidset); }
80	NOARGS		{ int sys_setgroups(int gidsetsize, \
			    const gid_t *gidset); }
81	NOARGS		{ int sys_getpgrp(void); }
82	NOARGS		{ int sys_setpgid(int pid, int pgid); }
83	NOARGS		{ int sys_setitimer(int which, \
			    const struct itimerval *itv, \
			    struct itimerval *oitv); }
84	NOARGS		{ int compat_43_sys_wait(void); } owait
85	NOARGS		{ int compat_12_sys_swapon(const char *name); } oswapon
86	NOARGS		{ int sys_getitimer(int which, \
			    struct itimerval *itv); }
87	NOARGS		{ int compat_43_sys_gethostname(char *hostname, \
			    u_int len); } ogethostname
88	NOARGS		{ int compat_43_sys_sethostname(char *hostname, \
			    u_int len); } osethostname
89	NOARGS		{ int compat_43_sys_getdtablesize(void); } \
			    ogetdtablesize
90	NOARGS		{ int sys_dup2(int from, int to); }
91	UNIMPL		getdopt
92	NOARGS		{ int sys_fcntl(int fd, int cmd, ... void *arg); }
93	NOARGS		{ int sys_select(int nd, fd_set *in, fd_set *ou, \
			    fd_set *ex, struct timeval *tv); }
94	UNIMPL		setdopt
95	NOARGS		{ int sys_fsync(int fd); }
96	NOARGS		{ int sys_setpriority(int which, int who, int prio); }
97	NOARGS		{ int sys_socket(int domain, int type, int protocol); }
98	NOARGS		{ int sys_connect(int s, const struct sockaddr *name, \
			    int namelen); }
99	NOARGS		{ int compat_43_sys_accept(int s, caddr_t name, \
			    int *anamelen); } oaccept
100	NOARGS		{ int sys_getpriority(int which, int who); }
101	NOARGS		{ int compat_43_sys_send(int s, caddr_t buf, int len, \
			    int flags); } osend
102	NOARGS		{ int compat_43_sys_recv(int s, caddr_t buf, int len, \
			    int flags); } orecv
103	NOARGS		{ int compat_13_sys_sigreturn( \
			    struct sigcontext13 *sigcntxp); } sigreturn13
104	NOARGS		{ int sys_bind(int s, const struct sockaddr *name, \
			    int namelen); }
105	NOARGS		{ int sys_setsockopt(int s, int level, int name, \
			    const void *val, int valsize); }
106	NOARGS		{ int sys_listen(int s, int backlog); }
107	OBSOL		vtimes
108	NOARGS		{ int compat_43_sys_sigvec(int signum, \
			    struct sigvec *nsv, struct sigvec *osv); } osigvec
109	NOARGS		{ int compat_43_sys_sigblock(int mask); } osigblock
110	NOARGS		{ int compat_43_sys_sigsetmask(int mask); } osigsetmask
111	NOARGS		{ int compat_13_sys_sigsuspend(int mask); } sigsuspend13
112	NOARGS		{ int compat_43_sys_sigstack(struct sigstack *nss, \
			    struct sigstack *oss); } osigstack
113	NOARGS		{ int compat_43_sys_recvmsg(int s, \
			    struct omsghdr *msg, int flags); } orecvmsg
114	NOARGS		{ int compat_43_sys_sendmsg(int s, caddr_t msg, \
			    int flags); } osendmsg
115	OBSOL		vtrace
116	NOARGS		{ int sys_gettimeofday(struct timeval *tp, \
			    struct timezone *tzp); }
117	NOARGS		{ int sys_getrusage(int who, struct rusage *rusage); }
118	NOARGS		{ int sys_getsockopt(int s, int level, int name, \
			    void *val, int *avalsize); }
119	OBSOL		resuba
120	NOARGS		{ ssize_t sys_readv(int fd, \
			    const struct iovec *iovp, int iovcnt); }
121	NOARGS		{ ssize_t sys_writev(int fd, \
			    const struct iovec *iovp, int iovcnt); }
122	NOARGS		{ int sys_settimeofday(const struct timeval *tv, \
			    const struct timezone *tzp); }
123	NOARGS		{ int sys_fchown(int fd, uid_t uid, gid_t gid); }
124	NOARGS		{ int sys_fchmod(int fd, mode_t mode); }
125	NOARGS		{ int compat_43_sys_recvfrom(int s, caddr_t buf, \
			    size_t len, int flags, caddr_t from, \
			    int *fromlenaddr); } orecvfrom
126	NOARGS		{ int sys_setreuid(uid_t ruid, uid_t euid); }
127	NOARGS		{ int sys_setregid(gid_t rgid, gid_t egid); }
128	STD		{ int aout_sys_rename(const char *from, \
			    const char *to); }
129	STD		{ int aout_compat_43_sys_truncate(const char *path, \
			    long length); } otruncate
130	NOARGS		{ int compat_43_sys_ftruncate(int fd, long length); } \
			    oftruncate
131	NOARGS		{ int sys_flock(int fd, int how); }
132	NOARGS		{ int sys_mkfifo(const char *path, mode_t mode); }
133	NOARGS		{ ssize_t sys_sendto(int s, const void *buf, \
			    size_t len, int flags, const struct sockaddr *to, \
			    int tolen); }
134	NOARGS		{ int sys_shutdown(int s, int how); }
135	NOARGS		{ int sys_socketpair(int domain, int type, \
			    int protocol, int *rsv); }
136	NOARGS		{ int sys_mkdir(const char *path, mode_t mode); }
137	STD		{ int aout_sys_rmdir(const char *path); }
138	STD		{ int aout_sys_utimes(const char *path, \
			    const struct timeval *tptr); }
139	OBSOL		4.2 sigreturn
140	NOARGS		{ int sys_adjtime(const struct timeval *delta, \
			    struct timeval *olddelta); }
141	NOARGS		{ int compat_43_sys_getpeername(int fdes, caddr_t asa, \
			    int *alen); } ogetpeername
142	NOARGS		{ int32_t compat_43_sys_gethostid(void); } ogethostid
143	NOARGS		{ int compat_43_sys_sethostid(int32_t hostid); } \
			    osethostid
144	NOARGS		{ int compat_43_sys_getrlimit(int which, \
			    struct orlimit *rlp); } ogetrlimit
145	NOARGS		{ int compat_43_sys_setrlimit(int which, \
			    const struct orlimit *rlp); } osetrlimit
146	NOARGS		{ int compat_43_sys_killpg(int pgid, int signum); } \
			    okillpg
147	NOARGS		{ int sys_setsid(void); }
148	NOARGS		{ int sys_quotactl(const char *path, \
			    int cmd, int uid, caddr_t arg); }
149	NOARGS		{ int compat_43_sys_quota(void); } oquota
150	NOARGS		{ int compat_43_sys_getsockname(int fdec, caddr_t asa, \
			    int *alen); } ogetsockname
; Syscalls 151-180 inclusive are reserved for vendor-specific
; system calls.  (This includes various calls added for compatibity
; with other Unix variants.)
; Some of these calls are now supported by BSD...
151	UNIMPL
152	UNIMPL
153	UNIMPL
154	UNIMPL
#if defined(NFS) || defined(NFSSERVER) || !defined(_KERNEL)
155	NOARGS		{ int sys_nfssvc(int flag, void *argp); }
#else
155	EXCL		nfssvc
#endif
156	NOARGS		{ int compat_43_sys_getdirentries(int fd, char *buf, \
			    u_int count, long *basep); } ogetdirentries
157	STD		{ int aout_sys_statfs(const char *path, \
			    struct statfs *buf); }
158	NOARGS		{ int sys_fstatfs(int fd, struct statfs *buf); }
159	UNIMPL
160	UNIMPL
#if defined(NFS) || defined(NFSSERVER) || !defined(_KERNEL)
161	STD		{ int aout_sys_getfh(const char *fname, \
			    fhandle_t *fhp); }
#else
161	EXCL		getfh
#endif
162	NOARGS		{ int compat_09_sys_getdomainname(char *domainname, \
			    int len); } ogetdomainname
163	NOARGS		{ int compat_09_sys_setdomainname(char *domainname, \
			    int len); } osetdomainname
164	NOARGS		{ int compat_09_sys_uname(struct outsname *name); } \
			    ouname
165	NOARGS		{ int sys_sysarch(int op, void *parms); }
166	UNIMPL
167	UNIMPL
168	UNIMPL
; XXX more generally, never on machines where sizeof(void *) != sizeof(int)
#if (defined(SYSVSEM) || !defined(_KERNEL)) && !defined(_LP64)
169	NOARGS		{ int compat_10_sys_semsys(int which, int a2, int a3, \
			    int a4, int a5); } osemsys
#else
169	EXCL		1.0 semsys
#endif
; XXX more generally, never on machines where sizeof(void *) != sizeof(int)
#if (defined(SYSVMSG) || !defined(_KERNEL)) && !defined(_LP64)
170	NOARGS		{ int compat_10_sys_msgsys(int which, int a2, int a3, \
			    int a4, int a5, int a6); } omsgsys
#else
170	EXCL		1.0 msgsys
#endif
; XXX more generally, never on machines where sizeof(void *) != sizeof(int)
#if (defined(SYSVSHM) || !defined(_KERNEL)) && !defined(_LP64)
171	NOARGS		{ int compat_10_sys_shmsys(int which, int a2, int a3, \
			    int a4); } oshmsys
#else
171	EXCL		1.0 shmsys
#endif
172	UNIMPL
173	NOARGS		{ ssize_t sys_pread(int fd, void *buf, \
			    size_t nbyte, int pad, off_t offset); }
174	NOARGS		{ ssize_t sys_pwrite(int fd, const void *buf, \
			    size_t nbyte, int pad, off_t offset); }
; For some reason, ntp_gettime doesn't want to raise SIGSYS when it's excluded.
175	NOARGS		{ int sys_ntp_gettime(struct ntptimeval *ntvp); }
#if defined(NTP) || !defined(_KERNEL)
176	NOARGS		{ int sys_ntp_adjtime(struct timex *tp); }
#else
176	EXCL		ntp_adjtime
#endif
177	UNIMPL
178	UNIMPL
179	UNIMPL
180	UNIMPL

; Syscalls 180-199 are used by/reserved for BSD
181	NOARGS		{ int sys_setgid(gid_t gid); }
182	NOARGS		{ int sys_setegid(gid_t egid); }
183	NOARGS		{ int sys_seteuid(uid_t euid); }
#if defined(LFS) || !defined(_KERNEL)
184	NOARGS		{ int sys_lfs_bmapv(fsid_t *fsidp, \
			    struct block_info *blkiov, int blkcnt); }
185	NOARGS		{ int sys_lfs_markv(fsid_t *fsidp, \
			    struct block_info *blkiov, int blkcnt); }
186	NOARGS		{ int sys_lfs_segclean(fsid_t *fsidp, u_long segment); }
187	NOARGS		{ int sys_lfs_segwait(fsid_t *fsidp, \
			    struct timeval *tv); }
#else
184	EXCL		lfs_bmapv
185	EXCL		lfs_markv
186	EXCL		lfs_segclean
187	EXCL		lfs_segwait
#endif
188	STD		{ int aout_compat_12_sys_stat(const char *path, \
			    struct stat12 *ub); } stat12
189	NOARGS		{ int compat_12_sys_fstat(int fd, struct stat12 *sb); } fstat12
190	STD		{ int aout_compat_12_sys_lstat(const char *path, \
			    struct stat12 *ub); } lstat12
191	STD		{ long aout_sys_pathconf(const char *path, int name); }
192	NOARGS		{ long sys_fpathconf(int fd, int name); }
193	UNIMPL
194	NOARGS		{ int sys_getrlimit(int which, \
			    struct rlimit *rlp); }
195	NOARGS		{ int sys_setrlimit(int which, \
			    const struct rlimit *rlp); }
196	NOARGS		{ int compat_12_sys_getdirentries(int fd, char *buf, \
			    u_int count, long *basep); }
197	NOARGS		{ void *sys_mmap(void *addr, size_t len, int prot, \
			    int flags, int fd, long pad, off_t pos); }
198	INDIR		{ quad_t sys___syscall(quad_t num, ...); }
199	NOARGS		{ off_t sys_lseek(int fd, int pad, off_t offset, \
			    int whence); }
200	STD		{ int aout_sys_truncate(const char *path, int pad, \
			    off_t length); }
201	NOARGS		{ int sys_ftruncate(int fd, int pad, off_t length); }
202	NOARGS		{ int sys___sysctl(int *name, u_int namelen, \
			    void *old, size_t *oldlenp, void *new, \
			    size_t newlen); }
203	NOARGS		{ int sys_mlock(const void *addr, size_t len); }
204	NOARGS		{ int sys_munlock(const void *addr, size_t len); }
205	STD		{ int aout_sys_undelete(const char *path); }
206	NOARGS		{ int sys_futimes(int fd, \
			    const struct timeval *tptr); }
207	NOARGS		{ pid_t sys_getpgid(pid_t pid); }
208	NOARGS		{ int sys_reboot(int opt, char *bootstr); }
209	NOARGS		{ int sys_poll(struct pollfd *fds, u_int nfds, \
			    int timeout); }
;
; Syscalls 210-219 are reserved for dynamically loaded syscalls
;
#if defined(LKM) || !defined(_KERNEL)
210	NODEF		{ int sys_lkmnosys(void); }
211	NODEF		{ int sys_lkmnosys(void); }
212	NODEF		{ int sys_lkmnosys(void); }
213	NODEF		{ int sys_lkmnosys(void); }
214	NODEF		{ int sys_lkmnosys(void); }
215	NODEF		{ int sys_lkmnosys(void); }
216	NODEF		{ int sys_lkmnosys(void); }
217	NODEF		{ int sys_lkmnosys(void); }
218	NODEF		{ int sys_lkmnosys(void); }
219	NODEF		{ int sys_lkmnosys(void); }
#else	/* !LKM */
210	EXCL		lkmnosys
211	EXCL		lkmnosys
212	EXCL		lkmnosys
213	EXCL		lkmnosys
214	EXCL		lkmnosys
215	EXCL		lkmnosys
216	EXCL		lkmnosys
217	EXCL		lkmnosys
218	EXCL		lkmnosys
219	EXCL		lkmnosys
#endif	/* !LKM */
; System calls 220-300 are reserved for use by NetBSD
#if defined(SYSVSEM) || !defined(_KERNEL)
#ifdef COMPAT_14
220	NOARGS		{ int compat_14_sys___semctl(int semid, \
			    int semnum, int cmd, union __semun *arg); }
#else
220	EXCL		compat_14_semctl
#endif
221	NOARGS		{ int sys_semget(key_t key, int nsems, int semflg); }
222	NOARGS		{ int sys_semop(int semid, struct sembuf *sops, \
			    size_t nsops); }
223	NOARGS		{ int sys_semconfig(int flag); }
#else
220	EXCL		compat_14_semctl
221	EXCL		semget
222	EXCL		semop
223	EXCL		semconfig
#endif
#if defined(SYSVMSG) || !defined(_KERNEL)
#ifdef COMPAT_14
224	NOARGS		{ int compat_14_sys_msgctl(int msqid, int cmd, \
			    struct msqid_ds14 *buf); }
#else
224	EXCL		compat_14_sys_msgctl
#endif
225	NOARGS		{ int sys_msgget(key_t key, int msgflg); }
226	NOARGS		{ int sys_msgsnd(int msqid, const void *msgp, \
			    size_t msgsz, int msgflg); }
227	NOARGS		{ ssize_t sys_msgrcv(int msqid, void *msgp, \
			    size_t msgsz, long msgtyp, int msgflg); }
#else
224	EXCL		compat_14_msgctl
225	EXCL		msgget
226	EXCL		msgsnd
227	EXCL		msgrcv
#endif
#if defined(SYSVSHM) || !defined(_KERNEL)
228	NOARGS		{ void *sys_shmat(int shmid, const void *shmaddr, \
			    int shmflg); }
#ifdef COMPAT_14
229	NOARGS		{ int compat_14_sys_shmctl(int shmid, int cmd, \
			    struct shmid_ds14 *buf); }
#else
229	EXCL		compat_14_sys_shmctl
#endif
230	NOARGS		{ int sys_shmdt(const void *shmaddr); }
231	NOARGS		{ int sys_shmget(key_t key, size_t size, int shmflg); }
#else
228	EXCL		shmat
229	EXCL		compat_14_shmctl
230	EXCL		shmdt
231	EXCL		shmget
#endif
232	NOARGS		{ int sys_clock_gettime(clockid_t clock_id, \
			    struct timespec *tp); }
233	NOARGS		{ int sys_clock_settime(clockid_t clock_id, \
			    const struct timespec *tp); }
234	NOARGS		{ int sys_clock_getres(clockid_t clock_id, \
			    struct timespec *tp); }
235	UNIMPL		timer_create
236	UNIMPL		timer_delete
237	UNIMPL		timer_settime
238	UNIMPL		timer_gettime
239	UNIMPL		timer_getoverrun
;
; Syscalls 240-269 are reserved for other IEEE Std1003.1b syscalls
;
240	NOARGS		{ int sys_nanosleep(const struct timespec *rqtp, \
			    struct timespec *rmtp); }
241	NOARGS		{ int sys_fdatasync(int fd); }
242	NOARGS		{ int sys_mlockall(int flags); }
243	NOARGS		{ int sys_munlockall(void); }
244	UNIMPL
245	UNIMPL
246	UNIMPL
247	UNIMPL
248	UNIMPL
249	UNIMPL
250	UNIMPL
251	UNIMPL
252	UNIMPL
253	UNIMPL
254	UNIMPL
255	UNIMPL
256	UNIMPL
257	UNIMPL
258	UNIMPL
259	UNIMPL
260	UNIMPL
261	UNIMPL
262	UNIMPL
263	UNIMPL
264	UNIMPL
265	UNIMPL
266	UNIMPL
267	UNIMPL
268	UNIMPL
269	UNIMPL
270	STD		{ int aout_sys___posix_rename(const char *from, \
			    const char *to); }
271	NOARGS		{ int sys_swapctl(int cmd, const void *arg, int misc); }
272	NOARGS		{ int sys_getdents(int fd, char *buf, size_t count); }
273	NOARGS		{ int sys_minherit(void *addr, size_t len, \
			    int inherit); }
274	STD		{ int aout_sys_lchmod(const char *path, mode_t mode); }
275	STD		{ int aout_sys_lchown(const char *path, uid_t uid, \
			    gid_t gid); }
276	STD		{ int aout_sys_lutimes(const char *path, \
			    const struct timeval *tptr); }
277	NOARGS		{ int sys___msync13(void *addr, size_t len, int flags); }
278	NOARGS		{ int sys___stat13(const char *path, struct stat *ub); }
279	NOARGS		{ int sys___fstat13(int fd, struct stat *sb); }
280	NOARGS		{ int sys___lstat13(const char *path, struct stat *ub); }
281	NOARGS		{ int sys___sigaltstack14( \
			    const struct sigaltstack *nss, \
			    struct sigaltstack *oss); }
282	NOARGS		{ int sys___vfork14(void); }
283	STD		{ int aout_sys___posix_chown(const char *path, \
			    uid_t uid, gid_t gid); }
284	NOARGS		{ int sys___posix_fchown(int fd, uid_t uid, \
			    gid_t gid); }
285	NOARGS		{ int sys___posix_lchown(const char *path, uid_t uid, \
			    gid_t gid); }
286	NOARGS		{ pid_t sys_getsid(pid_t pid); }
287	UNIMPL
#if defined(KTRACE) || !defined(_KERNEL)
288	NOARGS		{ int sys_fktrace(const int fd, int ops, \
			    int facs, int pid); }
#else
288	EXCL		ktrace
#endif
289	NOARGS		{ ssize_t sys_preadv(int fd, \
			    const struct iovec *iovp, int iovcnt, \
			    int pad, off_t offset); }
290	NOARGS		{ ssize_t sys_pwritev(int fd, \
			    const struct iovec *iovp, int iovcnt, \
			    int pad, off_t offset); }
291	NOARGS		{ int sys___sigaction14(int signum, \
			    const struct sigaction *nsa, \
			    struct sigaction *osa); }
292	NOARGS		{ int sys___sigpending14(sigset_t *set); }
293	NOARGS		{ int sys___sigprocmask14(int how, \
			    const sigset_t *set, \
			    sigset_t *oset); }
294	NOARGS		{ int sys___sigsuspend14(const sigset_t *set); }
295	NOARGS		{ int sys___sigreturn14(struct sigcontext *sigcntxp); }
296	NOARGS		{ int sys___getcwd(char *bufp, size_t length); }
297	NOARGS		{ int sys_fchroot(int fd); }
298	NOARGS		{ int sys_fhopen(const fhandle_t *fhp, int flags); }
299	NOARGS		{ int sys_fhstat(const fhandle_t *fhp, \
			    struct stat *sb); }
300	NOARGS		{ int sys_fhstatfs(const fhandle_t *fhp, \
			    struct statfs *buf); }
#if defined(SYSVSEM) || !defined(_KERNEL)
301	NOARGS		{ int sys_____semctl13(int semid, int semnum, int cmd, \
			    ... union __semun *arg); }
#else
301	EXCL		____semctl13
#endif
#if defined(SYSVMSG) || !defined(_KERNEL)
302	NOARGS		{ int sys___msgctl13(int msqid, int cmd, \
			    struct msqid_ds *buf); }
#else
302	EXCL		__msgctl13
#endif
#if defined(SYSVSHM) || !defined(_KERNEL)
303	NOARGS		{ int sys___shmctl13(int shmid, int cmd, \
			    struct shmid_ds *buf); }
#else
303	EXCL		__shmctl13
#endif
304	NOARGS		{ int sys_lchflags(const char *path, u_long flags); }
305	NOARGS		{ int sys_issetugid(void); }

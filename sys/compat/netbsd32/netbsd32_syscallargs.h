/*	$NetBSD: netbsd32_syscallargs.h,v 1.10 1999/06/09 04:50:32 christos Exp $	*/

/*
 * System call argument lists.
 *
 * DO NOT EDIT-- this file is automatically generated.
 * created from	NetBSD: syscalls.master,v 1.8 1999/06/09 04:50:11 christos Exp 
 */

#ifndef _netbsd32_SYS__SYSCALLARGS_H_
#define _netbsd32_SYS__SYSCALLARGS_H_

#ifdef	syscallarg
#undef	syscallarg
#endif

#define	syscallarg(x)								\
		union {								\
			register32_t pad;						\
			struct { x datum; } le;					\
			struct {						\
				int8_t pad[ (sizeof (register32_t) < sizeof (x))	\
					? 0					\
					: sizeof (register32_t) - sizeof (x)];	\
				x datum;					\
			} be;							\
		}

struct compat_netbsd32_exit_args {
	syscallarg(int) rval;
};

struct compat_netbsd32_read_args {
	syscallarg(int) fd;
	syscallarg(netbsd32_voidp) buf;
	syscallarg(netbsd32_size_t) nbyte;
};

struct compat_netbsd32_write_args {
	syscallarg(int) fd;
	syscallarg(const netbsd32_voidp) buf;
	syscallarg(netbsd32_size_t) nbyte;
};

struct compat_netbsd32_open_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(int) flags;
	syscallarg(mode_t) mode;
};

struct compat_netbsd32_close_args {
	syscallarg(int) fd;
};

struct compat_netbsd32_wait4_args {
	syscallarg(int) pid;
	syscallarg(netbsd32_intp) status;
	syscallarg(int) options;
	syscallarg(netbsd32_rusagep_t) rusage;
};

struct compat_43_compat_netbsd32_ocreat_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(mode_t) mode;
};

struct compat_netbsd32_link_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(const netbsd32_charp) link;
};

struct compat_netbsd32_unlink_args {
	syscallarg(const netbsd32_charp) path;
};

struct compat_netbsd32_chdir_args {
	syscallarg(const netbsd32_charp) path;
};

struct compat_netbsd32_fchdir_args {
	syscallarg(int) fd;
};

struct compat_netbsd32_mknod_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(mode_t) mode;
	syscallarg(dev_t) dev;
};

struct compat_netbsd32_chmod_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(mode_t) mode;
};

struct compat_netbsd32_chown_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(uid_t) uid;
	syscallarg(gid_t) gid;
};

struct compat_netbsd32_break_args {
	syscallarg(netbsd32_charp) nsize;
};

struct compat_netbsd32_getfsstat_args {
	syscallarg(netbsd32_statfsp_t) buf;
	syscallarg(netbsd32_long) bufsize;
	syscallarg(int) flags;
};

struct compat_43_compat_netbsd32_olseek_args {
	syscallarg(int) fd;
	syscallarg(netbsd32_long) offset;
	syscallarg(int) whence;
};

struct compat_netbsd32_mount_args {
	syscallarg(const netbsd32_charp) type;
	syscallarg(const netbsd32_charp) path;
	syscallarg(int) flags;
	syscallarg(netbsd32_voidp) data;
};

struct compat_netbsd32_unmount_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(int) flags;
};

struct compat_netbsd32_setuid_args {
	syscallarg(uid_t) uid;
};

struct compat_netbsd32_ptrace_args {
	syscallarg(int) req;
	syscallarg(pid_t) pid;
	syscallarg(netbsd32_caddr_t) addr;
	syscallarg(int) data;
};

struct compat_netbsd32_recvmsg_args {
	syscallarg(int) s;
	syscallarg(netbsd32_msghdrp_t) msg;
	syscallarg(int) flags;
};

struct compat_netbsd32_sendmsg_args {
	syscallarg(int) s;
	syscallarg(const netbsd32_msghdrp_t) msg;
	syscallarg(int) flags;
};

struct compat_netbsd32_recvfrom_args {
	syscallarg(int) s;
	syscallarg(netbsd32_voidp) buf;
	syscallarg(netbsd32_size_t) len;
	syscallarg(int) flags;
	syscallarg(netbsd32_sockaddrp_t) from;
	syscallarg(netbsd32_intp) fromlenaddr;
};

struct compat_netbsd32_accept_args {
	syscallarg(int) s;
	syscallarg(netbsd32_sockaddrp_t) name;
	syscallarg(netbsd32_intp) anamelen;
};

struct compat_netbsd32_getpeername_args {
	syscallarg(int) fdes;
	syscallarg(netbsd32_sockaddrp_t) asa;
	syscallarg(netbsd32_intp) alen;
};

struct compat_netbsd32_getsockname_args {
	syscallarg(int) fdes;
	syscallarg(netbsd32_sockaddrp_t) asa;
	syscallarg(netbsd32_intp) alen;
};

struct compat_netbsd32_access_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(int) flags;
};

struct compat_netbsd32_chflags_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(netbsd32_u_long) flags;
};

struct compat_netbsd32_fchflags_args {
	syscallarg(int) fd;
	syscallarg(netbsd32_u_long) flags;
};

struct compat_netbsd32_kill_args {
	syscallarg(int) pid;
	syscallarg(int) signum;
};

struct compat_43_compat_netbsd32_stat43_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(netbsd32_stat43p_t) ub;
};

struct compat_43_compat_netbsd32_lstat43_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(netbsd32_stat43p_t) ub;
};

struct compat_netbsd32_dup_args {
	syscallarg(int) fd;
};

struct compat_netbsd32_profil_args {
	syscallarg(netbsd32_caddr_t) samples;
	syscallarg(netbsd32_size_t) size;
	syscallarg(netbsd32_u_long) offset;
	syscallarg(u_int) scale;
};

struct compat_netbsd32_ktrace_args {
	syscallarg(const netbsd32_charp) fname;
	syscallarg(int) ops;
	syscallarg(int) facs;
	syscallarg(int) pid;
};

struct compat_netbsd32_sigaction_args {
	syscallarg(int) signum;
	syscallarg(const netbsd32_sigactionp_t) nsa;
	syscallarg(netbsd32_sigactionp_t) osa;
};

struct compat_13_compat_netbsd32_sigprocmask_args {
	syscallarg(int) how;
	syscallarg(int) mask;
};

struct compat_netbsd32___getlogin_args {
	syscallarg(netbsd32_charp) namebuf;
	syscallarg(u_int) namelen;
};

struct compat_netbsd32_setlogin_args {
	syscallarg(const netbsd32_charp) namebuf;
};

struct compat_netbsd32_acct_args {
	syscallarg(const netbsd32_charp) path;
};

struct compat_13_compat_netbsd32_sigaltstack13_args {
	syscallarg(const netbsd32_sigaltstack13p_t) nss;
	syscallarg(netbsd32_sigaltstack13p_t) oss;
};

struct compat_netbsd32_ioctl_args {
	syscallarg(int) fd;
	syscallarg(netbsd32_u_long) com;
	syscallarg(netbsd32_voidp) data;
};

struct compat_12_compat_netbsd32_reboot_args {
	syscallarg(int) opt;
};

struct compat_netbsd32_revoke_args {
	syscallarg(const netbsd32_charp) path;
};

struct compat_netbsd32_symlink_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(const netbsd32_charp) link;
};

struct compat_netbsd32_readlink_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(netbsd32_charp) buf;
	syscallarg(netbsd32_size_t) count;
};

struct compat_netbsd32_execve_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(netbsd32_charpp) argp;
	syscallarg(netbsd32_charpp) envp;
};

struct compat_netbsd32_umask_args {
	syscallarg(mode_t) newmask;
};

struct compat_netbsd32_chroot_args {
	syscallarg(const netbsd32_charp) path;
};

struct compat_43_compat_netbsd32_fstat43_args {
	syscallarg(int) fd;
	syscallarg(netbsd32_stat43p_t) sb;
};

struct compat_43_compat_netbsd32_ogetkerninfo_args {
	syscallarg(int) op;
	syscallarg(netbsd32_charp) where;
	syscallarg(netbsd32_intp) size;
	syscallarg(int) arg;
};

struct compat_12_compat_netbsd32_msync_args {
	syscallarg(netbsd32_caddr_t) addr;
	syscallarg(netbsd32_size_t) len;
};

struct compat_netbsd32_sbrk_args {
	syscallarg(int) incr;
};

struct compat_netbsd32_sstk_args {
	syscallarg(int) incr;
};

struct compat_43_compat_netbsd32_ommap_args {
	syscallarg(netbsd32_caddr_t) addr;
	syscallarg(netbsd32_size_t) len;
	syscallarg(int) prot;
	syscallarg(int) flags;
	syscallarg(int) fd;
	syscallarg(netbsd32_long) pos;
};

struct compat_netbsd32_ovadvise_args {
	syscallarg(int) anom;
};

struct compat_netbsd32_munmap_args {
	syscallarg(netbsd32_voidp) addr;
	syscallarg(netbsd32_size_t) len;
};

struct compat_netbsd32_mprotect_args {
	syscallarg(netbsd32_voidp) addr;
	syscallarg(netbsd32_size_t) len;
	syscallarg(int) prot;
};

struct compat_netbsd32_madvise_args {
	syscallarg(netbsd32_voidp) addr;
	syscallarg(netbsd32_size_t) len;
	syscallarg(int) behav;
};

struct compat_netbsd32_mincore_args {
	syscallarg(netbsd32_caddr_t) addr;
	syscallarg(netbsd32_size_t) len;
	syscallarg(netbsd32_charp) vec;
};

struct compat_netbsd32_getgroups_args {
	syscallarg(int) gidsetsize;
	syscallarg(netbsd32_gid_tp) gidset;
};

struct compat_netbsd32_setgroups_args {
	syscallarg(int) gidsetsize;
	syscallarg(const netbsd32_gid_tp) gidset;
};

struct compat_netbsd32_setpgid_args {
	syscallarg(int) pid;
	syscallarg(int) pgid;
};

struct compat_netbsd32_setitimer_args {
	syscallarg(int) which;
	syscallarg(const netbsd32_itimervalp_t) itv;
	syscallarg(netbsd32_itimervalp_t) oitv;
};

struct compat_12_compat_netbsd32_oswapon_args {
	syscallarg(const netbsd32_charp) name;
};

struct compat_netbsd32_getitimer_args {
	syscallarg(int) which;
	syscallarg(netbsd32_itimervalp_t) itv;
};

struct compat_43_compat_netbsd32_ogethostname_args {
	syscallarg(netbsd32_charp) hostname;
	syscallarg(u_int) len;
};

struct compat_43_compat_netbsd32_osethostname_args {
	syscallarg(netbsd32_charp) hostname;
	syscallarg(u_int) len;
};

struct compat_netbsd32_dup2_args {
	syscallarg(int) from;
	syscallarg(int) to;
};

struct compat_netbsd32_fcntl_args {
	syscallarg(int) fd;
	syscallarg(int) cmd;
	syscallarg(netbsd32_voidp) arg;
};

struct compat_netbsd32_select_args {
	syscallarg(int) nd;
	syscallarg(netbsd32_fd_setp_t) in;
	syscallarg(netbsd32_fd_setp_t) ou;
	syscallarg(netbsd32_fd_setp_t) ex;
	syscallarg(netbsd32_timevalp_t) tv;
};

struct compat_netbsd32_fsync_args {
	syscallarg(int) fd;
};

struct compat_netbsd32_setpriority_args {
	syscallarg(int) which;
	syscallarg(int) who;
	syscallarg(int) prio;
};

struct compat_netbsd32_socket_args {
	syscallarg(int) domain;
	syscallarg(int) type;
	syscallarg(int) protocol;
};

struct compat_netbsd32_connect_args {
	syscallarg(int) s;
	syscallarg(const netbsd32_sockaddrp_t) name;
	syscallarg(int) namelen;
};

struct compat_43_compat_netbsd32_oaccept_args {
	syscallarg(int) s;
	syscallarg(netbsd32_caddr_t) name;
	syscallarg(netbsd32_intp) anamelen;
};

struct compat_netbsd32_getpriority_args {
	syscallarg(int) which;
	syscallarg(int) who;
};

struct compat_43_compat_netbsd32_osend_args {
	syscallarg(int) s;
	syscallarg(netbsd32_caddr_t) buf;
	syscallarg(int) len;
	syscallarg(int) flags;
};

struct compat_43_compat_netbsd32_orecv_args {
	syscallarg(int) s;
	syscallarg(netbsd32_caddr_t) buf;
	syscallarg(int) len;
	syscallarg(int) flags;
};

struct compat_netbsd32_sigreturn_args {
	syscallarg(netbsd32_sigcontextp_t) sigcntxp;
};

struct compat_netbsd32_bind_args {
	syscallarg(int) s;
	syscallarg(const netbsd32_sockaddrp_t) name;
	syscallarg(int) namelen;
};

struct compat_netbsd32_setsockopt_args {
	syscallarg(int) s;
	syscallarg(int) level;
	syscallarg(int) name;
	syscallarg(const netbsd32_voidp) val;
	syscallarg(int) valsize;
};

struct compat_netbsd32_listen_args {
	syscallarg(int) s;
	syscallarg(int) backlog;
};

struct compat_43_compat_netbsd32_osigvec_args {
	syscallarg(int) signum;
	syscallarg(netbsd32_sigvecp_t) nsv;
	syscallarg(netbsd32_sigvecp_t) osv;
};

struct compat_43_compat_netbsd32_sigblock_args {
	syscallarg(int) mask;
};

struct compat_43_compat_netbsd32_sigsetmask_args {
	syscallarg(int) mask;
};

struct compat_13_compat_netbsd32_sigsuspend_args {
	syscallarg(int) mask;
};

struct compat_43_compat_netbsd32_osigstack_args {
	syscallarg(netbsd32_sigstackp_t) nss;
	syscallarg(netbsd32_sigstackp_t) oss;
};

struct compat_43_compat_netbsd32_orecvmsg_args {
	syscallarg(int) s;
	syscallarg(netbsd32_omsghdrp_t) msg;
	syscallarg(int) flags;
};

struct compat_43_compat_netbsd32_osendmsg_args {
	syscallarg(int) s;
	syscallarg(netbsd32_caddr_t) msg;
	syscallarg(int) flags;
};

struct compat_netbsd32_gettimeofday_args {
	syscallarg(netbsd32_timevalp_t) tp;
	syscallarg(netbsd32_timezonep_t) tzp;
};

struct compat_netbsd32_getrusage_args {
	syscallarg(int) who;
	syscallarg(netbsd32_rusagep_t) rusage;
};

struct compat_netbsd32_getsockopt_args {
	syscallarg(int) s;
	syscallarg(int) level;
	syscallarg(int) name;
	syscallarg(netbsd32_voidp) val;
	syscallarg(netbsd32_intp) avalsize;
};

struct compat_netbsd32_readv_args {
	syscallarg(int) fd;
	syscallarg(const netbsd32_iovecp_t) iovp;
	syscallarg(int) iovcnt;
};

struct compat_netbsd32_writev_args {
	syscallarg(int) fd;
	syscallarg(const netbsd32_iovecp_t) iovp;
	syscallarg(int) iovcnt;
};

struct compat_netbsd32_settimeofday_args {
	syscallarg(const netbsd32_timevalp_t) tv;
	syscallarg(const netbsd32_timezonep_t) tzp;
};

struct compat_netbsd32_fchown_args {
	syscallarg(int) fd;
	syscallarg(uid_t) uid;
	syscallarg(gid_t) gid;
};

struct compat_netbsd32_fchmod_args {
	syscallarg(int) fd;
	syscallarg(mode_t) mode;
};

struct compat_43_compat_netbsd32_orecvfrom_args {
	syscallarg(int) s;
	syscallarg(netbsd32_caddr_t) buf;
	syscallarg(netbsd32_size_t) len;
	syscallarg(int) flags;
	syscallarg(netbsd32_caddr_t) from;
	syscallarg(netbsd32_intp) fromlenaddr;
};

struct compat_netbsd32_setreuid_args {
	syscallarg(uid_t) ruid;
	syscallarg(uid_t) euid;
};

struct compat_netbsd32_setregid_args {
	syscallarg(gid_t) rgid;
	syscallarg(gid_t) egid;
};

struct compat_netbsd32_rename_args {
	syscallarg(const netbsd32_charp) from;
	syscallarg(const netbsd32_charp) to;
};

struct compat_43_compat_netbsd32_otruncate_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(netbsd32_long) length;
};

struct compat_43_compat_netbsd32_oftruncate_args {
	syscallarg(int) fd;
	syscallarg(netbsd32_long) length;
};

struct compat_netbsd32_flock_args {
	syscallarg(int) fd;
	syscallarg(int) how;
};

struct compat_netbsd32_mkfifo_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(mode_t) mode;
};

struct compat_netbsd32_sendto_args {
	syscallarg(int) s;
	syscallarg(const netbsd32_voidp) buf;
	syscallarg(netbsd32_size_t) len;
	syscallarg(int) flags;
	syscallarg(const netbsd32_sockaddrp_t) to;
	syscallarg(int) tolen;
};

struct compat_netbsd32_shutdown_args {
	syscallarg(int) s;
	syscallarg(int) how;
};

struct compat_netbsd32_socketpair_args {
	syscallarg(int) domain;
	syscallarg(int) type;
	syscallarg(int) protocol;
	syscallarg(netbsd32_intp) rsv;
};

struct compat_netbsd32_mkdir_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(mode_t) mode;
};

struct compat_netbsd32_rmdir_args {
	syscallarg(const netbsd32_charp) path;
};

struct compat_netbsd32_utimes_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(const netbsd32_timevalp_t) tptr;
};

struct compat_netbsd32_adjtime_args {
	syscallarg(const netbsd32_timevalp_t) delta;
	syscallarg(netbsd32_timevalp_t) olddelta;
};

struct compat_43_compat_netbsd32_ogetpeername_args {
	syscallarg(int) fdes;
	syscallarg(netbsd32_caddr_t) asa;
	syscallarg(netbsd32_intp) alen;
};

struct compat_43_compat_netbsd32_sethostid_args {
	syscallarg(int32_t) hostid;
};

struct compat_43_compat_netbsd32_ogetrlimit_args {
	syscallarg(int) which;
	syscallarg(netbsd32_orlimitp_t) rlp;
};

struct compat_43_compat_netbsd32_osetrlimit_args {
	syscallarg(int) which;
	syscallarg(const netbsd32_orlimitp_t) rlp;
};

struct compat_43_compat_netbsd32_killpg_args {
	syscallarg(int) pgid;
	syscallarg(int) signum;
};

struct compat_netbsd32_quotactl_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(int) cmd;
	syscallarg(int) uid;
	syscallarg(netbsd32_caddr_t) arg;
};

struct compat_43_compat_netbsd32_ogetsockname_args {
	syscallarg(int) fdec;
	syscallarg(netbsd32_caddr_t) asa;
	syscallarg(netbsd32_intp) alen;
};

struct compat_netbsd32_nfssvc_args {
	syscallarg(int) flag;
	syscallarg(netbsd32_voidp) argp;
};

struct compat_43_compat_netbsd32_ogetdirentries_args {
	syscallarg(int) fd;
	syscallarg(netbsd32_charp) buf;
	syscallarg(u_int) count;
	syscallarg(netbsd32_longp) basep;
};

struct compat_netbsd32_statfs_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(netbsd32_statfsp_t) buf;
};

struct compat_netbsd32_fstatfs_args {
	syscallarg(int) fd;
	syscallarg(netbsd32_statfsp_t) buf;
};

struct compat_netbsd32_getfh_args {
	syscallarg(const netbsd32_charp) fname;
	syscallarg(netbsd32_fhandlep_t) fhp;
};

struct compat_09_compat_netbsd32_ogetdomainname_args {
	syscallarg(netbsd32_charp) domainname;
	syscallarg(int) len;
};

struct compat_09_compat_netbsd32_osetdomainname_args {
	syscallarg(netbsd32_charp) domainname;
	syscallarg(int) len;
};

struct compat_09_compat_netbsd32_uname_args {
	syscallarg(netbsd32_outsnamep_t) name;
};

struct compat_netbsd32_sysarch_args {
	syscallarg(int) op;
	syscallarg(netbsd32_voidp) parms;
};

struct compat_netbsd32_compat_10_sys_semsys_args {
	syscallarg(int) which;
	syscallarg(int) a2;
	syscallarg(int) a3;
	syscallarg(int) a4;
	syscallarg(int) a5;
};

struct compat_netbsd32_compat_10_sys_msgsys_args {
	syscallarg(int) which;
	syscallarg(int) a2;
	syscallarg(int) a3;
	syscallarg(int) a4;
	syscallarg(int) a5;
	syscallarg(int) a6;
};

struct compat_netbsd32_compat_10_sys_shmsys_args {
	syscallarg(int) which;
	syscallarg(int) a2;
	syscallarg(int) a3;
	syscallarg(int) a4;
};

struct compat_netbsd32_pread_args {
	syscallarg(int) fd;
	syscallarg(netbsd32_voidp) buf;
	syscallarg(netbsd32_size_t) nbyte;
	syscallarg(int) pad;
	syscallarg(off_t) offset;
};

struct compat_netbsd32_pwrite_args {
	syscallarg(int) fd;
	syscallarg(const netbsd32_voidp) buf;
	syscallarg(netbsd32_size_t) nbyte;
	syscallarg(int) pad;
	syscallarg(off_t) offset;
};

struct compat_netbsd32_ntp_gettime_args {
	syscallarg(netbsd32_ntptimevalp_t) ntvp;
};

struct compat_netbsd32_ntp_adjtime_args {
	syscallarg(netbsd32_timexp_t) tp;
};

struct compat_netbsd32_setgid_args {
	syscallarg(gid_t) gid;
};

struct compat_netbsd32_setegid_args {
	syscallarg(gid_t) egid;
};

struct compat_netbsd32_seteuid_args {
	syscallarg(uid_t) euid;
};

struct compat_netbsd32_sys_lfs_bmapv_args {
	syscallarg(netbsd32_fsid_tp_t) fsidp;
	syscallarg(netbsd32_block_infop_t) blkiov;
	syscallarg(int) blkcnt;
};

struct compat_netbsd32_sys_lfs_markv_args {
	syscallarg(netbsd32_fsid_tp_t) fsidp;
	syscallarg(netbsd32_block_infop_t) blkiov;
	syscallarg(int) blkcnt;
};

struct compat_netbsd32_sys_lfs_segclean_args {
	syscallarg(netbsd32_fsid_tp_t) fsidp;
	syscallarg(netbsd32_u_long) segment;
};

struct compat_netbsd32_sys_lfs_segwait_args {
	syscallarg(netbsd32_fsid_tp_t) fsidp;
	syscallarg(netbsd32_timevalp_t) tv;
};

struct compat_12_compat_netbsd32_stat12_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(netbsd32_stat12p_t) ub;
};

struct compat_12_compat_netbsd32_fstat12_args {
	syscallarg(int) fd;
	syscallarg(netbsd32_stat12p_t) sb;
};

struct compat_12_compat_netbsd32_lstat12_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(netbsd32_stat12p_t) ub;
};

struct compat_netbsd32_pathconf_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(int) name;
};

struct compat_netbsd32_fpathconf_args {
	syscallarg(int) fd;
	syscallarg(int) name;
};

struct compat_netbsd32_getrlimit_args {
	syscallarg(int) which;
	syscallarg(netbsd32_rlimitp_t) rlp;
};

struct compat_netbsd32_setrlimit_args {
	syscallarg(int) which;
	syscallarg(const netbsd32_rlimitp_t) rlp;
};

struct compat_12_compat_netbsd32_getdirentries_args {
	syscallarg(int) fd;
	syscallarg(netbsd32_charp) buf;
	syscallarg(u_int) count;
	syscallarg(netbsd32_longp) basep;
};

struct compat_netbsd32_mmap_args {
	syscallarg(netbsd32_voidp) addr;
	syscallarg(netbsd32_size_t) len;
	syscallarg(int) prot;
	syscallarg(int) flags;
	syscallarg(int) fd;
	syscallarg(netbsd32_long) pad;
	syscallarg(off_t) pos;
};

struct compat_netbsd32_lseek_args {
	syscallarg(int) fd;
	syscallarg(int) pad;
	syscallarg(off_t) offset;
	syscallarg(int) whence;
};

struct compat_netbsd32_truncate_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(int) pad;
	syscallarg(off_t) length;
};

struct compat_netbsd32_ftruncate_args {
	syscallarg(int) fd;
	syscallarg(int) pad;
	syscallarg(off_t) length;
};

struct compat_netbsd32___sysctl_args {
	syscallarg(netbsd32_intp) name;
	syscallarg(u_int) namelen;
	syscallarg(netbsd32_voidp) old;
	syscallarg(netbsd32_size_tp) oldlenp;
	syscallarg(netbsd32_voidp) new;
	syscallarg(netbsd32_size_t) newlen;
};

struct compat_netbsd32_mlock_args {
	syscallarg(const netbsd32_voidp) addr;
	syscallarg(netbsd32_size_t) len;
};

struct compat_netbsd32_munlock_args {
	syscallarg(const netbsd32_voidp) addr;
	syscallarg(netbsd32_size_t) len;
};

struct compat_netbsd32_undelete_args {
	syscallarg(const netbsd32_charp) path;
};

struct compat_netbsd32_futimes_args {
	syscallarg(int) fd;
	syscallarg(const netbsd32_timevalp_t) tptr;
};

struct compat_netbsd32_getpgid_args {
	syscallarg(pid_t) pid;
};

struct compat_netbsd32_reboot_args {
	syscallarg(int) opt;
	syscallarg(netbsd32_charp) bootstr;
};

struct compat_netbsd32_poll_args {
	syscallarg(netbsd32_pollfdp_t) fds;
	syscallarg(u_int) nfds;
	syscallarg(int) timeout;
};

struct compat_netbsd32___semctl_args {
	syscallarg(int) semid;
	syscallarg(int) semnum;
	syscallarg(int) cmd;
	syscallarg(netbsd32_semunu_t) arg;
};

struct compat_netbsd32_semget_args {
	syscallarg(netbsd32_key_t) key;
	syscallarg(int) nsems;
	syscallarg(int) semflg;
};

struct compat_netbsd32_semop_args {
	syscallarg(int) semid;
	syscallarg(netbsd32_sembufp_t) sops;
	syscallarg(netbsd32_size_t) nsops;
};

struct compat_netbsd32_semconfig_args {
	syscallarg(int) flag;
};

struct compat_netbsd32_msgctl_args {
	syscallarg(int) msqid;
	syscallarg(int) cmd;
	syscallarg(netbsd32_msqid_dsp_t) buf;
};

struct compat_netbsd32_msgget_args {
	syscallarg(netbsd32_key_t) key;
	syscallarg(int) msgflg;
};

struct compat_netbsd32_msgsnd_args {
	syscallarg(int) msqid;
	syscallarg(const netbsd32_voidp) msgp;
	syscallarg(netbsd32_size_t) msgsz;
	syscallarg(int) msgflg;
};

struct compat_netbsd32_msgrcv_args {
	syscallarg(int) msqid;
	syscallarg(netbsd32_voidp) msgp;
	syscallarg(netbsd32_size_t) msgsz;
	syscallarg(netbsd32_long) msgtyp;
	syscallarg(int) msgflg;
};

struct compat_netbsd32_shmat_args {
	syscallarg(int) shmid;
	syscallarg(const netbsd32_voidp) shmaddr;
	syscallarg(int) shmflg;
};

struct compat_netbsd32_shmctl_args {
	syscallarg(int) shmid;
	syscallarg(int) cmd;
	syscallarg(netbsd32_shmid_dsp_t) buf;
};

struct compat_netbsd32_shmdt_args {
	syscallarg(const netbsd32_voidp) shmaddr;
};

struct compat_netbsd32_shmget_args {
	syscallarg(netbsd32_key_t) key;
	syscallarg(netbsd32_size_t) size;
	syscallarg(int) shmflg;
};

struct compat_netbsd32_clock_gettime_args {
	syscallarg(netbsd32_clockid_t) clock_id;
	syscallarg(netbsd32_timespecp_t) tp;
};

struct compat_netbsd32_clock_settime_args {
	syscallarg(netbsd32_clockid_t) clock_id;
	syscallarg(const netbsd32_timespecp_t) tp;
};

struct compat_netbsd32_clock_getres_args {
	syscallarg(netbsd32_clockid_t) clock_id;
	syscallarg(netbsd32_timespecp_t) tp;
};

struct compat_netbsd32_nanosleep_args {
	syscallarg(const netbsd32_timespecp_t) rqtp;
	syscallarg(netbsd32_timespecp_t) rmtp;
};

struct compat_netbsd32_fdatasync_args {
	syscallarg(int) fd;
};

struct compat_netbsd32___posix_rename_args {
	syscallarg(const netbsd32_charp) from;
	syscallarg(const netbsd32_charp) to;
};

struct compat_netbsd32_swapctl_args {
	syscallarg(int) cmd;
	syscallarg(const netbsd32_voidp) arg;
	syscallarg(int) misc;
};

struct compat_netbsd32_getdents_args {
	syscallarg(int) fd;
	syscallarg(netbsd32_charp) buf;
	syscallarg(netbsd32_size_t) count;
};

struct compat_netbsd32_minherit_args {
	syscallarg(netbsd32_voidp) addr;
	syscallarg(netbsd32_size_t) len;
	syscallarg(int) inherit;
};

struct compat_netbsd32_lchmod_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(mode_t) mode;
};

struct compat_netbsd32_lchown_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(uid_t) uid;
	syscallarg(gid_t) gid;
};

struct compat_netbsd32_lutimes_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(const netbsd32_timevalp_t) tptr;
};

struct compat_netbsd32___msync13_args {
	syscallarg(netbsd32_voidp) addr;
	syscallarg(netbsd32_size_t) len;
	syscallarg(int) flags;
};

struct compat_netbsd32___stat13_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(netbsd32_statp_t) ub;
};

struct compat_netbsd32___fstat13_args {
	syscallarg(int) fd;
	syscallarg(netbsd32_statp_t) sb;
};

struct compat_netbsd32___lstat13_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(netbsd32_statp_t) ub;
};

struct compat_netbsd32___sigaltstack14_args {
	syscallarg(const netbsd32_sigaltstackp_t) nss;
	syscallarg(netbsd32_sigaltstackp_t) oss;
};

struct compat_netbsd32___posix_chown_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(uid_t) uid;
	syscallarg(gid_t) gid;
};

struct compat_netbsd32___posix_fchown_args {
	syscallarg(int) fd;
	syscallarg(uid_t) uid;
	syscallarg(gid_t) gid;
};

struct compat_netbsd32___posix_lchown_args {
	syscallarg(const netbsd32_charp) path;
	syscallarg(uid_t) uid;
	syscallarg(gid_t) gid;
};

struct compat_netbsd32_getsid_args {
	syscallarg(pid_t) pid;
};

struct compat_netbsd32_fktrace_args {
	syscallarg(const int) fd;
	syscallarg(int) ops;
	syscallarg(int) facs;
	syscallarg(int) pid;
};

struct compat_netbsd32_preadv_args {
	syscallarg(int) fd;
	syscallarg(const netbsd32_iovecp_t) iovp;
	syscallarg(int) iovcnt;
	syscallarg(int) pad;
	syscallarg(off_t) offset;
};

struct compat_netbsd32_pwritev_args {
	syscallarg(int) fd;
	syscallarg(const netbsd32_iovecp_t) iovp;
	syscallarg(int) iovcnt;
	syscallarg(int) pad;
	syscallarg(off_t) offset;
};

/*
 * System call prototypes.
 */

int	compat_netbsd32_exit	__P((struct proc *, void *, register_t *));
int	sys_fork	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_read	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_write	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_open	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_close	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_wait4	__P((struct proc *, void *, register_t *));
int	compat_43_compat_netbsd32_ocreat	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_link	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_unlink	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_chdir	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_fchdir	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_mknod	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_chmod	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_chown	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_break	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_getfsstat	__P((struct proc *, void *, register_t *));
int	compat_43_compat_netbsd32_olseek	__P((struct proc *, void *, register_t *));
int	sys_getpid	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_mount	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_unmount	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_setuid	__P((struct proc *, void *, register_t *));
int	sys_getuid	__P((struct proc *, void *, register_t *));
int	sys_geteuid	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_ptrace	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_recvmsg	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_sendmsg	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_recvfrom	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_accept	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_getpeername	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_getsockname	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_access	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_chflags	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_fchflags	__P((struct proc *, void *, register_t *));
int	sys_sync	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_kill	__P((struct proc *, void *, register_t *));
int	compat_43_compat_netbsd32_stat43	__P((struct proc *, void *, register_t *));
int	sys_getppid	__P((struct proc *, void *, register_t *));
int	compat_43_compat_netbsd32_lstat43	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_dup	__P((struct proc *, void *, register_t *));
int	sys_pipe	__P((struct proc *, void *, register_t *));
int	sys_getegid	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_profil	__P((struct proc *, void *, register_t *));
#if defined(KTRACE) || !defined(_KERNEL)
int	compat_netbsd32_ktrace	__P((struct proc *, void *, register_t *));
#else
#endif
int	compat_netbsd32_sigaction	__P((struct proc *, void *, register_t *));
int	sys_getgid	__P((struct proc *, void *, register_t *));
int	compat_13_compat_netbsd32_sigprocmask	__P((struct proc *, void *, register_t *));
int	compat_netbsd32___getlogin	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_setlogin	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_acct	__P((struct proc *, void *, register_t *));
int	compat_13_sys_sigpending	__P((struct proc *, void *, register_t *));
int	compat_13_compat_netbsd32_sigaltstack13	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_ioctl	__P((struct proc *, void *, register_t *));
#ifdef COMPAT_12
int	compat_12_compat_netbsd32_reboot	__P((struct proc *, void *, register_t *));
#else
#endif
int	compat_netbsd32_revoke	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_symlink	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_readlink	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_execve	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_umask	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_chroot	__P((struct proc *, void *, register_t *));
int	compat_43_compat_netbsd32_fstat43	__P((struct proc *, void *, register_t *));
int	compat_43_compat_netbsd32_ogetkerninfo	__P((struct proc *, void *, register_t *));
int	compat_43_sys_getpagesize	__P((struct proc *, void *, register_t *));
int	compat_12_compat_netbsd32_msync	__P((struct proc *, void *, register_t *));
int	sys_vfork	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_sbrk	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_sstk	__P((struct proc *, void *, register_t *));
int	compat_43_compat_netbsd32_ommap	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_ovadvise	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_munmap	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_mprotect	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_madvise	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_mincore	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_getgroups	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_setgroups	__P((struct proc *, void *, register_t *));
int	sys_getpgrp	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_setpgid	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_setitimer	__P((struct proc *, void *, register_t *));
int	compat_43_sys_wait	__P((struct proc *, void *, register_t *));
int	compat_12_compat_netbsd32_oswapon	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_getitimer	__P((struct proc *, void *, register_t *));
int	compat_43_compat_netbsd32_ogethostname	__P((struct proc *, void *, register_t *));
int	compat_43_compat_netbsd32_osethostname	__P((struct proc *, void *, register_t *));
int	compat_43_sys_getdtablesize	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_dup2	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_fcntl	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_select	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_fsync	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_setpriority	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_socket	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_connect	__P((struct proc *, void *, register_t *));
int	compat_43_compat_netbsd32_oaccept	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_getpriority	__P((struct proc *, void *, register_t *));
int	compat_43_compat_netbsd32_osend	__P((struct proc *, void *, register_t *));
int	compat_43_compat_netbsd32_orecv	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_sigreturn	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_bind	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_setsockopt	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_listen	__P((struct proc *, void *, register_t *));
int	compat_43_compat_netbsd32_osigvec	__P((struct proc *, void *, register_t *));
#ifdef COMPAT_43
int	compat_43_compat_netbsd32_sigblock	__P((struct proc *, void *, register_t *));
int	compat_43_compat_netbsd32_sigsetmask	__P((struct proc *, void *, register_t *));
#else
#endif
int	compat_13_compat_netbsd32_sigsuspend	__P((struct proc *, void *, register_t *));
int	compat_43_compat_netbsd32_osigstack	__P((struct proc *, void *, register_t *));
int	compat_43_compat_netbsd32_orecvmsg	__P((struct proc *, void *, register_t *));
int	compat_43_compat_netbsd32_osendmsg	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_gettimeofday	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_getrusage	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_getsockopt	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_readv	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_writev	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_settimeofday	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_fchown	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_fchmod	__P((struct proc *, void *, register_t *));
int	compat_43_compat_netbsd32_orecvfrom	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_setreuid	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_setregid	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_rename	__P((struct proc *, void *, register_t *));
int	compat_43_compat_netbsd32_otruncate	__P((struct proc *, void *, register_t *));
int	compat_43_compat_netbsd32_oftruncate	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_flock	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_mkfifo	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_sendto	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_shutdown	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_socketpair	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_mkdir	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_rmdir	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_utimes	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_adjtime	__P((struct proc *, void *, register_t *));
int	compat_43_compat_netbsd32_ogetpeername	__P((struct proc *, void *, register_t *));
int	compat_43_sys_gethostid	__P((struct proc *, void *, register_t *));
#ifdef COMPAT_43
int	compat_43_compat_netbsd32_sethostid	__P((struct proc *, void *, register_t *));
#else
#endif
int	compat_43_compat_netbsd32_ogetrlimit	__P((struct proc *, void *, register_t *));
int	compat_43_compat_netbsd32_osetrlimit	__P((struct proc *, void *, register_t *));
#ifdef COMPAT_43
int	compat_43_compat_netbsd32_killpg	__P((struct proc *, void *, register_t *));
#else
#endif
int	sys_setsid	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_quotactl	__P((struct proc *, void *, register_t *));
int	compat_43_sys_quota	__P((struct proc *, void *, register_t *));
int	compat_43_compat_netbsd32_ogetsockname	__P((struct proc *, void *, register_t *));
#if defined(NFS) || defined(NFSSERVER) || !defined(_KERNEL)
int	compat_netbsd32_nfssvc	__P((struct proc *, void *, register_t *));
#else
#endif
int	compat_43_compat_netbsd32_ogetdirentries	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_statfs	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_fstatfs	__P((struct proc *, void *, register_t *));
#if defined(NFS) || defined(NFSSERVER) || !defined(_KERNEL)
int	compat_netbsd32_getfh	__P((struct proc *, void *, register_t *));
#else
#endif
int	compat_09_compat_netbsd32_ogetdomainname	__P((struct proc *, void *, register_t *));
int	compat_09_compat_netbsd32_osetdomainname	__P((struct proc *, void *, register_t *));
int	compat_09_compat_netbsd32_uname	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_sysarch	__P((struct proc *, void *, register_t *));
#if (defined(SYSVSEM) || !defined(_KERNEL) && !defined(alpha) && defined(COMPAT_10)
int	compat_netbsd32_compat_10_sys_semsys	__P((struct proc *, void *, register_t *));
#else
#endif
#if (defined(SYSVMSG) || !defined(_KERNEL)) && !defined(alpha) && defined(COMPAT_10)
int	compat_netbsd32_compat_10_sys_msgsys	__P((struct proc *, void *, register_t *));
#else
#endif
#if (defined(SYSVSHM) || !defined(_KERNEL)) && !defined(alpha) && defined(COMPAT_10)
int	compat_netbsd32_compat_10_sys_shmsys	__P((struct proc *, void *, register_t *));
#else
#endif
int	compat_netbsd32_pread	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_pwrite	__P((struct proc *, void *, register_t *));
#if defined(NTP) && !defined(_KERNEL)
int	compat_netbsd32_ntp_gettime	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_ntp_adjtime	__P((struct proc *, void *, register_t *));
#else
#endif
int	compat_netbsd32_setgid	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_setegid	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_seteuid	__P((struct proc *, void *, register_t *));
#if defined(LFS) || !defined(_KERNEL)
int	compat_netbsd32_sys_lfs_bmapv	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_sys_lfs_markv	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_sys_lfs_segclean	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_sys_lfs_segwait	__P((struct proc *, void *, register_t *));
#else
#endif
int	compat_12_compat_netbsd32_stat12	__P((struct proc *, void *, register_t *));
int	compat_12_compat_netbsd32_fstat12	__P((struct proc *, void *, register_t *));
int	compat_12_compat_netbsd32_lstat12	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_pathconf	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_fpathconf	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_getrlimit	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_setrlimit	__P((struct proc *, void *, register_t *));
int	compat_12_compat_netbsd32_getdirentries	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_mmap	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_lseek	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_truncate	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_ftruncate	__P((struct proc *, void *, register_t *));
int	compat_netbsd32___sysctl	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_mlock	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_munlock	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_undelete	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_futimes	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_getpgid	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_reboot	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_poll	__P((struct proc *, void *, register_t *));
#if defined(LKM) || !defined(_KERNEL)
int	sys_lkmnosys	__P((struct proc *, void *, register_t *));
int	sys_lkmnosys	__P((struct proc *, void *, register_t *));
int	sys_lkmnosys	__P((struct proc *, void *, register_t *));
int	sys_lkmnosys	__P((struct proc *, void *, register_t *));
int	sys_lkmnosys	__P((struct proc *, void *, register_t *));
int	sys_lkmnosys	__P((struct proc *, void *, register_t *));
int	sys_lkmnosys	__P((struct proc *, void *, register_t *));
int	sys_lkmnosys	__P((struct proc *, void *, register_t *));
int	sys_lkmnosys	__P((struct proc *, void *, register_t *));
int	sys_lkmnosys	__P((struct proc *, void *, register_t *));
#else	/* !LKM || !_KERNEL */
#endif	/* !LKM || !_KERNEL */
#if defined(SYSVSEM) || !defined(_KERNEL)
int	compat_netbsd32___semctl	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_semget	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_semop	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_semconfig	__P((struct proc *, void *, register_t *));
#else
#endif
#if defined(SYSVMSG) || !defined(_KERNEL)
int	compat_netbsd32_msgctl	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_msgget	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_msgsnd	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_msgrcv	__P((struct proc *, void *, register_t *));
#else
#endif
#if defined(SYSVSHM) || !defined(_KERNEL)
int	compat_netbsd32_shmat	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_shmctl	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_shmdt	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_shmget	__P((struct proc *, void *, register_t *));
#else
#endif
int	compat_netbsd32_clock_gettime	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_clock_settime	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_clock_getres	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_nanosleep	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_fdatasync	__P((struct proc *, void *, register_t *));
int	compat_netbsd32___posix_rename	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_swapctl	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_getdents	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_minherit	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_lchmod	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_lchown	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_lutimes	__P((struct proc *, void *, register_t *));
int	compat_netbsd32___msync13	__P((struct proc *, void *, register_t *));
int	compat_netbsd32___stat13	__P((struct proc *, void *, register_t *));
int	compat_netbsd32___fstat13	__P((struct proc *, void *, register_t *));
int	compat_netbsd32___lstat13	__P((struct proc *, void *, register_t *));
int	compat_netbsd32___sigaltstack14	__P((struct proc *, void *, register_t *));
int	sys___vfork14	__P((struct proc *, void *, register_t *));
int	compat_netbsd32___posix_chown	__P((struct proc *, void *, register_t *));
int	compat_netbsd32___posix_fchown	__P((struct proc *, void *, register_t *));
int	compat_netbsd32___posix_lchown	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_getsid	__P((struct proc *, void *, register_t *));
#if defined(KTRACE) || !defined(_KERNEL)
int	compat_netbsd32_fktrace	__P((struct proc *, void *, register_t *));
#else
#endif
int	compat_netbsd32_preadv	__P((struct proc *, void *, register_t *));
int	compat_netbsd32_pwritev	__P((struct proc *, void *, register_t *));
#endif /* _netbsd32_SYS__SYSCALLARGS_H_ */

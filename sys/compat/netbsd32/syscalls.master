	$NetBSD: syscalls.master,v 1.23.2.3 2004/09/21 13:25:58 skrll Exp $

;	from: NetBSD: syscalls.master,v 1.81 1998/07/05 08:49:50 jonathan Exp
;	@(#)syscalls.master	8.2 (Berkeley) 1/13/94

; NetBSD system call name/number "master" file.
; (See syscalls.conf to see what it is processed into.)
;
; Fields: number type [type-dependent ...]
;	number	system call number, must be in order
;	type	one of STD, OBSOL, UNIMPL, NODEF, NOARGS, or one of
;		the compatibility options defined in syscalls.conf.
;
; types:
;	STD	always included
;	OBSOL	obsolete, not included in system
;	UNIMPL	unimplemented, not included in system
;	EXCL	implemented, but not included in system
;	NODEF	included, but don't define the syscall number
;	NOARGS	included, but don't define the syscall args structure
;	INDIR	included, but don't define the syscall args structure,
;		and allow it to be "really" varargs.
;
; The compat options are defined in the syscalls.conf file, and the
; compat option name is prefixed to the syscall name.  Other than
; that, they're like NODEF (for 'compat' options), or STD (for
; 'libcompat' options).
;
; The type-dependent arguments are as follows:
; For STD, NODEF, NOARGS, and compat syscalls:
;	{ pseudo-proto } [alias]
; For other syscalls:
;	[comment]
;
; #ifdef's, etc. may be included, and are copied to the output files.
; #include's are copied to the syscall names and switch definition files only.

#if defined(_KERNEL_OPT)
#include "opt_ktrace.h"
#include "opt_nfsserver.h"
#include "opt_compat_netbsd.h"
#include "opt_ntp.h"
#include "opt_sysv.h"
#include "opt_compat_43.h"

#include "fs_lfs.h"
#include "fs_nfs.h"
#endif

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/signal.h>
#include <sys/mount.h>
#include <sys/sa.h>
#include <sys/syscallargs.h>

#include <compat/netbsd32/netbsd32.h>
#include <compat/netbsd32/netbsd32_syscallargs.h>

%%

; Reserved/unimplemented system calls in the range 0-150 inclusive
; are reserved for use in future Berkeley releases.
; Additional system calls implemented in vendor and other
; redistributions should be placed in the reserved range at the end
; of the current calls.

0	INDIR		{ int sys_syscall(int number, ...); }
1	STD		{ void netbsd32_exit(int rval); }
2	NOARGS		{ int sys_fork(void); }
3	STD		{ netbsd32_ssize_t netbsd32_read(int fd, netbsd32_voidp buf, netbsd32_size_t nbyte); }
4	STD		{ netbsd32_ssize_t netbsd32_write(int fd, const netbsd32_voidp buf, netbsd32_size_t nbyte); }
5	STD		{ int netbsd32_open(const netbsd32_charp path, int flags, ... mode_t mode); }
6	STD		{ int netbsd32_close(int fd); }
7	STD		{ int netbsd32_wait4(int pid, netbsd32_intp status, int options, netbsd32_rusagep_t rusage); }
8	COMPAT_43	{ int netbsd32_ocreat(const netbsd32_charp path, mode_t mode); }
9	STD		{ int netbsd32_link(const netbsd32_charp path, const netbsd32_charp link); }
10	STD		{ int netbsd32_unlink(const netbsd32_charp path); }
11	OBSOL		execv
12	STD		{ int netbsd32_chdir(const netbsd32_charp path); }
13	STD		{ int netbsd32_fchdir(int fd); }
14	STD		{ int netbsd32_mknod(const netbsd32_charp path, mode_t mode, dev_t dev); }
15	STD		{ int netbsd32_chmod(const netbsd32_charp path, mode_t mode); }
16	STD		{ int netbsd32_chown(const netbsd32_charp path, uid_t uid, gid_t gid); }
17	STD		{ int netbsd32_break(netbsd32_charp nsize); }
18	COMPAT_20	{ int netbsd32_getfsstat(netbsd32_statfsp_t buf, netbsd32_long bufsize, int flags); }
19	COMPAT_43	{ netbsd32_long netbsd32_olseek(int fd, netbsd32_long offset, int whence); }
20	NOARGS MPSAFE	{ pid_t sys_getpid(void); }
21	STD		{ int netbsd32_mount(const netbsd32_charp type, const netbsd32_charp path, int flags, netbsd32_voidp data); }
22	STD		{ int netbsd32_unmount(const netbsd32_charp path, int flags); }
23	STD		{ int netbsd32_setuid(uid_t uid); }
24	NOARGS		{ uid_t sys_getuid(void); }
25	NOARGS		{ uid_t sys_geteuid(void); }
26	STD		{ int netbsd32_ptrace(int req, pid_t pid, netbsd32_caddr_t addr, int data); }
27	STD		{ netbsd32_ssize_t netbsd32_recvmsg(int s, netbsd32_msghdrp_t msg, int flags); }
28	STD		{ netbsd32_ssize_t netbsd32_sendmsg(int s, const netbsd32_msghdrp_t msg, int flags); }
29	STD		{ netbsd32_ssize_t netbsd32_recvfrom(int s, netbsd32_voidp buf, netbsd32_size_t len, int flags, netbsd32_sockaddrp_t from, netbsd32_intp fromlenaddr); }
30	STD		{ int netbsd32_accept(int s, netbsd32_sockaddrp_t name, netbsd32_intp anamelen); }
31	STD		{ int netbsd32_getpeername(int fdes, netbsd32_sockaddrp_t asa, netbsd32_intp alen); }
32	STD		{ int netbsd32_getsockname(int fdes, netbsd32_sockaddrp_t asa, netbsd32_intp alen); }
33	STD		{ int netbsd32_access(const netbsd32_charp path, int flags); }
34	STD		{ int netbsd32_chflags(const netbsd32_charp path, netbsd32_u_long flags); }
35	STD		{ int netbsd32_fchflags(int fd, netbsd32_u_long flags); }
36	NOARGS		{ void sys_sync(void); }
37	STD		{ int netbsd32_kill(int pid, int signum); }
38	COMPAT_43	{ int netbsd32_stat43(const netbsd32_charp path, netbsd32_stat43p_t ub); }
39	NOARGS		{ pid_t sys_getppid(void); }
40	COMPAT_43	{ int netbsd32_lstat43(const netbsd32_charp path, netbsd32_stat43p_t ub); }
41	STD		{ int netbsd32_dup(int fd); }
42	NOARGS		{ int sys_pipe(void); }
43	NOARGS		{ gid_t sys_getegid(void); }
44	STD		{ int netbsd32_profil(netbsd32_caddr_t samples, netbsd32_size_t size, netbsd32_u_long offset, u_int scale); }
#if defined(KTRACE) || !defined(_KERNEL)
45	STD		{ int netbsd32_ktrace(const netbsd32_charp fname, int ops, int facs, int pid); }
#else
45	EXCL		netbsd32_ktrace
#endif
46	STD		{ int netbsd32_sigaction(int signum, const netbsd32_sigactionp_t nsa, netbsd32_sigactionp_t osa); }
47	NOARGS		{ gid_t sys_getgid(void); }
48	COMPAT_13	{ int netbsd32_sigprocmask(int how, \
			    int mask); } sigprocmask13
49	STD		{ int netbsd32___getlogin(netbsd32_charp namebuf, u_int namelen); }
50	STD		{ int netbsd32_setlogin(const netbsd32_charp namebuf); }
51	STD		{ int netbsd32_acct(const netbsd32_charp path); }
52	COMPAT_13	{ int sys_sigpending(void); } sigpending13
53	COMPAT_13	{ int netbsd32_sigaltstack13(const netbsd32_sigaltstack13p_t nss, netbsd32_sigaltstack13p_t oss); }
54	STD		{ int netbsd32_ioctl(int fd, netbsd32_u_long com, ... netbsd32_voidp data); }
55	COMPAT_12	{ int netbsd32_reboot(int opt); }
56	STD		{ int netbsd32_revoke(const netbsd32_charp path); }
57	STD		{ int netbsd32_symlink(const netbsd32_charp path, const netbsd32_charp link); }
58	STD		{ int netbsd32_readlink(const netbsd32_charp path, netbsd32_charp buf, netbsd32_size_t count); }
59	STD		{ int netbsd32_execve(const netbsd32_charp path, netbsd32_charpp argp, netbsd32_charpp envp); }
60	STD		{ mode_t netbsd32_umask(mode_t newmask); }
61	STD		{ int netbsd32_chroot(const netbsd32_charp path); }
62	COMPAT_43	{ int netbsd32_fstat43(int fd, netbsd32_stat43p_t sb); }
63	COMPAT_43	{ int netbsd32_ogetkerninfo(int op, netbsd32_charp where, netbsd32_intp size, int arg); }
64	COMPAT_43	{ int sys_getpagesize(void); } ogetpagesize
65	COMPAT_12	{ int netbsd32_msync(netbsd32_caddr_t addr, netbsd32_size_t len); }
; XXX COMPAT_??? for 4.4BSD-compatible vfork(2)?
66	NOARGS		{ int sys_vfork(void); }
67	OBSOL		vread
68	OBSOL		vwrite
69	STD		{ int netbsd32_sbrk(netbsd32_intptr_t incr); }
70	STD		{ int netbsd32_sstk(int incr); }
71	COMPAT_43	{ int netbsd32_ommap(netbsd32_caddr_t addr, netbsd32_size_t len, int prot, int flags, int fd, netbsd32_long pos); }
72	STD		{ int netbsd32_ovadvise(int anom); } vadvise
73	STD		{ int netbsd32_munmap(netbsd32_voidp addr, netbsd32_size_t len); }
74	STD		{ int netbsd32_mprotect(netbsd32_voidp addr, netbsd32_size_t len, int prot); }
75	STD		{ int netbsd32_madvise(netbsd32_voidp addr, netbsd32_size_t len, int behav); }
76	OBSOL		vhangup
77	OBSOL		vlimit
78	STD		{ int netbsd32_mincore(netbsd32_caddr_t addr, netbsd32_size_t len, netbsd32_charp vec); }
79	STD		{ int netbsd32_getgroups(int gidsetsize, netbsd32_gid_tp gidset); }
80	STD		{ int netbsd32_setgroups(int gidsetsize, const netbsd32_gid_tp gidset); }
81	NOARGS		{ int sys_getpgrp(void); }
82	STD		{ int netbsd32_setpgid(int pid, int pgid); }
83	STD		{ int netbsd32_setitimer(int which, const netbsd32_itimervalp_t itv, netbsd32_itimervalp_t oitv); }
84	COMPAT_43	{ int sys_wait(void); } owait
85	COMPAT_12	{ int netbsd32_oswapon(const netbsd32_charp name); }
86	STD		{ int netbsd32_getitimer(int which, netbsd32_itimervalp_t itv); }
87	COMPAT_43	{ int netbsd32_ogethostname(netbsd32_charp hostname, u_int len); }
88	COMPAT_43	{ int netbsd32_osethostname(netbsd32_charp hostname, u_int len); }
89	COMPAT_43	{ int sys_getdtablesize(void); } ogetdtablesize
90	STD		{ int netbsd32_dup2(int from, int to); }
91	UNIMPL		getdopt
92	STD		{ int netbsd32_fcntl(int fd, int cmd, ... netbsd32_voidp arg); }
93	STD		{ int netbsd32_select(int nd, netbsd32_fd_setp_t in, netbsd32_fd_setp_t ou, netbsd32_fd_setp_t ex, netbsd32_timevalp_t tv); }
94	UNIMPL		setdopt
95	STD		{ int netbsd32_fsync(int fd); }
96	STD		{ int netbsd32_setpriority(int which, int who, int prio); }
97	STD		{ int netbsd32_socket(int domain, int type, int protocol); }
98	STD		{ int netbsd32_connect(int s, const netbsd32_sockaddrp_t name, int namelen); }
99	COMPAT_43	{ int netbsd32_oaccept(int s, netbsd32_caddr_t name, netbsd32_intp anamelen); }
100	STD		{ int netbsd32_getpriority(int which, int who); }
101	COMPAT_43	{ int netbsd32_osend(int s, netbsd32_caddr_t buf, int len, int flags); }
102	COMPAT_43	{ int netbsd32_orecv(int s, netbsd32_caddr_t buf, int len, int flags); }
103	COMPAT_13	{ int netbsd32_sigreturn(netbsd32_sigcontextp_t sigcntxp); } sigreturn13
104	STD		{ int netbsd32_bind(int s, const netbsd32_sockaddrp_t name, int namelen); }
105	STD		{ int netbsd32_setsockopt(int s, int level, int name, const netbsd32_voidp val, int valsize); }
106	STD		{ int netbsd32_listen(int s, int backlog); }
107	OBSOL		vtimes
108	COMPAT_43	{ int netbsd32_osigvec(int signum, netbsd32_sigvecp_t nsv, netbsd32_sigvecp_t osv); }
#if defined(COMPAT_43) || defined(COMPAT_SUNOS)
109	COMPAT_43	{ int netbsd32_sigblock(int mask); }
110	COMPAT_43	{ int netbsd32_sigsetmask(int mask); }
#else
109	OBSOL		sigblock
110	OBSOL		sigsetmask
#endif
111	COMPAT_13	{ int netbsd32_sigsuspend(int mask); } sigsuspend13
112	COMPAT_43	{ int netbsd32_osigstack(netbsd32_sigstackp_t nss, netbsd32_sigstackp_t oss); }
113	COMPAT_43	{ int netbsd32_orecvmsg(int s, netbsd32_omsghdrp_t msg, int flags); }
114	COMPAT_43	{ int netbsd32_osendmsg(int s, netbsd32_caddr_t msg, int flags); }
115	OBSOL		vtrace
116	STD		{ int netbsd32_gettimeofday(netbsd32_timevalp_t tp, netbsd32_timezonep_t tzp); }
117	STD		{ int netbsd32_getrusage(int who, netbsd32_rusagep_t rusage); }
118	STD		{ int netbsd32_getsockopt(int s, int level, int name, netbsd32_voidp val, netbsd32_intp avalsize); }
119	OBSOL		resuba
120	STD		{ netbsd32_ssize_t netbsd32_readv(int fd, const netbsd32_iovecp_t iovp, int iovcnt); }
121	STD		{ netbsd32_ssize_t netbsd32_writev(int fd, const netbsd32_iovecp_t iovp, int iovcnt); }
122	STD		{ int netbsd32_settimeofday(const netbsd32_timevalp_t tv, const netbsd32_timezonep_t tzp); }
123	STD		{ int netbsd32_fchown(int fd, uid_t uid, gid_t gid); }
124	STD		{ int netbsd32_fchmod(int fd, mode_t mode); }
125	COMPAT_43	{ int netbsd32_orecvfrom(int s, netbsd32_caddr_t buf, netbsd32_size_t len, int flags, netbsd32_caddr_t from, netbsd32_intp fromlenaddr); }
126	STD		{ int netbsd32_setreuid(uid_t ruid, uid_t euid); }
127	STD		{ int netbsd32_setregid(gid_t rgid, gid_t egid); }
128	STD		{ int netbsd32_rename(const netbsd32_charp from, const netbsd32_charp to); }
129	COMPAT_43	{ int netbsd32_otruncate(const netbsd32_charp path, netbsd32_long length); }
130	COMPAT_43	{ int netbsd32_oftruncate(int fd, netbsd32_long length); }
131	STD		{ int netbsd32_flock(int fd, int how); }
132	STD		{ int netbsd32_mkfifo(const netbsd32_charp path, mode_t mode); }
133	STD		{ netbsd32_ssize_t netbsd32_sendto(int s, const netbsd32_voidp buf, netbsd32_size_t len, int flags, const netbsd32_sockaddrp_t to, int tolen); }
134	STD		{ int netbsd32_shutdown(int s, int how); }
135	STD		{ int netbsd32_socketpair(int domain, int type, int protocol, netbsd32_intp rsv); }
136	STD		{ int netbsd32_mkdir(const netbsd32_charp path, mode_t mode); }
137	STD		{ int netbsd32_rmdir(const netbsd32_charp path); }
138	STD		{ int netbsd32_utimes(const netbsd32_charp path, const netbsd32_timevalp_t tptr); }
139	OBSOL		4.2 sigreturn
140	STD		{ int netbsd32_adjtime(const netbsd32_timevalp_t delta, netbsd32_timevalp_t olddelta); }
141	COMPAT_43	{ int netbsd32_ogetpeername(int fdes, netbsd32_caddr_t asa, netbsd32_intp alen); }
142	COMPAT_43	{ int32_t sys_gethostid(void); } ogethostid
#if defined(COMPAT_43) || defined(COMPAT_SUNOS)
143	COMPAT_43	{ int netbsd32_sethostid(int32_t hostid); }
#else
143	OBSOL		sethostid
#endif
144	COMPAT_43	{ int netbsd32_ogetrlimit(int which, netbsd32_orlimitp_t rlp); }
145	COMPAT_43	{ int netbsd32_osetrlimit(int which, const netbsd32_orlimitp_t rlp); }
#if defined(COMPAT_43) || defined(COMPAT_SUNOS)
146	COMPAT_43	{ int netbsd32_killpg(int pgid, int signum); }
#else
146	OBSOL		killpg
#endif
147	NOARGS		{ int sys_setsid(void); }
148	STD		{ int netbsd32_quotactl(const netbsd32_charp path, int cmd, int uid, netbsd32_caddr_t arg); }
149	COMPAT_43	{ int sys_quota(void); } oquota
150	COMPAT_43	{ int netbsd32_ogetsockname(int fdec, netbsd32_caddr_t asa, netbsd32_intp alen); }

; Syscalls 151-180 inclusive are reserved for vendor-specific
; system calls.  (This includes various calls added for compatibity
; with other Unix variants.)
; Some of these calls are now supported by BSD...
151	UNIMPL
152	UNIMPL
153	UNIMPL
154	UNIMPL
#if defined(NFS) || defined(NFSSERVER) || !defined(_KERNEL)
155	STD		{ int netbsd32_nfssvc(int flag, netbsd32_voidp argp); }
#else
155	EXCL		netbsd32_nfssvc
#endif
156	COMPAT_43	{ int netbsd32_ogetdirentries(int fd, netbsd32_charp buf, u_int count, netbsd32_longp basep); }
157	COMPAT_20	{ int netbsd32_statfs(const netbsd32_charp path, netbsd32_statfsp_t buf); }
158	COMPAT_20	{ int netbsd32_fstatfs(int fd, netbsd32_statfsp_t buf); }
159	UNIMPL
160	UNIMPL
#if defined(NFS) || defined(NFSSERVER) || !defined(_KERNEL)
161	STD		{ int netbsd32_getfh(const netbsd32_charp fname, netbsd32_fhandlep_t fhp); }
#else
161	EXCL		netbsd32_getfh
#endif
162	COMPAT_09	{ int netbsd32_ogetdomainname(netbsd32_charp domainname, int len); }
163	COMPAT_09	{ int netbsd32_osetdomainname(netbsd32_charp domainname, int len); }
164	COMPAT_09	{ int netbsd32_uname(netbsd32_outsnamep_t name); }
165	STD		{ int netbsd32_sysarch(int op, netbsd32_voidp parms); }
166	UNIMPL
167	UNIMPL
168	UNIMPL
#if defined(SYSVSEM) || !defined(_KERNEL)
169	COMPAT_10	{ int netbsd32_sys_semsys(int which, int a2, int a3, int a4, int a5); } osemsys
#else
169	EXCL		netbsd32_sys_semsys
#endif
#if defined(SYSVMSG) || !defined(_KERNEL)
170	COMPAT_10	{ int netbsd32_sys_msgsys(int which, int a2, int a3, int a4, int a5, int a6); } omsgsys
#else
170	EXCL		netbsd32_sys_msgsys
#endif
#if defined(SYSVSHM) || !defined(_KERNEL)
171	COMPAT_10	{ int netbsd32_sys_shmsys(int which, int a2, int a3, int a4); } oshmsys
#else
171	EXCL		netbsd32_sys_shmsys
#endif
172	UNIMPL
173	STD		{ netbsd32_ssize_t netbsd32_pread(int fd, netbsd32_voidp buf, netbsd32_size_t nbyte, int pad, off_t offset); }
174	STD		{ netbsd32_ssize_t netbsd32_pwrite(int fd, const netbsd32_voidp buf, netbsd32_size_t nbyte, int pad, off_t offset); }
; For some reason, ntp_gettime doesn't want to raise SIGSYS when it's excluded.
175	STD		{ int netbsd32_ntp_gettime(netbsd32_ntptimevalp_t ntvp); }
176	STD		{ int netbsd32_ntp_adjtime(netbsd32_timexp_t tp); }
177	UNIMPL
178	UNIMPL
179	UNIMPL
180	UNIMPL

; Syscalls 180-199 are used by/reserved for BSD
181	STD		{ int netbsd32_setgid(gid_t gid); }
182	STD		{ int netbsd32_setegid(gid_t egid); }
183	STD		{ int netbsd32_seteuid(uid_t euid); }
#if defined(LFS) || !defined(_KERNEL)
184	STD		{ int netbsd32_sys_lfs_bmapv(netbsd32_fsid_tp_t fsidp, netbsd32_block_infop_t blkiov, int blkcnt); }
185	STD		{ int netbsd32_sys_lfs_markv(netbsd32_fsid_tp_t fsidp, netbsd32_block_infop_t blkiov, int blkcnt); }
186	STD		{ int netbsd32_sys_lfs_segclean(netbsd32_fsid_tp_t fsidp, netbsd32_u_long segment); }
187	STD		{ int netbsd32_sys_lfs_segwait(netbsd32_fsid_tp_t fsidp, netbsd32_timevalp_t tv); }
#else
184	EXCL		netbsd32_sys_lfs_bmapv
185	EXCL		netbsd32_sys_lfs_markv
186	EXCL		netbsd32_sys_lfs_segclean
187	EXCL		netbsd32_sys_lfs_segwait
#endif
188	COMPAT_12	{ int netbsd32_stat12(const netbsd32_charp path, netbsd32_stat12p_t ub); }
189	COMPAT_12	{ int netbsd32_fstat12(int fd, netbsd32_stat12p_t sb); }
190	COMPAT_12	{ int netbsd32_lstat12(const netbsd32_charp path, netbsd32_stat12p_t ub); }
191	STD		{ netbsd32_long netbsd32_pathconf(const netbsd32_charp path, int name); }
192	STD		{ netbsd32_long netbsd32_fpathconf(int fd, int name); }
193	UNIMPL
194	STD		{ int netbsd32_getrlimit(int which, netbsd32_rlimitp_t rlp); }
195	STD		{ int netbsd32_setrlimit(int which, const netbsd32_rlimitp_t rlp); }
196	COMPAT_12	{ int netbsd32_getdirentries(int fd, netbsd32_charp buf, u_int count, netbsd32_longp basep); }
197	STD		{ netbsd32_voidp netbsd32_mmap(netbsd32_voidp addr, netbsd32_size_t len, int prot, int flags, int fd, netbsd32_long pad, off_t pos); }
198	INDIR		{ quad_t sys___syscall(quad_t num, ...); }
199	STD		{ off_t netbsd32_lseek(int fd, int pad, off_t offset, int whence); }
200	STD		{ int netbsd32_truncate(const netbsd32_charp path, int pad, off_t length); }
201	STD		{ int netbsd32_ftruncate(int fd, int pad, off_t length); }
202	STD		{ int netbsd32___sysctl(netbsd32_intp name, u_int namelen, netbsd32_voidp old, netbsd32_size_tp oldlenp, netbsd32_voidp new, netbsd32_size_t newlen); }
203	STD		{ int netbsd32_mlock(const netbsd32_voidp addr, netbsd32_size_t len); }
204	STD		{ int netbsd32_munlock(const netbsd32_voidp addr, netbsd32_size_t len); }
205	STD		{ int netbsd32_undelete(const netbsd32_charp path); }
206	STD		{ int netbsd32_futimes(int fd, const netbsd32_timevalp_t tptr); }
207	STD		{ int netbsd32_getpgid(pid_t pid); }
208	STD		{ int netbsd32_reboot(int opt, netbsd32_charp bootstr); }
209	STD		{ int netbsd32_poll(netbsd32_pollfdp_t fds, u_int nfds, int timeout); }
;
; Syscalls 210-219 are reserved for dynamically loaded syscalls
;
#if defined(LKM) || !defined(_KERNEL)
210	NODEF		{ int sys_lkmnosys(void); }
211	NODEF		{ int sys_lkmnosys(void); }
212	NODEF		{ int sys_lkmnosys(void); }
213	NODEF		{ int sys_lkmnosys(void); }
214	NODEF		{ int sys_lkmnosys(void); }
215	NODEF		{ int sys_lkmnosys(void); }
216	NODEF		{ int sys_lkmnosys(void); }
217	NODEF		{ int sys_lkmnosys(void); }
218	NODEF		{ int sys_lkmnosys(void); }
219	NODEF		{ int sys_lkmnosys(void); }
#else	/* !LKM || !_KERNEL */
210	EXCL		lkmnosys
211	EXCL		lkmnosys
212	EXCL		lkmnosys
213	EXCL		lkmnosys
214	EXCL		lkmnosys
215	EXCL		lkmnosys
216	EXCL		lkmnosys
217	EXCL		lkmnosys
218	EXCL		lkmnosys
219	EXCL		lkmnosys
#endif	/* !LKM || !_KERNEL */
; System calls 220-300 are reserved for use by NetBSD
#if defined(SYSVSEM) || !defined(_KERNEL)
220	COMPAT_14	{ int netbsd32___semctl(int semid, int semnum, int cmd, netbsd32_semunu_t arg); }
221	STD		{ int netbsd32_semget(netbsd32_key_t key, int nsems, int semflg); }
222	STD		{ int netbsd32_semop(int semid, netbsd32_sembufp_t sops, netbsd32_size_t nsops); }
223	STD		{ int netbsd32_semconfig(int flag); }
#else
220	EXCL		compat_14_netbsd32_semctl
221	EXCL		netbsd32_semget
222	EXCL		netbsd32_semop
223	EXCL		netbsd32_semconfig
#endif
#if defined(SYSVMSG) || !defined(_KERNEL)
224	COMPAT_14	{ int netbsd32_msgctl(int msqid, int cmd, netbsd32_msqid_dsp_t buf); }
225	STD		{ int netbsd32_msgget(netbsd32_key_t key, int msgflg); }
226	STD		{ int netbsd32_msgsnd(int msqid, const netbsd32_voidp msgp, netbsd32_size_t msgsz, int msgflg); }
227	STD		{ netbsd32_ssize_t netbsd32_msgrcv(int msqid, netbsd32_voidp msgp, netbsd32_size_t msgsz, netbsd32_long msgtyp, int msgflg); }
#else
224	EXCL		compat_14_netbsd32_msgctl
225	EXCL		netbsd32_msgget
226	EXCL		netbsd32_msgsnd
227	EXCL		netbsd32_msgrcv
#endif
#if defined(SYSVSHM) || !defined(_KERNEL)
228	STD		{ netbsd32_voidp netbsd32_shmat(int shmid, const netbsd32_voidp shmaddr, int shmflg); }
229	COMPAT_14		{ int netbsd32_shmctl(int shmid, int cmd, netbsd32_shmid_dsp_t buf); }
230	STD		{ int netbsd32_shmdt(const netbsd32_voidp shmaddr); }
231	STD		{ int netbsd32_shmget(netbsd32_key_t key, netbsd32_size_t size, int shmflg); }
#else
228	EXCL		netbsd32_shmat
229	EXCL		compat_14_netbsd32_shmctl
230	EXCL		netbsd32_shmdt
231	EXCL		netbsd32_shmget
#endif
232	STD		{ int netbsd32_clock_gettime(netbsd32_clockid_t clock_id, netbsd32_timespecp_t tp); }
233	STD		{ int netbsd32_clock_settime(netbsd32_clockid_t clock_id, const netbsd32_timespecp_t tp); }
234	STD		{ int netbsd32_clock_getres(netbsd32_clockid_t clock_id, netbsd32_timespecp_t tp); }
235	UNIMPL		timer_create
236	UNIMPL		timer_delete
237	UNIMPL		timer_settime
238	UNIMPL		timer_gettime
239	UNIMPL		timer_getoverrun
;
; Syscalls 240-269 are reserved for other IEEE Std1003.1b syscalls
;
240	STD		{ int netbsd32_nanosleep(const netbsd32_timespecp_t rqtp, netbsd32_timespecp_t rmtp); }
241	STD		{ int netbsd32_fdatasync(int fd); }
242	UNIMPL
243	UNIMPL
244	UNIMPL
245	UNIMPL
246	UNIMPL
247	UNIMPL
248	UNIMPL
249	UNIMPL
250	UNIMPL
251	UNIMPL
252	UNIMPL
253	UNIMPL
254	UNIMPL
255	UNIMPL
256	UNIMPL
257	UNIMPL
258	UNIMPL
259	UNIMPL
260	UNIMPL
261	UNIMPL
262	UNIMPL
263	UNIMPL
264	UNIMPL
265	UNIMPL
266	UNIMPL
267	UNIMPL
268	UNIMPL
269	UNIMPL
270	STD		{ int netbsd32___posix_rename(const netbsd32_charp from, const netbsd32_charp to); }
271	STD		{ int netbsd32_swapctl(int cmd, const netbsd32_voidp arg, int misc); }
272	STD		{ int netbsd32_getdents(int fd, netbsd32_charp buf, netbsd32_size_t count); }
273	STD		{ int netbsd32_minherit(netbsd32_voidp addr, netbsd32_size_t len, int inherit); }
274	STD		{ int netbsd32_lchmod(const netbsd32_charp path, mode_t mode); }
275	STD		{ int netbsd32_lchown(const netbsd32_charp path, uid_t uid, gid_t gid); }
276	STD		{ int netbsd32_lutimes(const netbsd32_charp path, const netbsd32_timevalp_t tptr); }
277	STD		{ int netbsd32___msync13(netbsd32_voidp addr, netbsd32_size_t len, int flags); }
278	STD		{ int netbsd32___stat13(const netbsd32_charp path, netbsd32_statp_t ub); }
279	STD		{ int netbsd32___fstat13(int fd, netbsd32_statp_t sb); }
280	STD		{ int netbsd32___lstat13(const netbsd32_charp path, netbsd32_statp_t ub); }
281	STD		{ int netbsd32___sigaltstack14(const netbsd32_sigaltstackp_t nss, netbsd32_sigaltstackp_t oss); }
282	NOARGS		{ int sys___vfork14(void); }
283	STD		{ int netbsd32___posix_chown(const netbsd32_charp path, uid_t uid, gid_t gid); }
284	STD		{ int netbsd32___posix_fchown(int fd, uid_t uid, gid_t gid); }
285	STD		{ int netbsd32___posix_lchown(const netbsd32_charp path, uid_t uid, gid_t gid); }
286	STD		{ pid_t netbsd32_getsid(pid_t pid); }
287	UNIMPL
#if defined(KTRACE) || !defined(_KERNEL)
288	STD		{ int netbsd32_fktrace(const int fd, int ops, int facs, int pid); }
#else
288	EXCL		netbsd32_fktrace
#endif
289	STD		{ netbsd32_ssize_t netbsd32_preadv(int fd, const netbsd32_iovecp_t iovp, int iovcnt, int pad, off_t offset); }
290	STD		{ netbsd32_ssize_t netbsd32_pwritev(int fd, const netbsd32_iovecp_t iovp, int iovcnt, int pad, off_t offset); }
291	STD		{ int netbsd32___sigaction14(int signum, \
			    const netbsd32_sigactionp_t nsa, \
			    netbsd32_sigactionp_t osa); }
292	STD		{ int netbsd32___sigpending14(netbsd32_sigsetp_t set); }
293	STD		{ int netbsd32___sigprocmask14(int how, \
			    const netbsd32_sigsetp_t set, \
			    netbsd32_sigsetp_t oset); }
294	STD		{ int netbsd32___sigsuspend14(const netbsd32_sigsetp_t set); }
295	COMPAT_16	{ int netbsd32___sigreturn14(netbsd32_sigcontextp_t sigcntxp); }
296	STD		{ int netbsd32___getcwd(netbsd32_charp bufp, netbsd32_size_t length); }
297	STD		{ int netbsd32_fchroot(int fd); }
298	STD		{ int netbsd32_fhopen(const netbsd32_fhandlep_t fhp, \
			   int flags); }
299	STD		{ int netbsd32_fhstat(const netbsd32_fhandlep_t fhp, \
			    netbsd32_statp_t sb); }
300	COMPAT_20	{ int netbsd32_fhstatfs(netbsd32_fhandlep_t fhp, \
			    netbsd32_statp_t buf); }
#if defined(SYSVSEM) || !defined(_KERNEL)
301	STD		{ int netbsd32___semctl14(int semid, int semnum, int cmd, \
			    union netbsd32_semun3* arg); }
#else
301	EXCL		__semctl14
#endif
#if defined(SYSVMSG) || !defined(_KERNEL)
302	STD		{ int netbsd32___msgctl13(int msqid, int cmd, \
			    netbsd32_msqid_dsp_t buf); }
#else
302	EXCL		__msgctl13
#endif
#if defined(SYSVSHM) || !defined(_KERNEL)
303	STD		{ int netbsd32___shmctl13(int shmid, int cmd, \
			    netbsd32_shmid_dsp_t buf); }
#else
303	EXCL		__shmctl13
#endif
304	STD		{ int netbsd32_lchflags(const netbsd32_charp path, netbsd32_u_long flags); }
305	STD		{ int sys_issetugid(void); }
306	STD		{ int netbsd32_utrace(const netbsd32_charp label, netbsd32_voidp addr, \
			    netbsd32_size_t len); }
;
; Syscalls 307 and 308 are reserved for getcontext and setcontext
;
307	STD		{ int netbsd32_getcontext(netbsd32_ucontextp ucp); }
308	STD		{ int netbsd32_setcontext(netbsd32_ucontextp ucp, \
			    uint32_t flags, netbsd32_lwpidp new_lwp); }
;
; Syscalls 309-339 are reserved for LWP and scheduler activation syscalls.
;
309	UNIMPL
310	UNIMPL
311	UNIMPL
312	UNIMPL
313	UNIMPL
314	UNIMPL
315	UNIMPL
316	UNIMPL
317	UNIMPL
318	UNIMPL
319	UNIMPL
320	UNIMPL
321	UNIMPL
322	UNIMPL
323	UNIMPL
324	UNIMPL
325	UNIMPL
326	UNIMPL
327	UNIMPL
328	UNIMPL
329	UNIMPL
330	UNIMPL
331	UNIMPL
332	UNIMPL
333	UNIMPL
334	UNIMPL
335	UNIMPL
336	UNIMPL
337	UNIMPL
338	UNIMPL
339	UNIMPL
340	STD		{ int netbsd32___sigaction_sigtramp(int signum, \
			    const netbsd32_sigactionp_t nsa, \
			    netbsd32_sigactionp_t osa, \
			    netbsd32_voidp tramp, int vers); }
341	UNIMPL
342	UNIMPL
343	UNIMPL
344	UNIMPL
345	UNIMPL
346	UNIMPL
347	UNIMPL
348	UNIMPL
349	UNIMPL
350	UNIMPL
351	UNIMPL
352	UNIMPL
353	UNIMPL
354	UNIMPL
355	UNIMPL
356	STD		{ int netbsd32_getvfsstat(netbsd32_statvfsp_t buf, \
			    netbsd32_size_t bufsize, int flags); }
357	STD		{ int netbsd32_statvfs1(const netbsd32_charp path, \
			    netbsd32_statvfsp_t buf, int flags); }
358	STD		{ int netbsd32_fstatvfs1(int fd, netbsd32_statvfsp_t buf, \
			    int flags); }
359	STD		{ int netbsd32_fhstatvfs1(const netbsd32_fhandlep_t fhp, \
			    netbsd32_statvfsp_t buf, int flags); }

	$NetBSD: syscalls.master,v 1.2.6.1 1996/12/10 08:46:25 mycroft Exp $

;	@(#)syscalls.master	8.1 (Berkeley) 7/19/93

; NetBSD COMPAT_OSF1 system call name/number "master" file.
; (See syscalls.conf to see what it is processed into.)
;
; Fields: number type [type-dependent ...]
;	number	system call number, must be in order
;	type	one of STD, OBSOL, UNIMPL, NODEF, NOARGS, or one of
;		the compatibility options defined in syscalls.conf.
;
; types:
;	STD	always included
;	OBSOL	obsolete, not included in system
;	UNIMPL	unimplemented, not included in system
;	NODEF	included, but don't define the syscall number
;	NOARGS	included, but don't define the syscall args structure
;
; The compat options are defined in the syscalls.conf file, and the
; compat option name is prefixed to the syscall name.  Other than
; that, they're like NODEF (for 'compat' options), or STD (for
; 'libcompat' options).
;
; The type-dependent arguments are as follows:
; For STD, NODEF, NOARGS, and compat syscalls:
;	{ pseudo-proto } [alias]
; For other syscalls:
;	[comment]
;
; #ifdef's, etc. may be included, and are copied to the output files.
; #include's are copied to the syscall switch definition file only.

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/signal.h>
#include <sys/mount.h>
#include <sys/syscallargs.h>
#include <compat/osf1/osf1_syscallargs.h>

0	NOARGS		{ int sys_nosys(void); } syscall
1	NOARGS		{ int sys_exit(int rval); }
2	NOARGS		{ int sys_fork(void); }
3	NOARGS		{ int sys_read(int fd, char *buf, u_int nbyte); }
4	NOARGS		{ int sys_write(int fd, char *buf, u_int nbyte); }
5	UNIMPL		old open
6	NOARGS		{ int sys_close(int fd); }
7	NOARGS		{ int sys_wait4(int pid, int *status, int options, \
			    struct rusage *rusage); }
8	UNIMPL		old creat
9	NOARGS		{ int sys_link(char *path, char *link); }
10	NOARGS		{ int sys_unlink(char *path); }
11	UNIMPL		execv
12	NOARGS		{ int sys_chdir(char *path); }
13	NOARGS		{ int sys_fchdir(int fd); }
14	STD		{ int osf1_sys_mknod(char *path, int mode, int dev); }
15	NOARGS		{ int sys_chmod(char *path, int mode); }
16	NOARGS		{ int sys_chown(char *path, int uid, int gid); }
17	NOARGS		{ int sys_obreak(char *nsize); }
18	STD		{ int osf1_sys_getfsstat(struct osf1_statfs *buf, \
			    long bufsize, int flags); }
19	STD		{ off_t osf1_sys_lseek(int fd, off_t offset, \
			    int whence); }
20	NOARGS		{ pid_t sys_getpid(void); }
21	STD		{ int osf1_sys_mount(int type, char *path, int flags, \
			    caddr_t data); }
22	STD		{ int osf1_sys_unmount(char *path, int flags); }
23	STD		{ int osf1_sys_setuid(uid_t uid); }
24	NOARGS		{ uid_t sys_getuid(void); }
25	UNIMPL		exec_with_loader
26	UNIMPL		ptrace
27	UNIMPL		recvmsg
28	UNIMPL		sendmsg
29	UNIMPL		recvfrom
30	UNIMPL		accept
31	UNIMPL		getpeername
32	UNIMPL		getsockname
33	NOARGS		{ int sys_access(char *path, int flags); }
34	UNIMPL		chflags
35	UNIMPL		fchflags
36	NOARGS		{ int sys_sync(void); }
37	NOARGS		{ int sys_kill(int pid, int signum); }
38	UNIMPL		old stat
39	NOARGS		{ int sys_setpgid(int pid, int pgid); }
40	UNIMPL		old lstat
41	NOARGS		{ int sys_dup(u_int fd); }
42	NOARGS		{ int sys_pipe(void); }
43	UNIMPL		set_program_attributes
44	UNIMPL		profil
45	STD		{ int osf1_sys_open(char *path, int flags, int mode); }
46	OBSOL		sigaction
47	NOARGS		{ gid_t sys_getgid(void); }
48	NOARGS		{ int sys_sigprocmask(int how, sigset_t mask); }
49	NOARGS		{ int sys_getlogin(char *namebuf, u_int namelen); }
50	NOARGS		{ int sys_setlogin(char *namebuf); }
51	NOARGS		{ int sys_acct(char *path); }
52	UNIMPL		sigpending
53	UNIMPL
54	STD		{ int osf1_sys_ioctl(int fd, int com, caddr_t data); }
55	STD		{ int osf1_sys_reboot(int opt); }
56	NOARGS		{ int sys_revoke(char *path); }
57	NOARGS		{ int sys_symlink(char *path, char *link); }
58	NOARGS		{ int sys_readlink(char *path, char *buf, int count); }
59	STD		{ int osf1_sys_execve(char *path, char **argp, \
			    char **envp); }
60	NOARGS		{ int sys_umask(int newmask); }
61	NOARGS		{ int sys_chroot(char *path); }
62	UNIMPL		old fstat
63	NOARGS		{ int sys_getpgrp(void); }
64	NOARGS		{ int compat_43_sys_getpagesize(void); }
65	UNIMPL		mremap
66	NOARGS		{ int sys_vfork(void); }
67	STD		{ int osf1_sys_stat(char *path, struct osf1_stat *ub); }
68	STD		{ int osf1_sys_lstat(char *path, \
			    struct osf1_stat *ub); }
69	UNIMPL		sbrk
70	UNIMPL		sstk
71	STD		{ caddr_t osf1_sys_mmap(caddr_t addr, size_t len, \
			    int prot, int flags, int fd, off_t pos); }
72	UNIMPL		ovadvise
73	NOARGS		{ int sys_munmap(caddr_t addr, size_t len); }
74	UNIMPL		mprotect
; XXX
75	STD		{ int osf1_sys_madvise(void); }
76	UNIMPL		old vhangup
77	UNIMPL		kmodcall
78	UNIMPL		mincore
79	NOARGS		{ int sys_getgroups(u_int gidsetsize, gid_t *gidset); }
80	NOARGS		{ int sys_setgroups(u_int gidsetsize, gid_t *gidset); }
81	UNIMPL		old getpgrp
; OSF/1 setpgrp(); identical in function to setpgid().  XXX
82	NOARGS		{ int sys_setpgid(int pid, int pgid); } setpgrp
83	NOARGS		{ int sys_setitimer(u_int which, \
			    struct itimerval *itv, struct itimerval *oitv); }
84	UNIMPL		old wait
85	UNIMPL		table
86	UNIMPL		getitimer
87	NOARGS		{ int compat_43_sys_gethostname(char *hostname, \
			    u_int len); }
88	NOARGS		{ int compat_43_sys_sethostname(char *hostname, \
			    u_int len); }
89	NOARGS		{ int compat_43_sys_getdtablesize(void); }
90	NOARGS		{ int sys_dup2(u_int from, u_int to); }
91	STD		{ int osf1_sys_fstat(int fd, void *sb); }
92	STD		{ int osf1_sys_fcntl(int fd, int cmd, void *arg); }
93	NOARGS		{ int sys_select(u_int nd, fd_set *in, fd_set *ou, \
                            fd_set *ex, struct timeval *tv); }
94	UNIMPL		poll
95	NOARGS		{ int sys_fsync(int fd); }
96	NOARGS		{ int sys_setpriority(int which, int who, int prio); }
97	STD		{ int osf1_sys_socket(int domain, int type, \
			    int protocol); }
98	NOARGS		{ int sys_connect(int s, caddr_t name, int namelen); }
99	UNIMPL		old accept
100	NOARGS		{ int sys_getpriority(int which, int who); }
101	NOARGS		{ int compat_43_sys_send(int s, caddr_t buf, int len, \
			    int flags); }
102	NOARGS		{ int compat_43_sys_recv(int s, caddr_t buf, int len, \
			    int flags); }
103	NOARGS		{ int sys_sigreturn(struct sigcontext *sigcntxp); }
104	NOARGS		{ int sys_bind(int s, caddr_t name, int namelen); }
105	NOARGS		{ int sys_setsockopt(int s, int level, int name, \
                            caddr_t val, int valsize); }
106	UNIMPL		listen
107	UNIMPL		plock
108	UNIMPL		old sigvec
109	UNIMPL		old sigblock
110	UNIMPL		old sigsetmask
111	NOARGS		{ int sys_sigsuspend(int mask); }
112	NOARGS		{ int compat_43_sys_sigstack(struct sigstack *nss, \
			    struct sigstack *oss); }
113	UNIMPL		old recvmsg
114	UNIMPL		old sendmsg
115	UNIMPL		vtrace
116	NOARGS		{ int sys_gettimeofday(struct timeval *tp, \
			    struct timezone *tzp); }
; XXX
117	STD		{ int osf1_sys_getrusage(void); }
118	NOARGS		{ int sys_getsockopt(int s, int level, int name, \
                            caddr_t val, int *avalsize); }
119	UNIMPL
120	STD		{ int osf1_sys_readv(int fd, struct osf1_iovec *iovp, \
			    u_int iovcnt); }
121	STD		{ int osf1_sys_writev(int fd, struct osf1_iovec *iovp, \
			    u_int iovcnt); }
122	NOARGS		{ int sys_settimeofday(struct timeval *tv, \
			    struct timezone *tzp); }
123	NOARGS		{ int sys_fchown(int fd, int uid, int gid); }
124	NOARGS		{ int sys_fchmod(int fd, int mode); }
125	NOARGS		{ int compat_43_sys_recvfrom(int s, caddr_t buf, \
			    size_t len, int flags, caddr_t from, \
			    int *fromlenaddr); }
126	UNIMPL		setreuid
127	UNIMPL		setregid
128	NOARGS		{ int sys_rename(char *from, char *to); }
129	STD		{ int osf1_sys_truncate(char *path, off_t length); }
130	STD		{ int osf1_sys_ftruncate(int fd, off_t length); }
131	UNIMPL		flock
132	STD		{ int osf1_sys_setgid(gid_t gid); }
133	STD		{ int osf1_sys_sendto(int s, caddr_t buf, size_t len, \
			    int flags, caddr_t to, int tolen); }
134	NOARGS		{ int sys_shutdown(int s, int how); }
135	UNIMPL		socketpair
136	NOARGS		{ int sys_mkdir(char *path, int mode); }
137	NOARGS		{ int sys_rmdir(char *path); }
138	NOARGS		{ int sys_utimes(char *path, struct timeval *tptr); }
139	OBSOL		4.2 sigreturn
140	UNIMPL		adjtime
141	UNIMPL		old getpeername
142	NOARGS		{ int32_t compat_43_sys_gethostid(void); }
143	NOARGS		{ int compat_43_sys_sethostid(int32_t hostid); }
144	STD		{ int osf1_sys_getrlimit(u_int which, \
			    struct rlimit *rlp); }
145	STD		{ int osf1_sys_setrlimit(u_int which, \
			    struct rlimit *rlp); }
146	UNIMPL		old killpg
147	NOARGS		{ int sys_setsid(void); }
148	UNIMPL		quotactl
149	NOARGS		{ int compat_43_sys_quota(void); }
150	UNIMPL		old getsockname
151	UNIMPL
152	UNIMPL
153	UNIMPL
154	UNIMPL
155	UNIMPL
156	STD		{ int osf1_sys_sigaction(int signum, \
			    struct osf1_sigaction *nsa, \
			    struct osf1_sigaction *osa); }
157	UNIMPL
158	UNIMPL		nfssvc
159	NOARGS		{ int compat_43_sys_getdirentries(int fd, char *buf, \
			    u_int count, long *basep); }
160     STD             { int osf1_sys_statfs(char *path, \
			    struct osf1_statfs *buf, int len); }
161     STD             { int osf1_sys_fstatfs(int fd, \
			    struct osf1_statfs *buf, int len); }
162	UNIMPL
163	UNIMPL		async_daemon
164	UNIMPL		getfh
165	UNIMPL		getdomainname
166	UNIMPL		setdomainname
167	UNIMPL
168	UNIMPL
169	UNIMPL		exportfs
170	UNIMPL
171	UNIMPL
172	UNIMPL		alt msgctl
173	UNIMPL		alt msgget
174	UNIMPL		alt msgrcv
175	UNIMPL		alt msgsnd
176	UNIMPL		alt semctl
177	UNIMPL		alt semget
178	UNIMPL		alt semop
179	UNIMPL		alt uname
180	UNIMPL
181	UNIMPL		alt plock
182	UNIMPL		lockf
183	UNIMPL
184	UNIMPL		getmnt
185	UNIMPL
186	UNIMPL		unmount
187	UNIMPL		alt sigpending
188	UNIMPL		alt setsid
189	UNIMPL
190	UNIMPL
191	UNIMPL
192	UNIMPL
193	UNIMPL
194	UNIMPL
195	UNIMPL
196	UNIMPL
197	UNIMPL
198	UNIMPL
199	UNIMPL		swapon
200	UNIMPL		msgctl
201	UNIMPL		msgget
202	UNIMPL		msgrcv
203	UNIMPL		msgsnd
204	UNIMPL		semctl
205	UNIMPL		semget
206	UNIMPL		semop
207	UNIMPL		uname
208	UNIMPL		lchown
209	UNIMPL		shmat
210	UNIMPL		shmctl
211	UNIMPL		shmdt
212	UNIMPL		shmget
213	UNIMPL		mvalid
214	UNIMPL		getaddressconf
215	UNIMPL		msleep
216	UNIMPL		mwakeup
217	UNIMPL		msync
218	UNIMPL		signal
219	UNIMPL		utc gettime
220	UNIMPL		utc adjtime
221	UNIMPL
222	UNIMPL		security
223	UNIMPL		kloadcall
224	UNIMPL
225	UNIMPL
226	UNIMPL
227	UNIMPL
228	UNIMPL
229	UNIMPL
230	UNIMPL
231	UNIMPL
232	UNIMPL
233	UNIMPL		getpgid
234	STD		{ pid_t osf1_sys_getsid(pid_t pid); }
235	STD		{ int osf1_sys_sigaltstack(struct osf1_sigaltstack *nss, \
			    struct osf1_sigaltstack *oss); }
236	UNIMPL		waitid
237	UNIMPL		priocntlset
238	UNIMPL		sigsendset
239	UNIMPL
240	UNIMPL		msfs_syscall
241	UNIMPL		sysinfo
242	UNIMPL		uadmin
243	UNIMPL		fuser
244	UNIMPL
245	UNIMPL
246	UNIMPL
247	UNIMPL
248	UNIMPL		
249	UNIMPL
250	UNIMPL		uswitch
251	STD		{ int osf1_sys_usleep_thread(struct timeval *sleep, \
			    struct timeval *slept); }
252	UNIMPL		audcntl
253	UNIMPL		audgen
254	UNIMPL		sysfs
255	UNIMPL
256	UNIMPL		getsysinfo
257	STD		{ int osf1_sys_setsysinfo(u_long op, caddr_t buffer, \
			    u_long nbytes, caddr_t arg, u_long flag); }
258	UNIMPL		afs_syscall
259	UNIMPL		swapctl
260	UNIMPL		memcntl

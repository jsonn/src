/* $NetBSD: hpux_syscallargs.h,v 1.36.24.1 2007/12/26 19:48:56 ad Exp $ */

/*
 * System call argument lists.
 *
 * DO NOT EDIT-- this file is automatically generated.
 * created from	NetBSD: syscalls.master,v 1.31 2007/12/20 23:02:49 dsl Exp
 */

#ifndef _HPUX_SYS_SYSCALLARGS_H_
#define	_HPUX_SYS_SYSCALLARGS_H_

#define	HPUX_SYS_MAXSYSARGS	8

#undef	syscallarg
#define	syscallarg(x)							\
	union {								\
		register_t pad;						\
		struct { x datum; } le;					\
		struct { /* LINTED zero array dimension */		\
			int8_t pad[  /* CONSTCOND */			\
				(sizeof (register_t) < sizeof (x))	\
				? 0					\
				: sizeof (register_t) - sizeof (x)];	\
			x datum;					\
		} be;							\
	}

#undef check_syscall_args
#define check_syscall_args(call) \
	typedef char call##_check_args[sizeof (struct call##_args) \
		<= HPUX_SYS_MAXSYSARGS * sizeof (register_t) ? 1 : -1];

struct sys_exit_args;

struct hpux_sys_read_args {
	syscallarg(int) fd;
	syscallarg(char *) buf;
	syscallarg(u_int) nbyte;
};
check_syscall_args(hpux_sys_read)

struct hpux_sys_write_args {
	syscallarg(int) fd;
	syscallarg(char *) buf;
	syscallarg(u_int) nbyte;
};
check_syscall_args(hpux_sys_write)

struct hpux_sys_open_args {
	syscallarg(const char *) path;
	syscallarg(int) flags;
	syscallarg(int) mode;
};
check_syscall_args(hpux_sys_open)

struct sys_close_args;

struct hpux_sys_wait_args {
	syscallarg(int *) status;
};
check_syscall_args(hpux_sys_wait)

struct hpux_sys_creat_args {
	syscallarg(const char *) path;
	syscallarg(int) mode;
};
check_syscall_args(hpux_sys_creat)

struct sys_link_args;

struct sys_unlink_args;

struct hpux_sys_execv_args {
	syscallarg(const char *) path;
	syscallarg(char **) argp;
};
check_syscall_args(hpux_sys_execv)

struct sys_chdir_args;

struct hpux_sys_time_6x_args {
	syscallarg(time_t *) t;
};
check_syscall_args(hpux_sys_time_6x)

struct hpux_sys_mknod_args {
	syscallarg(const char *) path;
	syscallarg(int) mode;
	syscallarg(int) dev;
};
check_syscall_args(hpux_sys_mknod)

struct sys_chmod_args;

struct sys___posix_chown_args;

struct sys_obreak_args;

struct hpux_sys_stat_6x_args {
	syscallarg(const char *) path;
	syscallarg(struct hpux_ostat *) sb;
};
check_syscall_args(hpux_sys_stat_6x)

struct compat_43_sys_lseek_args;

struct sys_setuid_args;

struct hpux_sys_stime_6x_args {
	syscallarg(int) time;
};
check_syscall_args(hpux_sys_stime_6x)
#if 0

struct hpux_sys_ptrace_args {
	syscallarg(int) req;
	syscallarg(int) pid;
	syscallarg(int *) addr;
	syscallarg(int) data;
};
check_syscall_args(hpux_sys_ptrace)
#else
#endif

struct hpux_sys_alarm_6x_args {
	syscallarg(int) deltat;
};
check_syscall_args(hpux_sys_alarm_6x)

struct hpux_sys_fstat_6x_args {
	syscallarg(int) fd;
	syscallarg(struct hpux_ostat *) sb;
};
check_syscall_args(hpux_sys_fstat_6x)

struct hpux_sys_utime_6x_args {
	syscallarg(char *) fname;
	syscallarg(time_t *) tptr;
};
check_syscall_args(hpux_sys_utime_6x)

struct hpux_sys_stty_6x_args {
	syscallarg(int) fd;
	syscallarg(void *) arg;
};
check_syscall_args(hpux_sys_stty_6x)

struct hpux_sys_gtty_6x_args {
	syscallarg(int) fd;
	syscallarg(void *) arg;
};
check_syscall_args(hpux_sys_gtty_6x)

struct sys_access_args;

struct hpux_sys_nice_6x_args {
	syscallarg(int) nval;
};
check_syscall_args(hpux_sys_nice_6x)

struct hpux_sys_ftime_6x_args {
	syscallarg(struct hpux_timeb *) tp;
};
check_syscall_args(hpux_sys_ftime_6x)

struct hpux_sys_kill_args {
	syscallarg(pid_t) pid;
	syscallarg(int) signo;
};
check_syscall_args(hpux_sys_kill)

struct hpux_sys_stat_args {
	syscallarg(const char *) path;
	syscallarg(struct hpux_stat *) sb;
};
check_syscall_args(hpux_sys_stat)
#define hpux_sys_lstat_args hpux_sys_stat_args

struct hpux_sys_lstat_args;

struct sys_dup_args;

struct hpux_sys_times_6x_args {
	syscallarg(struct tms *) tms;
};
check_syscall_args(hpux_sys_times_6x)

struct sys_profil_args;

struct sys_setgid_args;

struct hpux_sys_ssig_6x_args {
	syscallarg(int) signo;
	syscallarg(sig_t) fun;
};
check_syscall_args(hpux_sys_ssig_6x)

struct hpux_sys_ioctl_args {
	syscallarg(int) fd;
	syscallarg(int) com;
	syscallarg(void *) data;
};
check_syscall_args(hpux_sys_ioctl)

struct sys_symlink_args;

struct hpux_sys_utssys_args {
	syscallarg(struct hpux_utsname *) uts;
	syscallarg(int) dev;
	syscallarg(int) request;
};
check_syscall_args(hpux_sys_utssys)

struct sys_readlink_args;

struct hpux_sys_execve_args {
	syscallarg(const char *) path;
	syscallarg(char **) argp;
	syscallarg(char **) envp;
};
check_syscall_args(hpux_sys_execve)

struct sys_umask_args;

struct sys_chroot_args;

struct hpux_sys_fcntl_args {
	syscallarg(int) fd;
	syscallarg(int) cmd;
	syscallarg(int) arg;
};
check_syscall_args(hpux_sys_fcntl)

struct hpux_sys_ulimit_args {
	syscallarg(int) cmd;
	syscallarg(int) newlimit;
};
check_syscall_args(hpux_sys_ulimit)

struct hpux_sys_read_args;

struct hpux_sys_write_args;

struct hpux_sys_mmap_args {
	syscallarg(void *) addr;
	syscallarg(size_t) len;
	syscallarg(int) prot;
	syscallarg(int) flags;
	syscallarg(int) fd;
	syscallarg(long) pos;
};
check_syscall_args(hpux_sys_mmap)

struct sys_munmap_args;

struct sys_mprotect_args;

struct sys_getgroups_args;

struct sys_setgroups_args;

struct hpux_sys_getpgrp2_args {
	syscallarg(pid_t) pid;
};
check_syscall_args(hpux_sys_getpgrp2)

struct hpux_sys_setpgrp2_args {
	syscallarg(pid_t) pid;
	syscallarg(pid_t) pgid;
};
check_syscall_args(hpux_sys_setpgrp2)

struct sys_setitimer_args;

struct hpux_sys_wait3_args {
	syscallarg(int *) status;
	syscallarg(int) options;
	syscallarg(int) rusage;
};
check_syscall_args(hpux_sys_wait3)

struct sys_getitimer_args;

struct sys_dup2_args;

struct hpux_sys_fstat_args {
	syscallarg(int) fd;
	syscallarg(struct hpux_stat *) sb;
};
check_syscall_args(hpux_sys_fstat)

struct sys_select_args;

struct sys_fsync_args;

struct hpux_sys_sigreturn_args {
	syscallarg(struct hpuxsigcontext *) sigcntxp;
};
check_syscall_args(hpux_sys_sigreturn)

struct hpux_sys_sigvec_args {
	syscallarg(int) signo;
	syscallarg(struct sigvec *) nsv;
	syscallarg(struct sigvec *) osv;
};
check_syscall_args(hpux_sys_sigvec)

struct hpux_sys_sigblock_args {
	syscallarg(int) mask;
};
check_syscall_args(hpux_sys_sigblock)

struct hpux_sys_sigsetmask_args {
	syscallarg(int) mask;
};
check_syscall_args(hpux_sys_sigsetmask)

struct hpux_sys_sigpause_args {
	syscallarg(int) mask;
};
check_syscall_args(hpux_sys_sigpause)

struct compat_43_sys_sigstack_args;

struct sys_gettimeofday_args;

struct hpux_sys_readv_args {
	syscallarg(int) fd;
	syscallarg(struct iovec *) iovp;
	syscallarg(u_int) iovcnt;
};
check_syscall_args(hpux_sys_readv)

struct hpux_sys_writev_args {
	syscallarg(int) fd;
	syscallarg(struct iovec *) iovp;
	syscallarg(u_int) iovcnt;
};
check_syscall_args(hpux_sys_writev)

struct sys_settimeofday_args;

struct sys___posix_fchown_args;

struct sys_fchmod_args;

struct hpux_sys_setresuid_args {
	syscallarg(uid_t) r;
	syscallarg(uid_t) e;
	syscallarg(uid_t) s;
};
check_syscall_args(hpux_sys_setresuid)

struct hpux_sys_setresgid_args {
	syscallarg(gid_t) r;
	syscallarg(gid_t) e;
	syscallarg(gid_t) s;
};
check_syscall_args(hpux_sys_setresgid)

struct sys___posix_rename_args;

struct compat_43_sys_truncate_args;

struct compat_43_sys_ftruncate_args;

struct hpux_sys_sysconf_args {
	syscallarg(int) name;
};
check_syscall_args(hpux_sys_sysconf)

struct sys_mkdir_args;

struct sys_rmdir_args;

struct hpux_sys_getrlimit_args {
	syscallarg(u_int) which;
	syscallarg(struct orlimit *) rlp;
};
check_syscall_args(hpux_sys_getrlimit)

struct hpux_sys_setrlimit_args {
	syscallarg(u_int) which;
	syscallarg(struct orlimit *) rlp;
};
check_syscall_args(hpux_sys_setrlimit)

struct hpux_sys_rtprio_args {
	syscallarg(pid_t) pid;
	syscallarg(int) prio;
};
check_syscall_args(hpux_sys_rtprio)

struct hpux_sys_netioctl_args {
	syscallarg(int) call;
	syscallarg(int *) args;
};
check_syscall_args(hpux_sys_netioctl)

struct hpux_sys_lockf_args {
	syscallarg(int) fd;
	syscallarg(int) func;
	syscallarg(long) size;
};
check_syscall_args(hpux_sys_lockf)
#ifdef SYSVSEM

struct sys_semget_args;

struct hpux_sys_osemctl_args {
	syscallarg(int) semid;
	syscallarg(int) semnum;
	syscallarg(int) cmd;
	syscallarg(union __semun) arg;
};
check_syscall_args(hpux_sys_osemctl)

struct sys_semop_args;
#else
#endif
#ifdef SYSVMSG

struct sys_msgget_args;

struct hpux_sys_omsgctl_args {
	syscallarg(int) msqid;
	syscallarg(int) cmd;
	syscallarg(struct hpux_omsqid_ds *) buf;
};
check_syscall_args(hpux_sys_omsgctl)

struct sys_msgsnd_args;

struct sys_msgrcv_args;
#else
#endif
#ifdef SYSVSHM

struct sys_shmget_args;

struct hpux_sys_oshmctl_args {
	syscallarg(int) shmid;
	syscallarg(int) cmd;
	syscallarg(struct hpux_oshmid_ds *) buf;
};
check_syscall_args(hpux_sys_oshmctl)

struct sys_shmat_args;

struct sys_shmdt_args;
#else
#endif

struct hpux_sys_advise_args {
	syscallarg(int) arg;
};
check_syscall_args(hpux_sys_advise)

struct hpux_sys_getcontext_args {
	syscallarg(char *) buf;
	syscallarg(int) len;
};
check_syscall_args(hpux_sys_getcontext)

struct hpux_sys_getaccess_args {
	syscallarg(char *) path;
	syscallarg(uid_t) uid;
	syscallarg(int) ngroups;
	syscallarg(gid_t *) gidset;
	syscallarg(void *) label;
	syscallarg(void *) privs;
};
check_syscall_args(hpux_sys_getaccess)

struct hpux_sys_waitpid_args {
	syscallarg(pid_t) pid;
	syscallarg(int *) status;
	syscallarg(int) options;
	syscallarg(struct rusage *) rusage;
};
check_syscall_args(hpux_sys_waitpid)

struct sys_pathconf_args;

struct sys_fpathconf_args;

struct compat_43_sys_getdirentries_args;

struct compat_09_sys_getdomainname_args;

struct compat_09_sys_setdomainname_args;

struct hpux_sys_sigaction_args {
	syscallarg(int) signo;
	syscallarg(struct hpux_sigaction *) nsa;
	syscallarg(struct hpux_sigaction *) osa;
};
check_syscall_args(hpux_sys_sigaction)

struct hpux_sys_sigprocmask_args {
	syscallarg(int) how;
	syscallarg(hpux_sigset_t *) set;
	syscallarg(hpux_sigset_t *) oset;
};
check_syscall_args(hpux_sys_sigprocmask)

struct hpux_sys_sigpending_args {
	syscallarg(hpux_sigset_t *) set;
};
check_syscall_args(hpux_sys_sigpending)

struct hpux_sys_sigsuspend_args {
	syscallarg(hpux_sigset_t *) set;
};
check_syscall_args(hpux_sys_sigsuspend)

struct sys_poll_args;

struct sys_fchdir_args;

struct compat_43_sys_accept_args;

struct sys_bind_args;

struct sys_connect_args;

struct compat_43_sys_getpeername_args;

struct compat_43_sys_getsockname_args;

struct sys_getsockopt_args;

struct sys_listen_args;

struct compat_43_sys_recv_args;

struct compat_43_sys_recvfrom_args;

struct compat_43_sys_recvmsg_args;

struct compat_43_sys_send_args;

struct compat_43_sys_sendmsg_args;

struct sys_sendto_args;

struct hpux_sys_setsockopt2_args {
	syscallarg(int) s;
	syscallarg(int) level;
	syscallarg(int) name;
	syscallarg(void *) val;
	syscallarg(int) valsize;
};
check_syscall_args(hpux_sys_setsockopt2)

struct sys_shutdown_args;

struct compat_30_sys_socket_args;

struct sys_socketpair_args;
#ifdef SYSVSEM

struct hpux_sys_semctl_args {
	syscallarg(int) semid;
	syscallarg(int) semnum;
	syscallarg(int) cmd;
	syscallarg(union __semun) arg;
};
check_syscall_args(hpux_sys_semctl)
#else
#endif
#ifdef SYSVMSG

struct hpux_sys_msgctl_args {
	syscallarg(int) msqid;
	syscallarg(int) cmd;
	syscallarg(struct hpux_msqid_ds *) buf;
};
check_syscall_args(hpux_sys_msgctl)
#else
#endif
#ifdef SYSVSHM

struct hpux_sys_shmctl_args {
	syscallarg(int) shmid;
	syscallarg(int) cmd;
	syscallarg(struct hpux_shmid_ds *) buf;
};
check_syscall_args(hpux_sys_shmctl)
#else
#endif

/*
 * System call prototypes.
 */

int	sys_nosys(struct lwp *, const void *, register_t *);

int	sys_exit(struct lwp *, const struct sys_exit_args *, register_t *);

int	hpux_sys_fork(struct lwp *, const void *, register_t *);

int	hpux_sys_read(struct lwp *, const struct hpux_sys_read_args *, register_t *);

int	hpux_sys_write(struct lwp *, const struct hpux_sys_write_args *, register_t *);

int	hpux_sys_open(struct lwp *, const struct hpux_sys_open_args *, register_t *);

int	sys_close(struct lwp *, const struct sys_close_args *, register_t *);

int	hpux_sys_wait(struct lwp *, const struct hpux_sys_wait_args *, register_t *);

int	hpux_sys_creat(struct lwp *, const struct hpux_sys_creat_args *, register_t *);

int	sys_link(struct lwp *, const struct sys_link_args *, register_t *);

int	sys_unlink(struct lwp *, const struct sys_unlink_args *, register_t *);

int	hpux_sys_execv(struct lwp *, const struct hpux_sys_execv_args *, register_t *);

int	sys_chdir(struct lwp *, const struct sys_chdir_args *, register_t *);

int	hpux_sys_time_6x(struct lwp *, const struct hpux_sys_time_6x_args *, register_t *);

int	hpux_sys_mknod(struct lwp *, const struct hpux_sys_mknod_args *, register_t *);

int	sys_chmod(struct lwp *, const struct sys_chmod_args *, register_t *);

int	sys___posix_chown(struct lwp *, const struct sys___posix_chown_args *, register_t *);

int	sys_obreak(struct lwp *, const struct sys_obreak_args *, register_t *);

int	hpux_sys_stat_6x(struct lwp *, const struct hpux_sys_stat_6x_args *, register_t *);

int	compat_43_sys_lseek(struct lwp *, const struct compat_43_sys_lseek_args *, register_t *);

int	sys_getpid(struct lwp *, const void *, register_t *);

int	sys_setuid(struct lwp *, const struct sys_setuid_args *, register_t *);

int	sys_getuid(struct lwp *, const void *, register_t *);

int	hpux_sys_stime_6x(struct lwp *, const struct hpux_sys_stime_6x_args *, register_t *);

#if 0
int	hpux_sys_ptrace(struct lwp *, const struct hpux_sys_ptrace_args *, register_t *);

#else
#endif
int	hpux_sys_alarm_6x(struct lwp *, const struct hpux_sys_alarm_6x_args *, register_t *);

int	hpux_sys_fstat_6x(struct lwp *, const struct hpux_sys_fstat_6x_args *, register_t *);

int	hpux_sys_pause_6x(struct lwp *, const void *, register_t *);

int	hpux_sys_utime_6x(struct lwp *, const struct hpux_sys_utime_6x_args *, register_t *);

int	hpux_sys_stty_6x(struct lwp *, const struct hpux_sys_stty_6x_args *, register_t *);

int	hpux_sys_gtty_6x(struct lwp *, const struct hpux_sys_gtty_6x_args *, register_t *);

int	sys_access(struct lwp *, const struct sys_access_args *, register_t *);

int	hpux_sys_nice_6x(struct lwp *, const struct hpux_sys_nice_6x_args *, register_t *);

int	hpux_sys_ftime_6x(struct lwp *, const struct hpux_sys_ftime_6x_args *, register_t *);

int	sys_sync(struct lwp *, const void *, register_t *);

int	hpux_sys_kill(struct lwp *, const struct hpux_sys_kill_args *, register_t *);

int	hpux_sys_stat(struct lwp *, const struct hpux_sys_stat_args *, register_t *);

int	hpux_sys_setpgrp_6x(struct lwp *, const void *, register_t *);

#define hpux_sys_lstat_args hpux_sys_stat_args
int	hpux_sys_lstat(struct lwp *, const struct hpux_sys_lstat_args *, register_t *);

int	sys_dup(struct lwp *, const struct sys_dup_args *, register_t *);

int	sys_pipe(struct lwp *, const void *, register_t *);

int	hpux_sys_times_6x(struct lwp *, const struct hpux_sys_times_6x_args *, register_t *);

int	sys_profil(struct lwp *, const struct sys_profil_args *, register_t *);

int	sys_setgid(struct lwp *, const struct sys_setgid_args *, register_t *);

int	sys_getgid(struct lwp *, const void *, register_t *);

int	hpux_sys_ssig_6x(struct lwp *, const struct hpux_sys_ssig_6x_args *, register_t *);

int	hpux_sys_ioctl(struct lwp *, const struct hpux_sys_ioctl_args *, register_t *);

int	sys_symlink(struct lwp *, const struct sys_symlink_args *, register_t *);

int	hpux_sys_utssys(struct lwp *, const struct hpux_sys_utssys_args *, register_t *);

int	sys_readlink(struct lwp *, const struct sys_readlink_args *, register_t *);

int	hpux_sys_execve(struct lwp *, const struct hpux_sys_execve_args *, register_t *);

int	sys_umask(struct lwp *, const struct sys_umask_args *, register_t *);

int	sys_chroot(struct lwp *, const struct sys_chroot_args *, register_t *);

int	hpux_sys_fcntl(struct lwp *, const struct hpux_sys_fcntl_args *, register_t *);

int	hpux_sys_ulimit(struct lwp *, const struct hpux_sys_ulimit_args *, register_t *);

int	hpux_sys_vfork(struct lwp *, const void *, register_t *);

int	hpux_sys_mmap(struct lwp *, const struct hpux_sys_mmap_args *, register_t *);

int	sys_munmap(struct lwp *, const struct sys_munmap_args *, register_t *);

int	sys_mprotect(struct lwp *, const struct sys_mprotect_args *, register_t *);

int	sys_getgroups(struct lwp *, const struct sys_getgroups_args *, register_t *);

int	sys_setgroups(struct lwp *, const struct sys_setgroups_args *, register_t *);

int	hpux_sys_getpgrp2(struct lwp *, const struct hpux_sys_getpgrp2_args *, register_t *);

int	hpux_sys_setpgrp2(struct lwp *, const struct hpux_sys_setpgrp2_args *, register_t *);

int	sys_setitimer(struct lwp *, const struct sys_setitimer_args *, register_t *);

int	hpux_sys_wait3(struct lwp *, const struct hpux_sys_wait3_args *, register_t *);

int	sys_getitimer(struct lwp *, const struct sys_getitimer_args *, register_t *);

int	sys_dup2(struct lwp *, const struct sys_dup2_args *, register_t *);

int	hpux_sys_fstat(struct lwp *, const struct hpux_sys_fstat_args *, register_t *);

int	sys_select(struct lwp *, const struct sys_select_args *, register_t *);

int	sys_fsync(struct lwp *, const struct sys_fsync_args *, register_t *);

int	hpux_sys_sigreturn(struct lwp *, const struct hpux_sys_sigreturn_args *, register_t *);

int	hpux_sys_sigvec(struct lwp *, const struct hpux_sys_sigvec_args *, register_t *);

int	hpux_sys_sigblock(struct lwp *, const struct hpux_sys_sigblock_args *, register_t *);

int	hpux_sys_sigsetmask(struct lwp *, const struct hpux_sys_sigsetmask_args *, register_t *);

int	hpux_sys_sigpause(struct lwp *, const struct hpux_sys_sigpause_args *, register_t *);

int	compat_43_sys_sigstack(struct lwp *, const struct compat_43_sys_sigstack_args *, register_t *);

int	sys_gettimeofday(struct lwp *, const struct sys_gettimeofday_args *, register_t *);

int	hpux_sys_readv(struct lwp *, const struct hpux_sys_readv_args *, register_t *);

int	hpux_sys_writev(struct lwp *, const struct hpux_sys_writev_args *, register_t *);

int	sys_settimeofday(struct lwp *, const struct sys_settimeofday_args *, register_t *);

int	sys___posix_fchown(struct lwp *, const struct sys___posix_fchown_args *, register_t *);

int	sys_fchmod(struct lwp *, const struct sys_fchmod_args *, register_t *);

int	hpux_sys_setresuid(struct lwp *, const struct hpux_sys_setresuid_args *, register_t *);

int	hpux_sys_setresgid(struct lwp *, const struct hpux_sys_setresgid_args *, register_t *);

int	sys___posix_rename(struct lwp *, const struct sys___posix_rename_args *, register_t *);

int	compat_43_sys_truncate(struct lwp *, const struct compat_43_sys_truncate_args *, register_t *);

int	compat_43_sys_ftruncate(struct lwp *, const struct compat_43_sys_ftruncate_args *, register_t *);

int	hpux_sys_sysconf(struct lwp *, const struct hpux_sys_sysconf_args *, register_t *);

int	sys_mkdir(struct lwp *, const struct sys_mkdir_args *, register_t *);

int	sys_rmdir(struct lwp *, const struct sys_rmdir_args *, register_t *);

int	hpux_sys_getrlimit(struct lwp *, const struct hpux_sys_getrlimit_args *, register_t *);

int	hpux_sys_setrlimit(struct lwp *, const struct hpux_sys_setrlimit_args *, register_t *);

int	hpux_sys_rtprio(struct lwp *, const struct hpux_sys_rtprio_args *, register_t *);

int	hpux_sys_netioctl(struct lwp *, const struct hpux_sys_netioctl_args *, register_t *);

int	hpux_sys_lockf(struct lwp *, const struct hpux_sys_lockf_args *, register_t *);

#ifdef SYSVSEM
int	sys_semget(struct lwp *, const struct sys_semget_args *, register_t *);

int	hpux_sys_osemctl(struct lwp *, const struct hpux_sys_osemctl_args *, register_t *);

int	sys_semop(struct lwp *, const struct sys_semop_args *, register_t *);

#else
#endif
#ifdef SYSVMSG
int	sys_msgget(struct lwp *, const struct sys_msgget_args *, register_t *);

int	hpux_sys_omsgctl(struct lwp *, const struct hpux_sys_omsgctl_args *, register_t *);

int	sys_msgsnd(struct lwp *, const struct sys_msgsnd_args *, register_t *);

int	sys_msgrcv(struct lwp *, const struct sys_msgrcv_args *, register_t *);

#else
#endif
#ifdef SYSVSHM
int	sys_shmget(struct lwp *, const struct sys_shmget_args *, register_t *);

int	hpux_sys_oshmctl(struct lwp *, const struct hpux_sys_oshmctl_args *, register_t *);

int	sys_shmat(struct lwp *, const struct sys_shmat_args *, register_t *);

int	sys_shmdt(struct lwp *, const struct sys_shmdt_args *, register_t *);

#else
#endif
int	hpux_sys_advise(struct lwp *, const struct hpux_sys_advise_args *, register_t *);

int	hpux_sys_getcontext(struct lwp *, const struct hpux_sys_getcontext_args *, register_t *);

int	hpux_sys_getaccess(struct lwp *, const struct hpux_sys_getaccess_args *, register_t *);

int	hpux_sys_waitpid(struct lwp *, const struct hpux_sys_waitpid_args *, register_t *);

int	sys_pathconf(struct lwp *, const struct sys_pathconf_args *, register_t *);

int	sys_fpathconf(struct lwp *, const struct sys_fpathconf_args *, register_t *);

int	compat_43_sys_getdirentries(struct lwp *, const struct compat_43_sys_getdirentries_args *, register_t *);

int	compat_09_sys_getdomainname(struct lwp *, const struct compat_09_sys_getdomainname_args *, register_t *);

int	compat_09_sys_setdomainname(struct lwp *, const struct compat_09_sys_setdomainname_args *, register_t *);

int	hpux_sys_sigaction(struct lwp *, const struct hpux_sys_sigaction_args *, register_t *);

int	hpux_sys_sigprocmask(struct lwp *, const struct hpux_sys_sigprocmask_args *, register_t *);

int	hpux_sys_sigpending(struct lwp *, const struct hpux_sys_sigpending_args *, register_t *);

int	hpux_sys_sigsuspend(struct lwp *, const struct hpux_sys_sigsuspend_args *, register_t *);

int	compat_43_sys_getdtablesize(struct lwp *, const void *, register_t *);

int	sys_poll(struct lwp *, const struct sys_poll_args *, register_t *);

int	sys_fchdir(struct lwp *, const struct sys_fchdir_args *, register_t *);

int	compat_43_sys_accept(struct lwp *, const struct compat_43_sys_accept_args *, register_t *);

int	sys_bind(struct lwp *, const struct sys_bind_args *, register_t *);

int	sys_connect(struct lwp *, const struct sys_connect_args *, register_t *);

int	compat_43_sys_getpeername(struct lwp *, const struct compat_43_sys_getpeername_args *, register_t *);

int	compat_43_sys_getsockname(struct lwp *, const struct compat_43_sys_getsockname_args *, register_t *);

int	sys_getsockopt(struct lwp *, const struct sys_getsockopt_args *, register_t *);

int	sys_listen(struct lwp *, const struct sys_listen_args *, register_t *);

int	compat_43_sys_recv(struct lwp *, const struct compat_43_sys_recv_args *, register_t *);

int	compat_43_sys_recvfrom(struct lwp *, const struct compat_43_sys_recvfrom_args *, register_t *);

int	compat_43_sys_recvmsg(struct lwp *, const struct compat_43_sys_recvmsg_args *, register_t *);

int	compat_43_sys_send(struct lwp *, const struct compat_43_sys_send_args *, register_t *);

int	compat_43_sys_sendmsg(struct lwp *, const struct compat_43_sys_sendmsg_args *, register_t *);

int	sys_sendto(struct lwp *, const struct sys_sendto_args *, register_t *);

int	hpux_sys_setsockopt2(struct lwp *, const struct hpux_sys_setsockopt2_args *, register_t *);

int	sys_shutdown(struct lwp *, const struct sys_shutdown_args *, register_t *);

int	compat_30_sys_socket(struct lwp *, const struct compat_30_sys_socket_args *, register_t *);

int	sys_socketpair(struct lwp *, const struct sys_socketpair_args *, register_t *);

#ifdef SYSVSEM
int	hpux_sys_semctl(struct lwp *, const struct hpux_sys_semctl_args *, register_t *);

#else
#endif
#ifdef SYSVMSG
int	hpux_sys_msgctl(struct lwp *, const struct hpux_sys_msgctl_args *, register_t *);

#else
#endif
#ifdef SYSVSHM
int	hpux_sys_shmctl(struct lwp *, const struct hpux_sys_shmctl_args *, register_t *);

#else
#endif
#endif /* _HPUX_SYS_SYSCALLARGS_H_ */

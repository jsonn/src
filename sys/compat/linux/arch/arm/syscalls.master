	$NetBSD: syscalls.master,v 1.35.12.1 2008/11/20 03:03:05 snj Exp $

; Derived from sys/compat/linux/arch/*/syscalls.master
; and from Linux 2.4.12 arch/arm/kernel/calls.S

; NetBSD/arm COMPAT_LINUX system call name/number "master" file.
; (See syscalls.conf to see what it is processed into.)
;
; Fields: number type [type-dependent ...]
;	number	system call number, must be in order
;	type	one of STD, OBSOL, UNIMPL, NODEF, NOARGS, or one of
;		the compatibility options defined in syscalls.conf.
;
; types:
;	STD	always included
;	OBSOL	obsolete, not included in system
;	UNIMPL	unimplemented, not included in system
;	NODEF	included, but don't define the syscall number
;	NOARGS	included, but don't define the syscall args structure
;	INDIR	included, but don't define the syscall args structure
;		and allow it to be "really" varargs.
;
; The compat options are defined in the syscalls.conf file, and the
; compat option name is prefixed to the syscall name.  Other than
; that, they're like NODEF (for 'compat' options), or STD (for
; 'libcompat' options).
;
; The type-dependent arguments are as follows:
; For STD, NODEF, NOARGS, and compat syscalls:
;	{ pseudo-proto } [alias]
; For other syscalls:
;	[comment]
;
; #ifdef's, etc. may be included, and are copied to the output files.
; #include's are copied to the syscall names and switch definition files only.

#if defined(_KERNEL_OPT)
#include "opt_compat_43.h"
#endif

#include <sys/param.h>
#include <sys/poll.h>
#include <sys/systm.h>
#include <sys/signal.h>
#include <sys/mount.h>
#include <sys/syscallargs.h>

#include <compat/linux/common/linux_types.h>
#include <compat/linux/common/linux_mmap.h>
#include <compat/linux/common/linux_signal.h>
#include <compat/linux/common/linux_siginfo.h>
#include <compat/linux/common/linux_machdep.h>

#include <compat/linux/linux_syscallargs.h>

%%
; XXX We have to explicitly declare linux_sys_nosys.
0	NOARGS		{ int linux_sys_nosys(void); }
1	NOARGS		{ int sys_exit(int rval); }
2	NOARGS		{ int sys_fork(void); }
3	NOARGS		{ int sys_read(int fd, char *buf, u_int nbyte); }
4	NOARGS		{ int sys_write(int fd, char *buf, u_int nbyte); }
5	STD		{ int linux_sys_open(const char *path, int flags, \
			    int mode); }
6	NOARGS		{ int sys_close(int fd); }
7	STD		{ int linux_sys_waitpid(int pid, int *status, \
			    int options);}
8	STD		{ int linux_sys_creat(const char *path, int mode); }
9	NOARGS		{ int sys_link(const char *path, const char *link); }
10	STD		{ int linux_sys_unlink(const char *path); }
11	NOARGS		{ int sys_execve(const char *path, char **argp, \
			    char **envp); }
12	NOARGS		{ int sys_chdir(const char *path); }
13	STD		{ int linux_sys_time(linux_time_t *t); }
14	STD		{ int linux_sys_mknod(const char *path, int mode, \
			    int dev); }
15	NOARGS		{ int sys_chmod(const char *path, int mode); }
16	STD		{ int linux_sys_lchown16(const char *path, \
			    linux_uid16_t uid, linux_gid16_t gid); }
17	OBSOL		break
18	OBSOL		ostat
19	NOARGS		{ long compat_43_sys_lseek(int fd, long offset, \
			    int whence); }
20	NOARGS 		{ pid_t sys_getpid(void); }
21	UNIMPL		mount
22	OBSOL		umount
23	NOARGS		{ int sys_setuid(uid_t uid); }
24	NOARGS		{ uid_t sys_getuid(void); }
25	STD		{ int linux_sys_stime(linux_time_t *t); }
26	STD		{ int linux_sys_ptrace(int request, int pid, \
			    int addr, int data); }
27	STD		{ int linux_sys_alarm(unsigned int secs); }
28	OBSOL		ofstat
29	STD		{ int linux_sys_pause(void); }
30	STD		{ int linux_sys_utime(const char *path, \
			    struct linux_utimbuf *times); }
31	OBSOL		stty
32	OBSOL		gtty
33	NOARGS		{ int sys_access(const char *path, int flags); }
34	STD		{ int linux_sys_nice(int incr); }
35	OBSOL		ftime
36	NOARGS		{ int sys_sync(void); }
37	STD		{ int linux_sys_kill(int pid, int signum); }
38	NOARGS		{ int sys___posix_rename(const char *from, \
			    const char *to); }
39	NOARGS		{ int sys_mkdir(const char *path, int mode); }
40	NOARGS		{ int sys_rmdir(const char *path); }
41	NOARGS		{ int sys_dup(u_int fd); }
42	STD		{ int linux_sys_pipe(int *pfds); }
43	STD		{ int linux_sys_times(struct times *tms); }
44	OBSOL		prof
45	STD		{ int linux_sys_brk(char *nsize); }
46	NOARGS		{ int sys_setgid(gid_t gid); }
47	NOARGS		{ gid_t sys_getgid(void); }
48	STD		{ int linux_sys_signal(int signum, \
			    linux_handler_t handler); }
49	NOARGS		{ uid_t sys_geteuid(void); }
50	NOARGS		{ gid_t sys_getegid(void); }
51	NOARGS		{ int sys_acct(char *path); }
52	UNIMPL		umount
53	OBSOL		lock
54	STD		{ int linux_sys_ioctl(int fd, u_long com, \
			    void *data); }
55	STD		{ int linux_sys_fcntl(int fd, int cmd, void *arg); }
56	OBSOL		mpx
57	NOARGS		{ int sys_setpgid(int pid, int pgid); }
58	OBSOL		ulimit
59 	STD		{ int linux_sys_oldolduname( \
			   struct linux_oldold_utsname *up); }
60	NOARGS		{ int sys_umask(int newmask); }
61	NOARGS		{ int sys_chroot(char *path); }
62	UNIMPL		ustat
63	NOARGS		{ int sys_dup2(u_int from, u_int to); }
64	NOARGS		{ pid_t sys_getppid(void); }
65	NOARGS		{ int sys_getpgrp(void); }
66	NOARGS		{ int sys_setsid(void); }
67	STD		{ int linux_sys_sigaction(int signum, \
			    const struct linux_old_sigaction *nsa, \
			    struct linux_old_sigaction *osa); }
68	STD		{ int linux_sys_siggetmask(void); }
69	STD		{ int linux_sys_sigsetmask(linux_old_sigset_t mask); }
70	STD		{ int linux_sys_setreuid16(linux_uid16_t ruid, \
			    linux_uid16_t euid); }
71	STD		{ int linux_sys_setregid16(linux_gid16_t rgid, \
			    linux_gid16_t egid); }
72	STD		{ int linux_sys_sigsuspend(void *restart, \
			    int oldmask, int mask); }
73	STD		{ int linux_sys_sigpending(linux_old_sigset_t *set); }
74	NOARGS		{ int compat_43_sys_sethostname(char *hostname, \
			    u_int len);}
75	STD		{ int linux_sys_setrlimit(u_int which, \
			    struct orlimit *rlp); }
76	STD		{ int linux_sys_getrlimit(u_int which, \
			    struct orlimit *rlp); }
77	NOARGS		{ int sys_getrusage(int who, struct rusage *rusage); }
78	STD		{ int linux_sys_gettimeofday(struct timeval *tp, \
			    struct timezone *tzp); }
79	STD		{ int linux_sys_settimeofday(struct timeval *tp, \
			    struct timezone *tzp); }
80	STD		{ int linux_sys_getgroups16(int gidsetsize, \
			    linux_gid16_t *gidset); }
81	STD		{ int linux_sys_setgroups16(int gidsetsize, \
			    linux_gid16_t *gidset); }
82	STD		{ int linux_sys_oldselect(struct linux_oldselect *lsp); }
83	NOARGS		{ int sys_symlink(const char *path, const char *to); }
84	NOARGS		{ int compat_43_sys_lstat(const char *path, \
			    struct stat43 *up); } oolstat
85	NOARGS		{ int sys_readlink(const char *name, char *buf, \
			    int count); }
#ifdef EXEC_AOUT
86	STD		{ int linux_sys_uselib(const char *path); }
#else
86	EXCL		uselib
#endif
87	STD		{ int linux_sys_swapon(char *name); }
88	STD		{ int linux_sys_reboot(int magic1, int magic2, \
			    int cmd, void *arg); }
89	STD		{ int linux_sys_readdir(int fd, void *dent, \
			    unsigned int count); }
90	STD		{ int linux_sys_old_mmap(struct linux_oldmmap *lmp); }
91	NOARGS		{ int sys_munmap(void *addr, int len); }
92	NOARGS		{ int compat_43_sys_truncate(const char *path, \
			    long length); }
93	NOARGS		{ int compat_43_sys_ftruncate(int fd, long length); }
94	NOARGS		{ int sys_fchmod(int fd, int mode); }
95	STD		{ int linux_sys_fchown16(int fd, linux_uid16_t uid, \
			    linux_gid16_t gid); }
96	STD		{ int linux_sys_getpriority(int which, int who); }
97	NOARGS		{ int sys_setpriority(int which, int who, int prio); }
98	NOARGS		{ int sys_profil(void *samples, u_int size, \
			    u_int offset, u_int scale); }
99	STD		{ int linux_sys_statfs(const char *path, \
			    struct linux_statfs *sp); }
100	STD		{ int linux_sys_fstatfs(int fd, \
			    struct linux_statfs *sp); }
101	UNIMPL
102	STD		{ int linux_sys_socketcall(int what, void *args); }
103	UNIMPL		syslog
104	NOARGS		{ int sys_setitimer(u_int which, \
			    struct itimerval *itv, struct itimerval *oitv); }
105	NOARGS		{ int sys_getitimer(u_int which, \
			    struct itimerval *itv); }
106	STD		{ int linux_sys_stat(const char *path, \
			    struct linux_stat *sp); }
107	STD		{ int linux_sys_lstat(const char *path, \
			    struct linux_stat *sp); }
108	STD		{ int linux_sys_fstat(int fd, struct linux_stat *sp); }
109	STD		{ int linux_sys_olduname(struct linux_oldutsname *up); }
110	UNIMPL
111	UNIMPL		vhangup
112	UNIMPL		idle
113	UNIMPL		syscall
114	STD		{ int linux_sys_wait4(int pid, int *status, \
			    int options, struct rusage *rusage); }
115	STD		{ int linux_sys_swapoff(const char *path); }
116	STD		{ int linux_sys_sysinfo(struct linux_sysinfo *arg); }
117	STD		{ int linux_sys_ipc(int what, int a1, int a2, int a3, \
			    void *ptr); }
118	NOARGS		{ int sys_fsync(int fd); }
119	STD		{ int linux_sys_sigreturn(struct linux_sigcontext *scp); }
120	STD		{ int linux_sys_clone(int flags, void *stack); }
121	STD		{ int linux_sys_setdomainname(char *domainname, \
			    int len); }
122	STD		{ int linux_sys_uname(struct linux_utsname *up); }
123	UNIMPL		modify_ldt
124	UNIMPL		adjtimex
125	STD		{ int linux_sys_mprotect(const void *start, \
			    unsigned long len, int prot); }
126	STD		{ int linux_sys_sigprocmask(int how, \
			    const linux_old_sigset_t *set, \
			    linux_old_sigset_t *oset); }
127	UNIMPL		create_module
128	UNIMPL		init_module
129	UNIMPL		delete_module
130	UNIMPL		get_kernel_syms
131	UNIMPL		quotactl
132	NOARGS		{ pid_t sys_getpgid(pid_t pid); }
133	NOARGS		{ int sys_fchdir(int fd); }
134	UNIMPL		bdflush
135	UNIMPL		sysfs
136	STD		{ int linux_sys_personality(int per); }
137	UNIMPL		afs_syscall
138	STD		{ int linux_sys_setfsuid(uid_t uid); }
139	STD		{ int linux_sys_setfsgid(gid_t gid); }
140	STD		{ int linux_sys_llseek(int fd, u_int32_t ohigh, \
			    u_int32_t olow, void *res, int whence); }
141	STD		{ int linux_sys_getdents(int fd, \
			    struct linux_dirent *dent, unsigned int count); }
142	STD		{ int linux_sys_select(int nfds, fd_set *readfds, \
			    fd_set *writefds, fd_set *exceptfds, \
			    struct timeval *timeout); }
143	NOARGS		{ int sys_flock(int fd, int how); }
144	NOARGS		{ int sys___msync13(void *addr, size_t len, int flags); }
145	NOARGS		{ int sys_readv(int fd, struct iovec *iovp, \
				u_int iovcnt); }
146	NOARGS		{ int sys_writev(int fd, struct iovec *iovp, \
				u_int iovcnt); }
147	NOARGS		{ pid_t sys_getsid(pid_t pid); }
148	STD		{ int linux_sys_fdatasync(int fd); }
149	STD		{ int linux_sys___sysctl(struct linux___sysctl *lsp); }
150	NOARGS		{ int sys_mlock(void *addr, size_t len); }
151	NOARGS		{ int sys_munlock(void *addr, size_t len); }
152	NOARGS		{ int sys_mlockall(int flags); }
153	NOARGS		{ int sys_munlockall(void); }
154	STD		{ int linux_sys_sched_setparam(pid_t pid, \
			    const struct linux_sched_param *sp); }
155	STD		{ int linux_sys_sched_getparam(pid_t pid, \
			    struct linux_sched_param *sp); }
156	STD		{ int linux_sys_sched_setscheduler(pid_t pid, \
			    int policy, const struct linux_sched_param *sp); }
157	STD		{ int linux_sys_sched_getscheduler(pid_t pid); }
158	STD		{ int linux_sys_sched_yield(void); }
159	STD		{ int linux_sys_sched_get_priority_max(int policy); }
160	STD		{ int linux_sys_sched_get_priority_min(int policy); }
161	UNIMPL		sched_rr_get_interval
162	STD		{ int linux_sys_nanosleep( \
			    const struct linux_timespec *rqtp, \
			    struct linux_timespec *rmtp); }
163	STD		{ void *linux_sys_mremap(void *old_address, \
			    size_t old_size, size_t new_size, u_long flags); }
164	STD		{ int linux_sys_setresuid16(linux_uid16_t ruid, \
			    linux_uid16_t euid, linux_uid16_t suid); }
165	STD		{ int linux_sys_getresuid16(linux_uid16_t *ruid, \
			    linux_uid16_t *euid, linux_uid16_t *suid); }
166	UNIMPL
167	UNIMPL		query_module
168	NOARGS		{ int sys_poll(struct pollfd *fds, u_int nfds, \
			    int timeout); }
169	UNIMPL		nfsservctl
170	STD		{ int linux_sys_setresgid16(linux_gid16_t rgid, \
			    linux_gid16_t egid, linux_gid16_t sgid); }
171	STD		{ int linux_sys_getresgid16(linux_gid16_t *rgid, \
			    linux_gid16_t *egid, linux_gid16_t *sgid); }
172	UNIMPL		prctl
173	UNIMPL		rt_sigreturn
;173	STD		{ int linux_sys_rt_sigreturn( \
;			    struct linux_rt_sigframe *sfp); }
174	STD		{ int linux_sys_rt_sigaction(int signum, \
			    const struct linux_sigaction *nsa, \
			    struct linux_sigaction *osa, \
			    size_t sigsetsize); }
175	STD		{ int linux_sys_rt_sigprocmask(int how, \
			    const linux_sigset_t *set, \
			    linux_sigset_t *oset, \
			    size_t sigsetsize); }
176	STD		{ int linux_sys_rt_sigpending( \
			    linux_sigset_t *set, \
			    size_t sigsetsize); }
177	UNIMPL		rt_sigtimedwait
; XXX XAX int here?  sigset_t here?  siginfo_t
178	STD		{ int linux_sys_rt_queueinfo(int pid, int signum, \
			    void *uinfo); }
179	STD		{ int linux_sys_rt_sigsuspend(linux_sigset_t *unewset, \
			    size_t sigsetsize); }
180	STD		{ int linux_sys_pread(int fd, char *buf, \
			    size_t nbyte, linux_off_t offset); }
181	STD		{ int linux_sys_pwrite(int fd, char *buf, \
			    size_t nbyte, linux_off_t offset); }
182	STD		{ int linux_sys_chown16(const char *path, \
			    linux_uid16_t uid, linux_gid16_t gid); }
183	NOARGS		{ int sys___getcwd(char *bufp, size_t length); }
184	UNIMPL		capget
185	UNIMPL		capset
186	STD		{ int linux_sys_sigaltstack( \
			    const struct linux_sigaltstack *ss, \
			    struct linux_sigaltstack *oss); }
187	UNIMPL		sendfile
188	UNIMPL		getpmsg
189	UNIMPL		putpmsg
190	NOARGS		vfork { int sys___vfork14(void); }
191	STD		{ int linux_sys_ugetrlimit(int which, \
			    struct rlimit *rlp); }
#define linux_sys_mmap2_args linux_sys_mmap_args
192	NOARGS		{ linux_off_t linux_sys_mmap2(unsigned long addr, \
			    size_t len, int prot, int flags, int fd, \
			    linux_off_t offset); }
193	STD		{ int linux_sys_truncate64(const char *path, \
				off_t length); }
194	STD		{ int linux_sys_ftruncate64(unsigned int fd, \
				off_t length); }
195	STD		{ int linux_sys_stat64(const char *path, \
				struct linux_stat64 *sp); }
196	STD		{ int linux_sys_lstat64(const char *path, \
				struct linux_stat64 *sp); }
197	STD		{ int linux_sys_fstat64(int fd, \
				struct linux_stat64 *sp); }
198	NOARGS		{ int sys___posix_lchown(const char *path, uid_t uid, \
				gid_t gid); }
199	NOARGS		getuid32 { uid_t sys_getuid(void); }
200	NOARGS		getgid32 { gid_t sys_getgid(void); }
201	NOARGS		geteuid32 { uid_t sys_geteuid(void); }
202	NOARGS		getegid32 { gid_t sys_getegid(void); }
203	NOARGS		setreuid32 { int sys_setreuid(uid_t ruid, \
				uid_t euid); }
204	NOARGS		setregid32 { int sys_setregid(gid_t rgid, \
				gid_t egid); }
205	NOARGS		getgroups32 { int sys_getgroups(u_int gidsetsize, \
				gid_t *gidset); }
206	NOARGS		setgroups32 { int sys_setgroups(u_int gidsetsize, \
				gid_t *gidset); }
207	NOARGS		fchown32 { int sys___posix_fchown(int fd, uid_t uid, \
				gid_t gid); }
208	STD		setresuid32 { int linux_sys_setresuid(uid_t ruid, \
				uid_t euid, uid_t suid); }
209	STD		getresuid32 { int linux_sys_getresuid(uid_t *ruid, \
				uid_t *euid, uid_t *suid); }
210	STD		setresgid32 { int linux_sys_setresgid(gid_t rgid, \
				gid_t egid, gid_t sgid); }
211	STD		getresgid32 { int linux_sys_getresgid(gid_t *rgid, \
				gid_t *egid, gid_t *sgid); }
212	NOARGS		chown32 { int sys___posix_chown(const char *path, \
				uid_t uid, gid_t gid); }
213	NOARGS		setuid32 { int sys_setuid(uid_t uid); }
214	NOARGS		setgid32 { int sys_setgid(gid_t gid); }
215	NOARGS		setfsuid32 { int linux_sys_setfsuid(uid_t uid); }
216	NOARGS		setfsgid32 { int linux_sys_setfsgid(gid_t gid); }
217	STD		{ int linux_sys_getdents64(int fd, \
			    struct linux_dirent64 *dent, unsigned int count); }
218	UNIMPL		pivot_root
219	NOARGS		{ int sys_mincore(void *addr, size_t len, char *vec); }
220	NOARGS		{ int sys_madvise(void *addr, size_t len, int behav); }
221	STD		{ int linux_sys_fcntl64(int fd, int cmd, void *arg); }
222	UNIMPL		/* for tux */
223	UNIMPL		/* unused */
224	UNIMPL		gettid
225	UNIMPL		readahead
226	STD		{ int linux_sys_setxattr(char *path, char *name, \
			    void *value, size_t size, int flags); }
227	STD		{ int linux_sys_lsetxattr(char *path, char *name, \
			    void *value, size_t size, int flags); }
228	STD		{ int linux_sys_fsetxattr(int fd, char *name, \
			    void *value, size_t size, int flags); }
229	STD		{ ssize_t linux_sys_getxattr(char *path, char *name, \
			    void *value, size_t size); }
230	STD		{ ssize_t linux_sys_lgetxattr(char *path, char *name, \
			    void *value, size_t size); }
231	STD		{ ssize_t linux_sys_fgetxattr(int fd, char *name, \
			    void *value, size_t size); }
232	STD		{ ssize_t linux_sys_listxattr(char *path, char *list, \
			    size_t size); }
233	STD		{ ssize_t linux_sys_llistxattr(char *path, char *list, \
			    size_t size); }
234	STD		{ ssize_t linux_sys_flistxattr(int fd, char *list, \
			    size_t size); }
235	STD		{ int linux_sys_removexattr(char *path, char *name); }
236	STD		{ int linux_sys_lremovexattr(char *path, char *name); }
237	STD		{ int linux_sys_fremovexattr(int fd, char *name); }
238	UNIMPL		tkill
239	UNIMPL		sendfile64
240	UNIMPL		futex
241	UNIMPL		sched_setaffinity
242	UNIMPL		sched_getaffinity
243	UNIMPL		io_setup
244	UNIMPL		io_destroy
245	UNIMPL		io_getevents
246	UNIMPL		io_submit
247	UNIMPL		io_cancel
248	STD		{ int linux_sys_exit_group(int error_code); }
249	UNIMPL		lookup_dcookie
250	UNIMPL		epoll_create
251	UNIMPL		epoll_ctl
252	UNIMPL		epoll_wait
253	UNIMPL		remap_file_pages
254	UNIMPL		/* for set_thread_area */
255	UNIMPL		/* for get_thread_area */
256	UNIMPL		/* for set_tid_address */
257	UNIMPL		timer_create
258	UNIMPL		timer_settime
259	UNIMPL		timer_gettime
260	UNIMPL		timer_getoverrun
261	UNIMPL		timer_delete
262	STD		{ int linux_sys_clock_settime(clockid_t which, \
			    struct linux_timespec *tp); }
263	STD		{ int linux_sys_clock_gettime(clockid_t which, \
			    struct linux_timespec *tp); }
264	STD		{ int linux_sys_clock_getres(clockid_t which, \
			    struct linux_timespec *tp); }
265	STD		{ int linux_sys_clock_nanosleep(clockid_t which, \
			    int flags, struct linux_timespec *rqtp, \
			    struct linux_timespec *rmtp); }
266	STD		{ int linux_sys_statfs64(const char *path, \
			    size_t sz, struct linux_statfs64 *sp); }
267	STD		{ int linux_sys_fstatfs64(int fd, \
			    size_t sz, struct linux_statfs64 *sp); }
268	UNIMPL		tgkill
269	UNIMPL		utimes
270	UNIMPL		fadvise64_64
271	UNIMPL		pciconfig_iobase
272	UNIMPL		pciconfig_read
273	UNIMPL		pciconfig_write
274	UNIMPL
275	UNIMPL
276	UNIMPL
277	UNIMPL
278	UNIMPL
279	UNIMPL
280	UNIMPL
281	UNIMPL
282	UNIMPL
283	UNIMPL
284	UNIMPL
285	UNIMPL
286	UNIMPL
287	UNIMPL
288	UNIMPL
289	UNIMPL
290	UNIMPL
291	UNIMPL
292	UNIMPL
293	UNIMPL
294	UNIMPL
295	UNIMPL
296	UNIMPL
297	UNIMPL
298	UNIMPL
299	UNIMPL
300	UNIMPL
301	UNIMPL
302	UNIMPL
303	UNIMPL
304	UNIMPL
305	UNIMPL
306	UNIMPL
307	UNIMPL
308	UNIMPL
309	UNIMPL
310	UNIMPL
311	UNIMPL
312	UNIMPL
313	UNIMPL
314	UNIMPL
315	UNIMPL
316	UNIMPL
317	UNIMPL
318	UNIMPL
319	UNIMPL
320	UNIMPL
321	UNIMPL
322	UNIMPL
323	UNIMPL
324	UNIMPL
325	UNIMPL
326	UNIMPL
327	UNIMPL
328	UNIMPL
329	UNIMPL
330	UNIMPL
331	UNIMPL
332	UNIMPL
333	UNIMPL
334	UNIMPL
335	UNIMPL
336	UNIMPL
337	UNIMPL
338	UNIMPL
339	UNIMPL
340	UNIMPL
341	UNIMPL
342	UNIMPL
343	UNIMPL
344	UNIMPL
345	UNIMPL
346	UNIMPL
347	UNIMPL
348	UNIMPL
349	UNIMPL
350	UNIMPL
351	UNIMPL
352	UNIMPL
353	UNIMPL
354	UNIMPL
355	UNIMPL
356	UNIMPL
357	UNIMPL
358	UNIMPL
359	UNIMPL
360	UNIMPL
361	UNIMPL
362	UNIMPL
363	UNIMPL
364	UNIMPL
365	UNIMPL
366	UNIMPL
367	UNIMPL
368	UNIMPL
369	UNIMPL
370	UNIMPL
371	UNIMPL
372	UNIMPL
373	UNIMPL
374	UNIMPL
375	UNIMPL
376	UNIMPL
377	UNIMPL
378	UNIMPL
379	UNIMPL
380	UNIMPL
381	UNIMPL
382	UNIMPL
383	UNIMPL

; ARMLinux actually has two ranges of syscalls.  Normal syscalls use
; SWI numbers starting at 0x900000 (__NR_SYSCALL_BASE).  Special
; ARM-specific syscalls use SWI numbers starting at 0x9f0000
; (__ARM_NR_BASE).  linux_syscall() (in arch/arm/arm/linux_syscall.c)
; remaps these down to 0x900180 so that we can use one linux_sysent
; array for the whole lot.

384	UNIMPL		/* base */
385	STD		{ int linux_sys_breakpoint(void); }
386	STD		{ int linux_sys_cacheflush(uintptr_t from, \
				intptr_t to); }
387	UNIMPL		usr26
388	UNIMPL		usr32

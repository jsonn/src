	$NetBSD: syscalls.master,v 1.200.4.1 2008/05/10 23:49:05 wrstuden Exp $

;	@(#)syscalls.master	8.2 (Berkeley) 1/13/94

; NetBSD system call name/number "master" file.
; (See syscalls.conf to see what it is processed into.)
;
; Fields: number type [type-dependent ...]
;	number	system call number, must be in order
;	type	one of STD, OBSOL, UNIMPL, IGNORED, NODEF, NOARGS, or one of
;		the compatibility options defined in syscalls.conf.
;
; Optional fields are specified after the type field
; (NOTE! they must be specified in this order):
;     RUMP:	the system call can be called directly from rumps
;
; types:
;	STD	always included
;	OBSOL	obsolete, not included in system
;	IGNORED	syscall is a null op, but always succeeds
;	UNIMPL	unimplemented, not included in system
;	EXCL	implemented, but not included in system
;	NODEF	included, but don't define the syscall number
;	NOARGS	included, but don't define the syscall args structure
;	INDIR	included, but don't define the syscall args structure,
;		and allow it to be "really" varargs.
;
; The compat options are defined in the syscalls.conf file, and the
; compat option name is prefixed to the syscall name.  Other than
; that, they're like NODEF (for 'compat' options), or STD (for
; 'libcompat' options).
;
; The type-dependent arguments are as follows:
; For STD, NODEF, NOARGS, and compat syscalls:
;	{ pseudo-proto } [alias]
; For other syscalls:
;	[comment]
;
; #ifdef's, etc. may be included, and are copied to the output files.
; #include's are copied to the syscall names and switch definition files only.

#include "opt_nfsserver.h"
#include "opt_ntp.h"
#include "opt_compat_netbsd.h"
#include "opt_sysv.h"
#include "opt_compat_43.h"
#include "opt_posix.h"

#include "fs_lfs.h"
#include "fs_nfs.h"

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/signal.h>
#include <sys/mount.h>
#include <sys/sa.h>
#include <sys/syscallargs.h>

%%

; Reserved/unimplemented system calls in the range 0-150 inclusive
; are reserved for use in future Berkeley releases.
; Additional system calls implemented in vendor and other
; redistributions should be placed in the reserved range at the end
; of the current calls.

0	INDIR		{ int sys_syscall(int code, \
			    ... register_t args[SYS_MAXSYSARGS]); }
1	STD 		{ void sys_exit(int rval); }
2	STD 		{ int sys_fork(void); }
3	STD 	 RUMP	{ ssize_t sys_read(int fd, void *buf, size_t nbyte); }
4	STD 	 RUMP	{ ssize_t sys_write(int fd, const void *buf, \
			    size_t nbyte); }
5	STD 	 RUMP	{ int sys_open(const char *path, \
			    int flags, ... mode_t mode); }
6	STD 	 RUMP	{ int sys_close(int fd); }
7	STD 		{ int sys_wait4(int pid, int *status, int options, \
			    struct rusage *rusage); }
8	COMPAT_43 	{ int sys_creat(const char *path, mode_t mode); } ocreat
9	STD 	 RUMP	{ int sys_link(const char *path, const char *link); }
10	STD 	 RUMP	{ int sys_unlink(const char *path); }
11	OBSOL		execv
12	STD 	 RUMP	{ int sys_chdir(const char *path); }
13	STD 	 RUMP	{ int sys_fchdir(int fd); }
14	STD 	 RUMP	{ int sys_mknod(const char *path, mode_t mode, \
			    dev_t dev); }
15	STD 	 RUMP	{ int sys_chmod(const char *path, mode_t mode); }
16	STD 	 RUMP	{ int sys_chown(const char *path, uid_t uid, \
			    gid_t gid); }
17	STD 		{ int sys_obreak(char *nsize); } break
18	COMPAT_20 	{ int sys_getfsstat(struct statfs12 *buf, \
			    long bufsize, int flags); }
19	COMPAT_43 	{ long sys_lseek(int fd, long offset, int whence); } \
			    olseek
#ifdef COMPAT_43
20	STD 		{ pid_t sys_getpid_with_ppid(void); } getpid
#else
20	STD 		{ pid_t sys_getpid(void); }
#endif
21	COMPAT_40 	{ int sys_mount(const char *type, const char *path, \
			    int flags, void *data); }
22	STD 	 RUMP	{ int sys_unmount(const char *path, int flags); }
23	STD 		{ int sys_setuid(uid_t uid); }
#ifdef COMPAT_43
24	STD 		{ uid_t sys_getuid_with_euid(void); } getuid
#else
24	STD 		{ uid_t sys_getuid(void); }
#endif
25	STD 		{ uid_t sys_geteuid(void); }
26	STD 		{ int sys_ptrace(int req, pid_t pid, void *addr, \
			    int data); }
27	STD 		{ ssize_t sys_recvmsg(int s, struct msghdr *msg, \
			    int flags); }
28	STD 		{ ssize_t sys_sendmsg(int s, \
			    const struct msghdr *msg, int flags); }
29	STD 		{ ssize_t sys_recvfrom(int s, void *buf, size_t len, \
			    int flags, struct sockaddr *from, \
			    unsigned int *fromlenaddr); }
30	STD		{ int sys_accept(int s, struct sockaddr *name, \
			    unsigned int *anamelen); }
31	STD		{ int sys_getpeername(int fdes, struct sockaddr *asa, \
			    unsigned int *alen); }
32	STD		{ int sys_getsockname(int fdes, struct sockaddr *asa, \
			    unsigned int *alen); }
33	STD 	 RUMP	{ int sys_access(const char *path, int flags); }
34	STD 	 RUMP	{ int sys_chflags(const char *path, u_long flags); }
35	STD 	 RUMP	{ int sys_fchflags(int fd, u_long flags); }
36	STD 	 RUMP	{ void sys_sync(void); }
37	STD 		{ int sys_kill(int pid, int signum); }
38	COMPAT_43 	{ int sys_stat(const char *path, struct stat43 *ub); } \
			    stat43
39	STD 		{ pid_t sys_getppid(void); }
40	COMPAT_43 	{ int sys_lstat(const char *path, \
			    struct stat43 *ub); } lstat43
41	STD 		{ int sys_dup(int fd); }
42	STD 		{ int sys_pipe(void); }
43	STD 		{ gid_t sys_getegid(void); }
44	STD 		{ int sys_profil(char *samples, size_t size, \
			    u_long offset, u_int scale); }
45	STD 		{ int sys_ktrace(const char *fname, int ops, \
			    int facs, int pid); }
46	COMPAT_13 	{ int sys_sigaction(int signum, \
			    const struct sigaction13 *nsa, \
			    struct sigaction13 *osa); } sigaction13
#ifdef COMPAT_43
47	STD 		{ gid_t sys_getgid_with_egid(void); } getgid
#else
47	STD 		{ gid_t sys_getgid(void); }
#endif
48	COMPAT_13 	{ int sys_sigprocmask(int how, \
			    int mask); } sigprocmask13
49	STD 		{ int sys___getlogin(char *namebuf, size_t namelen); }
50	STD 	 	{ int sys___setlogin(const char *namebuf); }
51	STD 		{ int sys_acct(const char *path); }
52	COMPAT_13 	{ int sys_sigpending(void); } sigpending13
53	COMPAT_13 	{ int sys_sigaltstack( \
			    const struct sigaltstack13 *nss, \
			    struct sigaltstack13 *oss); } sigaltstack13
54	STD 		{ int sys_ioctl(int fd, \
			    u_long com, ... void *data); }
55	COMPAT_12 	{ int sys_reboot(int opt); } oreboot
56	STD 		{ int sys_revoke(const char *path); }
57	STD 	 RUMP	{ int sys_symlink(const char *path, \
			    const char *link); }
58	STD 	 RUMP	{ ssize_t sys_readlink(const char *path, char *buf, \
			    size_t count); }
59	STD 		{ int sys_execve(const char *path, \
			    char * const *argp, char * const *envp); }
60	STD 		{ mode_t sys_umask(mode_t newmask); }
61	STD 		{ int sys_chroot(const char *path); }
62	COMPAT_43 	{ int sys_fstat(int fd, struct stat43 *sb); } fstat43
63	COMPAT_43 	{ int sys_getkerninfo(int op, char *where, int *size, \
			    int arg); } ogetkerninfo
64	COMPAT_43 	 { int sys_getpagesize(void); } ogetpagesize
65	COMPAT_12 	 { int sys_msync(void *addr, size_t len); }
; XXX COMPAT_??? for 4.4BSD-compatible vfork(2)?
66	STD 		{ int sys_vfork(void); }
67	OBSOL		vread
68	OBSOL		vwrite
69	STD 		{ int sys_sbrk(intptr_t incr); }
70	STD 		{ int sys_sstk(int incr); }
71	COMPAT_43 	{ int sys_mmap(void *addr, size_t len, int prot, \
			    int flags, int fd, long pos); } ommap
72	STD 		{ int sys_ovadvise(int anom); } vadvise
73	STD 		{ int sys_munmap(void *addr, size_t len); }
74	STD 		{ int sys_mprotect(void *addr, size_t len, \
			    int prot); }
75	STD 		{ int sys_madvise(void *addr, size_t len, \
			    int behav); }
76	OBSOL		vhangup
77	OBSOL		vlimit
78	STD 		{ int sys_mincore(void *addr, size_t len, \
			    char *vec); }
79	STD 		{ int sys_getgroups(int gidsetsize, \
			    gid_t *gidset); }
80	STD 		{ int sys_setgroups(int gidsetsize, \
			    const gid_t *gidset); }
81	STD 	 	{ int sys_getpgrp(void); }
82	STD 		{ int sys_setpgid(int pid, int pgid); }
83	STD 		{ int sys_setitimer(int which, \
			    const struct itimerval *itv, \
			    struct itimerval *oitv); }
84	COMPAT_43 	{ int sys_wait(void); } owait
85	COMPAT_12 	{ int sys_swapon(const char *name); } oswapon
86	STD 		{ int sys_getitimer(int which, \
			    struct itimerval *itv); }
87	COMPAT_43 	{ int sys_gethostname(char *hostname, u_int len); } \
			    ogethostname
88	COMPAT_43 	{ int sys_sethostname(char *hostname, u_int len); } \
			    osethostname
89	COMPAT_43 	{ int sys_getdtablesize(void); } ogetdtablesize
90	STD 		{ int sys_dup2(int from, int to); }
91	UNIMPL		getdopt
92	STD 		{ int sys_fcntl(int fd, int cmd, ... void *arg); }
93	STD 		{ int sys_select(int nd, fd_set *in, fd_set *ou, \
			    fd_set *ex, struct timeval *tv); }
94	UNIMPL		setdopt
95	STD 		{ int sys_fsync(int fd); }
96	STD 		{ int sys_setpriority(int which, id_t who, int prio); }
97	COMPAT_30	{ int sys_socket(int domain, int type, int protocol); }
98	STD		{ int sys_connect(int s, const struct sockaddr *name, \
			    unsigned int namelen); }
99	COMPAT_43	{ int sys_accept(int s, void *name, \
			    int *anamelen); } oaccept
100	STD 		{ int sys_getpriority(int which, id_t who); }
101	COMPAT_43 	{ int sys_send(int s, void *buf, int len, \
			    int flags); } osend
102	COMPAT_43 	{ int sys_recv(int s, void *buf, int len, \
			    int flags); } orecv
103	COMPAT_13 	{ int sys_sigreturn(struct sigcontext13 *sigcntxp); } \
			    sigreturn13
104	STD		{ int sys_bind(int s, const struct sockaddr *name, \
			    unsigned int namelen); }
105	STD		{ int sys_setsockopt(int s, int level, int name, \
			    const void *val, unsigned int valsize); }
106	STD		{ int sys_listen(int s, int backlog); }
107	OBSOL		vtimes
108	COMPAT_43 	{ int sys_sigvec(int signum, struct sigvec *nsv, \
			    struct sigvec *osv); } osigvec
109	COMPAT_43 	{ int sys_sigblock(int mask); } osigblock
110	COMPAT_43 	{ int sys_sigsetmask(int mask); } osigsetmask
111	COMPAT_13 	{ int sys_sigsuspend(int mask); } sigsuspend13
112	COMPAT_43 	{ int sys_sigstack(struct sigstack *nss, \
			    struct sigstack *oss); } osigstack
113	COMPAT_43 	{ int sys_recvmsg(int s, struct omsghdr *msg, \
			    int flags); } orecvmsg
114	COMPAT_43 	{ int sys_sendmsg(int s, void *msg, int flags); } \
			    osendmsg
115	OBSOL		vtrace
116	STD 		{ int sys_gettimeofday(struct timeval *tp, \
			    void *tzp); }
117	STD 		{ int sys_getrusage(int who, struct rusage *rusage); }
118	STD		{ int sys_getsockopt(int s, int level, int name, \
			    void *val, unsigned int *avalsize); }
119	OBSOL		resuba
120	STD 		{ ssize_t sys_readv(int fd, \
			    const struct iovec *iovp, int iovcnt); }
121	STD 		{ ssize_t sys_writev(int fd, \
			    const struct iovec *iovp, int iovcnt); }
122	STD 		{ int sys_settimeofday(const struct timeval *tv, \
			    const void *tzp); }
123	STD 		{ int sys_fchown(int fd, uid_t uid, gid_t gid); }
124	STD 		{ int sys_fchmod(int fd, mode_t mode); }
125	COMPAT_43 	{ int sys_recvfrom(int s, void *buf, size_t len, \
			    int flags, void *from, int *fromlenaddr); } \
			    orecvfrom
126	STD 		{ int sys_setreuid(uid_t ruid, uid_t euid); }
127	STD 		{ int sys_setregid(gid_t rgid, gid_t egid); }
128	STD 	 RUMP	{ int sys_rename(const char *from, const char *to); }
129	COMPAT_43 	{ int sys_truncate(const char *path, long length); } \
			    otruncate
130	COMPAT_43 	{ int sys_ftruncate(int fd, long length); } oftruncate
131	STD 		{ int sys_flock(int fd, int how); }
132	STD 		{ int sys_mkfifo(const char *path, mode_t mode); }
133	STD 		{ ssize_t sys_sendto(int s, const void *buf, \
			    size_t len, int flags, const struct sockaddr *to, \
			    unsigned int tolen); }
134	STD		{ int sys_shutdown(int s, int how); }
135	STD		{ int sys_socketpair(int domain, int type, \
			    int protocol, int *rsv); }
136	STD 	 RUMP	{ int sys_mkdir(const char *path, mode_t mode); }
137	STD 	 RUMP	{ int sys_rmdir(const char *path); }
138	STD 		{ int sys_utimes(const char *path, \
			    const struct timeval *tptr); }
139	OBSOL		4.2 sigreturn
140	STD 		{ int sys_adjtime(const struct timeval *delta, \
			    struct timeval *olddelta); }
141	COMPAT_43	{ int sys_getpeername(int fdes, void *asa, \
			    int *alen); } ogetpeername
142	COMPAT_43 	{ int32_t sys_gethostid(void); } ogethostid
143	COMPAT_43 	{ int sys_sethostid(int32_t hostid); } osethostid
144	COMPAT_43 	{ int sys_getrlimit(int which, \
			    struct orlimit *rlp); } ogetrlimit
145	COMPAT_43 	{ int sys_setrlimit(int which, \
			    const struct orlimit *rlp); } osetrlimit
146	COMPAT_43 	{ int sys_killpg(int pgid, int signum); } okillpg
147	STD 	 	{ int sys_setsid(void); }
148	STD 		{ int sys_quotactl(const char *path, int cmd, \
			    int uid, void *arg); }
149	COMPAT_43 	{ int sys_quota(void); } oquota
150	COMPAT_43	{ int sys_getsockname(int fdec, void *asa, \
			    int *alen); } ogetsockname

; Syscalls 151-180 inclusive are reserved for vendor-specific
; system calls.  (This includes various calls added for compatibity
; with other Unix variants.)
; Some of these calls are now supported by BSD...
151	UNIMPL
152	UNIMPL
153	UNIMPL
154	UNIMPL
#if defined(NFS) || defined(NFSSERVER) || !defined(_KERNEL)
155	STD 		{ int sys_nfssvc(int flag, void *argp); }
#else
155	EXCL		nfssvc
#endif
156	COMPAT_43 	 { int sys_getdirentries(int fd, char *buf, \
			    u_int count, long *basep); } ogetdirentries
157	COMPAT_20 	{ int sys_statfs(const char *path, \
			    struct statfs12 *buf); }
158	COMPAT_20 	{ int sys_fstatfs(int fd, struct statfs12 *buf); }
159	UNIMPL
160	UNIMPL
161	COMPAT_30 	 { int sys_getfh(const char *fname, \
			    struct compat_30_fhandle *fhp); }
162	COMPAT_09 	 { int sys_getdomainname(char *domainname, int len); } \
			    ogetdomainname
163	COMPAT_09 	 { int sys_setdomainname(char *domainname, int len); } \
			    osetdomainname
164	COMPAT_09 		{ int sys_uname(struct outsname *name); } ouname
165	STD 		{ int sys_sysarch(int op, void *parms); }
166	UNIMPL
167	UNIMPL
168	UNIMPL
; XXX more generally, never on machines where sizeof(void *) != sizeof(int)
#if (defined(SYSVSEM) || !defined(_KERNEL)) && !defined(_LP64)
169	COMPAT_10 	{ int sys_semsys(int which, int a2, int a3, int a4, \
			    int a5); } osemsys
#else
169	EXCL		1.0 semsys
#endif
; XXX more generally, never on machines where sizeof(void *) != sizeof(int)
#if (defined(SYSVMSG) || !defined(_KERNEL)) && !defined(_LP64)
170	COMPAT_10 	{ int sys_msgsys(int which, int a2, int a3, int a4, \
			    int a5, int a6); } omsgsys
#else
170	EXCL		1.0 msgsys
#endif
; XXX more generally, never on machines where sizeof(void *) != sizeof(int)
#if (defined(SYSVSHM) || !defined(_KERNEL)) && !defined(_LP64)
171	COMPAT_10 		{ int sys_shmsys(int which, int a2, int a3, int a4); } \
			    oshmsys
#else
171	EXCL		1.0 shmsys
#endif
172	UNIMPL
173	STD 		{ ssize_t sys_pread(int fd, void *buf, \
			    size_t nbyte, int pad, off_t offset); }
174	STD 		{ ssize_t sys_pwrite(int fd, const void *buf, \
			    size_t nbyte, int pad, off_t offset); }
; For some reason, ntp_gettime doesn't want to raise SIGSYS when it's excluded.
175	COMPAT_30 	 { int sys_ntp_gettime(struct ntptimeval30 *ntvp); }
#if defined(NTP) || !defined(_KERNEL)
176	STD 		{ int sys_ntp_adjtime(struct timex *tp); }
#else
176	EXCL		ntp_adjtime
#endif
177	UNIMPL
178	UNIMPL
179	UNIMPL
180	UNIMPL

; Syscalls 180-199 are used by/reserved for BSD
181	STD 		{ int sys_setgid(gid_t gid); }
182	STD 		{ int sys_setegid(gid_t egid); }
183	STD 		{ int sys_seteuid(uid_t euid); }
#if defined(LFS) || !defined(_KERNEL)
184	STD 		{ int sys_lfs_bmapv(fsid_t *fsidp, \
			    struct block_info *blkiov, int blkcnt); }
185	STD 		{ int sys_lfs_markv(fsid_t *fsidp, \
			    struct block_info *blkiov, int blkcnt); }
186	STD 		{ int sys_lfs_segclean(fsid_t *fsidp, u_long segment); }
187	STD 		{ int sys_lfs_segwait(fsid_t *fsidp, \
			    struct timeval *tv); }
#else
184	EXCL		lfs_bmapv
185	EXCL		lfs_markv
186	EXCL		lfs_segclean
187	EXCL		lfs_segwait
#endif
188	COMPAT_12 	{ int sys_stat(const char *path, struct stat12 *ub); } \
			    stat12
189	COMPAT_12 	{ int sys_fstat(int fd, struct stat12 *sb); } fstat12
190	COMPAT_12 	{ int sys_lstat(const char *path, \
			    struct stat12 *ub); } lstat12
191	STD 		{ long sys_pathconf(const char *path, int name); }
192	STD 		{ long sys_fpathconf(int fd, int name); }
193	UNIMPL
194	STD 		{ int sys_getrlimit(int which, \
			    struct rlimit *rlp); }
195	STD 		{ int sys_setrlimit(int which, \
			    const struct rlimit *rlp); }
196	COMPAT_12 	{ int sys_getdirentries(int fd, char *buf, \
			    u_int count, long *basep); }
197	STD 		{ void *sys_mmap(void *addr, size_t len, int prot, \
			    int flags, int fd, long pad, off_t pos); }
198	INDIR		{ quad_t sys___syscall(quad_t code, \
			    ... register_t args[SYS_MAXSYSARGS]); }
199	STD 		{ off_t sys_lseek(int fd, int pad, off_t offset, \
			    int whence); }
200	STD 	 RUMP	{ int sys_truncate(const char *path, int pad, \
			    off_t length); }
201	STD 		{ int sys_ftruncate(int fd, int pad, off_t length); }
202	STD 		{ int sys___sysctl(const int *name, u_int namelen, \
			    void *old, size_t *oldlenp, const void *new, \
			    size_t newlen); }
203	STD 		{ int sys_mlock(const void *addr, size_t len); }
204	STD 		{ int sys_munlock(const void *addr, size_t len); }
205	STD 		{ int sys_undelete(const char *path); }
206	STD 		{ int sys_futimes(int fd, \
			    const struct timeval *tptr); }
207	STD 		{ pid_t sys_getpgid(pid_t pid); }
208	STD 		{ int sys_reboot(int opt, char *bootstr); }
209	STD 		{ int sys_poll(struct pollfd *fds, u_int nfds, \
			    int timeout); }
;
; Syscalls 210-219 are reserved for dynamically loaded syscalls
;
#if defined(LKM) || !defined(_KERNEL)
210	NODEF		{ int sys_lkmnosys(void); }
211	NODEF		{ int sys_lkmnosys(void); }
212	NODEF		{ int sys_lkmnosys(void); }
213	NODEF		{ int sys_lkmnosys(void); }
214	NODEF		{ int sys_lkmnosys(void); }
215	NODEF		{ int sys_lkmnosys(void); }
216	NODEF		{ int sys_lkmnosys(void); }
217	NODEF		{ int sys_lkmnosys(void); }
218	NODEF		{ int sys_lkmnosys(void); }
219	NODEF		{ int sys_lkmnosys(void); }
#else	/* !LKM */
210	EXCL		lkmnosys
211	EXCL		lkmnosys
212	EXCL		lkmnosys
213	EXCL		lkmnosys
214	EXCL		lkmnosys
215	EXCL		lkmnosys
216	EXCL		lkmnosys
217	EXCL		lkmnosys
218	EXCL		lkmnosys
219	EXCL		lkmnosys
#endif	/* !LKM */
; System calls 220-300 are reserved for use by NetBSD
#if defined(SYSVSEM) || !defined(_KERNEL)
220	COMPAT_14 	{ int sys___semctl(int semid, int semnum, int cmd, \
			    union __semun *arg); }
221	STD 		{ int sys_semget(key_t key, int nsems, int semflg); }
222	STD 		{ int sys_semop(int semid, struct sembuf *sops, \
			    size_t nsops); }
223	STD 		{ int sys_semconfig(int flag); }
#else
220	EXCL		compat_14_semctl
221	EXCL		semget
222	EXCL		semop
223	EXCL		semconfig
#endif
#if defined(SYSVMSG) || !defined(_KERNEL)
224	COMPAT_14 	{ int sys_msgctl(int msqid, int cmd, \
			    struct msqid_ds14 *buf); }
225	STD 		{ int sys_msgget(key_t key, int msgflg); }
226	STD 		{ int sys_msgsnd(int msqid, const void *msgp, \
			    size_t msgsz, int msgflg); }
227	STD 		{ ssize_t sys_msgrcv(int msqid, void *msgp, \
			    size_t msgsz, long msgtyp, int msgflg); }
#else
224	EXCL 		compat_14_msgctl
225	EXCL 		msgget
226	EXCL 		msgsnd
227	EXCL 		msgrcv
#endif
#if defined(SYSVSHM) || !defined(_KERNEL)
228	STD 		{ void *sys_shmat(int shmid, const void *shmaddr, \
			    int shmflg); }
229	COMPAT_14 	{ int sys_shmctl(int shmid, int cmd, \
			    struct shmid_ds14 *buf); }
230	STD 		{ int sys_shmdt(const void *shmaddr); }
231	STD 		{ int sys_shmget(key_t key, size_t size, int shmflg); }
#else
228	EXCL		shmat
229	EXCL		compat_14_shmctl
230	EXCL		shmdt
231	EXCL		shmget
#endif
232	STD 		{ int sys_clock_gettime(clockid_t clock_id, \
			    struct timespec *tp); }
233	STD 		{ int sys_clock_settime(clockid_t clock_id, \
			    const struct timespec *tp); }
234	STD 		{ int sys_clock_getres(clockid_t clock_id, \
			    struct timespec *tp); }
235	STD 		{ int sys_timer_create(clockid_t clock_id, \
			    struct sigevent *evp, timer_t *timerid); }
236	STD 		{ int sys_timer_delete(timer_t timerid); }
237	STD 		{ int sys_timer_settime(timer_t timerid, int flags, \
			    const struct itimerspec *value, \
			    struct itimerspec *ovalue); }
238	STD 		{ int sys_timer_gettime(timer_t timerid, struct \
			    itimerspec *value); }
239	STD 		{ int sys_timer_getoverrun(timer_t timerid); }
;
; Syscalls 240-269 are reserved for other IEEE Std1003.1b syscalls
;
240	STD 		{ int sys_nanosleep(const struct timespec *rqtp, \
			    struct timespec *rmtp); }
241	STD 		{ int sys_fdatasync(int fd); }
242	STD 		{ int sys_mlockall(int flags); }
243	STD 		{ int sys_munlockall(void); }
244	STD 		{ int sys___sigtimedwait(const sigset_t *set, \
			    siginfo_t *info, \
			    struct timespec *timeout); }
245	UNIMPL		sys_sigqueue
246	STD 		{ int sys_modctl(int cmd, void *arg); }
#if defined(P1003_1B_SEMAPHORE) || (!defined(_KERNEL) && defined(_LIBC))
247	STD 		{ int sys__ksem_init(unsigned int value, semid_t *idp); }
248	STD 		{ int sys__ksem_open(const char *name, int oflag, \
			    mode_t mode, unsigned int value, semid_t *idp); }
249	STD 		{ int sys__ksem_unlink(const char *name); }
250	STD 		{ int sys__ksem_close(semid_t id); }
251	STD 		{ int sys__ksem_post(semid_t id); }
252	STD 		{ int sys__ksem_wait(semid_t id); }
253	STD 		{ int sys__ksem_trywait(semid_t id); }
254	STD 		{ int sys__ksem_getvalue(semid_t id, \
			    unsigned int *value); }
255	STD 		{ int sys__ksem_destroy(semid_t id); }
256	UNIMPL		sys__ksem_timedwait
#else
247	EXCL		sys__ksem_init
248	EXCL		sys__ksem_open
249	EXCL 		sys__ksem_unlink
250	EXCL		sys__ksem_close
251	EXCL		sys__ksem_post
252	EXCL		sys__ksem_wait
253	EXCL		sys__ksem_trywait
254	EXCL		sys__ksem_getvalue
255	EXCL		sys__ksem_destroy
256	UNIMPL		sys__ksem_timedwait
#endif
257	STD 		{ mqd_t sys_mq_open(const char * name, int oflag, \
			    mode_t mode, struct mq_attr *attr); }
258	STD 		{ int sys_mq_close(mqd_t mqdes); }
259	STD 		{ int sys_mq_unlink(const char *name); }
260	STD 		{ int sys_mq_getattr(mqd_t mqdes, \
			    struct mq_attr *mqstat); }
261	STD 		{ int sys_mq_setattr(mqd_t mqdes, \
			    const struct mq_attr *mqstat, \
			    struct mq_attr *omqstat); }
262	STD 		{ int sys_mq_notify(mqd_t mqdes, \
			    const struct sigevent *notification); }
263	STD 		{ int sys_mq_send(mqd_t mqdes, const char *msg_ptr, \
			    size_t msg_len, unsigned msg_prio); }
264	STD 		{ ssize_t sys_mq_receive(mqd_t mqdes, char *msg_ptr, \
			    size_t msg_len, unsigned *msg_prio); }
265	STD 		{ int sys_mq_timedsend(mqd_t mqdes, \
			    const char *msg_ptr, size_t msg_len, \
			    unsigned msg_prio, \
			    const struct timespec *abs_timeout); }
266	STD 		{ ssize_t sys_mq_timedreceive(mqd_t mqdes, \
			    char *msg_ptr, size_t msg_len, unsigned *msg_prio, \
			    const struct timespec *abs_timeout); }
267	UNIMPL
268	UNIMPL
269	UNIMPL
270	STD 		{ int sys___posix_rename(const char *from, \
			    const char *to); }
271	STD 		{ int sys_swapctl(int cmd, void *arg, int misc); }
272	COMPAT_30 		{ int sys_getdents(int fd, char *buf, size_t count); }
273	STD 		{ int sys_minherit(void *addr, size_t len, \
			    int inherit); }
274	STD 	 RUMP	{ int sys_lchmod(const char *path, mode_t mode); }
275	STD 	 RUMP	{ int sys_lchown(const char *path, uid_t uid, \
			    gid_t gid); }
276	STD 		{ int sys_lutimes(const char *path, \
			    const struct timeval *tptr); }
277	STD 		{ int sys___msync13(void *addr, size_t len, int flags); }
278	COMPAT_30 	{ int sys___stat13(const char *path, struct stat13 *ub); }
279	COMPAT_30 	{ int sys___fstat13(int fd, struct stat13 *sb); }
280	COMPAT_30 	{ int sys___lstat13(const char *path, struct stat13 *ub); }
281	STD 		{ int sys___sigaltstack14( \
			    const struct sigaltstack *nss, \
			    struct sigaltstack *oss); }
282	STD 		{ int sys___vfork14(void); }
283	STD 		{ int sys___posix_chown(const char *path, uid_t uid, \
			    gid_t gid); }
284	STD 		{ int sys___posix_fchown(int fd, uid_t uid, \
			    gid_t gid); }
285	STD 		{ int sys___posix_lchown(const char *path, uid_t uid, \
			    gid_t gid); }
286	STD 		{ pid_t sys_getsid(pid_t pid); }
287	STD 		{ pid_t sys___clone(int flags, void *stack); }
288	STD 		{ int sys_fktrace(int fd, int ops, \
			    int facs, int pid); }
289	STD 		{ ssize_t sys_preadv(int fd, \
			    const struct iovec *iovp, int iovcnt, \
			    int pad, off_t offset); }
290	STD 		{ ssize_t sys_pwritev(int fd, \
			    const struct iovec *iovp, int iovcnt, \
			    int pad, off_t offset); }
291	COMPAT_16 	{ int sys___sigaction14(int signum, \
			    const struct sigaction *nsa, \
			    struct sigaction *osa); }
292	STD 		{ int sys___sigpending14(sigset_t *set); }
293	STD 		{ int sys___sigprocmask14(int how, \
			    const sigset_t *set, \
			    sigset_t *oset); }
294	STD 		{ int sys___sigsuspend14(const sigset_t *set); }
295	COMPAT_16 	{ int sys___sigreturn14(struct sigcontext *sigcntxp); }
296	STD 		{ int sys___getcwd(char *bufp, size_t length); }
297	STD 		{ int sys_fchroot(int fd); }
298	COMPAT_30 	{ int sys_fhopen(const struct compat_30_fhandle *fhp, int flags); }
299	COMPAT_30 	{ int sys_fhstat(const struct compat_30_fhandle *fhp, \
			    struct stat13 *sb); }
300	COMPAT_20 	{ int sys_fhstatfs(const struct compat_30_fhandle *fhp, \
			    struct statfs12 *buf); }
#if defined(SYSVSEM) || !defined(_KERNEL)
301	STD 		{ int sys_____semctl13(int semid, int semnum, int cmd, \
			    ... union __semun *arg); }
#else
301	EXCL		____semctl13
#endif
#if defined(SYSVMSG) || !defined(_KERNEL)
302	STD 		{ int sys___msgctl13(int msqid, int cmd, \
			    struct msqid_ds *buf); }
#else
302	EXCL		__msgctl13
#endif
#if defined(SYSVSHM) || !defined(_KERNEL)
303	STD 		{ int sys___shmctl13(int shmid, int cmd, \
			    struct shmid_ds *buf); }
#else
303	EXCL		__shmctl13
#endif
304	STD 		{ int sys_lchflags(const char *path, u_long flags); }
305	STD 		{ int sys_issetugid(void); }
306	STD 		{ int sys_utrace(const char *label, void *addr, \
				size_t len); }
307	STD 		{ int sys_getcontext(struct __ucontext *ucp); }
308	STD 		{ int sys_setcontext(const struct __ucontext *ucp); }
309	STD 		{ int sys__lwp_create(const struct __ucontext *ucp, \
				u_long flags, lwpid_t *new_lwp); }
310	STD 		{ int sys__lwp_exit(void); }
311	STD 		{ lwpid_t sys__lwp_self(void); }
312	STD 		{ int sys__lwp_wait(lwpid_t wait_for, \
				lwpid_t *departed); }
313	STD 		{ int sys__lwp_suspend(lwpid_t target); }
314	STD 		{ int sys__lwp_continue(lwpid_t target); }
315	STD 		{ int sys__lwp_wakeup(lwpid_t target); }
316	STD 		{ void *sys__lwp_getprivate(void); }
317	STD 		{ void sys__lwp_setprivate(void *ptr); }
318	STD 		{ int sys__lwp_kill(lwpid_t target, int signo); }
319	STD 		{ int sys__lwp_detach(lwpid_t target); }
320	STD 		{ int sys__lwp_park(const struct timespec *ts, \
				lwpid_t unpark, const void *hint, \
				const void *unparkhint); }
321	STD 		{ int sys__lwp_unpark(lwpid_t target, const void *hint); }
322	STD 		{ ssize_t sys__lwp_unpark_all(const lwpid_t *targets, \
				size_t ntargets, const void *hint); }
323	STD 		{ int sys__lwp_setname(lwpid_t target, \
				const char *name); }
324	STD 		{ int sys__lwp_getname(lwpid_t target, \
				char *name, size_t len); }
325	STD 		{ int sys__lwp_ctl(int features, \
				struct lwpctl **address); }
; Syscalls 326-339 reserved for LWP syscalls.
326	UNIMPL
327	UNIMPL
328	UNIMPL
329	UNIMPL
; SA system calls.
330	STD 		{ int sys_sa_register(sa_upcall_t new, \
				sa_upcall_t *old, int flags, \
				ssize_t stackinfo_offset); }
331	STD 		{ int sys_sa_stacks(int num, stack_t *stacks); }
332	STD 		{ int sys_sa_enable(void); }
333	STD 		{ int sys_sa_setconcurrency(int concurrency); }
334	STD 		{ int sys_sa_yield(void); }
335	STD 		{ int sys_sa_preempt(int sa_id); }
336	STD 		{ int sys_sa_unblockyield(void); }
;
; Syscalls 337-339 are reserved for other scheduler activation syscalls.
;
337	UNIMPL
338	UNIMPL
339	UNIMPL
340	STD 		{ int sys___sigaction_sigtramp(int signum, \
			    const struct sigaction *nsa, \
			    struct sigaction *osa, \
			    const void *tramp, int vers); }
341	STD 		{ int sys_pmc_get_info(int ctr, int op, void *args); }
342	STD 		{ int sys_pmc_control(int ctr, int op, void *args); }
343	STD 		{ int sys_rasctl(void *addr, size_t len, int op); }
344	STD 		{ int sys_kqueue(void); }
345	STD 		{ int sys_kevent(int fd, \
			    const struct kevent *changelist, size_t nchanges, \
			    struct kevent *eventlist, size_t nevents, \
			    const struct timespec *timeout); }

; Scheduling system calls.
346	STD 		{ int sys__sched_setparam(pid_t pid, lwpid_t lid, \
			    int policy, const struct sched_param *params); }
347	STD 		{ int sys__sched_getparam(pid_t pid, lwpid_t lid, \
			    int *policy, struct sched_param *params); }
348	STD 		{ int sys__sched_setaffinity(pid_t pid, lwpid_t lid, \
			    size_t size, void *cpuset); }
349	STD 		{ int sys__sched_getaffinity(pid_t pid, lwpid_t lid, \
			    size_t size, void *cpuset); }
350	STD 		{ int sys_sched_yield(void); }
351	UNIMPL
352	UNIMPL
353	UNIMPL

354	STD 		{ int sys_fsync_range(int fd, int flags, off_t start, \
			    off_t length); }
355	STD 		{ int sys_uuidgen(struct uuid *store, int count); }
356	STD 		{ int sys_getvfsstat(struct statvfs *buf, \
			    size_t bufsize, int flags); }
357	STD 		{ int sys_statvfs1(const char *path, \
			    struct statvfs *buf, int flags); }
358	STD 		{ int sys_fstatvfs1(int fd, struct statvfs *buf, \
			    int flags); }
359	COMPAT_30 		{ int sys_fhstatvfs1(const struct compat_30_fhandle *fhp, \
			    struct statvfs *buf, int flags); }
360	STD 		{ int sys_extattrctl(const char *path, int cmd, \
			    const char *filename, int attrnamespace, \
			    const char *attrname); }
361	STD 		{ int sys_extattr_set_file(const char *path, \
			    int attrnamespace, const char *attrname, \
			    const void *data, size_t nbytes); }
362	STD 		{ ssize_t sys_extattr_get_file(const char *path, \
			    int attrnamespace, const char *attrname, \
			    void *data, size_t nbytes); }
363	STD 		{ int sys_extattr_delete_file(const char *path, \
			    int attrnamespace, const char *attrname); }
364	STD 		{ int sys_extattr_set_fd(int fd, \
			    int attrnamespace, const char *attrname, \
			    const void *data, size_t nbytes); }
365	STD 		{ ssize_t sys_extattr_get_fd(int fd, \
			    int attrnamespace, const char *attrname, \
			    void *data, size_t nbytes); }
366	STD 		{ int sys_extattr_delete_fd(int fd, \
			    int attrnamespace, const char *attrname); }
367	STD 		{ int sys_extattr_set_link(const char *path, \
			    int attrnamespace, const char *attrname, \
			    const void *data, size_t nbytes); }
368	STD 		{ ssize_t sys_extattr_get_link(const char *path, \
			    int attrnamespace, const char *attrname, \
			    void *data, size_t nbytes); }
369	STD 		{ int sys_extattr_delete_link(const char *path, \
			    int attrnamespace, const char *attrname); }
370	STD 		{ ssize_t sys_extattr_list_fd(int fd, \
			    int attrnamespace, void *data, size_t nbytes); }
371	STD 		{ ssize_t sys_extattr_list_file(const char *path, \
			    int attrnamespace, void *data, size_t nbytes); }
372	STD 		{ ssize_t sys_extattr_list_link(const char *path, \
			    int attrnamespace, void *data, size_t nbytes); }
373	STD 		{ int sys_pselect(int nd, fd_set *in, fd_set *ou, \
			    fd_set *ex, const struct timespec *ts, \
			    const sigset_t *mask); }
374	STD 		{ int sys_pollts(struct pollfd *fds, u_int nfds, \
			    const struct timespec *ts, const sigset_t *mask); }
375	STD 		{ int sys_setxattr(const char *path, \
			    const char *name, void *value, size_t size, \
			    int flags); }
376	STD 		{ int sys_lsetxattr(const char *path, \
			    const char *name, void *value, size_t size, \
			    int flags); }
377	STD 		{ int sys_fsetxattr(int fd, \
			    const char *name, void *value, size_t size, \
			    int flags); }
378	STD 		{ int sys_getxattr(const char *path, \
			    const char *name, void *value, size_t size); }
379	STD 		{ int sys_lgetxattr(const char *path, \
			    const char *name, void *value, size_t size); }
380	STD 		{ int sys_fgetxattr(int fd, \
			    const char *name, void *value, size_t size); }
381	STD 		{ int sys_listxattr(const char *path, \
			    char *list, size_t size); }
382	STD 		{ int sys_llistxattr(const char *path, \
			    char *list, size_t size); }
383	STD 		{ int sys_flistxattr(int fd, \
			    char *list, size_t size); }
384	STD 		{ int sys_removexattr(const char *path, \
			    const char *name); }
385	STD 		{ int sys_lremovexattr(const char *path, \
			    const char *name); }
386	STD 		{ int sys_fremovexattr(int fd, \
			    const char *name); }
387	STD 		{ int sys___stat30(const char *path, struct stat *ub); }
388	STD 		{ int sys___fstat30(int fd, struct stat *sb); }
389	STD 		{ int sys___lstat30(const char *path, struct stat *ub); }
390	STD 		{ int sys___getdents30(int fd, char *buf, size_t count); }
391	IGNORED		old posix_fadvise
392	COMPAT_30 	{ int sys___fhstat30(const struct compat_30_fhandle \
			    *fhp, struct stat *sb); }
393	STD 		{ int sys___ntp_gettime30(struct ntptimeval *ntvp); }
394	STD		{ int sys___socket30(int domain, int type, int protocol); }
395	STD 		{ int sys___getfh30(const char *fname, void *fhp, \
			    size_t *fh_size); }
396	STD 		{ int sys___fhopen40(const void *fhp, size_t fh_size,\
			    int flags); }
397	STD 		{ int sys___fhstatvfs140(const void *fhp, \
			    size_t fh_size, struct statvfs *buf, int flags); }
398	STD 		{ int sys___fhstat40(const void *fhp, \
			    size_t fh_size, struct stat *sb); }

; Asynchronous I/O system calls
399	STD 		{ int sys_aio_cancel(int fildes, struct aiocb *aiocbp); }
400	STD 		{ int sys_aio_error(const struct aiocb *aiocbp); }
401	STD 		{ int sys_aio_fsync(int op, struct aiocb *aiocbp); }
402	STD 		{ int sys_aio_read(struct aiocb *aiocbp); }
403	STD 		{ int sys_aio_return(struct aiocb *aiocbp); }
404	STD 		{ int sys_aio_suspend(const struct aiocb *const *list, \
			    int nent, const struct timespec *timeout); }
405	STD 		{ int sys_aio_write(struct aiocb *aiocbp); }
406	STD 		{ int sys_lio_listio(int mode, struct aiocb *const *list, \
			    int nent, struct sigevent *sig); }

407	UNIMPL
408	UNIMPL
409	UNIMPL

410	STD 		{ int sys___mount50(const char *type, \
			    const char *path, int flags, void *data, \
			    size_t data_len); }
411	STD 		{ void *sys_mremap(void *old_address, size_t old_size, \
			    void *new_address, size_t new_size, int flags); }

; Processor-sets system calls
412	STD 		{ int sys_pset_create(psetid_t *psid); }
413	STD 		{ int sys_pset_destroy(psetid_t psid); }
414	STD 		{ int sys_pset_assign(psetid_t psid, cpuid_t cpuid, \
			    psetid_t *opsid); }
415	STD 		{ int sys__pset_bind(idtype_t idtype, id_t first_id, \
			    id_t second_id, psetid_t psid, psetid_t *opsid); }
416	STD 		{ int sys___posix_fadvise50(int fd, int pad, \
			    off_t offset, off_t len, int advice); }

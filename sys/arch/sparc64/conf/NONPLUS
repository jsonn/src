# 	$NetBSD: NONPLUS,v 1.19.4.1 2000/07/06 14:10:36 sommerfeld Exp $

include "arch/sparc64/conf/std.sparc64"

maxusers	64

## System kernel configuration.  See options(4) for more detail.

options AUDIO_DEBUG=1

# Options for variants of the Sun SPARC architecure.
# We currently support three architecture types; at least one is required.
options		SUN4U		# sun4u - Ultra 140 and 170
options		TRAPWIN		# use a new window for traps
options		__ELF__		# we use elf 
#options		_LP64		# we're using a 64-bit compiler

## System options specific to the sparc machine type

## Use a faster console than the PROM's slow drawing routines.  Not needed
## for headless (no framebuffer) machines.
#options 	RASTERCONSOLE		# fast rasterop console
#options	FONT_GALLANT12x22	# the console font
#options	FONT_BOLD8x16		# a somewhat smaller font

#### System options that are the same for all ports

## Root device configuration: change the ?'s if you are going to use a
## nonstandard root partition (other than where the kernel is booted from)
## and/or nonstandard root type (not ffs or nfs).  Normally this can be
## automagically determined at boot time.

config		netbsd	root on ? type ?

## UVM options.
options		UVM_PAGE_TRKOWN
options		UVMHIST
#options 	UVMHIST_PRINT	# Loud!

## System call tracing (see ktrace(1)).
options 	KTRACE

## Collect statistics on kernel malloc's and free's.  This does have a
## significant performance hit on slower machines, so it is intended for
## diagnostic use only.
options 	KMEMSTATS

## System V compatible IPC subsystem.  (msgctl(2), semctl(2), and shmctl(2))
options 	SYSVMSG		# System V message queues
options 	SYSVSEM		# System V semaphores
options 	SYSVSHM		# System V shared memory
#options 	SHMMAXPGS=1024	# 1024 pages is the default

## Loadable kernel module support; still under development.
options 	LKM

## NFS boot options; default on sparc is the bootparam protocol
options 	NFS_BOOT_BOOTPARAM
#options 	NFS_BOOT_BOOTP
#options 	NFS_BOOT_DHCP

#### Debugging options

## The DDB in-kernel debugger runs at panic (unless DDB_ONPANIC=0), or at
## serial console break or keyboard reset, where the PROM would normally
## intercept.  DDB_HISTORY_SIZE adds up/down arrow command history.
options 	DDB			# kernel dynamic debugger
options 	DDB_HISTORY_SIZE=100	# enable history editing in DDB
options 	DDB_ONPANIC		# see also sysctl(8): `ddb.onpanic'

## You may also use gdb, on another computer connected to this machine over
## a serial port.  Both KGDBDEV and KGDBRATE should be specified; KGDBDEV is
## a dev_t encoded device number of the serial port to use.
## (0xc01 = ttya, 0xc02 = ttyb.)
#options 	KGDB		# support for kernel gdb
#options 	KGDBDEV=0xc01	# kgdb device number (this sample is `ttyb')
#options 	KGDBRATE=38400	# baud rate


## Compile the kernel with debugging symbols (`netbsd.gdb' is the debug file),
## such that gdb(1) can be used on a kernel coredump.

makeoptions 	DEBUG="-g"


## Adds code to the kernel that does internal consistency checks, and will
## cause the kernel to panic if corruption of internal data structures
## is detected.
options 	DIAGNOSTIC	# extra kernel sanity checking

## Enable (possibly expensive) debugging code that may also display messages
## on the system console
options 	DEBUG

## Enable printing of spl() transisions -- really slow
##
#options		SPLDEBUG

## Make SCSI error messages more verbose when explaining their meanings.
options 	SCSIVERBOSE

## `INSECURE' turns off the kernel security level (securelevel = 0 always).
## This allows writing to /dev/mem, loading kernel modules while multi-user,
## and other insecurities good only for development work.  Do not use this
## option on a production machine.
#options 	INSECURE

## Allow non-root users to grab /dev/console with programs such as xconsole.
## `xconsole' therefore does not need setuid root with this option enabled.
#options 	UCONSOLE

## `FDSCRIPTS' allows non-readable but executable scripts by providing a
## pre-opened opaque file to the script interpreter.  `SETUIDSCRIPTS',
## which implies FDSCRIPTS, allows scripts to be set-user-id using the same
## opaque file mechanism.  Perl calls this "secure setuid scripts."

#options 	FDSCRIPTS
#options 	SETUIDSCRIPTS

## Options for compatibility with previous releases foreign system binaries.
## In the cases of COMPAT_SUNOS and COMPAT_SVR4, you may need to set up
## additional user-level utilities or system configuration files. See
## compat_sunos(8) and compat_svr4(8).

options 	COMPAT_43	# 4.3BSD system interfaces
options 	COMPAT_10	# NetBSD 1.0 binary compatibility
options 	COMPAT_11	# NetBSD 1.1 binary compatibility
options 	COMPAT_12	# NetBSD 1.2 binary compatibility
options 	COMPAT_13	# NetBSD 1.3 binary compatibility
options 	COMPAT_14	# NetBSD 1.4 binary compatibility
options 	COMPAT_SUNOS	# SunOS 4.x binary compatibility
options 	COMPAT_SVR4	# SunOS 5.x binary compatibility
#options		COMPAT_NETBSD32	# NetBSD/sparc binary compatibility
options 	EXEC_ELF32	# Exec module for SunOS 5.x binaries.
#options		EXEC_ELF64	# Exec module for SunOS 5.x binaries.
options		SYSCALL_DEBUG
options		COMPAT_AOUT	# NetBSD/sparc compat support
options 	EXEC_AOUT	# execve(2) support for a.out binaries

## File systems.  You probably need at least one of FFS or NFS.
file-system	FFS		# Berkeley Fast Filesystem
file-system	NFS		# Sun NFS-compatible filesystem client
file-system	KERNFS		# kernel data-structure filesystem
file-system	NULLFS		# NULL layered filesystem
file-system	MFS		# memory-based filesystem
file-system	FDESC		# user file descriptor filesystem
file-system	UMAPFS		# uid/gid remapping filesystem
file-system	LFS		# Log-based filesystem (still experimental)
file-system	PORTAL		# portal filesystem (still experimental)
file-system	PROCFS		# /proc
file-system	CD9660		# ISO 9660 + Rock Ridge file system
file-system	UNION		# union file system
file-system	MSDOSFS		# MS-DOS FAT filesystem(s).

## File system options.
options 	NFSSERVER	# Sun NFS-compatible filesystem server
options 	QUOTA		# FFS quotas
#options 	FFS_EI		# FFS Endian Independent support
options		SOFTDEP		# FFS soft updates support.

## Network protocol support.  In most environments, INET is required.
options 	INET		# IP (Internet Protocol) v4
options 	TCP_COMPAT_42	# 4.2BSD IP implementation compatibility
#options 	GATEWAY		# packet forwarding ("router switch")
#options 	MROUTING	# packet forwarding of multicast packets
#options 	DIRECTED_BROADCAST	# allow broadcasts through routers
#options 	NS		# Xerox NS networking
#options 	NSIP		# Xerox NS tunneling over IP
options 	ISO,TPIP	# OSI networking
#options 	EON		# OSI tunneling over IP
#options 	CCITT,LLC,HDLC	# X.25 packet switched protocol
options 	NETATALK	# AppleTalk (over Ethernet) protocol
#options 	NTP		# Network Time Protocol in-kernel support
#options 	PPS_SYNC	# Add serial line synchronization for NTP
#options 	PFIL_HOOKS	# Add pfil(9) hooks, intended for custom LKMs.
#options 	IPFILTER_LOG	# Add ipmon(8) logging for ipfilter device
options 	PPP_BSDCOMP	# Add BSD compression to ppp device
options 	PPP_DEFLATE	# Add deflate (libz) compression to ppp device
options 	PPP_FILTER	# Add active filters for ppp (via bpf)



#### Main bus and CPU .. all systems.
mainbus0 at root
cpu0	at mainbus0				# UPA bus for the moment

#### Bus types found on SPARC systems.

sbus0	at mainbus0				# sun4c and sun4u
#pci*	at mainbus0				# pci buses
#ebus*	at pci?					# ebus devices

#### Standard system devices -- all required for a given architecture

## Auxiliary system registers on sun4c and sun4m
#auxreg0 at sbus0
#auxreg0 at pci0

# We also need:
# bpp0 at sbus0					# parallel port
# ecpp0 at pci0					# parallel port ?

## Mostek clock
clock0	at sbus0 slot ? offset ?
#clock0	at pci0

## Timer chip
timer0	at mainbus0

#### Serial port configuration

## Zilog 8530 serial chips.  Each has two-channels.
## zs0 is ttya and ttyb.  zs1 is the keyboard and mouse.
zs0	at sbus0 slot ? offset ?
zstty0	at zs0 channel 0	# ttya
zstty1	at zs0 channel 1	# ttyb

zs1	at sbus0 slot ? offset ?
kbd0	at zs1 channel 0	# keyboard
ms0	at zs1 channel 1	# mouse

## PCI machines apparently have serial ports
## called `se' and `su'

## Part of a PC87332VLJ?
#su0	at ebus?		# ttya
#su1	at ebus?		# ttyb
#kbd0	at su0			# keyboard
#ms0	at su1			# mouse

## This is the SAB82532 DUART
#se0	at ebus?		# 


#### Disk controllers and disks

#

## The following flags may be set for the NCR53c94 based esp driver:
##	bits 0-7:  disable disconnect/reselect for the corresponding target
##	bits 8-15: disable synchronous negotiation for target [bit-8]

## sun4/300, sun4c, sun4m on-board SCSI, and FSBE/S SBus SCSI cards.
## Both `dma' and `esp' are needed in all cases.
## Two kinds of additional SBus SCSI interfaces are available.  One uses
## "esp at sbus" like the sun4c on-board; the other uses "esp at dma".

## sun4/300 SCSI - an NCR53c94 or equivalent behind
## an LSI Logic DMA controller

dma*	at sbus? slot ? offset ?			# SBus
esp*	at dma? flags 0x0000				# SBus
scsibus* at esp?

## FAS support missing
#fas*	at sbus? slot ? offset ? flags 0x0000		# fast/wide NCR derivative
#scsi*	at pci?						# 53C875 "glm" compatible


## Qlogic ISP SBus SCSI Card
#isp*	at sbus? slot ? offset ?
#scsibus* at isp?

## These entries find devices on all SCSI busses and assign
## unit numbers dynamically.
sd0	at scsibus? target 0 lun 0		# SCSI disks
sd1	at scsibus? target 1 lun 0		# SCSI disks
sd2	at scsibus? target 2 lun 0		# SCSI disks
sd3	at scsibus? target 3 lun 0		# SCSI disks
sd4	at scsibus? target 4 lun 0		# SCSI disks
sd5	at scsibus? target 5 lun 0		# SCSI disks
sd6	at scsibus? target 6 lun 0		# SCSI disks
sd*	at scsibus? target ? lun ?		# SCSI disks
st*	at scsibus? target ? lun ?		# SCSI tapes
cd*	at scsibus? target ? lun ?		# SCSI CD-ROMs
ch*	at scsibus? target ? lun ?		# SCSI changer devices
ss*	at scsibus? target ? lun ?		# SCSI scanners
uk*	at scsibus? target ? lun ?		# unknown SCSI


## Floppy controller and drive found on SPARCstations.

#fdc0	at sbus0
#fdc0	at pci?					# Called fdthree?
#fd*	at fdc0					# the drive itself


## A disk-like interface to files.  Can be used to create floppy, CD,
## miniroot images, etc.

pseudo-device	vnd	4

## Concatenated and striped disks; with this, you can create a software-based
## disk array similar to a "RAID 0" setup.  See ccd(4).

pseudo-device	ccd	4

## Memory disk device, used on boot floppies with compressed
## kernel-plus-root-disk images.

#pseudo-device	md	1


#### Network interfaces

## LANCE Ethernet - an AMD 7990 LANCE behind specialized DMA glue
## Three flavors of additional SBus ethernets are available.  One attaches
## directly like the sun4c on-board, one uses the ledma device like the
## sun4m on-board, and one uses the lebuffer device.

options 	LANCE_REVC_BUG
options		LEDEBUG

ledma0		at sbus0 slot ? offset ?		# sun4m on-board
le0		at ledma0				# sun4m on-board
#le*		at sbus? slot ? offset ?		# SBus
#ledma*		at sbus? slot ? offset ?		# SBus
#le*		at ledma?				# SBus
#lebuffer0	at sbus? slot ? offset ?		# SBus
#le0		at lebuffer?				# SBus
lebuffer*	at sbus? slot ? offset ?		# SBus
le*		at lebuffer?				# SBus

#hme0		at sbus0 slot ? offset ?
#network*	at pci?					# "hme" compatible

## Loopback network interface; required
pseudo-device	loop

## SLIP and CSLIP interfaces, for IP over a serial line.
pseudo-device	sl		2

## PPP, the successor to SLIP.  See pppd(8).
pseudo-device	ppp		2

## Starmode Radio IP, a special hardware network device.
#pseudo-device	strip		1

## Network "tunnel" device, allowing protocol stacks to run in the userland.
## This is used by the third-party user-mode "ppp" program, and others.
pseudo-device	tun		4

## Berkeley Packet Filter, required to run RARPD.  A generic C-language
## interface that allows selective examining of incoming packets.
pseudo-device	bpfilter	8

## IP Filter, used in firewall and NAT applications.  See ipnat(8) for
## one example of the use of the IP Filter.
pseudo-device	ipfilter


#### Audio and video devices

## /dev/audio support (`audiocs' plus `audio')
##
audiocs0	at sbus0 slot ? offset ?		# SUNW,CS4231
audio*		at audiocs0


## Sun "bwtwo" black and white framebuffer, found on sun4, sun4c, and sun4m
## systems.  If your sun4 system has a cgfour installed in the P4 slot,
## the P4 entries for "bwtwo" will attach to the overlay plane of the
## "cgfour".

#bwtwo0		at sbus0 slot ? offset ?		# sun4c and sun4m
#bwtwo*		at sbus? slot ? offset ?		#

## Sun "cgthree" Sbus color framebuffer
#cgthree0	at sbus? slot ? offset ?
#cgthree*	at sbus? slot ? offset ?

## Sun "cgsix" accelerated color framebuffer.
cgsix0		at sbus? slot ? offset ?
cgsix*		at sbus? slot ? offset ?

## Sun "tcx" accelerated color framebuffer.
#tcx0		at sbus? slot ? offset ?
#tcx*		at sbus? slot ? offset ?

# Sun "cgfourteen" accelerated 24-bit framebuffer.
#cgfourteen0	at obio0			# sun4m

## Sun FFB not supported
#ffb*		at upa?

#### Other device configuration

## Pseudo ttys, required for network logins and programs like screen.
## 32 is a good number for average systems; you may have as many as you
## like, though 256 is more or less the upper limit.  Increasing this
## number still requires you to run /dev/MAKEDEV to create the files
## for the ptys.

pseudo-device	pty		32	# pseudo-ttys (for network, etc.)

## Random device, used to implement /dev/random (a source of random noise),
## and generate randomness for some kernel formulae.
## THIS DEVICE IS EXPERIMENTAL; use at your own risk.

pseudo-device	rnd

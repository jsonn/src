/*	$NetBSD: locore_mips3.S,v 1.1.2.2 1998/11/16 10:41:31 nisimura Exp $	*/

/*
 * Copyright (c) 1997 Jonathan Stone (hereinafter referred to as the author)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Jonathan R. Stone for
 *      the NetBSD Project.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Digital Equipment Corporation and Ralph Campbell.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * Copyright (C) 1989 Digital Equipment Corporation.
 * Permission to use, copy, modify, and distribute this software and
 * its documentation for any purpose and without fee is hereby granted,
 * provided that the above copyright notice appears in all copies.
 * Digital Equipment Corporation makes no representations about the
 * suitability of this software for any purpose.  It is provided "as is"
 * without express or implied warranty.
 *
 * from: Header: /sprite/src/kernel/mach/ds3100.md/RCS/loMem.s,
 *	v 1.1 89/07/11 17:55:04 nelson Exp  SPRITE (DECWRL)
 * from: Header: /sprite/src/kernel/mach/ds3100.md/RCS/machAsm.s,
 *	v 9.2 90/01/29 18:00:39 shirriff Exp  SPRITE (DECWRL)
 * from: Header: /sprite/src/kernel/vm/ds3100.md/vmPmaxAsm.s,
 *	v 1.1 89/07/10 14:27:41 nelson Exp  SPRITE (DECWRL)
 *
 *	@(#)locore.s	8.5 (Berkeley) 1/4/94
 */
#include <mips/asm.h>
#include <mips/cpuarch.h>
#include <machine/param.h>

#include "assym.h"

	.set	noreorder
	.set	mips3
/*
 *============================================================================
 *
 *  Mips-III ISA support, part 1: locore exception vectors.
 *  The following code is copied to the vector locations to which
 *  the CPU jumps in response to an exception or a TLB miss.
 *
 *============================================================================

/*
 *  Mark where code entered from exception hander jumptable
 * starts, for stack traceback code.
 */

	.globl	_C_LABEL(mips3_exceptionentry_start)
_C_LABEL(mips3_exceptionentry_start):

/*
 *----------------------------------------------------------------------------
 *
 * mips3_TLBMiss --
 *
 *	Vector code for the TLB-miss exception vector 0x80000180
 *	on an r4000.
 *
 * This code is copied to the TLB exception vector address to
 * handle TLB translation misses.
 * NOTE: This code must be relocatable and max 32 instructions!!!
 * Don't check for invalid pte's here. We load them as well and
 * let the processor trap to load the correct value after service.
 *
 *----------------------------------------------------------------------------
 */
	.globl	_C_LABEL(mips3_TLBMiss)
_C_LABEL(mips3_TLBMiss):
	.set	noat
	dmfc0	k0, MIPS_COP_0_BAD_VADDR	# get the virtual address
	lw	k1, _C_LABEL(curpcb)
	bltz	k0, 1f				# kernel address space ->
	nop
	bnez	k1, 2f
	nop
	la	k1, _C_LABEL(proc0paddr)
2:
	lw	k1, U_PCB_SEGTAB(k1)		# get the current segment table
	srl	k0, k0, SEGSHIFT - 2		# compute segment table index
	andi	k0, k0, 0x7fc			# PMAP_SEGTABSIZ-1
	addu	k1, k1, k0
	dmfc0	k0, MIPS_COP_0_BAD_VADDR	# get the virtual address
	lw	k1, 0(k1)			# get pointer to segment map
	srl	k0, k0, PGSHIFT - 2		# compute segment map index
	andi	k0, k0, ((NPTEPG/2) - 1) << 3
	beq	k1, zero, 2f			# invalid segment map
	addu	k1, k1, k0			# index into segment map
	lw	k0, 0(k1)			# get page PTE
	lw	k1, 4(k1)
	dsll	k0, k0, 34
	dsrl	k0, k0, 34
	dmtc0	k0, MIPS_COP_0_TLB_LO0
	dsll	k1, k1, 34
	dsrl	k1, k1, 34
	dmtc0	k1, MIPS_COP_0_TLB_LO1
	nop
	tlbwr					# update TLB
	nop
	nop
	nop
	nop
	nop
	eret
1:
	j	_C_LABEL(mips3_TLBMissException)
	nop
2:
	j	mips3_SlowFault
	nop

	.globl	_C_LABEL(mips3_TLBMissEnd)
_C_LABEL(mips3_TLBMissEnd):
	.set	at

/*
 *----------------------------------------------------------------------------
 *
 * mips3_execption --
 *
 *	Vector code for the general exception vector 0x80000180
 *	on an r4000 or r4400.
 *
 * This code is copied to the general exception vector address to
 * handle all execptions except RESET and TLBMiss.
 * NOTE: This code must be relocatable!!!
 *----------------------------------------------------------------------------
 */
	.globl	_C_LABEL(mips3_exception)
_C_LABEL(mips3_exception):
/*
 * Find out what mode we came from and jump to the proper handler.
 */
	.set	noat
	mfc0	k0, MIPS_COP_0_STATUS		# get the status register
	mfc0	k1, MIPS_COP_0_CAUSE		# get the cause register
	and	k0, k0, MIPS3_SR_KSU_USER	# test for user mode
						# sneaky but the bits are
						# with us........
	sll	k0, k0, 3			# shift user bit for cause index
	and	k1, k1, MIPS3_CR_EXC_CODE	# mask out the cause bits.
	or	k1, k1, k0			# change index to user table
1:
	la	k0, _C_LABEL(mips3_excpt_sw)	# get base of the jump table
	addu	k0, k0, k1			# get the address of the
						#  function entry.  Note that
						#  the cause is already
						#  shifted left by 2 bits so
						#  we dont have to shift.
	lw	k0, 0(k0)			# get the function address
	nop
	j	k0				# jump to the function
	nop
	.set	at
	.globl	_C_LABEL(mips3_exceptionEnd)
_C_LABEL(mips3_exceptionEnd):


/*----------------------------------------------------------------------------
 *
 * mips3_SlowFault --
 *
 * Alternate entry point into the mips3_UserGenException or
 * or mips3_user_Kern_exception, when the ULTB miss handler couldn't
 * find a TLB entry.
 *
 * Find out what mode we came from and call the appropriate handler.
 *
 *----------------------------------------------------------------------------
 */

/*
 * We couldn't find a TLB entry.
 * Find out what mode we came from and call the appropriate handler.
 */
mips3_SlowFault:
	.set	noat
	mfc0	k0, MIPS_COP_0_STATUS
	nop
	and	k0, k0, MIPS3_SR_KSU_USER
	bne	k0, zero, _C_LABEL(mips3_UserGenException)
	nop
	.set	at
/*
 * Fall though ...
 */

/*
 * mips3_KernGenException
 *
 * Handle an exception from kernel mode.
 * Build trapframe on stack to hold interrupted kernel context, then
 * call trap() to process the condition.
 *
 * trapframe is symthesized on stack as 5th arg {
 *  	register_t cf_args[4];		+0 
 *  	register_t tf_regs[17];		+16	- trapframe begins here
 * 	register_t tf_sr;		+84	-
 * 	register_t tf_mullo;		+88	-
 * 	register_t tf_mulhi;		+92	-
 * 	register_t tf_epc;		+96	- may be changed by trap() call
 *  	register_t cf_sp;		+100
 *  	register_t cf_ra;		+104
 *  };
 */
NESTED_NOPROFILE(mips3_KernGenException, KERNFRAME_SIZ, ra)
	.set	noat
	.mask	0x80000000, -4
	subu	sp, sp, KERNFRAME_SIZ
/*
 * Save the relevant kernel registers onto the stack.
 * We don't need to save s0 - s8, sp and gp because
 * the compiler does it for us.
 */
	sw	AT, TF_BASE+TF_REG_AST(sp)
	sw	v0, TF_BASE+TF_REG_V0(sp)
	sw	v1, TF_BASE+TF_REG_V1(sp)
	mflo	v0
	mfhi	v1
	sw	a0, TF_BASE+TF_REG_A0(sp)
	sw	a1, TF_BASE+TF_REG_A1(sp)
	sw	a2, TF_BASE+TF_REG_A2(sp)
	sw	a3, TF_BASE+TF_REG_A3(sp)
	mfc0	a0, MIPS_COP_0_STATUS		# 1st arg is STATUS
	sw	t0, TF_BASE+TF_REG_T0(sp)
	sw	t1, TF_BASE+TF_REG_T1(sp)
	sw	t2, TF_BASE+TF_REG_T2(sp)
	sw	t3, TF_BASE+TF_REG_T3(sp)
	mfc0	a1, MIPS_COP_0_CAUSE		# 2nd arg is CAUSE
	sw	t4, TF_BASE+TF_REG_T4(sp)
	sw	t5, TF_BASE+TF_REG_T5(sp)
	sw	t6, TF_BASE+TF_REG_T6(sp)
	sw	t7, TF_BASE+TF_REG_T7(sp)
	mfc0	a2, MIPS_COP_0_BAD_VADDR	# 3rd arg is fault address
	sw	t8, TF_BASE+TF_REG_T8(sp)
	sw	t9, TF_BASE+TF_REG_T9(sp)
	sw	ra, TF_BASE+TF_REG_RA(sp)
	sw	a0, TF_BASE+TF_REG_SR(sp)
	mfc0	a3, MIPS_COP_0_EXC_PC		# 4th arg is exception PC
	sw	v0, TF_BASE+TF_REG_MULLO(sp)
	sw	v1, TF_BASE+TF_REG_MULHI(sp)
	sw	a3, TF_BASE+TF_REG_EPC(sp)
#ifdef DDB
	addu	v0, sp, KERNFRAME_SIZ 		# SP at trap for debugging
	sw	v0, KERNFRAME_SP(sp)
#endif
/*
 * Call the trap handler.
 */
	mtc0	zero, MIPS_COP_0_STATUS		# Set kernel no error level
	jal	_C_LABEL(trap)
	sw	a3, KERNFRAME_RA(sp)		# for debugging

/*
 * Restore registers and return from the exception.
 */
	mtc0	zero, MIPS_COP_0_STATUS		# Make sure int disabled
	nop					# ??? how much delay ???
	nop
	lw	a0, TF_BASE+TF_REG_SR(sp)	# ??? why differs ???
	lw	t0, TF_BASE+TF_REG_MULLO(sp)
	lw	t1, TF_BASE+TF_REG_MULHI(sp)
	lw	v0, TF_BASE+TF_REG_EPC(sp)	# might be changed inside trap
	mtc0	a0, MIPS_COP_0_STATUS		# restore the SR, disable intrs
	mtlo	t0
	mthi	t1
	dmtc0	v0, MIPS_COP_0_EXC_PC		# set return address
	nop					# ??? how much delay ???
	nop
	lw	AT, TF_BASE+TF_REG_AST(sp)
	lw	v0, TF_BASE+TF_REG_V0(sp)
	lw	v1, TF_BASE+TF_REG_V1(sp)
	lw	a0, TF_BASE+TF_REG_A0(sp)
	lw	a1, TF_BASE+TF_REG_A1(sp)
	lw	a2, TF_BASE+TF_REG_A2(sp)
	lw	a3, TF_BASE+TF_REG_A3(sp)
	lw	t0, TF_BASE+TF_REG_T0(sp)
	lw	t1, TF_BASE+TF_REG_T1(sp) 
	lw	t2, TF_BASE+TF_REG_T2(sp)
	lw	t3, TF_BASE+TF_REG_T3(sp)
	lw	t4, TF_BASE+TF_REG_T4(sp)
	lw	t5, TF_BASE+TF_REG_T5(sp)
	lw	t6, TF_BASE+TF_REG_T6(sp)
	lw	t7, TF_BASE+TF_REG_T7(sp)
	lw	t8, TF_BASE+TF_REG_T8(sp)
	lw	t9, TF_BASE+TF_REG_T9(sp)	
	lw	ra, TF_BASE+TF_REG_RA(sp)
	addu	sp, sp, KERNFRAME_SIZ
	eret					# return to interrupted point
	.set	at
	.globl	_C_LABEL(mips3_KernGenExceptionEnd)
_C_LABEL(mips3_KernGenExceptionEnd):
END(mips3_KernGenException)

/*
 * mips3_UserGenException
 *
 * Handle an exception from user mode.
 * Save user context in u_pcb, then call trap() to process the condition.
 * The context can be manipulated alternatively via curproc->p_md.md_regs.
 */
NESTED_NOPROFILE(mips3_UserGenException, CALLFRAME_SIZ, ra)
	.set	noat
	.mask	0x80000000, -4
/*
 * Save all of the registers except for the kernel temporaries in u_pcb.
 */
	lw	k1, _C_LABEL(curpcb)
	nop
	sw	AT, U_PCB_REGS+FRAME_AST(k1)
	sw	v0, U_PCB_REGS+FRAME_V0(k1)
	sw	v1, U_PCB_REGS+FRAME_V1(k1)
	mflo	v0
	sw	a0, U_PCB_REGS+FRAME_A0(k1)
	sw	a1, U_PCB_REGS+FRAME_A1(k1)
	sw	a2, U_PCB_REGS+FRAME_A2(k1)
	sw	a3, U_PCB_REGS+FRAME_A3(k1)
	mfhi	v1
	sw	t0, U_PCB_REGS+FRAME_T0(k1)
	sw	t1, U_PCB_REGS+FRAME_T1(k1)
	sw	t2, U_PCB_REGS+FRAME_T2(k1)
	sw	t3, U_PCB_REGS+FRAME_T3(k1)
	mfc0	a0, MIPS_COP_0_STATUS		# 1st arg is STATUS
	sw	t4, U_PCB_REGS+FRAME_T4(k1)
	sw	t5, U_PCB_REGS+FRAME_T5(k1)
	sw	t6, U_PCB_REGS+FRAME_T6(k1)
	sw	t7, U_PCB_REGS+FRAME_T7(k1)
	mfc0	a1, MIPS_COP_0_CAUSE		# 2nd arg is CAUSE
	sw	s0, U_PCB_REGS+FRAME_S0(k1)
	sw	s1, U_PCB_REGS+FRAME_S1(k1)
	sw	s2, U_PCB_REGS+FRAME_S2(k1)
	sw	s3, U_PCB_REGS+FRAME_S3(k1)
	mfc0	a2, MIPS_COP_0_BAD_VADDR	# 3rd arg is fault address
	sw	s4, U_PCB_REGS+FRAME_S4(k1)
	sw	s5, U_PCB_REGS+FRAME_S5(k1)
	sw	s6, U_PCB_REGS+FRAME_S6(k1)
	sw	s7, U_PCB_REGS+FRAME_S7(k1)
	mfc0	a3, MIPS_COP_0_EXC_PC		# 4th arg is exception PC
	sw	t8, U_PCB_REGS+FRAME_T8(k1)
	sw	t9, U_PCB_REGS+FRAME_T9(k1)
	sw	gp, U_PCB_REGS+FRAME_GP(k1)
	sw	sp, U_PCB_REGS+FRAME_SP(k1)
	sw	s8, U_PCB_REGS+FRAME_S8(k1)
	sw	ra, U_PCB_REGS+FRAME_RA(k1)
	sw	a0, U_PCB_REGS+FRAME_SR(k1)
	sw	v0, U_PCB_REGS+FRAME_MULLO(k1)
	sw	v1, U_PCB_REGS+FRAME_MULHI(k1)
	sw	a3, U_PCB_REGS+FRAME_EPC(k1)
	#addu	sp, k1, USPACE - CALLFRAME_SIZ	# switch to kernel SP
	li	sp, KERNELSTACK - CALLFRAME_SIZ	# XXX switch to kernel SP XXX
#ifdef __GP_SUPPORT__
	la	gp, _C_LABEL(_gp)		# switch to kernel GP
#endif
/*
 * Turn off fpu and enter kernel mode
 */
	.set	at
	and	t0, a0, ~(MIPS_SR_COP_1_BIT | MIPS_SR_EXL | MIPS_SR_KSU_MASK | MIPS_SR_INT_IE)
	.set	noat
/*
 * Call the trap handler.
 */
	mtc0	t0, MIPS_COP_0_STATUS
	jal	_C_LABEL(trap)
	sw	a3, CALLFRAME_RA(sp)		# for debugging
/*
 * Restore user registers and return.
 * First disable interrupts and set exeption level.
 */
	mtc0	zero, MIPS_COP_0_STATUS		# disable interrupt
	nop					# ??? how much delay ???
	nop
	nop
	li	v0, MIPS_SR_EXL
	mtc0	v0, MIPS_COP_0_STATUS		# set exception level
	nop					# ??? how much delay ???
	nop
	nop
	lw	a1, _C_LABEL(curpcb)
	nop
 #	lw	a0, U_PCB_REGS+FRAME_SR(a1)
	lw	t0, U_PCB_REGS+FRAME_MULLO(a1)
	lw	t1, U_PCB_REGS+FRAME_MULHI(a1)
	lw	v0, U_PCB_REGS+FRAME_EPC(a1)
 #	mtc0	a0, MIPS_COP_0_STATUS		# still exception level
	mtlo	t0
	mthi	t1
	dmtc0	v0, MIPS_COP_0_EXC_PC		# set return address
	nop					# ??? how much delay ???
	nop

	move	k1, a1
	lw	AT, U_PCB_REGS+FRAME_AST(k1)
	lw	v0, U_PCB_REGS+FRAME_V0(k1)
	lw	v1, U_PCB_REGS+FRAME_V1(k1)
	lw	a0, U_PCB_REGS+FRAME_A0(k1)
	lw	a1, U_PCB_REGS+FRAME_A1(k1)
	lw	a2, U_PCB_REGS+FRAME_A2(k1)
	lw	a3, U_PCB_REGS+FRAME_A3(k1)
	lw	t0, U_PCB_REGS+FRAME_T0(k1)
	lw	t1, U_PCB_REGS+FRAME_T1(k1)
	lw	t2, U_PCB_REGS+FRAME_T2(k1)
	lw	t3, U_PCB_REGS+FRAME_T3(k1)
	lw	t4, U_PCB_REGS+FRAME_T4(k1)
	lw	t5, U_PCB_REGS+FRAME_T5(k1)
	lw	t6, U_PCB_REGS+FRAME_T6(k1)
	lw	t7, U_PCB_REGS+FRAME_T7(k1)
	lw	s0, U_PCB_REGS+FRAME_S0(k1)
	lw	s1, U_PCB_REGS+FRAME_S1(k1)
	lw	s2, U_PCB_REGS+FRAME_S2(k1)
	lw	s3, U_PCB_REGS+FRAME_S3(k1)
	lw	s4, U_PCB_REGS+FRAME_S4(k1)
	lw	s5, U_PCB_REGS+FRAME_S5(k1)
	lw	s6, U_PCB_REGS+FRAME_S6(k1)
	lw	s7, U_PCB_REGS+FRAME_S7(k1)
	lw	t8, U_PCB_REGS+FRAME_T8(k1)
	lw	t9, U_PCB_REGS+FRAME_T9(k1)
	lw	gp, U_PCB_REGS+FRAME_GP(k1)
	lw	sp, U_PCB_REGS+FRAME_SP(k1)
	lw	s8, U_PCB_REGS+FRAME_S8(k1)
	lw	k0, U_PCB_REGS+FRAME_SR(k1)
	lw	ra, U_PCB_REGS+FRAME_RA(k1)
	mtc0	k0, MIPS_COP_0_STATUS		# restore status
	eret					# return to interrupted point
	.set	at
	.globl	_C_LABEL(mips3_UserGenExceptionEnd)
_C_LABEL(mips3_UserGenExceptionEnd):
END(mips3_UserGenException)

/*
 * mips3_SystemCall
 *
 * Save user context in u_pcb, then call syscall() to process a system call.
 * The context can be manipulated alternatively via curproc->p_md.md_regs;
 */
NESTED_NOPROFILE(mips3_SystemCall, CALLFRAME_SIZ, ra)
	.set	noat
	.mask	0x80000000, -4
	lw	k1, _C_LABEL(curpcb)
	nop
	sw	AT, U_PCB_REGS+FRAME_AST(k1)
	sw	v0, U_PCB_REGS+FRAME_V0(k1)
	sw	v1, U_PCB_REGS+FRAME_V1(k1)
	mflo	v0
	sw	a0, U_PCB_REGS+FRAME_A0(k1)
	sw	a1, U_PCB_REGS+FRAME_A1(k1)
	sw	a2, U_PCB_REGS+FRAME_A2(k1)
	sw	a3, U_PCB_REGS+FRAME_A3(k1)
	mfhi	v1
	sw	t0, U_PCB_REGS+FRAME_T0(k1)
	sw	t1, U_PCB_REGS+FRAME_T1(k1)
	sw	t2, U_PCB_REGS+FRAME_T2(k1)
	sw	t3, U_PCB_REGS+FRAME_T3(k1)
	mfc0	a0, MIPS_COP_0_STATUS		# 1st arg is STATUS
	sw	t4, U_PCB_REGS+FRAME_T4(k1)
	sw	t5, U_PCB_REGS+FRAME_T5(k1)
	sw	t6, U_PCB_REGS+FRAME_T6(k1)
	sw	t7, U_PCB_REGS+FRAME_T7(k1)
	mfc0	a1, MIPS_COP_0_CAUSE		# 2nd arg is CAUSE
	sw	s0, U_PCB_REGS+FRAME_S0(k1)
	sw	s1, U_PCB_REGS+FRAME_S1(k1)
	sw	s2, U_PCB_REGS+FRAME_S2(k1)
	sw	s3, U_PCB_REGS+FRAME_S3(k1)
	mfc0	a2, MIPS_COP_0_EXC_PC		# 3rd arg is PC
	sw	s4, U_PCB_REGS+FRAME_S4(k1)
	sw	s5, U_PCB_REGS+FRAME_S5(k1)
	sw	s6, U_PCB_REGS+FRAME_S6(k1)
	sw	s7, U_PCB_REGS+FRAME_S7(k1)
	sw	t8, U_PCB_REGS+FRAME_T8(k1)
	sw	t9, U_PCB_REGS+FRAME_T9(k1)
	sw	gp, U_PCB_REGS+FRAME_GP(k1)
	sw	sp, U_PCB_REGS+FRAME_SP(k1)
	sw	s8, U_PCB_REGS+FRAME_S8(k1)
	sw	ra, U_PCB_REGS+FRAME_RA(k1)
	sw	a0, U_PCB_REGS+FRAME_SR(k1)
	sw	v0, U_PCB_REGS+FRAME_MULLO(k1)
	sw	v1, U_PCB_REGS+FRAME_MULHI(k1)
	sw	a2, U_PCB_REGS+FRAME_EPC(k1)
	#addu	sp, k1, USPACE - CALLFRAME_SIZ	# switch to kernel SP
	li	sp, KERNELSTACK - CALLFRAME_SIZ	# XXX switch to kernel SP XXX
#ifdef __GP_SUPPORT__
	la	gp, _C_LABEL(_gp)		# switch to kernel GP
#endif
/*
 * Turn off fpu and enter kernel mode
 */
	.set	at
	and	t0, a0, ~(MIPS_SR_COP_1_BIT | MIPS_SR_EXL | MIPS_SR_KSU_MASK | MIPS_SR_INT_IE)
	.set	noat
/*
 * Call the system call handler.
 */
	mtc0	t0, MIPS_COP_0_STATUS
	jal	_C_LABEL(syscall)
	sw	a2, CALLFRAME_RA(sp)		# for debugging
/*
 * Restore user registers and return.
 * First disable interrupts and set exception level.
 */
	mtc0	zero, MIPS_COP_0_STATUS	# disable int
	nop					# ??? how much delay ???
	nop
	nop

	li	v0, MIPS_SR_EXL
	mtc0	v0, MIPS_COP_0_STATUS		# set exception level
	nop					# ??? how much delay ???
	nop
	nop
/*
 * Restore user registers and return.
 */
	lw	a1, _C_LABEL(curpcb)
	nop
 #	lw	a0, U_PCB_REGS+FRAME_SR(a1)
	lw	t0, U_PCB_REGS+FRAME_MULLO(a1)
	lw	t1, U_PCB_REGS+FRAME_MULHI(a1)
	lw	v0, U_PCB_REGS+FRAME_EPC(a1)	# might be changed in syscall
 #	mtc0	a0, MIPS_COP_0_STATUS		# this should disable interrupts
	mtlo	t0
	mthi	t1
	dmtc0	v0, MIPS_COP_0_EXC_PC		# set return address
	nop					# ??? how much delay ???
	nop
	move	k1, a1
	lw	AT, U_PCB_REGS+FRAME_AST(k1)
	lw	v0, U_PCB_REGS+FRAME_V0(k1)
	lw	v1, U_PCB_REGS+FRAME_V1(k1)
	lw	a0, U_PCB_REGS+FRAME_A0(k1)
	lw	a1, U_PCB_REGS+FRAME_A1(k1)
	lw	a2, U_PCB_REGS+FRAME_A2(k1)
	lw	a3, U_PCB_REGS+FRAME_A3(k1)
	lw	t0, U_PCB_REGS+FRAME_T0(k1)
	lw	t1, U_PCB_REGS+FRAME_T1(k1)
	lw	t2, U_PCB_REGS+FRAME_T2(k1)
	lw	t3, U_PCB_REGS+FRAME_T3(k1)
	lw	t4, U_PCB_REGS+FRAME_T4(k1)
	lw	t5, U_PCB_REGS+FRAME_T5(k1)
	lw	t6, U_PCB_REGS+FRAME_T6(k1)
	lw	t7, U_PCB_REGS+FRAME_T7(k1)
	lw	s0, U_PCB_REGS+FRAME_S0(k1)
	lw	s1, U_PCB_REGS+FRAME_S1(k1)
	lw	s2, U_PCB_REGS+FRAME_S2(k1)
	lw	s3, U_PCB_REGS+FRAME_S3(k1)
	lw	s4, U_PCB_REGS+FRAME_S4(k1)
	lw	s5, U_PCB_REGS+FRAME_S5(k1)
	lw	s6, U_PCB_REGS+FRAME_S6(k1)
	lw	s7, U_PCB_REGS+FRAME_S7(k1)
	lw	t8, U_PCB_REGS+FRAME_T8(k1)
	lw	t9, U_PCB_REGS+FRAME_T9(k1)
	lw	gp, U_PCB_REGS+FRAME_GP(k1)
	lw	sp, U_PCB_REGS+FRAME_SP(k1)
	lw	s8, U_PCB_REGS+FRAME_S8(k1)
	lw	k0, U_PCB_REGS+FRAME_SR(k1)
	lw	ra, U_PCB_REGS+FRAME_RA(k1)
	mtc0	k0, MIPS_COP_0_STATUS
	nop					# ???
	eret					# return to syscall point
	.set	at
	.globl	_C_LABEL(mips3_SystemCallEnd)
_C_LABEL(mips3_SystemCallEnd):
END(mips3_SystemCall)

/*
 * mips1_KernIntr
 *
 * Handle an interrupt from kernel mode.
 * Build intrframe on stack to hold interrupted kernel context, then
 * call interrupt() to process it.
 *
 */
NESTED_NOPROFILE(mips3_KernIntr, KERNFRAME_SIZ, ra)
	.set	noat
	.mask	0x80000000, -4
	subu	sp, sp, KERNFRAME_SIZ
/*
 * Save the relevant kernel registers onto the stack.
 * We don't need to save s0 - s8, sp and gp because
 * the compiler does it for us.
 */
	sw	AT, TF_BASE+TF_REG_AST(sp)
	sw	v0, TF_BASE+TF_REG_V0(sp)
	sw	v1, TF_BASE+TF_REG_V1(sp)
	mflo	v0
	mfhi	v1
	sw	a0, TF_BASE+TF_REG_A0(sp)
	sw	a1, TF_BASE+TF_REG_A1(sp)
	sw	a2, TF_BASE+TF_REG_A2(sp)
	sw	a3, TF_BASE+TF_REG_A3(sp)
	mfc0	a0, MIPS_COP_0_STATUS		# 1st arg is STATUS
	sw	t0, TF_BASE+TF_REG_T0(sp)
	sw	t1, TF_BASE+TF_REG_T1(sp)
	sw	t2, TF_BASE+TF_REG_T2(sp)
	sw	t3, TF_BASE+TF_REG_T3(sp)
	mfc0	a1, MIPS_COP_0_CAUSE		# 2nd arg is CAUSE
	sw	t4, TF_BASE+TF_REG_T4(sp)
	sw	t5, TF_BASE+TF_REG_T5(sp)
	sw	t6, TF_BASE+TF_REG_T6(sp)
	sw	t7, TF_BASE+TF_REG_T7(sp)
	mfc0	a2, MIPS_COP_0_EXC_PC		# 3rd arg is exception PC
	sw	t8, TF_BASE+TF_REG_T8(sp)
	sw	t9, TF_BASE+TF_REG_T9(sp)
	sw	ra, TF_BASE+TF_REG_RA(sp)
	sw	a0, TF_BASE+TF_REG_SR(sp)
	sw	v0, TF_BASE+TF_REG_MULLO(sp)
	sw	v1, TF_BASE+TF_REG_MULHI(sp)
	sw	a2, TF_BASE+TF_REG_EPC(sp)
#ifdef DDB
	addu	v0, sp, KERNFRAME_SIZ 		# SP at interupt for debugging
	sw	v0, KERNFRAME_SP(sp)
#endif
/*
 * Call the interrupt handler.
 */
	mtc0	zero, MIPS_COP_0_STATUS	# Reset exl, trap possible.
	jal	_C_LABEL(interrupt)
	sw	a2, KERNFRAME_RA(sp)		# for debugging
/*
 * Restore registers and return from the interrupt.
 */
	mtc0	zero, MIPS_COP_0_STATUS		# Disable interrupt
	nop
	nop
	nop
	lw	a0, TF_BASE+TF_REG_SR(sp)	# ??? why differs ???
	lw	t0, TF_BASE+TF_REG_MULLO(sp)
	lw	t1, TF_BASE+TF_REG_MULHI(sp)
	lw	v0, TF_BASE+TF_REG_EPC(sp)
	mtc0	a0, MIPS_COP_0_STATUS		# restore the SR, disable intrs
	mtlo	t0
	mthi	t1
	dmtc0	v0, MIPS_COP_0_EXC_PC		# set return address
	nop					# ??? how much delay ???
	nop

	lw	AT, TF_BASE+TF_REG_AST(sp)
	lw	v0, TF_BASE+TF_REG_V0(sp)
	lw	v1, TF_BASE+TF_REG_V1(sp)
	lw	a0, TF_BASE+TF_REG_A0(sp)
	lw	a1, TF_BASE+TF_REG_A1(sp)
	lw	a2, TF_BASE+TF_REG_A2(sp)
	lw	a3, TF_BASE+TF_REG_A3(sp)
	lw	t0, TF_BASE+TF_REG_T0(sp)
	lw	t1, TF_BASE+TF_REG_T1(sp)
	lw	t2, TF_BASE+TF_REG_T2(sp)
	lw	t3, TF_BASE+TF_REG_T3(sp)
	lw	t4, TF_BASE+TF_REG_T4(sp)
	lw	t5, TF_BASE+TF_REG_T5(sp)
	lw	t6, TF_BASE+TF_REG_T6(sp)
	lw	t7, TF_BASE+TF_REG_T7(sp)
	lw	t8, TF_BASE+TF_REG_T8(sp)
	lw	t9, TF_BASE+TF_REG_T9(sp)
	lw	ra, TF_BASE+TF_REG_RA(sp)
	addu	sp, sp, KERNFRAME_SIZ		# restore kernel SP
	eret					# return to interrupted point
	.set	at
	.globl	_C_LABEL(mips3_KernIntrEnd)
_C_LABEL(mips3_KernIntrEnd):
END(mips3_KernIntr)

/*----------------------------------------------------------------------------
 * XXX this comment block should be updated XXX
 * mips3_UserIntr --
 *
 *	Handle an interrupt from user mode.
 *	Note: we save minimal state in the u.u_pcb struct and use the standard
 *	kernel stack since there has to be a u page if we came from user mode.
 *	If there is a pending software interrupt, then save the remaining state
 *	and call softintr(). This is all because if we call switch() inside
 *	interrupt(), not all the user registers have been saved in u.u_pcb.
 *
 * Results:
 * 	None.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------------
 */
NESTED_NOPROFILE(mips3_UserIntr, CALLFRAME_SIZ, ra)
	.set	noat
	.mask	0x80000000, -4
/*
 * Save the relevant user registers into the u_pcb.
 * We don't need to save s0 - s8 because the compiler does it for us.
 */
	lw	k1, _C_LABEL(curpcb)
	nop
	sw	AT, U_PCB_REGS+FRAME_AST(k1)
	sw	v0, U_PCB_REGS+FRAME_V0(k1)
	sw	v1, U_PCB_REGS+FRAME_V1(k1)
	mflo	v0
	sw	a0, U_PCB_REGS+FRAME_A0(k1)
	sw	a1, U_PCB_REGS+FRAME_A1(k1)
	sw	a2, U_PCB_REGS+FRAME_A2(k1)
	sw	a3, U_PCB_REGS+FRAME_A3(k1)
	mfhi	v1
	sw	t0, U_PCB_REGS+FRAME_T0(k1)
	sw	t1, U_PCB_REGS+FRAME_T1(k1)
	sw	t2, U_PCB_REGS+FRAME_T2(k1)
	sw	t3, U_PCB_REGS+FRAME_T3(k1)
	mfc0	a0, MIPS_COP_0_STATUS		# 1st arg is STATUS
	sw	t4, U_PCB_REGS+FRAME_T4(k1)
	sw	t5, U_PCB_REGS+FRAME_T5(k1)
	sw	t6, U_PCB_REGS+FRAME_T6(k1)
	sw	t7, U_PCB_REGS+FRAME_T7(k1)
	mfc0	a1, MIPS_COP_0_CAUSE		# 2nd arg is CAUSE
	sw	t8, U_PCB_REGS+FRAME_T8(k1)
	sw	t9, U_PCB_REGS+FRAME_T9(k1)
	sw	gp, U_PCB_REGS+FRAME_GP(k1)
	sw	sp, U_PCB_REGS+FRAME_SP(k1)
	mfc0	a2, MIPS_COP_0_EXC_PC		# 3rd arg is PC
	sw	ra, U_PCB_REGS+FRAME_RA(k1)
	sw	a0, U_PCB_REGS+FRAME_SR(k1)
	sw	v0, U_PCB_REGS+FRAME_MULLO(k1)
	sw	v1, U_PCB_REGS+FRAME_MULHI(k1)
	sw	a2, U_PCB_REGS+FRAME_EPC(k1)
	#addiu	sp, k1, USPACE - CALLFRAME_SIZ	# switch to kernel SP
	li	sp, KERNELSTACK-CALLFRAME_SIZ	# XXX switch to kernel SP XXX
#ifdef __GP_SUPPORT__
	la	gp, _C_LABEL(_gp)		# switch to kernel GP
#endif
/*
 * Turn off fpu and enter kernel mode
 */
	.set	at
	and	t0, a0, ~(MIPS_SR_COP_1_BIT | MIPS_SR_EXL | MIPS_SR_INT_IE | MIPS_SR_KSU_MASK)
	.set	noat
/*
 * Call the interrupt handler.
 */
	mtc0	t0, MIPS_COP_0_STATUS
	jal	_C_LABEL(interrupt)
	sw	a2, CALLFRAME_RA(sp)		# for debugging
/*
 * Restore registers and return from the interrupt.
 */
	nop
	mtc0	zero, MIPS_COP_0_STATUS
	nop					# ??? how much delay ???
	nop
	nop
	li	v0, MIPS_SR_EXL
	mtc0	v0, MIPS_COP_0_STATUS		# set exception level bit.
	nop					# ??? how much delay ???
	nop
	nop

	lw	a1, _C_LABEL(curpcb)
 #	nop
 #	lw	a0, U_PCB_REGS+FRAME_SR(a1)
	lw	v0, _C_LABEL(astpending)	# any pending ast?
	nop					# ???
 #	mtc0	a0, MIPS_COP_0_STATUS		# restore the SR, disable intrs
/*
 * Check pending asynchoronous traps.
 */
	beq	v0, zero, 1f			# if no, skip ast processing
	nop					# -delay slot-
/*
 * We have pending asynchronous traps; save remaining user state in u_pcb.
 */
	sw	s0, U_PCB_REGS+FRAME_S0(a1)
	sw	s1, U_PCB_REGS+FRAME_S1(a1)
	sw	s2, U_PCB_REGS+FRAME_S2(a1)
	sw	s3, U_PCB_REGS+FRAME_S3(a1)
	sw	s4, U_PCB_REGS+FRAME_S4(a1)
	sw	s5, U_PCB_REGS+FRAME_S5(a1)
	sw	s6, U_PCB_REGS+FRAME_S6(a1)
	sw	s7, U_PCB_REGS+FRAME_S7(a1)
	sw	s8, U_PCB_REGS+FRAME_S8(a1)

	lw	a0, U_PCB_REGS+FRAME_EPC(a1)	# argument is interrupted PC
	li	t0, MIPS_HARD_INT_MASK | MIPS_SR_INT_IE
	jal	_C_LABEL(ast)
	mtc0	t0, MIPS_COP_0_STATUS		# enable interrupts (spl0)

/*
 * Restore user registers and return. NOTE: interrupts are enabled.
 */
	mtc0	zero, MIPS_COP_0_STATUS
	nop					# ??? how much delay ???
	nop
	nop
	li	v0, MIPS_SR_EXL
	mtc0	v0, MIPS_COP_0_STATUS		# set exception level bit.
	nop					# ??? how much delay ???
	nop
	nop

	lw	a1, _C_LABEL(curpcb)
	nop
 #	lw	a0, U_PCB_REGS+FRAME_SR(a1)
	lw	s0, U_PCB_REGS+FRAME_S0(a1)
	lw	s1, U_PCB_REGS+FRAME_S1(a1)
	lw	s2, U_PCB_REGS+FRAME_S2(a1)
	lw	s3, U_PCB_REGS+FRAME_S3(a1)
	lw	s4, U_PCB_REGS+FRAME_S4(a1)
	lw	s5, U_PCB_REGS+FRAME_S5(a1)
	lw	s6, U_PCB_REGS+FRAME_S6(a1)
	lw	s7, U_PCB_REGS+FRAME_S7(a1)
	lw	s8, U_PCB_REGS+FRAME_S8(a1)
 #	mtc0	a0, MIPS_COP_0_STATUS		# this should disable interrupts

1:
	lw	t0, U_PCB_REGS+FRAME_MULLO(a1)
	lw	t1, U_PCB_REGS+FRAME_MULHI(a1)
	lw	v0, U_PCB_REGS+FRAME_EPC(a1)
	mtlo	t0
	mthi	t1
	dmtc0	v0, MIPS_COP_0_EXC_PC		# set return address
	nop					# ??? how much delay ???
	nop

	move	k1, a1
	lw	AT, U_PCB_REGS+FRAME_AST(k1)
	lw	v0, U_PCB_REGS+FRAME_V0(k1)
	lw	v1, U_PCB_REGS+FRAME_V1(k1)
	lw	a0, U_PCB_REGS+FRAME_A0(k1)
	lw	a1, U_PCB_REGS+FRAME_A1(k1)
	lw	a2, U_PCB_REGS+FRAME_A2(k1)
	lw	a3, U_PCB_REGS+FRAME_A3(k1)
	lw	t0, U_PCB_REGS+FRAME_T0(k1)
	lw	t1, U_PCB_REGS+FRAME_T1(k1)
	lw	t2, U_PCB_REGS+FRAME_T2(k1)
	lw	t3, U_PCB_REGS+FRAME_T3(k1)
	lw	t4, U_PCB_REGS+FRAME_T4(k1)
	lw	t5, U_PCB_REGS+FRAME_T5(k1)
	lw	t6, U_PCB_REGS+FRAME_T6(k1)
	lw	t7, U_PCB_REGS+FRAME_T7(k1)
	lw	t8, U_PCB_REGS+FRAME_T8(k1)
	lw	t9, U_PCB_REGS+FRAME_T9(k1)
	lw	gp, U_PCB_REGS+FRAME_GP(k1)
	lw	sp, U_PCB_REGS+FRAME_SP(k1)
	lw	k0, U_PCB_REGS+FRAME_SR(k1)
	lw	ra, U_PCB_REGS+FRAME_RA(k1)
	mtc0	k0, MIPS_COP_0_STATUS		# restore the SR
	nop					# ???
	eret					# return to interrupted point
	.set	at
	.globl	_C_LABEL(mips3_UserIntrEnd)
_C_LABEL(mips3_UserIntrEnd):
END(mips3_UserIntr)


/*----------------------------------------------------------------------------
 *
 *	R4000 TLB exception handlers
 *
 *----------------------------------------------------------------------------
 */


/*----------------------------------------------------------------------------
 *
 * mips3_TLBMInvalidException --
 *
 *	Handle a TLB invalid exception from kernel mode in kernel space.
 *	The BaddVAddr, Context, and EntryHi registers contain the failed
 *	virtual address.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------------
 */
LEAF(mips3_TLBInvalidException)
	.set	noat
	dmfc0	k0, MIPS_COP_0_BAD_VADDR	# get the fault address
	li	k1, VM_MIN_KERNEL_ADDRESS	# compute index
	subu	k0, k0, k1
	lw	k1, _C_LABEL(Sysmapsize)	# index within range?
	srl	k0, k0, PGSHIFT
	sltu	k1, k0, k1
	beq	k1, zero, sys_stk_chk		# No. check for valid stack
	lw	k1, _C_LABEL(Sysmap)

	sll	k0, k0, 2			# compute offset from index
	tlbp					# Probe the invalid entry
	addu	k1, k1, k0
	and	k0, k0, 4			# check even/odd page
	bne	k0, zero, KernTLBIOdd
	nop

	mfc0	k0, MIPS_COP_0_TLB_INDEX
	nop
	bltz	k0, sys_stk_chk
 #	sltiu	k0, k0, 8

 #	bne	k0, zero, sys_stk_chk
	beqz	k0, sys_stk_chk
	lw	k0, 0(k1)			# get PTE entry

	dsll	k0, k0, 34			# get rid of "wired" bit
	dsrl	k0, k0, 34
	dmtc0	k0, MIPS_COP_0_TLB_LO0		# load PTE entry
	and	k0, k0, MIPS3_PG_V		# check for valid entry
	beq	k0, zero, _C_LABEL(mips3_KernGenException)	# PTE invalid
	lw	k0, 4(k1)			# get odd PTE entry
	dsll	k0, k0, 34
	dsrl	k0, k0, 34
	dmtc0	k0, MIPS_COP_0_TLB_LO1		# load PTE entry
	nop
	tlbwi					# write TLB
	nop
	nop
	nop
	nop
	nop
	eret

KernTLBIOdd:
	mfc0	k0, MIPS_COP_0_TLB_INDEX
	nop
	bltz	k0, sys_stk_chk
 #	sltiu	k0, k0, 8

 #	bne	k0, zero, sys_stk_chk
	beqz	k0, sys_stk_chk
	lw	k0, 0(k1)			# get PTE entry

	dsll	k0, k0, 34			# get rid of wired bit
	dsrl	k0, k0, 34
	dmtc0	k0, MIPS_COP_0_TLB_LO1		# save PTE entry
	and	k0, k0, MIPS3_PG_V		# check for valid entry
	beq	k0, zero, _C_LABEL(mips3_KernGenException)	# PTE invalid
	lw	k0, -4(k1)			# get even PTE entry
	dsll	k0, k0, 34
	dsrl	k0, k0, 34
	dmtc0	k0, MIPS_COP_0_TLB_LO0		# save PTE entry
	nop
	tlbwi					# update TLB
	nop
	nop
	nop
	nop
	nop
	eret
END(mips3_TLBInvalidException)

/*----------------------------------------------------------------------------
 *
 * mips3_TLBMissException --
 *
 *	Handle a TLB miss exception from kernel mode in kernel space.
 *	The BaddVAddr, Context, and EntryHi registers contain the failed
 *	virtual address.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------------
 */
LEAF(mips3_TLBMissException)
	.set	noat
	dmfc0	k0, MIPS_COP_0_BAD_VADDR	# get the fault address
	li	k1, VM_MIN_KERNEL_ADDRESS	# compute index
	subu	k0, k0, k1
	lw	k1, _C_LABEL(Sysmapsize)	# index within range?
	srl	k0, k0, PGSHIFT
	sltu	k1, k0, k1
	beq	k1, zero, sys_stk_chk		# No. check for valid stack
	lw	k1, _C_LABEL(Sysmap)
	srl	k0, k0, 1
	sll	k0, k0, 3			# compute offset from index
	addu	k1, k1, k0
	lw	k0, 0(k1)			# get PTE entry
	lw	k1, 4(k1)			# get odd PTE entry
	dsll	k0, k0, 34			# get rid of "wired" bit
	dsrl	k0, k0, 34
	dmtc0	k0, MIPS_COP_0_TLB_LO0		# load PTE entry
	dsll	k1, k1, 34
	dsrl	k1, k1, 34
	dmtc0	k1, MIPS_COP_0_TLB_LO1		# load PTE entry
	nop
	tlbwr					# write TLB
	nop
	nop
	nop
	nop
	nop
	eret

sys_stk_chk:
	subu	k0, sp, UADDR + 0x200		# check to see if we have a
	sltiu	k0, UPAGES*NBPG - 0x200		#  valid kernel stack
	bne	k0, zero, _C_LABEL(mips3_KernGenException)	# Go panic
	nop

#ifdef DDB
	la	sp, start - (22 * 4)
	sw	AT, TF_REG_AST(sp)
	sw	v0, TF_REG_V0(sp)
	sw	v1, TF_REG_V1(sp)
	sw	a0, TF_REG_A0(sp)
	sw	a1, TF_REG_A1(sp)
	sw	a2, TF_REG_A2(sp)
	sw	a3, TF_REG_A3(sp)
	sw	t0, TF_REG_T0(sp)
	sw	t1, TF_REG_T1(sp)
	sw	t2, TF_REG_T2(sp)
	sw	t3, TF_REG_T3(sp)
	sw	t4, TF_REG_T4(sp)
	sw	t5, TF_REG_T5(sp)
	sw	t6, TF_REG_T6(sp)
	sw	t7, TF_REG_T7(sp)
	sw	t8, TF_REG_T8(sp)
	sw	t9, TF_REG_T9(sp)
	mfc0	a0, MIPS_COP_0_STATUS
	mflo	v0
	mfhi	v1
	dmfc0	a3, MIPS_COP_0_EXC_PC
	sw	ra, TF_REG_RA(sp)
	sw	a0, TF_REG_SR(sp)
	sw	v0, TF_REG_MULLO(sp)
	sw	v1, TF_REG_MULHI(sp)
	sw	a3, TF_REG_EPC(sp)
	move	a1, sp
	subiu	sp, sp, CALLFRAME_SIZ
	sw	zero, CALLFRAME_SP(sp)
	sw	zero, CALLFRAME_RA(sp)
	jal	_C_LABEL(ddb_trap)
	move	a0, zero
#endif
	PANIC("kernel stack overflow")
	.set	at
END(mips3_TLBMissException)

/*
 *  Mark where code entered from exception hander jumptable
 * ends, for stack traceback code.
 */

	.globl	_C_LABEL(mips3_exceptionentry_end)
_C_LABEL(mips3_exceptionentry_end):


/*--------------------------------------------------------------------------
 *
 * mips3_TLBWriteIndexedVPS --
 *
 *	Write the given entry into the TLB at the given index.
 *	Pass full r4000 tlb info icnluding variable page size mask.
 *
 *	mips3_TLBWriteIndexed(index, tlb)
 *		unsigned index;
 *		tlb *tlb;
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	TLB entry set.
 *
 *--------------------------------------------------------------------------
 */
LEAF(mips3_TLBWriteIndexedVPS)
	mfc0	v1, MIPS_COP_0_STATUS	# Save the status register.
	mtc0	zero, MIPS_COP_0_STATUS	# Disable interrupts
	nop
	lw	a2, 8(a1)
	lw	a3, 12(a1)
	dmfc0	t0, MIPS_COP_0_TLB_HI		# Save the current PID.

	dmtc0	a2, MIPS_COP_0_TLB_LO0		# Set up entry low0.
	dmtc0	a3, MIPS_COP_0_TLB_LO1		# Set up entry low1.
	nop
	lw	a2, 0(a1)
	lw	a3, 4(a1)
	nop
	mtc0	a0, MIPS_COP_0_TLB_INDEX	# Set the index.
	dmtc0	a2, MIPS_COP_0_TLB_PG_MASK	# Set up entry mask.
	dmtc0	a3, MIPS_COP_0_TLB_HI		# Set up entry high.
	nop
	tlbwi					# Write the TLB
	nop
	nop
	nop					# Delay for effect
	nop

	dmtc0	t0, MIPS_COP_0_TLB_HI		# Restore the PID.
	nop
	dmtc0	zero, MIPS_COP_0_TLB_PG_MASK	# Default mask value.
	j	ra
	mtc0	v1, MIPS_COP_0_STATUS	# Restore the status register
END(mips3_TLBWriteIndexedVPS)

/*--------------------------------------------------------------------------
 *
 * mips3_TLBWriteIndexed --
 *
 *	Write the given entry into the TLB at the given index.
 *
 *	mips3_TLBWriteIndexed(index, highentry, lowentry0, lowentry1)
 *		unsigned index;
 *		int highEntry;
 *		int lowEntry0;
 *		int lowEntry1;
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	TLB entry set.
 *
 *--------------------------------------------------------------------------
 */
LEAF(mips3_TLBWriteIndexed)
	mfc0	v1, MIPS_COP_0_STATUS	# Save the status register.
	mtc0	zero, MIPS_COP_0_STATUS	# Disable interrupts
	nop
	lw	a2, 8(a1)
	lw	a3, 12(a1)
	dmfc0	t0, MIPS_COP_0_TLB_HI		# Save the current PID.

	dmtc0	a2, MIPS_COP_0_TLB_LO0		# Set up entry low0.
	dmtc0	a3, MIPS_COP_0_TLB_LO1		# Set up entry low1.
	nop
	lw	a2, 0(a1)
	lw	a3, 4(a1)
	nop
	mtc0	a0, MIPS_COP_0_TLB_INDEX	# Set the index.
	dmtc0	a2, MIPS_COP_0_TLB_PG_MASK	# Set up entry mask.
	dmtc0	a3, MIPS_COP_0_TLB_HI		# Set up entry high.
	nop
	tlbwi					# Write the TLB
	nop
	nop
	nop					# Delay for effect
	nop

	dmtc0	t0, MIPS_COP_0_TLB_HI		# Restore the PID.
	nop
	dmtc0	zero, MIPS_COP_0_TLB_PG_MASK	# Default mask value.
	j	ra
	mtc0	v1, MIPS_COP_0_STATUS	# Restore the status register
END(mips3_TLBWriteIndexed)

/*--------------------------------------------------------------------------
 *
 * mips3_SetPID --
 *
 *	Write the given pid into the TLB pid reg.
 *
 *	mips3_SetPID(pid)
 *		int pid;
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	PID set in the entry hi register.
 *
 *--------------------------------------------------------------------------
 */
LEAF(mips3_SetPID)
	dmtc0	a0, MIPS_COP_0_TLB_HI		# Write the hi reg value
	j	ra
	nop
END(mips3_SetPID)

/*--------------------------------------------------------------------------
 *
 * mips3_SetWIRED --
 *
 *	Write the given value into the TLB wired reg.
 *
 *	mips3_SetPID(wired)
 *		int wired;
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	WIRED set in the wired register.
 *
 *--------------------------------------------------------------------------
 */
LEAF(mips3_SetWIRED)
	mtc0	a0, MIPS_COP_0_TLB_WIRED		
	j	ra
	nop
END(mips3_SetWIRED)

/*--------------------------------------------------------------------------
 *
 * mips3_GetWIRED --
 *
 *	Get the value from the TLB wired reg.
 *
 *	mips3_GetWIRED(void)
 *
 * Results:
 *	Value of wired reg.
 *
 * Side effects:
 *	None.
 *
 *--------------------------------------------------------------------------
 */
LEAF(mips3_GetWIRED)
	mfc0	v0, MIPS_COP_0_TLB_WIRED		
	j	ra
	nop
END(mips3_GetWIRED)

/*--------------------------------------------------------------------------
 *
 * mips3_TLBFlush --
 *
 *	Flush the "random" entries from the TLB.
 *	Uses "wired" register to determine what register to start with.
 *	Arg "tlbsize" is the number of entries to flush.
 *
 *	mips3_TLBFlush(tlbsize)
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	The TLB is flushed.
 *
 *--------------------------------------------------------------------------
 */
LEAF(mips3_TLBFlush)
	mfc0	v1, MIPS_COP_0_STATUS	# Save the status register.
	mtc0	zero, MIPS_COP_0_STATUS	# Disable interrupts
	mfc0	t1, MIPS_COP_0_TLB_WIRED		
	li	v0, MIPS_KSEG0_START		# invalid address
	dmfc0	t0, MIPS_COP_0_TLB_HI		# Save the PID

	dmtc0	v0, MIPS_COP_0_TLB_HI		# Mark entry high as invalid
	dmtc0	zero, MIPS_COP_0_TLB_LO0	# Zero out low entry0.
	dmtc0	zero, MIPS_COP_0_TLB_LO1	# Zero out low entry1.
	mtc0	zero, MIPS_COP_0_TLB_PG_MASK	# Zero out mask entry.
/*
 * Align the starting value (t1) and the upper bound (a0).
 */
1:
	mtc0	t1, MIPS_COP_0_TLB_INDEX	# Set the index register.
	addu	t1, t1, 1			# Increment index.
	tlbwi					# Write the TLB entry.
	nop
	nop
	bne	t1, a0, 1b
	nop

	dmtc0	t0, MIPS_COP_0_TLB_HI		# Restore the PID
	j	ra
	mtc0	v1, MIPS_COP_0_STATUS	# Restore the status register
END(mips3_TLBFlush)


/*--------------------------------------------------------------------------
 *
 * mips3_TLBFlushAddr --
 *
 *	Flush any TLB entries for the given address and TLB PID.
 *
 *	mips3_TLBFlushAddr(TLBhi)
 *		unsigned TLBhi;
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	The process's page is flushed from the TLB.
 *
 *--------------------------------------------------------------------------
 */
LEAF(mips3_TLBFlushAddr)
	mfc0	v1, MIPS_COP_0_STATUS	# Save the status register.
	mtc0	zero, MIPS_COP_0_STATUS# Disable interrupts
	nop
	li	v0, (MIPS3_PG_HVPN | MIPS3_PG_ASID)
	and	a0, a0, v0		# Make shure valid hi value.
	dmfc0	t0, MIPS_COP_0_TLB_HI	# Get current PID
	dmtc0	a0, MIPS_COP_0_TLB_HI	# look for addr & PID
	nop
	nop
	nop
	tlbp				# Probe for the entry.
	nop
	nop				# Delay for effect
	nop
	mfc0	v0, MIPS_COP_0_TLB_INDEX	# See what we got
	li	t1, MIPS_KSEG0_START	# Load invalid entry.
	bltz	v0, 1f			# index < 0 => !found
	nop
	dmtc0	t1, MIPS_COP_0_TLB_HI	# Mark entry high as invalid

	dmtc0	zero, MIPS_COP_0_TLB_LO0	# Zero out low entry.
	dmtc0	zero, MIPS_COP_0_TLB_LO1	# Zero out low entry.
	nop
	tlbwi
	nop
	nop
	nop
	nop
1:
	dmtc0	t0, MIPS_COP_0_TLB_HI	# restore PID
	j	ra
	mtc0	v1, MIPS_COP_0_STATUS	# Restore the status register
END(mips3_TLBFlushAddr)

/*--------------------------------------------------------------------------
 *
 * mips3_TLBUpdate --
 *
 *	Update the TLB if highreg is found; otherwise, enter the data.
 *
 *	mips3_TLBUpdate(virpageadr, lowregx)
 *		unsigned virpageadr, lowregx;
 *
 * Results:
 *	< 0 if loaded >= 0 if updated.
 *
 * Side effects:
 *	None.
 *
 *--------------------------------------------------------------------------
 */
LEAF(mips3_TLBUpdate)
	mfc0	v1, MIPS_COP_0_STATUS	# Save the status register.
	mtc0	zero, MIPS_COP_0_STATUS	# Disable interrupts
	and	t1, a0, 0x1000			# t1 = Even/Odd flag
	li	v0, (MIPS3_PG_HVPN | MIPS3_PG_ASID)
	and	a0, a0, v0
	dmfc0	t0, MIPS_COP_0_TLB_HI		# Save current PID
	dmtc0	a0, MIPS_COP_0_TLB_HI		# Init high reg
	and	a2, a1, MIPS3_PG_G		# Copy global bit
	nop
	nop
	tlbp					# Probe for the entry.
	dsll	a1, a1, 34
	dsrl	a1, a1, 34
	bne	t1, zero, 2f			# Decide even odd
	mfc0	v0, MIPS_COP_0_TLB_INDEX	# See what we got
# EVEN
	nop
	bltz	v0, 1f				# index < 0 => !found
	nop

	tlbr					# update, read entry first
	nop
	nop
	nop
	dmtc0	a1, MIPS_COP_0_TLB_LO0		# init low reg0.
	nop
	tlbwi					# update slot found
	b	4f
	nop
1:
	mtc0	zero, MIPS_COP_0_TLB_PG_MASK	# init mask.
	dmtc0	a0, MIPS_COP_0_TLB_HI		# init high reg.
	dmtc0	a1, MIPS_COP_0_TLB_LO0		# init low reg0.
	dmtc0	a2, MIPS_COP_0_TLB_LO1		# init low reg1.
	nop
	tlbwr					# enter into a random slot
	b	4f
	nop
# ODD
2:
	nop
	bltz	v0, 3f				# index < 0 => !found
	nop

	tlbr					# read the entry first
	nop
	nop
	nop
	dmtc0	a1, MIPS_COP_0_TLB_LO1		# init low reg1.
	nop
	tlbwi					# update slot found
	b	4f
	nop
3:
	mtc0	zero, MIPS_COP_0_TLB_PG_MASK	# init mask.
	dmtc0	a0, MIPS_COP_0_TLB_HI		# init high reg.
	dmtc0	a2, MIPS_COP_0_TLB_LO0		# init low reg0.
	dmtc0	a1, MIPS_COP_0_TLB_LO1		# init low reg1.
	nop
	tlbwr					# enter into a random slot

4:						# Make shure pipeline
	nop					# advances before we
	nop					# uses the tlb.
	nop
	nop
	dmtc0	t0, MIPS_COP_0_TLB_HI		# restore PID
	j	ra
	mtc0	v1, MIPS_COP_0_STATUS	# Restore the status register
END(mips3_TLBUpdate)

/*--------------------------------------------------------------------------
 *
 * mips3_TLBReadVPS --
 *
 *	Read the TLB entry, including variable-page-size mask.
 *
 *	mips3_TLBReadVPS(entry, tlb)
 *		unsigned entry;
 *		struct tlb *tlb;
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	tlb will contain the TLB entry found.
 *
 *--------------------------------------------------------------------------
 */
LEAF(mips3_TLBReadVPS)
	mfc0	v1, MIPS_COP_0_STATUS	# Save the status register.
	mtc0	zero, MIPS_COP_0_STATUS	# Disable interrupts
	nop
	nop
	nop
	dmfc0	t0, MIPS_COP_0_TLB_HI		# Get current PID

	mtc0	a0, MIPS_COP_0_TLB_INDEX	# Set the index register
	nop
	tlbr					# Read from the TLB
	nop
	nop
	nop
	mfc0	t2, MIPS_COP_0_TLB_PG_MASK	# fetch the hi entry
	dmfc0	t3, MIPS_COP_0_TLB_HI		# fetch the hi entry
	dmfc0	t4, MIPS_COP_0_TLB_LO0		# See what we got
	dmfc0	t5, MIPS_COP_0_TLB_LO1		# See what we got
	dmtc0	t0, MIPS_COP_0_TLB_HI		# restore PID
	nop
	nop
	nop					# wait for PID active
	mtc0	v1, MIPS_COP_0_STATUS	# Restore the status register
	nop
	sw	t2, 0(a1)
	sw	t3, 4(a1)
	sw	t4, 8(a1)
	j	ra
	sw	t5, 12(a1)
END(mips3_TLBReadVPS)

/*--------------------------------------------------------------------------
 *
 * mips3_TLBRead --
 *
 *	Read the TLB entry.
 *
 *	mips3_TLBRead(entry, tlb)
 *		unsigned entry;
 *		struct tlb *tlb;
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	tlb will contain the TLB entry found.
 *
 *--------------------------------------------------------------------------
 */
LEAF(mips3_TLBRead)
	mfc0	v1, MIPS_COP_0_STATUS	# Save the status register.
	mtc0	zero, MIPS_COP_0_STATUS# Disable interrupts
	nop
	nop
	nop
	dmfc0	t0, MIPS_COP_0_TLB_HI	# Get current PID

	mtc0	a0, MIPS_COP_0_TLB_INDEX# Set the index register
	nop
	tlbr				# Read from the TLB
	nop
	nop
	nop
	mfc0	t2, MIPS_COP_0_TLB_PG_MASK	# fetch the hi entry
	dmfc0	t3, MIPS_COP_0_TLB_HI	# fetch the hi entry
	dmfc0	t4, MIPS_COP_0_TLB_LO0	# See what we got
	dmfc0	t5, MIPS_COP_0_TLB_LO1	# See what we got
	dmtc0	t0, MIPS_COP_0_TLB_HI	# restore PID
	nop
	nop
	nop				# wait for PID active
	mtc0	v1, MIPS_COP_0_STATUS	# Restore the status register
	nop
	sw	t2, 0(a1)
	sw	t3, 4(a1)
	sw	t4, 8(a1)
	j	ra
	sw	t5, 12(a1)
END(mips3_TLBRead)

/*--------------------------------------------------------------------------
 *
 * mips3_TLBGetPID --
 *
 *	mips3_TLBGetPID()
 *
 * Results:
 *	Returns the current TLB pid reg.
 *
 * Side effects:
 *	None.
 *
 *--------------------------------------------------------------------------
 */
LEAF(mips3_TLBGetPID)
	dmfc0	v0, MIPS_COP_0_TLB_HI		# get PID
	j	ra
	and	v0, v0, MIPS3_TLB_PID		# mask off PID
END(mips3_TLBGetPID)



/*----------------------------------------------------------------------------
 *
 *	R4000 cache flushing code.
 *
 *----------------------------------------------------------------------------
 */

/*
 * XXX  need to handle two-way caches for r4600 and mips ISA-IV.
 */

/*----------------------------------------------------------------------------
 *
 * mips3_FlushCache --
 *
 *	Flush the caches. Assumes a line size of 16 bytes for speed.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	The contents of the caches is flushed.
 *
 *----------------------------------------------------------------------------
 */
LEAF(mips3_FlushCache)
	lw	t1, mips_L1ICacheSize
	lw	t2, mips_L1DCacheSize
 #	lw	t3, mips_L1ICacheLSize
 #	lw	t4, mips_L1DCacheLSize
/*
 * Flush the instruction cache.
 */
	li	t0, MIPS_KSEG0_START
	addu	t1, t0, t1		# End address
	subu	t1, t1, 128
1:
	cache	0, 0(t0)
	cache	0, 16(t0)
	cache	0, 32(t0)
	cache	0, 48(t0)
	cache	0, 64(t0)
	cache	0, 80(t0)
	cache	0, 96(t0)
	cache	0, 112(t0)
	bne	t0, t1, 1b
	addu	t0, t0, 128

/*
 * Flush the data cache.
 */
	li	t0, MIPS_KSEG0_START
	addu	t1, t0, t2		# End address
	subu	t1, t1, 128
1:
	cache	1, 0(t0)
	cache	1, 16(t0)
	cache	1, 32(t0)
	cache	1, 48(t0)
	cache	1, 64(t0)
	cache	1, 80(t0)
	cache	1, 96(t0)
	cache	1, 112(t0)
	bne	t0, t1, 1b
	addu	t0, t0, 128

#if 1
	lw	t2, mips_L2CacheSize
	beq	t2, zero, 2f
	nop
	li	t0, MIPS_KSEG0_START
	addu	t1, t0, t2
	subu	t1, t1, 128
1:
	cache	3, 0(t0)
	cache	3, 32(t0)
	cache	3, 64(t0)
	cache	3, 96(t0)
	bne	t0, t1, 1b
	addu	t0, t0, 128
2:
#endif

	j	ra
	nop
END(mips3_FlushCache)

/*----------------------------------------------------------------------------
 *
 * mips3_FlushICache --
 *
 *	void mips3_FlushICache(addr, len)
 *		vaddr_t addr; vsize_t len;
 *
 *	Flush instruction cache for range of addr to addr + len - 1.
 *	The address can be any valid address so long as no TLB misses occur.
 *	Assumes a cache line size of 16 bytes for speed.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	The contents of the cache is flushed.
 *	Must not touch v0.
 *
 *----------------------------------------------------------------------------
 */
LEAF(mips3_FlushICache)
	addu	a1, 127		# Align
	srl	a1, a1, 7	# Number of unrolled loops
1:
	cache	0, 0(a0)
	cache	0, 16(a0)
	cache	0, 32(a0)
	cache	0, 48(a0)
	cache	0, 64(a0)
	cache	0, 80(a0)
	cache	0, 96(a0)
	cache	0, 112(a0)
	addu	a1, -1
	bne	a1, zero, 1b
	addu	a0, 128

	j	ra
	nop
END(mips3_FlushICache)

/*----------------------------------------------------------------------------
 *
 * mips3_FlushDCache --
 *
 *	void mips3_FlushDCache(addr, len)
 *		vaddr_t addr; vsize_t len;
 *
 *	Flush data cache for index range of addr to addr + len - 1.
 *	The address is reduced to a kseg0 index.
 *	
 * Results:
 *	None.
 *
 * Side effects:
 *	The contents of the cache is written back to primary memory.
 *	The cache line is invalidated.
 *
 *----------------------------------------------------------------------------
 */
LEAF(mips3_FlushDCache)
	lw	a2, mips_L1DCacheSize
	addiu	a2, -1
	move	t0, a0		# copy start address
	and	a0, a0, a2	# get index into primary cache
	addu	a1, 127		# Align
	li	a2, 0x80000000
	addu	a0, a0, a2
	addu	a1, a1, a0
	and	a0, a0, -128
	subu	a1, a1, a0
	srl	a1, a1, 7	# Compute number of cache lines
	move	t1, a1		# copy length
1:
	cache	1, 0(a0)
	cache	1, 16(a0)
	cache	1, 32(a0)
	cache	1, 48(a0)
	cache	1, 64(a0)
	cache	1, 80(a0)
	cache	1, 96(a0)
	cache	1, 112(a0)
	addu	a1, -1
	bne	a1, zero, 1b
	addu	a0, 128

#if 1
	lw	a2, mips_L2CacheSize
	beq	a2, zero, 2f	# no secondary cache
	addiu	a2, -1
	and	t0,t0,a2	# secondary cache index
	li	a0, 0x80000000
	addu	a0, a0, t0	# reduce to kseg0 address
1:
	cache	3, 0(a0)
	cache	3, 32(a0)
	cache	3, 64(a0)
	cache	3, 96(a0)
	addu	t1, -1
	bne	t1, zero, 1b
	addu	a0, 128
2:
#endif

	j	ra
	nop
END(mips3_FlushDCache)

/*----------------------------------------------------------------------------
 *
 * mips3_HitFlushDCache --
 *
 *	void mips3_HitFlushDCache(addr, len)
 *		vaddr_t addr; vsize_t len;
 *
 *	Flush data cache for range of addr to addr + len - 1.
 *	The address can be any valid viritual address as long
 *	as no TLB invalid traps occur. Only lines with matching
 *	addr is flushed.
 *	
 * Results:
 *	None.
 *
 * Side effects:
 *	The contents of the cache is written back to primary memory.
 *	The cache line is invalidated.
 *
 *----------------------------------------------------------------------------
 */
LEAF(mips3_HitFlushDCache)
	beq	a1, zero, 2f
	addu	a1, 127		# Align
	addu	a1, a1, a0
	and	a0, a0, -128
	subu	a1, a1, a0
	srl	a1, a1, 7	# Compute number of cache lines
1:
	cache	0x15, 0(a0)
	cache	0x15, 16(a0)
	cache	0x15, 32(a0)
	cache	0x15, 48(a0)
	cache	0x15, 64(a0)
	cache	0x15, 80(a0)
	cache	0x15, 96(a0)
	cache	0x15, 112(a0)
#if 1
	cache	0x17, 0(a0)
	cache	0x17, 32(a0)
	cache	0x17, 64(a0)
	cache	0x17, 96(a0)
#endif
	addu	a1, -1
	bne	a1, zero, 1b
	addu	a0, 128

2:
	j	ra
	nop
END(mips3_HitFlushDCache)
/*----------------------------------------------------------------------------
 *
 * mips3_InvalidateDCache --
 *
 *	void mips3_FlushDCache(addr, len)
 *		vaddr_t addr; vsize_t len;
 *
 *	Flush data cache for range of addr to addr + len - 1.
 *	The address can be any valid address as long as no TLB misses occur.
 *	(Be sure to use cached K0SEG kernel addresses or mapped addresses)
 * Results:
 *	None.
 *
 * Side effects:
 *	The cache line is invalidated.
 *
 *----------------------------------------------------------------------------
 */
LEAF(mips3_InvalidateDCache)
	addu	a1, a1, a0			# compute ending address
1:
	cache	0x13, 0(a0)
	addu	a0, a0, 4
	bne	a0, a1, 1b
	cache	0x11,-4(a0)

	j	ra
	nop
END(mips3_InvalidateDCache)

/*----------------------------------------------------------------------------
 *
 * mips3_VCED --
 *
 *	Handle virtual coherency exceptions.
 *	Called directly from the mips3 execption-table  code.
 *	only k0, k1 are avaiable on entry
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	Remaps the conflicting address as uncached and returns
 *	from the execption.
 *
 *	NB: cannot be profiled, all registers are user registers on entry.
 *
 *----------------------------------------------------------------------------
 */
LEAF(mips3_VCED)
ALIAS(mips3_VCEI)	/* XXXX */
	.set	noat
	move	k0, AT
	.set	at
	sw	k0, vce_saveat
	mfc0	k0, MIPS_COP_0_BAD_VADDR	# fault addr.
	nop
	nop
	and	k0, -16
	sw	k0, vce_savek0			# save virtual address
	cache	1, 0(k0)			# writeback primary line
	lw	k1, _C_LABEL(mips_L1DCacheSize)
	addiu	k1, -1
	and	k0, k0, k1			# mask to cache index
	or	k0, 0x80000000			# physical K0SEG address
	xor	k0, 0x1000			# other page of cache
	cache	1, 0(k0)
	xor	k0, 0x10			# other half of cache line
	cache	1, 0(k0)
	xor	k0, 0x1000			# other half in same page
	cache	1, 0(k0)
	sltiu	k1, k1, 0x3fff
	bnez	k1, 1f				# not R4400
	xor	k0, 0x2000			# clear out same cache lines
	cache	1, 0(k0)			#   in the other half of the
	xor	k0, 0x1000			#   R4400 primary cache
	cache	1, 0(k0)
	xor	k0, 0x10
	cache	1, 0(k0)
	xor	k0, 0x1000
	cache	1, 0(k0)
 # end R4400
1:
	lw	k0, vce_savek0			# get original address
	cache	31, 0(k0)
	nop
#ifdef DEBUG
	mfc0	k1, MIPS_COP_0_EXC_PC		
	sw	k0, VCE_vaddr
	sw	k1, VCE_epc
	la	k1, VCE_count		# count number of exceptions
	srl	k0, k0, 26		# position upper 4 bits of VA
	andi	k0, k0, 0x3c		# mask it off
	add	k1, k0			# get address of count table
	lw	k0, 0(k1)
	addu	k0, 1
	sw	k0, 0(k1)
#endif
	lw	k0, vce_saveat
	.set	noat
	move	AT, k0
	.set	at
	eret
	.align	3			# needs to be aligned?
vce_saveat:
	.word	0
	.word	0
vce_savek0:
	.word	0
	.word	0
	.globl	_C_LABEL(VCE_count)
_C_LABEL(VCE_count):
	.word	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	.globl	_C_LABEL(VCE_epc)
_C_LABEL(VCE_epc):
	.word	0
	.globl	_C_LABEL(VCE_vaddr)
_C_LABEL(VCE_vaddr):
	.word	0
END(mips3_VCED)

/*----------------------------------------------------------------------------
 *
 * mips3_wbflush --
 *
 *	Return when the write buffer is empty.
 *
 *	mips3_wbflush()
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------------
 */
LEAF(mips3_wbflush)
	nop
	sync
	j	ra
	nop
END(mips3_wbflush)

/*
 * mips3_proc_trampoline()
 *
 * Arrange for a function to be invoked neatly, after a cpu_switch().
 * Invoke the service function with one argument, specified by the s0
 * and s1 respectively.  There is no need register save operation.
 */
LEAF(mips3_proc_trampoline) 
	jal	ra, s0
	move	a0, s1
	.set	noat
	li	a0, MIPS_SR_EXL			# set exception level
	mtc0	a0, MIPS_COP_0_STATUS
	nop
	nop
	lw	a1, _C_LABEL(curpcb)
	nop
 #	lw	a0, U_PCB_REGS+FRAME_SR(a1)
	lw	t0, U_PCB_REGS+FRAME_MULLO(a1)
	lw	t1, U_PCB_REGS+FRAME_MULHI(a1)
	lw	v0, U_PCB_REGS+FRAME_EPC(a1)
	mtlo	t0
	mthi	t1
	dmtc0	v0, MIPS_COP_0_EXC_PC		
	nop
	nop
	move	k1, a1
	lw	AT, U_PCB_REGS+FRAME_AST(k1)
	lw	v0, U_PCB_REGS+FRAME_V0(k1)
	lw	v1, U_PCB_REGS+FRAME_V1(k1)
	lw	a0, U_PCB_REGS+FRAME_A0(k1)
	lw	a1, U_PCB_REGS+FRAME_A1(k1)
	lw	a2, U_PCB_REGS+FRAME_A2(k1)
	lw	a3, U_PCB_REGS+FRAME_A3(k1)
	lw	t0, U_PCB_REGS+FRAME_T0(k1)
	lw	t1, U_PCB_REGS+FRAME_T1(k1)
	lw	t2, U_PCB_REGS+FRAME_T2(k1)
	lw	t3, U_PCB_REGS+FRAME_T3(k1)
	lw	t4, U_PCB_REGS+FRAME_T4(k1)
	lw	t5, U_PCB_REGS+FRAME_T5(k1)
	lw	t6, U_PCB_REGS+FRAME_T6(k1)
	lw	t7, U_PCB_REGS+FRAME_T7(k1)
	lw	s0, U_PCB_REGS+FRAME_S0(k1)
	lw	s1, U_PCB_REGS+FRAME_S1(k1)
	lw	s2, U_PCB_REGS+FRAME_S2(k1)
	lw	s3, U_PCB_REGS+FRAME_S3(k1)
	lw	s4, U_PCB_REGS+FRAME_S4(k1)
	lw	s5, U_PCB_REGS+FRAME_S5(k1)
	lw	s6, U_PCB_REGS+FRAME_S6(k1)
	lw	s7, U_PCB_REGS+FRAME_S7(k1)
	lw	t8, U_PCB_REGS+FRAME_T8(k1)
	lw	t9, U_PCB_REGS+FRAME_T9(k1)
	lw	gp, U_PCB_REGS+FRAME_GP(k1)
	lw	s8, U_PCB_REGS+FRAME_S8(k1)
	lw	ra, U_PCB_REGS+FRAME_RA(k1)
	lw	k0, U_PCB_REGS+FRAME_SR(k1)
	lw	sp, U_PCB_REGS+FRAME_SP(k1)
	mtc0	k0, MIPS_COP_0_STATUS
	nop
	nop
	eret
	.set	at
END(mips3_proc_trampoline)

/*
 * mips3_switch_exit(struct proc *)
 * Make the named process exit.  Switch SP to nullproc stack, schedule
 * the exiting proc's vmspace and stack to be freed, then jump into the
 * middle of cpu_switch().  MUST BE CALLED AT SPLHIGH.
 */
LEAF(mips3_switch_exit)
	la	v1, _C_LABEL(nullproc)		# !! SP runs on p->p_addr !!
	lw	t0, P_MD_UPTE+0(v1)		# t0 = first u. pte
	lw	t1, P_MD_UPTE+4(v1)		# t1 = 2nd u. pte
	li	v0, MIPS_KSEG0_START		# clear wired entries for pcb
	mtc0	v0, MIPS_COP_0_TLB_HI
	mtc0	zero, MIPS_COP_0_TLB_LO0
	mtc0	zero, MIPS_COP_0_TLB_LO1
	li	v0, 1				# clear wired entry 1
	mtc0	v0, MIPS_COP_0_TLB_INDEX
	tlbwi
	li	v0, 2				# clear wired entry 2
	mtc0	v0, MIPS_COP_0_TLB_INDEX
	tlbwi
	li	v0, UADDR			# still using UADDR for kstack
	nop
	mtc0	zero, MIPS_COP_0_TLB_INDEX	# set the index register
	mtc0	v0, MIPS_COP_0_TLB_HI		# init high entry
	mtc0	t0, MIPS_COP_0_TLB_LO0		# init low entry 0
	mtc0	t1, MIPS_COP_0_TLB_LO1		# init low entry 1
	nop
	tlbwi					# Write the TLB entry.

	addu	sp, v0, USPACE - CALLFRAME_SIZ
	la	ra, sw1				# goto cpu_switch()
	j	exit2				# proc already in a0
	nop					# XXX schedule better
END(mips3_switch_exit)

/*
 * Resume process indicated by the pte's for its u struct
 * NOTE: This is hard coded to UPAGES == 2.
 * Also, there should be no TLB faults at this point.
 *
 * Entered from CPU-common cpu_switch()
 * a0 = p_addr [curpcb]
 * a1 = First u.pte
 * a2 = Second u.pte
 * a3 = Address Space Identifier (TLB PID) for this process
 */
/*
 * XXXX - almost done with the UADDR mapping; only the kernel stack should
 * now be using UADDR.  The first TLB entry is used to map UADDR to the
 * u-area.  Then the following TLB entries are used to map the current u-area.
 * This gets a bit messy on the R4000:  it can take one or two TLB
 * entries to map the u-area, depending upon whether the u-area
 * begins on an even or odd page.  Also, any current mapping for the u-area
 * address space needs to be flushed as well.
 *
 * Both UADDR and p_addr are mapped global.
 *
 * NB: cannot be profiled due to weird argument-assing convention.
 *     mcount would trash v0, t0, t1.
 */
LEAF_NOPROFILE(mips3_cpu_switch_resume)
	li	v0, UADDR			# Hi entry = UADD, ASID = 0
	ori	a1, MIPS3_PG_G			# set PG_G
	ori	a2, MIPS3_PG_G			# set PG_G
	mtc0	zero, MIPS_COP_0_TLB_INDEX	# set the index register
	mtc0	v0, MIPS_COP_0_TLB_HI		# init high entry
	mtc0	a1, MIPS_COP_0_TLB_LO0		# init low entry 0
	mtc0	a2, MIPS_COP_0_TLB_LO1		# init low entry 1
	nop
	nop
	tlbwi					# Write the TLB entry.
	nop
	nop
	nop
	nop
# now map the p_addr pages
	li	s1, MIPS3_PG_ODDPG
	and	s1, a0				# does p_addr start on odd page
	beq	s1, zero, 1f			# no, only one TLB entry needed
# p_addr starts on an odd page, need to set up 2 TLB entries
	addu	a0, a0, MIPS3_PG_ODDPG		# map second page
# see if this address currently exists in TLB
	mtc0	a0, MIPS_COP_0_TLB_HI
	nop
	tlbp					# probe for existing entry
	nop
	nop
	mfc0	s1, MIPS_COP_0_TLB_INDEX
	nop
	slti	s1, s1, 8			# if found in random entry
	bnez	s1, 2f
	mtc0	zero, MIPS_COP_0_TLB_LO0	# flush it
	mtc0	zero, MIPS_COP_0_TLB_LO1
	li	s1, MIPS_KSEG0_START
	mtc0	s1, MIPS_COP_0_TLB_HI
	nop
	tlbwi
	nop
	mtc0	a0, MIPS_COP_0_TLB_HI		# restore high entry
2:
	mtc0	a2, MIPS_COP_0_TLB_LO0		# even page to LO0
	li	s1, MIPS3_PG_G			# invalid page set PG_G
	mtc0	s1, MIPS_COP_0_TLB_LO1		# invalid page to LO1
	li	s1, 2				# use TLB entry 2 for even page
	mtc0	s1, MIPS_COP_0_TLB_INDEX
	nop
	tlbwi					# write odd page TLB entry
	move	a2, a1				# odd page to LO1
	li	a1, MIPS3_PG_G			# LO0
	addi	a0, a0, -NBPG * 2		# backup to odd page mapping
# set up TLB entry 1
1:
# see if this address currently exists in TLB
	mtc0	a0, MIPS_COP_0_TLB_HI
	nop
	tlbp					# probe for existing entry
	nop
	nop
	mfc0	s1, MIPS_COP_0_TLB_INDEX
	nop
	slti	s1, s1, 8			# if found in random entry
	bnez	s1, 2f
	mtc0	zero, MIPS_COP_0_TLB_LO0	# flush it
	mtc0	zero, MIPS_COP_0_TLB_LO1
	li	s1, MIPS_KSEG0_START
	mtc0	s1, MIPS_COP_0_TLB_HI
	nop
	tlbwi
	nop
	mtc0	a0, MIPS_COP_0_TLB_HI		# restore high entry
2:
	mtc0	a1, MIPS_COP_0_TLB_LO0		# first page
	mtc0	a2, MIPS_COP_0_TLB_LO1		# second page
	li	s1, 1				# use TLB entry 1
	mtc0	s1, MIPS_COP_0_TLB_INDEX
	nop
	tlbwi					# write TLB entry
	nop

	mtc0	a3, MIPS_COP_0_TLB_HI		# set current ASID
/*
 * Now running on new u struct.
 * Restore registers and return.
 */
	lw	t0, _C_LABEL(curpcb)
	nop
	lw	v0, U_PCB_CONTEXT+SF_REG_ST(t0)# restore kernel context
	lw	ra, U_PCB_CONTEXT+SF_REG_RA(t0)
	lw	s0, U_PCB_CONTEXT+SF_REG_S0(t0)
	lw	s1, U_PCB_CONTEXT+SF_REG_S1(t0)
	lw	s2, U_PCB_CONTEXT+SF_REG_S2(t0)
	lw	s3, U_PCB_CONTEXT+SF_REG_S3(t0)
	lw	s4, U_PCB_CONTEXT+SF_REG_S4(t0)
	lw	s5, U_PCB_CONTEXT+SF_REG_S5(t0)
	lw	s6, U_PCB_CONTEXT+SF_REG_S6(t0)
	lw	s7, U_PCB_CONTEXT+SF_REG_S7(t0)
	lw	sp, U_PCB_CONTEXT+SF_REG_SP(t0)
	lw	s8, U_PCB_CONTEXT+SF_REG_S8(t0)
	nop
	mtc0	v0, MIPS_COP_0_STATUS
	j	ra
	li	v0, 1				# possible return to 'savectx()'
END(mips3_cpu_switch_resume)


/*----------------------------------------------------------------------------
 *
 * mips3_cycle_count --
 *
 *	u_int32_t mips3_cycle_count(void)
 *
 *	read 32-bit cycle-counter clock in coprocessor 0.
 *
 * Results:
 *	returns 32-bit clock value, incremented automatically by CPU 
 *	at nominal cycle rate (i.e., half the maximum issue rate.)
 *
 * Side effects:
 *	none.
 *
 *----------------------------------------------------------------------------
 */
LEAF(mips3_cycle_count)
	mfc0	v0, MIPS_COP_0_COUNT
	nop
	nop
	j	ra
	nop
END(mips3_cycle_count)

/*
 * Read compare register.
 *
 * On mips3, generates a hardint 5 interrupt request is generated
 * each time the COUNT register increments past the COMPARE register.
 *
 * (The mips interrupt mask defintions currently leaves this interrupt
 * unconditionally  masked out on mips3 CPUs.)
 */
LEAF(mips3_read_compare)
	mfc0	v0,  MIPS_COP_0_COMPARE
	nop
	j	ra
	nop
END(mips3_read_compare)

LEAF(mips3_read_config)
	mfc0	v0, MIPS_COP_0_CONFIG
	nop
	j	ra
	nop
END(mips3_read_config)

/*
 * Write value to compare register.
 *
 * Side Effects:	
 *	Clears interrupt request from cycle-counter clock.
 */
LEAF(mips3_write_compare)
	mtc0	a0,  MIPS_COP_0_COMPARE
	nop
	j	ra
	nop
END(mips3_write_compare)

/*
 * The variables below are used to communicate the cache handling
 * to  higher-level software.
 */
	.data

	.globl	_C_LABEL(mips3_L1TwoWayCache)
_C_LABEL(mips3_L1TwoWayCache):
	.word	0

	.globl	_C_LABEL(mips3_cacheflush_bug)
_C_LABEL(mips3_cacheflush_bug):
	.word	0

mips3_excpt_sw:
	####
	#### The kernel exception handlers.
	####
	.word _C_LABEL(mips3_KernIntr)		# 0 external interrupt
	.word _C_LABEL(mips3_KernGenException)	# 1 TLB modification
	.word _C_LABEL(mips3_TLBInvalidException) # 2 TLB miss (LW/I-fetch)
	.word _C_LABEL(mips3_TLBInvalidException) # 3 TLB miss (SW)
	.word _C_LABEL(mips3_KernGenException)	# 4 address error (LW/I-fetch)
	.word _C_LABEL(mips3_KernGenException)	# 5 address error (SW)
	.word _C_LABEL(mips3_KernGenException)	# 6 bus error (I-fetch)
	.word _C_LABEL(mips3_KernGenException)	# 7 bus error (load or store)
	.word _C_LABEL(mips3_KernGenException)	# 8 system call
	.word _C_LABEL(mips3_KernGenException)	# 9 breakpoint
	.word _C_LABEL(mips3_KernGenException)	# 10 reserved instruction
	.word _C_LABEL(mips3_KernGenException)	# 11 coprocessor unusable
	.word _C_LABEL(mips3_KernGenException)	# 12 arithmetic overflow
	.word _C_LABEL(mips3_KernGenException)	# 13 r4k trap exception
	.word _C_LABEL(mips3_VCEI)		# 14 r4k virt coherence
	.word _C_LABEL(mips3_KernGenException)	# 15 r4k FP exception
	.word _C_LABEL(mips3_KernGenException)	# 16 reserved
	.word _C_LABEL(mips3_KernGenException)	# 17 reserved
	.word _C_LABEL(mips3_KernGenException)	# 18 reserved
	.word _C_LABEL(mips3_KernGenException)	# 19 reserved
	.word _C_LABEL(mips3_KernGenException)	# 20 reserved
	.word _C_LABEL(mips3_KernGenException)	# 21 reserved
	.word _C_LABEL(mips3_KernGenException)	# 22 reserved
	.word _C_LABEL(mips3_KernGenException)	# 23 watch exception
	.word _C_LABEL(mips3_KernGenException)	# 24 reserved
	.word _C_LABEL(mips3_KernGenException)	# 25 reserved
	.word _C_LABEL(mips3_KernGenException)	# 26 reserved
	.word _C_LABEL(mips3_KernGenException)	# 27 reserved
	.word _C_LABEL(mips3_KernGenException)	# 28 reserved
	.word _C_LABEL(mips3_KernGenException)	# 29 reserved
	.word _C_LABEL(mips3_KernGenException)	# 30 reserved
	.word _C_LABEL(mips3_VCED)		# 31 v. coherence exception data
	#####
	##### The user exception handlers.
	#####
	.word _C_LABEL(mips3_UserIntr)		#  0
	.word _C_LABEL(mips3_UserGenException)	#  1
	.word _C_LABEL(mips3_UserGenException)	#  2
	.word _C_LABEL(mips3_UserGenException)	#  3
	.word _C_LABEL(mips3_UserGenException)	#  4
	.word _C_LABEL(mips3_UserGenException)	#  5
	.word _C_LABEL(mips3_UserGenException)	#  6
	.word _C_LABEL(mips3_UserGenException)	#  7
	.word _C_LABEL(mips3_SystemCall)	#  8
	.word _C_LABEL(mips3_UserGenException)	#  9
	.word _C_LABEL(mips3_UserGenException)	# 10
	.word _C_LABEL(mips3_UserGenException)	# 11
	.word _C_LABEL(mips3_UserGenException)	# 12
	.word _C_LABEL(mips3_UserGenException)	# 13
	.word _C_LABEL(mips3_VCEI)		# 14
	.word _C_LABEL(mips3_UserGenException)	# 15
	.word _C_LABEL(mips3_UserGenException)	# 16
	.word _C_LABEL(mips3_UserGenException)	# 17
	.word _C_LABEL(mips3_UserGenException)	# 18
	.word _C_LABEL(mips3_UserGenException)	# 19
	.word _C_LABEL(mips3_UserGenException)	# 20
	.word _C_LABEL(mips3_UserGenException)	# 21
	.word _C_LABEL(mips3_UserGenException)	# 22
	.word _C_LABEL(mips3_UserGenException)	# 23
	.word _C_LABEL(mips3_UserGenException)	# 24
	.word _C_LABEL(mips3_UserGenException)	# 25
	.word _C_LABEL(mips3_UserGenException)	# 26
	.word _C_LABEL(mips3_UserGenException)	# 27
	.word _C_LABEL(mips3_UserGenException)	# 28
	.word _C_LABEL(mips3_UserGenException)	# 29
	.word _C_LABEL(mips3_UserGenException)	# 20
	.word _C_LABEL(mips3_VCED)		# 31 v. coherence exception data

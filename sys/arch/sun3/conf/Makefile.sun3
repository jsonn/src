#	$NetBSD: Makefile.sun3,v 1.56.2.1 1997/03/12 14:04:30 is Exp $

# Makefile for NetBSD
#
# This makefile is constructed from a machine description:
#	config machineid
# Most changes should be made in the machine description
#	/sys/arch/sun3/conf/``machineid''
# after which you should do
#	config machineid
# Machine generic makefile changes should be made in
#	/sys/arch/sun3/conf/Makefile.sun3
# after which config should be rerun for all machines of that type.
#
# N.B.: NO DEPENDENCIES ON FOLLOWING FLAGS ARE VISIBLE TO MAKEFILE
#	IF YOU CHANGE THE DEFINITION OF ANY OF THESE RECOMPILE EVERYTHING
#
# -DTRACE	compile in kernel tracing hooks
# -DQUOTA	compile in file system quotas

# DEBUG is set to -g if debugging.
# PROF is set to -pg if profiling.

# XXX - Make cross-build work...
MACHINE_ARCH=m68k
MACHINE=sun3

AS?=	as
CC?=	cc
CPP?=	cpp
LD?=	ld
MKDEP?=	mkdep
STRIP?=	strip
COPTS?=	-O2 -fno-defer-pop

# source tree is located via $S relative to the compilation directory
.ifndef S
S!=	cd ../../../..; pwd
.endif
SUN3=	$S/arch/sun3

# Override CPP defaults entirely, so cross-compilation works.
# Keep -nostdinc before all -I flags, similar for -undef ...
INCLUDES=	-nostdinc -I. -I$S/arch -I$S
XDEFS=		-undef -D__NetBSD__ -Dm68k -Dmc68000
DEFINES=	-D_KERNEL -Dmc68020 -Dsun3
CPPFLAGS=	${INCLUDES} ${XDEFS} ${DEFINES} ${IDENT} ${PARAM}
# Make it easy to override this on the command line...
CWARNFLAGS= 	-Wall -Wstrict-prototypes # -Wmissing-prototypes -Werror
CFLAGS= 	${DEBUG} ${COPTS} -msoft-float ${CWARNFLAGS}
# No, we may NOT assume that the compiler does -x whatever...
APPFLAGS=	-P -traditional ${CPPFLAGS} -D_LOCORE
AFLAGS= 	-m68020
LINKFLAGS=	-N -Ttext 0E004000 -e start
STRIPFLAGS=	-d

### find out what to use for libkern
.include "$S/lib/libkern/Makefile.inc"
.ifndef PROF
LIBKERN=	${KERNLIB}
.else
LIBKERN=	${KERNLIB_PROF}
.endif

### find out what to use for libcompat
.include "$S/compat/common/Makefile.inc"
.ifndef PROF
LIBCOMPAT=	${COMPATLIB}
.else
LIBCOMPAT=	${COMPATLIB_PROF}
.endif

# compile rules: rules are named NORMAL_${SUFFIX} where SUFFIX is
# the file suffix, capitalized (e.g. C for a .c file).

NORMAL_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<

# Do NOT assume the compiler does "-x funny_format" (gcc-specific)
# This needs an intermediate file.  The original file is always
# safe in some far away directory, so just use the base name.
NORMAL_S=	${CPP} ${APPFLAGS} $< > $*.s ;\
		${AS} ${AFLAGS} -o $@ $*.s ; rm $*.s

# These comments help identify sections in the generated Makefile.
# OBJS, CFILES, SFILES follow:

%OBJS

%CFILES

%SFILES

# OBJS, CFILES, SFILES done.

# load lines for config "xxx" will be emitted as:
# xxx: ${SYSTEM_DEP} swapxxx.o
#	${SYSTEM_LD_HEAD}
#	${SYSTEM_LD} swapxxx.o
#	${SYSTEM_LD_TAIL}
SYSTEM_OBJ=	locore.o \
		param.o ioconf.o ${OBJS} ${LIBKERN} ${LIBCOMPAT}
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
SYSTEM_LD_HEAD=	@rm -f $@
SYSTEM_LD=	@echo ${LD} ${LINKFLAGS} -o $@ '$${SYSTEM_OBJ}' vers.o; \
		${LD} ${LINKFLAGS} -o $@ ${SYSTEM_OBJ} vers.o
SYSTEM_LD_TAIL=	size $@; chmod 755 $@

DEBUG?=
.if ${DEBUG} == "-g"
LINKFLAGS+=	-X
SYSTEM_LD_TAIL+=; \
		mv -f $@ $@.gdb; cp -p $@.gdb $@; \
		${STRIP} ${STRIPFLAGS} $@
.else
LINKFLAGS+=	-S
.endif

# LOAD+

%LOAD

# LOAD-

# Use awk to cross-build assym.h from the genassym.s file.
assym.h: genassym.o ${SUN3}/sun3/genassym.awk
	awk -f ${SUN3}/sun3/genassym.awk < genassym.s > $@

# The above rule lists genassym.o as a prerequisite so that the
# generated .depend rule is effective, even though we actually
# use genassym.s instead.   This always creates both.
genassym.o: ${SUN3}/sun3/genassym.c
	${CC} ${CPPFLAGS} -S $<
	${CC} -c $*.s

param.c: $S/conf/param.c
	rm -f param.c
	cp $S/conf/param.c .

param.o: param.c Makefile
	${NORMAL_C}

ioconf.o: ioconf.c
	${NORMAL_C}

newvers: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
	sh $S/conf/newvers.sh
	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c vers.c


clean:
	rm -f eddep *netbsd netbsd.gdb tags *.[io] [a-z]*.s \
	    [Ee]rrs linterrs makelinks genassym genassym.o assym.h

lint:
	@lint -hbxncez -Dvolatile= ${CPPFLAGS} -UKGDB \
	    ${SUN3}/sun3/Locore.c ${CFILES} \
	    ioconf.c param.c | \
	    grep -v 'static function .* unused'

tags:
	@echo "see $S/kern/Makefile for tags"

links:
	egrep '#if' ${CFILES} | sed -f $S/conf/defines | \
	  sed -e 's/:.*//' -e 's/\.c/.o/' | sort -u > dontlink
	echo ${CFILES} | tr -s ' ' '\12' | sed 's/\.c/.o/' | \
	  sort -u | comm -23 - dontlink | \
	  sed 's,../.*/\(.*.o\),rm -f \1; ln -s ../GENERIC/\1 \1,' > makelinks
	sh makelinks && rm -f dontlink

SRCS=	${SUN3}/sun3/locore.s \
	param.c ioconf.c ${CFILES} ${SFILES}

depend: .depend
.depend: ${SRCS} assym.h param.c
	${MKDEP} ${CPPFLAGS} param.c ioconf.c ${CFILES}
	${MKDEP} -a ${CPPFLAGS} ${SUN3}/sun3/genassym.c

# XXX - see below
#	${MKDEP} -a ${APPFLAGS} ${SUN3}/sun3/locore.s
#	${MKDEP} -a ${APPFLAGS} ${SFILES}
#
# For cross-compilation, the "gcc -M" mkdep script is convenient,
# but that does not correctly make rules from *.s files.  The
# easiest compromise is to just list those dependencies here.
locore.o: assym.h machine/trap.h m68k/trap.h
copy.o:   assym.h $S/sys/errno.h

# depend on root or device configuration
autoconf.o conf.o: Makefile
 
# depend on network or filesystem configuration 
uipc_proto.o vfs_conf.o: Makefile 

# depend on maxusers
genassym.o machdep.o: Makefile

# depend on CPU configuration 
db_machdep.o dvma.o machdep.o pmap.o sun3_startup.o vm_machdep.o: Makefile

# depends on KGDBDEV, KGDBRATE
kgdb_stub.o: Makefile

locore.o: ${SUN3}/sun3/locore.s
	${NORMAL_S}

# Generated rules follow:

%RULES

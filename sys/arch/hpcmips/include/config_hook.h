/*	$NetBSD: config_hook.h,v 1.9.2.3 2000/11/22 16:00:12 bouyer Exp $	*/

/*-
 * Copyright (c) 1999
 *         Shin Takemura and PocketBSD Project. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the PocketBSD project
 *	and its contributors.
 * 4. Neither the name of the project nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#ifndef _CONFIG_HOOK_H_
#define _CONFIG_HOOK_H_

enum config_hook_mode {
	CONFIG_HOOK_SHARE,
	CONFIG_HOOK_REPLACE,
	CONFIG_HOOK_EXCLUSIVE,
};

typedef void *config_hook_tag;

void	config_hook_init __P((void));
config_hook_tag	config_hook __P((int type, long id, enum config_hook_mode mode,
				 int (*func) __P((void*, int, long, void*)), 
				 void *ctx));
void	config_unhook __P((config_hook_tag));
int	config_hook_call __P((int type, long id, void *msg));

/*
 * hook types and IDs
 */
#define CONFIG_HOOK_POWERCONTROL	0
#define CONFIG_HOOK_POWERCONTROL_COM0		0
#define CONFIG_HOOK_POWERCONTROL_COM1		1
#define CONFIG_HOOK_POWERCONTROL_COM2		2
#define CONFIG_HOOK_POWERCONTROL_COM3		3
#define CONFIG_HOOK_POWERCONTROL_LCDLIGHT	4
#define CONFIG_HOOK_POWERCONTROL_LCD		5
#define CONFIG_HOOK_POWERCONTROL_SPEAKER	6
#define CONFIG_HOOK_POWERCONTROL_LED		7

#define CONFIG_HOOK_BUTTONEVENT		1
#define CONFIG_HOOK_BUTTONEVENT_POWER		0
#define CONFIG_HOOK_BUTTONEVENT_OK		1
#define CONFIG_HOOK_BUTTONEVENT_CANCEL		2
#define CONFIG_HOOK_BUTTONEVENT_UP		3
#define CONFIG_HOOK_BUTTONEVENT_DOWN		4
#define CONFIG_HOOK_BUTTONEVENT_REC		5
#define CONFIG_HOOK_BUTTONEVENT_COVER		6
#define CONFIG_HOOK_BUTTONEVENT_LIGHT		7
#define CONFIG_HOOK_BUTTONEVENT_CONTRAST	8
#define CONFIG_HOOK_BUTTONEVENT_APP0		9
#define CONFIG_HOOK_BUTTONEVENT_APP1		10
#define CONFIG_HOOK_BUTTONEVENT_APP2		11
#define CONFIG_HOOK_BUTTONEVENT_APP3		12
#define CONFIG_HOOK_BUTTONEVENT_LEFT		13
#define CONFIG_HOOK_BUTTONEVENT_RIGHT		14
#define CONFIG_HOOK_BUTTONEVENT_CONTRAST_UP	15
#define CONFIG_HOOK_BUTTONEVENT_CONTRAST_DOWN	16
#define CONFIG_HOOK_BUTTONEVENT_LIGHT_UP	17
#define CONFIG_HOOK_BUTTONEVENT_LIGHT_DOWN	18

#define CONFIG_HOOK_PMEVENT		2
#define CONFIG_HOOK_PMEVENT_STANDBYREQ		0
#define CONFIG_HOOK_PMEVENT_SUSPENDREQ		1
#define CONFIG_HOOK_PMEVENT_HARDPOWER		2
#define CONFIG_HOOK_PMEVENT_BATTERY		3
#define CONFIG_HOOK_PMEVENT_AC			4
#define CONFIG_HOOK_PMEVENT_BATTERYVAL		5
#define CONFIG_HOOK_PMEVENT_ACADAPTER		6
#define CONFIG_HOOK_PMEVENT_CHARGE		7

/* misc event */
#define CONFIG_HOOK_EVENT		3
#define CONFIG_HOOK_EVENT_COM0_CTS		0
#define CONFIG_HOOK_EVENT_COM1_CTS		1
#define CONFIG_HOOK_EVENT_COM2_CTS		2
#define CONFIG_HOOK_EVENT_COM3_CTS		3
#define CONFIG_HOOK_EVENT_COM0_DCD		4
#define CONFIG_HOOK_EVENT_COM1_DCD		5
#define CONFIG_HOOK_EVENT_COM2_DCD		6
#define CONFIG_HOOK_EVENT_COM3_DCD		7

/* misc output port */
#define CONFIG_HOOK_OUT			4
#define CONFIG_HOOK_OUT_COM0_RTS		0		
#define CONFIG_HOOK_OUT_COM1_RTS		1
#define CONFIG_HOOK_OUT_COM2_RTS		2
#define CONFIG_HOOK_OUT_COM3_RTS		3
#define CONFIG_HOOK_OUT_COM0_DTR		4
#define CONFIG_HOOK_OUT_COM1_DTR		5
#define CONFIG_HOOK_OUT_COM2_DTR		6
#define CONFIG_HOOK_OUT_COM3_DTR		7

/* get power value */
#define CONFIG_HOOK_GETPOWER			5
#define CONFIG_HOOK_GETPOWER_COM0		0
#define CONFIG_HOOK_GETPOWER_COM1		1
#define CONFIG_HOOK_GETPOWER_COM2		2
#define CONFIG_HOOK_GETPOWER_COM3		3
#define CONFIG_HOOK_GETPOWER_LCDLIGHT		4
#define CONFIG_HOOK_GETPOWER_LCD		5
#define CONFIG_HOOK_GETPOWER_SPEAKER		6

/* misc get value */
#define CONFIG_HOOK_GET			6
#define CONFIG_HOOK_GET_LED			0
#define CONFIG_HOOK_GETMAX_LED			1
#define CONFIG_HOOK_GET_CONTRAST		2
#define CONFIG_HOOK_GETMAX_CONTRAST		3
#define CONFIG_HOOK_GET_BRIGHTNESS		4
#define CONFIG_HOOK_GETMAX_BRIGHTNESS		5

/* misc set value */
#define CONFIG_HOOK_SET			7
#define CONFIG_HOOK_SET_LED			0
#define CONFIG_HOOK_SET_CONTRAST		1
#define CONFIG_HOOK_SET_BRIGHTNESS		2

#define CONFIG_HOOK_NTYPES 		8

/*
 * nicknames for including from configration file.
 */
#ifdef CONFIG_HOOK_DEFINE_NICKNAME
#define POWER		CONFIG_HOOK_POWERCONTROL
#define BUTTON		CONFIG_HOOK_BUTTONEVENT
#define PMEVENT		CONFIG_HOOK_PMEVENT
#define EVENT		CONFIG_HOOK_EVENT
#define OUT		CONFIG_HOOK_OUT

#define PWCTL_COM0	CONFIG_HOOK_POWERCONTROL_COM0
#define PWCTL_COM1	CONFIG_HOOK_POWERCONTROL_COM1
#define PWCTL_COM2	CONFIG_HOOK_POWERCONTROL_COM2
#define PWCTL_COM3	CONFIG_HOOK_POWERCONTROL_COM3
#define PWCTL_LCDLIGHT	CONFIG_HOOK_POWERCONTROL_LCDLIGHT
#define PWCTL_LCD	CONFIG_HOOK_POWERCONTROL_LCD
#define PWCTL_SPEAKER	CONFIG_HOOK_POWERCONTROL_SPEAKER
#define PWCTL_LED	CONFIG_HOOK_POWERCONTROL_LED
#define BTN_POWER	CONFIG_HOOK_BUTTONEVENT_POWER
#define BTN_OK		CONFIG_HOOK_BUTTONEVENT_OK
#define BTN_CANCEL	CONFIG_HOOK_BUTTONEVENT_CANCEL
#define BTN_UP		CONFIG_HOOK_BUTTONEVENT_UP
#define BTN_DOWN	CONFIG_HOOK_BUTTONEVENT_DOWN
#define BTN_REC		CONFIG_HOOK_BUTTONEVENT_REC
#define BTN_COVER	CONFIG_HOOK_BUTTONEVENT_COVER
#define BTN_LIGHT	CONFIG_HOOK_BUTTONEVENT_LIGHT
#define BTN_CONTRAST	CONFIG_HOOK_BUTTONEVENT_CONTRAST
#define BTN_APP0	CONFIG_HOOK_BUTTONEVENT_APP0
#define BTN_APP1	CONFIG_HOOK_BUTTONEVENT_APP1
#define BTN_APP2	CONFIG_HOOK_BUTTONEVENT_APP2
#define BTN_APP3	CONFIG_HOOK_BUTTONEVENT_APP3
#define BTN_LEFT	CONFIG_HOOK_BUTTONEVENT_LEFT
#define BTN_RIGHT	CONFIG_HOOK_BUTTONEVENT_RIGHT
#define BTN_CONTRAST_UP	CONFIG_HOOK_BUTTONEVENT_CONTRAST_UP
#define BTN_CONTRAST_DN	CONFIG_HOOK_BUTTONEVENT_CONTRAST_DOWN
#define BTN_LIGHT_UP	CONFIG_HOOK_BUTTONEVENT_LIGHT_UP
#define BTN_LIGHT_DN	CONFIG_HOOK_BUTTONEVENT_LIGHT_DOWN
#define PME_STANBY	CONFIG_HOOK_PMEVENT_STANDBYREQ
#define PME_SUSPEND	CONFIG_HOOK_PMEVENT_SUSPENDREQ
#define PME_HARDPOWER	CONFIG_HOOK_PMEVENT_HARDPOWER
#define PME_BATTERY	CONFIG_HOOK_PMEVENT_BATTERY
#define PME_AC		CONFIG_HOOK_PMEVENT_AC
#define PME_BATTVAL	CONFIG_HOOK_PMEVENT_BATTERYVAL
#define PME_ACADAPTER	CONFIG_HOOK_PMEVENT_ACADAPTER
#define PME_CHARGE	CONFIG_HOOK_PMEVENT_CHAEGE
#define COM0_CTS	CONFIG_HOOK_EVENT_COM0_CTS
#define COM1_CTS	CONFIG_HOOK_EVENT_COM1_CTS
#define COM2_CTS	CONFIG_HOOK_EVENT_COM2_CTS
#define COM3_CTS	CONFIG_HOOK_EVENT_COM3_CTS
#define COM0_DCD	CONFIG_HOOK_EVENT_COM0_DCD
#define COM1_DCD	CONFIG_HOOK_EVENT_COM1_DCD
#define COM2_DCD	CONFIG_HOOK_EVENT_COM2_DCD
#define COM3_DCD	CONFIG_HOOK_EVENT_COM3_DCD
#define COM0_RTS	CONFIG_HOOK_OUT_COM0_RTS
#define COM1_RTS	CONFIG_HOOK_OUT_COM1_RTS
#define COM2_RTS	CONFIG_HOOK_OUT_COM2_RTS
#define COM3_RTS	CONFIG_HOOK_OUT_COM3_RTS
#define COM0_DTR	CONFIG_HOOK_OUT_COM0_DTR
#define COM1_DTR	CONFIG_HOOK_OUT_COM1_DTR
#define COM2_DTR	CONFIG_HOOK_OUT_COM2_DTR
#define COM3_DTR	CONFIG_HOOK_OUT_COM3_DTR


#endif /* CONFIG_HOOK_DEFINE_NICKNAME */

/*
 * POWERCONTROL value
 */
#define PWCTL_ON	((void *)1)
#define PWCTL_OFF	((void *)0)

/*
 * POWERCTONROL_LED value
 */
#define PWCTL_LED_OFF		PWCTL_OFF
#define PWCTL_LED_ON		PWCTL_ON
#define PWCTL_LED_FLASH		((void *)2)	/* flash 100msec */
#define PWCTL_LED_FLASH2	((void *)3)	/* flash 200msec */
#define PWCTL_LED_FLASH5	((void *)4)	/* flash 500msec */
#define PWCTL_LED_BLINK		((void *)5)	/* blink 1sec interval */
#define PWCTL_LED_BLINK2	((void *)6)	/* blink 2sec interval */
#define PWCTL_LED_VALUE_P(x) (PWCTL_LED_OFF >= (x) \
				 && (x) <= PWCTL_LED_BLINK2)

/*
 * PMEVENT_AC event value
 */
#define PMEVENT_AC_OFF		((void *)0)
#define PMEVENT_AC_ON_CHARGE	((void *)1)
#define PMEVENT_AC_ON_NOCHARGE	((void *)2)
#define PMEVENT_AC_VALUE_P(x) (PMEVENT_AC_OFF >= (x) \
				 && (x) <= PMEVENT_AC_ON_NOCHARGE)

/*
 * PMEVENT_BATTERY event value
 */
#define PMEVENT_BATT_CRITICAL	((void *)0)
#define PMEVENT_BATT_LOW	((void *)1)
#define PMEVENT_BATT_1BY4	((void *)2)
#define PMEVENT_BATT_HALF	((void *)3)
#define PMEVENT_BATT_3BY4	((void *)4)
#define PMEVENT_BATT_FULL	((void *)5)
#define PMEVENT_BATT_VALUE_P(x) (PMEVENT_BATT_CRITICAL >= (x) \
				 && (x) <= PMEVENT_BATT_FULL)
#endif /* _CONFIG_HOOK_H_ */

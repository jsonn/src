#	$NetBSD: Makefile.i386,v 1.131.2.3 2004/09/21 13:16:38 skrll Exp $

# Makefile for NetBSD
#
# This makefile is constructed from a machine description:
#	config machineid
# Most changes should be made in the machine description
#	/sys/arch/i386/conf/``machineid''
# after which you should do
#	config machineid
# Machine generic makefile changes should be made in
#	/sys/arch/i386/conf/Makefile.i386
# after which config should be rerun for all machines of that type.
#
# To specify debugging, add the config line: makeoptions DEBUG="-g"
# A better way is to specify -g only for a few files.
#
#	makeoptions DEBUGLIST="uvm* trap if_*"

MACHINE_ARCH=	i386
USETOOLS?=	no
NEED_OWN_INSTALL_TARGET?=no
.include <bsd.own.mk>

##
## (1) port identification
##
I386=		$S/arch/i386
GENASSYM=	${I386}/i386/genassym.cf

##
## (2) compile settings
##
CPPFLAGS+=	-Di386
AFLAGS+=	-x assembler-with-cpp -traditional-cpp

##
## (3) libkern and compat
##
KERN_AS=	obj

##
## (4) local objects, compile rules, and dependencies
##
MD_OBJS=	locore.o spl.o vector.o microtime.o
MD_CFILES=
MD_SFILES=	${I386}/i386/locore.S ${I386}/i386/spl.S \
		${I386}/i386/vector.S ${I386}/i386/microtime.S

locore.o: ${I386}/i386/locore.S assym.h
	${NORMAL_S}

spl.o: ${I386}/i386/spl.S assym.h
	${NORMAL_S}

vector.o: ${I386}/i386/vector.S assym.h
	${NORMAL_S}

microtime.o: ${I386}/i386/microtime.S assym.h
	${NORMAL_S}

##
## (5) link settings
##
TEXTADDR?=	c0100000
LINKFLAGS_NORMAL=	-X
.if (${OBJECT_FMT} == "ELF")
KERN_LDSCRIPT?=	kern.ldscript
LINKFORMAT=	-T ${I386}/conf/${KERN_LDSCRIPT}
.else
LINKFORMAT=	-z
.endif

##
## (6) port specific target dependencies
##

freebsd_sigcode.o ibcs2_sigcode.o linux_sigcode.o: assym.h
svr4_sigcode.o mach_sigcode.o: assym.h
apmcall.o in_cksum.o pnpbioscall.o bioscall.o: assym.h
mptramp.o: assym.h
clock.o: config_time.h

##
## (7) misc settings
##

##
## (8) config(8) generated machinery
##
%INCLUDES

%OBJS

%CFILES

%SFILES

%LOAD

%RULES

# XXX - Ugly, but make doesn't easily handle .o.uue (assumes it's a suffix)
# XXX - Also, config has no simple was to just add foo.o to the Makefile. 
#       It needs a pathname of some sort for "object"        
.if !empty(OBJS:M\/athhal-elf.o)
OBJS:=${OBJS:C/\/athhal-elf.o/athhal-elf.o/}
 
.PATH: $S/../contrib/sys/arch/i386/dev
ATH_UUDEC?=	@${_MKSHMSG} "uudecode ${.CURDIR:T}/${.TARGET}"; \
		${_MKSHECHO}\
		${UUDECODE} -p $> \> ${.TARGET}; \
		rm -f ${.TARGET}; \
		${UUDECODE} -p $> > ${.TARGET}
athhal-elf.o: athhal-elf-o.uue
	${ATH_UUDEC}
.endif

##
## (9) port independent kernel machinery
##
.include "$S/conf/Makefile.kern.inc"

##
## (10) Appending make options.
##
%MAKEOPTIONSAPPEND

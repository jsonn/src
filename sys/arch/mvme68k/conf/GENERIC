#	$NetBSD: GENERIC,v 1.2.2.2 2000/11/22 16:00:48 bouyer Exp $

include		"arch/mvme68k/conf/std.mvme68k"

#ident 		"GENERIC-$Revision: 1.2.2.2 $"

# Boards this kernel supports
options 	MVME147
options 	MVME162
options 	MVME167
options 	MVME172
options 	MVME177

maxusers	4

# Needed on m68040 boards to emulate some missing FP instructions
options 	FPSP

# Needed on m68060 boards
options 	M060SP

#options 	DDB
options 	DIAGNOSTIC, DEBUG

#options 	SYSVSHM
options 	KTRACE
options 	COMPAT_43

file-system 	FFS
file-system 	NFS	
file-system 	KERNFS
file-system 	MFS
#file-system	MSDOSFS
#file-system	UNION

options 	NFSSERVER
#options 	FFS_EI		# FFS Endian Independant support
options 	SOFTDEP         # FFS soft updates support.

# Networking options
options 	INET
options 	INET6		# IPV6
#options 	IPSEC		# IP security
#options 	IPSEC_ESP	# IP security (encryption part; define w/IPSEC)
#options 	IPSEC_DEBUG	# debug for IP security
options 	TCP_COMPAT_42   # compatibility with 4.2BSD TCP/IP
#options        GATEWAY         # IP packet forwarding
#options        ISO             # OSI networking
#options        TPIP
#options        EON

options 	COMPAT_09, COMPAT_10, COMPAT_11, COMPAT_12, COMPAT_13, COMPAT_14
options 	COMPAT_SUNOS
#options 	COMPAT_M68K4K	# compatibility with NetBSD/m68k4k binaries
#options 	COMPAT_LINUX	# compatibility with Linux/m68k binaries
#options 	EXEC_ELF32	# 32-bit ELF executables (Linux)

## force NFS root and swap
#config	netbsd		root on ? type nfs
## "generic" boot (put root on boot device)
config netbsd		root on ? type ?

# Which protocol to use when booting over NFS
options 	NFS_BOOT_BOOTPARAM	# Diskless client w/ bootparamd

pseudo-device	sl
pseudo-device	ppp 2
pseudo-device	loop
pseudo-device	bpfilter
pseudo-device	gif		4	# IPv[46] over IPv[46] tunnel (RFC1933)
#pseudo-device	faith		1	# IPv[46] tcp relay translation i/f
#pseudo-device	stf		1	# 6to4 IPv6 over IPv4 encapsulation
pseudo-device	pty			# pseudo-terminals
pseudo-device	vnd 2

# random number generator pseudo-device
pseudo-device	rnd			# /dev/random and in-kernel generator
#options 	RND_COM			# use "com" randomness as well (BROKEN)

mainbus0	at root

# MVME147 specific devices
pcc0		at mainbus0
vmepcc0 	at pcc?
vme0		at vmepcc0
zsc*		at pcc? ipl 4
clock0		at pcc? ipl 5
le0		at pcc? ipl 3
wdsc0		at pcc? ipl 2
lpt*		at pcc? ipl 1

# MVME162 and MVME167 shared devices
pcctwo0		at mainbus0
vmetwo0 	at mainbus0
vme0		at vmetwo0
clock0		at pcctwo? ipl 5
ie0		at pcctwo? ipl 3
ncrsc0		at pcctwo? ipl 2

# MVME162 specific devices
zsc*		at pcctwo? ipl 4

# MVME167 specific devices
clmpcc0		at pcctwo? ipl 4
lpt*		at pcctwo? ipl 1

# Common front-end for MVME147 and MVME162 `zs' device
zstty*		at zsc? channel ?

# Example VMEbus device
#foo0		at vme0 addr 0x00ef0000 irq 3 vect 0x80

scsibus*	at wdsc?
scsibus*	at ncrsc?

sd*		at scsibus? target ? lun ?
st*		at scsibus? target ? lun ?
cd*		at scsibus? target ? lun ?
ch*		at scsibus? target ? lun ?
ss*		at scsibus? target ? lun ?	# SCSI scanners
uk*		at scsibus? target ? lun ?	# SCSI unknown

# $NetBSD: GENERIC,v 1.54.2.1 2005/07/18 21:14:11 riz Exp $
#
# GENERIC machine description file
# 
# This machine description file is used to generate the default NetBSD
# kernel.  The generic kernel does not include all options, subsystems
# and device drivers, but should be useful for most applications.
#
# The machine description file can be customised for your specific
# machine to reduce the kernel size and improve its performance.
#
# For further information on compiling NetBSD kernels, see the config(8)
# man page.
#
# For further information on hardware support for this architecture, see
# the intro(4) man page.  For further information about kernel options
# for this architecture, see the options(4) man page.  For an explanation
# of each device driver in this file see the section 4 man page for the
# device.

include		"arch/mvme68k/conf/std.mvme68k"

options 	INCLUDE_CONFIG_FILE	# embed config file in kernel binary

#ident 		"GENERIC-$Revision: 1.54.2.1 $"

# Boards this kernel supports
options 	MVME147
options 	MVME162
options 	MVME167
options 	MVME172
options 	MVME177

maxusers	4

# Needed on m68040 boards to emulate some missing FP instructions
options 	FPSP

# Needed on m68060 boards
options 	M060SP

#options 	DDB
options 	DIAGNOSTIC, DEBUG

#options 	SYSVSHM
options 	KTRACE
options 	SYSTRACE	# system call vetting via systrace(1)
options 	COMPAT_43

options 	USERCONF	# userconf(4) support
#options	PIPE_SOCKETPAIR	# smaller, but slower pipe(2)
options 	SYSCTL_INCLUDE_DESCR	# Include sysctl descriptions in kernel

# Enable experimental buffer queue strategy for better responsiveness under 
# high disk I/O load. Use it with caution - it's not proven to be stable yet.
#options 	NEW_BUFQ_STRATEGY

file-system 	FFS
file-system 	NFS
file-system 	KERNFS
file-system 	MFS
file-system 	CD9660
#file-system	MSDOSFS
#file-system	UNION

options 	NFSSERVER
#options 	FFS_EI		# FFS Endian Independant support
options 	SOFTDEP		# FFS soft updates support.
options 	FFS_NO_SNAPSHOT	# ffs snapshots
#options	UFS_DIRHASH	# UFS Large Directory Hashing - Experimental

# Networking options
options 	INET
options 	INET6		# IPV6
#options 	IPSEC		# IP security
#options 	IPSEC_ESP	# IP security (encryption part; define w/IPSEC)
#options 	IPSEC_NAT_T	# IPsec NAT traversal (NAT-T)
#options 	IPSEC_DEBUG	# debug for IP security
#options 	GATEWAY		# IP packet forwarding
#options 	ISO		# OSI networking
#options 	TPIP
#options 	EON
#options 	TCP_DEBUG	# Record last TCP_NDEBUG packets with SO_DEBUG

#options 	ALTQ		# Manipulate network interfaces' output queues
#options 	ALTQ_BLUE	# Stochastic Fair Blue
#options 	ALTQ_CBQ	# Class-Based Queueing
#options 	ALTQ_CDNR	# Diffserv Traffic Conditioner
#options 	ALTQ_FIFOQ	# First-In First-Out Queue
#options 	ALTQ_FLOWVALVE	# RED/flow-valve (red-penalty-box)
#options 	ALTQ_HFSC	# Hierarchical Fair Service Curve
#options 	ALTQ_LOCALQ	# Local queueing discipline
#options 	ALTQ_PRIQ	# Priority Queueing
#options 	ALTQ_RED	# Random Early Detection
#options 	ALTQ_RIO	# RED with IN/OUT
#options 	ALTQ_WFQ	# Weighted Fair Queueing

options 	COMPAT_AOUT_M68K	# compatibility with NetBSD/m68k a.out
options 	COMPAT_09
options 	COMPAT_10
options 	COMPAT_11
options 	COMPAT_12
options 	COMPAT_13
options 	COMPAT_14
options 	COMPAT_15
options 	COMPAT_16
options 	COMPAT_20
#options 	COMPAT_SUNOS
#options 	COMPAT_M68K4K	# compatibility with NetBSD/m68k4k binaries
#options 	COMPAT_LINUX	# compatibility with Linux/m68k binaries
#options 	TCP_COMPAT_42	# 4.2BSD TCP/IP bug compat. Not recommended.
options		COMPAT_BSDPTY	# /dev/[pt]ty?? ptys.

## force NFS root and swap
#config	netbsd		root on ? type nfs
## "generic" boot (put root on boot device)
config netbsd		root on ? type ?

# Which protocol to use when booting over NFS
options 	NFS_BOOT_DHCP		# Diskless client w/ dhcp
options 	NFS_BOOT_BOOTP		# Diskless client w/ bootp
options 	NFS_BOOT_BOOTPARAM	# Diskless client w/ bootparamd

pseudo-device	sl
pseudo-device	ppp 2
pseudo-device	pppoe			# PPP over Ethernet (RFC 2516)
pseudo-device	loop
pseudo-device	bpfilter
pseudo-device	gif		4	# IPv[46] over IPv[46] tunnel (RFC1933)
#pseudo-device	faith		1	# IPv[46] tcp relay translation i/f
#pseudo-device	stf		1	# 6to4 IPv6 over IPv4 encapsulation
pseudo-device	vlan			# IEEE 802.1q encapsulation
pseudo-device	bridge			# simple inter-network bridging
#options	BRIDGE_IPF		# bridge uses IP/IPv6 pfil hooks too
pseudo-device	pty			# pseudo-terminals
#pseudo-device	cgd		4	# cryptographic disk devices
pseudo-device	vnd 2
pseudo-device	fss		4	# file system snapshot device
pseudo-device	clockctl		# user control of clock subsystem
pseudo-device	ksyms			# /dev/ksyms
#pseudo-device	pf			# PF packet filter
#pseudo-device	pflog			# PF log if

# random number generator pseudo-device
pseudo-device	rnd			# /dev/random and in-kernel generator
#options 	RND_COM			# use "com" randomness as well (BROKEN)

mainbus0	at root

# MVME147 specific devices
pcc0		at mainbus0
vmepcc0 	at pcc?
clock0		at pcc? ipl 5
zsc*		at pcc? ipl 4
le0		at pcc? ipl 3
wdsc0		at pcc? ipl 2
lpt0		at pcc? ipl 1

# MVME16x and MVME17x shared devices
pcctwo0		at mainbus0
vmetwo0 	at mainbus0
memc*		at mainbus0
clock0		at pcctwo? ipl 5
ie0		at pcctwo? ipl 3
osiop0		at pcctwo? ipl 2

# MVME162/MVME172 specific devices
zsc*		at pcctwo? ipl 4

# MVME167/MVME177 specific devices
clmpcc0		at pcctwo? ipl 4
lpt0		at pcctwo? ipl 1

# Common front-end for MVME147 and MVME162 `zs' device
zstty*		at zsc? channel ?

# MI VMEbus Interface
vme0		at vmepcc0
vme0		at vmetwo0

# Example VMEbus device
#foo0		at vme0 addr 0x00ef0000 irq 3 vect 0x80

scsibus*	at wdsc?
scsibus*	at osiop?

sd*		at scsibus? target ? lun ?
st*		at scsibus? target ? lun ?
cd*		at scsibus? target ? lun ?
#ch*		at scsibus? target ? lun ?
#ss*		at scsibus? target ? lun ?	# SCSI scanners
#uk*		at scsibus? target ? lun ?	# SCSI unknown

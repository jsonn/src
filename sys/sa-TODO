Things to do for scheduler activations/LWP code.

Bugs:
 
- MD bug: i386 npx handling. cpu_getcontext() may call npxsave(), which
  can only be run at spl0, which is a problem. Options
   * Change npxsave to avoid that requirement.
   * Don't save FP context at getcontext() time, but do something
     More Clever with lazy FPU switching.

- MD bug: tests/thread2 panics dreamcast somewhere after the first
  unblocked upcall. The kernel appears to jump into space. Appears
  similar to the fixed alpha bug (not updating SP in PCB) in
  cpu_setfunc().

- MI/MD bug: The PMC framework does not work with SAs .. at all.  This
  needs to be straightened out.

- MI bug: systrace has some assumptions about processes that aren't
  true in the LWP/SA universe, and need to be fixed.
  
ABI concerns:

- mcontext needs to be sanity-checked on every platform before it is
  set in stone.

Platform status:

- acorn26: Compiles, otherwise untested.  bjh21 confirmed it worked
  previously, but then all the SA stuff had to be redone because of
  a code reshuffling.

- acorn32: GENERIC compiles, otherwise untested.

- algor: P6032 compiles, otherwise untested.

- alpha: Works.

- amiga: GENERIC compiles, otherwise untested.

- amigappc: unknown.  Not branched?

- arc: GENERIC compiles, otherwise untested.

- atari: HADES compiles, otherwise untested.

- bebox: unknown.

- cats: Works.

- cesfic: GENERIC compiles, otherwise untested.

- cobalt: GENERIC compiles, otherwise untested.

- dreamcast: GENERIC compiles.  See sh3.

- evbarm: Works.

- evbmips: Works

- evbsh3: COMPUTEXEVB compiles.  See sh3.

- evbsh5: Not yet branched.

- hp300: Works.

- hp700: Not yet branched.

- hpcarm: IPAQ compiles, otherwise untested.

- hpcmips: GENERIC compiles, otherwise untested.

- hpcsh: GENERIC compiles.  See sh3.

- i386: Works.

- luna68k: GENERIC compiles, otherwise untested.

- mac68k: GENERIC compiles, otherwise untested.

- macppc: Works.

- mipsco: GENERIC compiles, otherwise untested.

- mmeye: GENERIC compiles.  See sh3.

- mvme68k: GENERIC compiles, otherwise untested.

- mvmeppc: MVME1600 compiles, otherwise untested.

- netwinder: Works.

- news68k: GENERIC compiles, otherwise untested.

- newsmips: GENERIC compiles, otherwise untested.

- next68k: GENERIC compiles, otherwise untested.

- ofppc: GENERIC compiles, otherwise untested.

- pc532: Not yet branched.

- playstation2: unknown.

- pmax: Works.

- pmppc: Not yet branched.

- prep: GENERIC compiles, otherwise untested.

- sandpoint: GENERIC compiles, otherwise untested.

- sbmips: Works

- sgimips: GENERIC compiles.  Reported to work once upon a time.

- sh3: Mystery bug that crashes system; see above.

- sh5: Not yet branched.

- shark: GENERIC compiles, otherwise untested.

- sparc: GENERIC compiles.  LWPs have worked.  Upcall trampoline not done.

- sparc64: Works?

- sun2: GENERIC compiles, otherwise untested.

- sun3: Works.

- vax: GENERIC compiles, otherwise untested.

- walnut: WALNUT compiles, otherwise untested.

- x68k: GENERIC compiles, otherwise untested.

- x86_64: Not yet branched.

Wishlist:

- exit1() is too fragile. A cleaner solution to the LWPWAIT_EXITCONTROL
  problem is also needed.

- Document! Not everyone wants to read the thesis. Man pages, etc.

- Rethink scheduler. Verify that behavior is still correct for a system
  of single-LWP ("traditional") processes (I believe it is, but it should 
  still be verified). Study scheduling behavior of multi-LWP and SA processes.
  Notions of fairness and appropriate scheduling may need changing.
  XXX when combined with multiprocessor support, usefully scheduling multi-lwp
  processes requires a whole new kind of scheduling. Implementing such a thing
  (such as an "equal-space" scheduler) is a major project unto itself.

- Adopt gmcgarry's new context switch model here.  Would greatly simplify
  the SA code path, and also eliminate the need to have both cpu_switch()
  and cpu_preempt().

- Debugging interface needs work; ptrace(2) interface can't handle multi-LWP
  or SA processes. 

- ddb needs a way to trace specific LWPs, instead of just the
  "representative" LWP of a process.

- Lazy FPU upcall notifications.

- Implement better management of the lwp cache for a sa process. High-water 
  mark needed, at the very least.

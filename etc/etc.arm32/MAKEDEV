#!/bin/sh -
#
#	$NetBSD: MAKEDEV,v 1.18.2.1 1997/11/20 08:17:51 mellon Exp $
#
# Copyright (c) 1990 The Regents of the University of California.
# All rights reserved.
#
# Updated by Mark Brinicombe
# Created by Scott Stevens
#
# Redistribution and use in source and binary forms are permitted provided
# that: (1) source distributions retain this entire copyright notice and
# comment, and (2) distributions including binaries display the following
# acknowledgement:  ``This product includes software developed by the
# University of California, Berkeley and its contributors'' in the
# documentation or other materials provided with the distribution and in
# all advertising materials mentioning features or use of this software.
# Neither the name of the University nor the names of its contributors may
# be used to endorse or promote products derived from this software without
# specific prior written permission.
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
#
#	@(#)MAKEDEV	5.2 (Berkeley) 6/22/90
#
# Device "make" file.  Valid arguments:
#	all	makes all known devices, including local devices.
#		Tries to make the 'standard' number of each type.
#	floppy	devices to be put on install floppies
#	std	standard devices
#	local	configuration specific devices
#
# Tapes:
#	st*	SCSI tapes
#
# Disks:
#	wd*	"winchester" disk drives (ST506,IDE,ESDI,RLL,...)
#	fd*	"floppy" disk drives (3 1/2", 5 1/4")
#	sd*	SCSI disks
#	cd*	SCSI CD-ROM
#	vnd*	"file" pseudo-disks
#	md*	"memory" pseudo-disks
#	ccd*	contatenated disk devices
#
# Console ports:
#	ttyv*	virtual console screen
#
# Pointing devices:
#	quadmouse*	"quadrature mouse"
#	pms*		"PS/2 mouse"
# 
# Terminal ports:
#	tty*	serial ports
#
# Pseudo terminals:
#	pty*	set of 16 master and slave pseudo terminals
#
# Printers:
#	lpt*	stock lp
#	lpa*	interruptless lp
#
# Cpus:
#	cpu*	cpus
#
# Call units:
#
# Special purpose devices:
#	md	memory disk
#	kbd	raw keyboard
#	kbdctl	keyboard control
#	fd	file descriptors
#	bpf*	packet filter
#	beep	riscpc speaker
#	ipl	ip filter control
#	random	Random number generator
#	lkm	loadable kernel modules interface
#	tun*	network tunnel driver
#	ch*	SCSI Auto changer
#	uk*	SCSI Unknown device
#	ss*	SCSI scanner device
#	iic*	IIC bus device
#	rtc*	RTC device
#

PATH=/sbin:/usr/sbin:/bin:/usr/bin
umask 77
for i
do
case $i in

all)
	sh $0 std fd fd0 fd1 wd0 wd1 wd2 wd3 md0 md1 sd0 sd1 sd2 sd3
	sh $0 tty0 tty1 pty0 pty1 st0 st1 ch0 cd0 cd1 vnd0 vnd1
	sh $0 ccd0 ccd1 uk0 uk1 ss0
	sh $0 ttyv0 ttyv1 ttyv2 ttyv3 ttyv4 ttyv5 ttyv6 ttyv7 ttyv8 ttyv9
	sh $0 lpa0 lpt0 bpf0 bpf1 bpf2 bpf3 tun0 tun1 tun2 ipl
	sh $0 beep lkm qms0 pms0 local cpu0 cpu1
	sh $0 mouse-qms0 random
	;;

ramdisk|floppy)
	sh $0 std fd0 fd1 wd0 wd1 wd2 wd3 md0 md1 sd0 sd1 sd2 sd3
	sh $0 tty0 tty1 ttyv0 ttyv1 ttyv2 ttyv3 ttyv4 ttyv5
	sh $0 st0 st1 cd0 cd1
	;;

std)
	rm -f console drum mem kmem null zero tty klog stdin stdout stderr kbd
	rm -f kbdctl vidcvideo0 vidc iic rtc0
	mknod mem		c 0 0	; chmod 640 mem	; chgrp kmem mem
	mknod kmem		c 0 1	; chmod 640 kmem ; chgrp kmem kmem
	mknod null		c 0 2	; chmod 666 null
	mknod zero		c 0 3	; chmod 666 zero
	mknod drum		c 1 0	; chmod 640 drum ; chgrp kmem drum
	mknod console		c 2 0
	mknod tty		c 3 0	; chmod 666 tty
	mknod klog		c 5 0	; chmod 600 klog
	mknod kbd		c 11 0	; chmod 666 kbd
	mknod kbdctl		c 11 1	; chmod 666 kbdctl
	mknod stdin		c 34 0	; chmod 666 stdin
	mknod stdout		c 34 1	; chmod 666 stdout
	mknod stderr		c 34 2	; chmod 666 stderr
	mknod vidcvideo0	c 37 0	; chmod 640 vidcvideo0
	ln -s vidcvideo0 vidc
	mknod iic		c 42 0	; chmod 600 iic
	mknod rtc0		c 43 0	; chmod 644 rtc0
	;;

ttyv*)
	chr=4; unit=${i#ttyv}
	rm -f ttyv$unit
	mknod ttyv$unit c $chr $unit
	chown root.wheel ttyv$unit
	;;

fd)
	rm -f fd/*
	mkdir fd > /dev/null 2>&1
	n=0
	while [ $n -lt 64 ]; do
		mknod fd/$n c 34 $n
		n=$(($n + 1))
	done
	chown -R bin.bin fd
	chmod 555 fd
	chmod 666 fd/*
	;;

ccd*|fd*|sd*|vnd*|wd*)
	case $i in
	ccd*) name=ccd;	unit=${i#ccd};	blk=21;	chr=21;;
	fd*) name=fd;	unit=${i#fd};	blk=17;	chr=17;;
	sd*) name=sd;	unit=${i#sd};	blk=24;	chr=24;;
	vnd*) name=vnd;	unit=${i#vnd};	blk=19;	chr=19;;
	wd*) name=wd;	unit=${i#wd};	blk=16;	chr=16;;
	esac
	rm -f $name$unit? r$name$unit?
	mknod ${name}${unit}a	b $blk $(($unit * 8 + 0))
	mknod ${name}${unit}b	b $blk $(($unit * 8 + 1))
	mknod ${name}${unit}c	b $blk $(($unit * 8 + 2))
	mknod ${name}${unit}d	b $blk $(($unit * 8 + 3))
	mknod ${name}${unit}e	b $blk $(($unit * 8 + 4))
	mknod ${name}${unit}f	b $blk $(($unit * 8 + 5))
	mknod ${name}${unit}g	b $blk $(($unit * 8 + 6))
	mknod ${name}${unit}h	b $blk $(($unit * 8 + 7))
	mknod r${name}${unit}a	c $chr $(($unit * 8 + 0))
	mknod r${name}${unit}b	c $chr $(($unit * 8 + 1))
	mknod r${name}${unit}c	c $chr $(($unit * 8 + 2))
	mknod r${name}${unit}d	c $chr $(($unit * 8 + 3))
	mknod r${name}${unit}e	c $chr $(($unit * 8 + 4))
	mknod r${name}${unit}f	c $chr $(($unit * 8 + 5))
	mknod r${name}${unit}g	c $chr $(($unit * 8 + 6))
	mknod r${name}${unit}h	c $chr $(($unit * 8 + 7))
	chgrp operator $name$unit? r$name$unit?
	chmod 640 $name$unit? r$name$unit?
	;;

tty*)
	unit=${i#???}
	rm -f com$unit tty0$unit
	mknod tty0$unit c 12 $unit
	chown uucp.wheel tty0$unit
	;;

pty*)
	class=${i#pty}
	case $class in
	0)      name=p;;
	1)      name=q;;
	2)      name=r;;
	3)      name=s;;
	4)      name=t;;
	5)      name=u;;
	6)      name=v;;
	7)      name=w;;
	8)      name=x;;
	9)      name=y;;
	10)     name=z;;
	11)     name=P;;
	12)     name=Q;;
	13)     name=R;;
	14)     name=S;;
	15)     name=T;;
	*)      echo "$0: $i: pty unit must be between 0 and 15"
	        continue ;;
	esac
	rm -f tty$name[0-9a-f] pty$name[0-9a-f]
	for j in 0 1 2 3 4 5 6 7 8 9 a b c d e f
	do
		case $j in
		[0-9])  jn=$j ;;
		a)      jn=10 ;;
		b)      jn=11 ;;
		c)      jn=12 ;;
		d)      jn=13 ;;
		e)      jn=14 ;;
		f)      jn=15 ;;
		esac
		unit=$(($class * 16 + $jn))
		mknod tty$name$j c 7 $unit
		mknod pty$name$j c 6 $unit
	done
        chgrp wheel tty$name? pty$name?
        chmod 666 tty$name? pty$name?
	;;

st*)
	case $i in
	st*) name=st;	unit=${i#st};	chr=25;	blk=25;;
	esac
	rm -f $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit 
	mknod $name$unit	b $blk $(($unit * 16 + 0))
	mknod n$name$unit	b $blk $(($unit * 16 + 1))
	mknod e$name$unit	b $blk $(($unit * 16 + 2))
	mknod en$name$unit	b $blk $(($unit * 16 + 3))
	mknod r$name$unit	c $chr $(($unit * 16 + 0))
	mknod nr$name$unit	c $chr $(($unit * 16 + 1))
	mknod er$name$unit	c $chr $(($unit * 16 + 2))
	mknod enr$name$unit	c $chr $(($unit * 16 + 3))
	chgrp operator $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit 
	chmod 660 $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit 
	;;

ch*|uk*)
	case $i in
	ch*) name=ch;	unit=${i#ch};	chr=27;;
	uk*) name=uk;	unit=${i#uk};	chr=28;;
	esac
	rm -f $name$unit
	mknod $name$unit	c $chr $unit
	chgrp operator $name$unit
	chmod 640 $name$unit
	;;

ss*)
	case $i in
	ss*) name=ss;	unit=${i#ss};	chr=29;;
	esac
	rm -f $name$unit n$name$unit en$name$unit
	mknod $name$unit	c $chr $(($unit * 16 + 0))
	mknod n$name$unit	c $chr $(($unit * 16 + 1))
	mknod en$name$unit	c $chr $(($unit * 16 + 3))
	chgrp operator $name$unit n$name$unit en$name$unit
	chmod 640 $name$unit n$name$unit en$name$unit
	;;

cd*)
	case $i in
	cd*) name=cd;	unit=${i#cd};	chr=26;	blk=26;;
	esac
	rm -f $name$unit? r$name$unit?
	mknod ${name}${unit}a	b $blk $(($unit * 8 + 0))
	mknod ${name}${unit}c	b $blk $(($unit * 8 + 2))
	mknod r${name}${unit}a	c $chr $(($unit * 8 + 0))
	mknod r${name}${unit}c	c $chr $(($unit * 8 + 2))
	chgrp operator $name$unit? r$name$unit?
	chmod 640 $name$unit? r$name$unit?
	;;

md*)
	unit=${i#md}
	rm -f md${unit}
	rm -f md${unit}c
	mknod md${unit} b 18 ${unit}
	mknod md${unit}c c 18 $((($unit + 16) * 8))
	chgrp operator md${unit} md${unit}c
	chmod 640 md${unit} md${unit}c
	;;

lpt*|lpa*)
	case $i in
	lpt*) name=lpt;	unit=${i#lpt};	chr=8;	flags=0;;
	lpa*) name=lpa;	unit=${i#lpa};	chr=8;	flags=128;;
	esac
	rm -f $name$unit
	mknod $name$unit	c $chr $(($unit + $flags))
	chown root.wheel $name$unit
	;;


bpf*|tun*|pms*|qms*)
	case $i in
	bpf*) name=bpf;	unit=${i#bpf};	chr=32;;
	tun*) name=tun;	unit=${i#tun};	chr=33;;
	pms*) name=pms;	unit=${i#pms};	chr=40;;
	qms*) name=qms;	unit=${i#qms};	chr=9;;
	esac
	rm -f $name$unit
	mknod $name$unit	c $chr $unit
	chown root.wheel $name$unit
	;;

ipl)
	rm -f ipl ipnat ipstate ipauth
	mknod ipl c 46 0
	mknod ipnat c 46 1
	mknod ipstate c 46 2
	mknod ipauth c 46 3
	chown root.wheel ipl ipnat ipstate ipauth
	chmod 600 ipl ipnat ipstate ipauth
	;;

beep)
	rm -f beep
	mknod beep c 10 0
	chown root.wheel beep
	;;

lkm)
	rm -f lkm
	mknod lkm c 35 0
	chown root.kmem lkm
	chmod 640 lkm
	;;

mouse-*)
	case $i in
	mouse-pms*) name=pms;	unit=${i#mouse-pms};;
	mouse-qms*) name=qms;	unit=${i#mouse-qms};;
	esac
	rm -f mouse
	ln -s $name$unit mouse
	;;

cpu*)
	unit=${i#cpu}
	rm -f cpu$unit
	mknod cpu$unit c 38 $unit
	chown root.wheel cpu$unit
	;;

audio*)
	unit=${i#audio}
	audio=audio$unit
	sound=sound$unit
	mixer=mixer$unit
	major=36
	audioctl=audioctl$unit
	if [ "$unit" = "" ]; then unit=0; fi
	rm -f $audio $sound $mixer $audioctl
	mknod $sound    c $major $(($unit + 0))
	mknod $audio    c $major $(($unit + 128))
	mknod $mixer    c $major $(($unit + 16))
	mknod $audioctl c $major $(($unit + 192))
	chown root.wheel $audio $sound $mixer $audioctl
	chmod 666 $audio $sound $mixer $audioctl
	;;

random)
	rm -f random urandom
	mknod random c 52 0
	mknod urandom c 52 1
	chown root.wheel random urandom
	chmod 444 random
	chmod 644 urandom
	;;

local)
	umask 0
	sh $0.local all
	umask 77
	;;

*)
	echo $i: unknown device
	;;

esac
done

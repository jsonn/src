#!/bin/sh -
#
#	$NetBSD: MAKEDEV,v 1.1.1.1.4.1 1996/06/17 02:36:16 oki Exp $
#
# Copyright (c) 1990 The Regents of the University of California.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#	This product includes software developed by the University of
#	California, Berkeley and its contributors.
# 4. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
#	@(#)MAKEDEV	5.5 (Berkeley) 5/28/91
#
# Device "make" file.  Valid arguments:
#	all	makes all known devices, including local devices,
#		Tries to make the ``standard'' number of each.
#	floppy	devices to be put on install floppies
#	fd	makes fd/* for the fdescfs.
#	std	standard devices
#	local	configuration specific devices
#
# Tapes:
#	st*	SCSI tapes
#
# Disks:
#	fd*	Floppy disks
#	sd*	SCSI disks, includes flopticals
#	cd*	SCSI cdrom discs
#	vnd*	"file" pseudo-disks
#	ccd*	concatenated disk driver
#
# Console ports:
#	ttye*	ite bitmapped consoles
#
# Pointing devices:
#	mouse*	serial mouse
#
# Terminal ports:
#	tty*	standard serial port
#	com*	PSX16550 serial board
#
# Pseudo terminals:
#	pty*	set of 16 master and slave pseudo terminals
#
# Printers:
#	par*	motherboard parallel port
#
# Special purpose devices:
#	grf*	builtin video
#	kbd	keyboard
#	aconf	autoconfig information (not yet)
#	lkm	loadable kernel modules interface.
#	bpf*	Berkeley Packet Filter
#	audio	audio device
#	sram	battery backuped memory
#	tun*	network tunnel driver
#	pow*	power management device
#	bell*	OPM bell device
#	ss*	SCSI scanner device
#

PATH=/sbin:/bin:/usr/sbin:/usr/bin
umask 77
for i
do
case $i in
all)
	sh MAKEDEV std fd st0 st1 ttye0 ttye1 mouse0 mouse1
	sh MAKEDEV tty00 tty01 tty02 tty03 com0 com1 grf0 grf1 kbd
	sh MAKEDEV sd0 sd1 sd2 sd3 sd4 sd5 sd6 sd7
	sh MAKEDEV vnd0 vnd1 vnd2 vnd3 vnd4 vnd5 vnd6 pty0
	sh MAKEDEV cd0 ss0 fd0 fd1 fd2 fd3 bpf0 bpf1 bpf2 bpf3
	sh MAKEDEV ccd0 ccd1 ccd2 ccd3
	sh MAKEDEV tun0 tun1 par0 lkm
	sh MAKEDEV sram audio pow0 pow1 bell local
	;;

floppy)
	sh MAKEDEV std fd0 sd0 sd1 sd2 sd3 sd4 sd5 sd6 sd7
	sh MAKEDEV tty00 cd0 ttye0
	;;

std)
	rm -f console drum kmem mem reload null zero tty
	rm -f klog stdin stdout stderr
	mknod console		c 0 0
	mknod drum		c 3 0	; chmod 640 drum ; chgrp kmem drum
	mknod kmem		c 2 1	; chmod 640 kmem ; chgrp kmem kmem
	mknod mem		c 2 0	; chmod 640 mem ; chgrp kmem mem
	mknod reload		c 2 20	; chmod 640 mem ; chgrp kmem mem
	mknod zero		c 2 12	; chmod 666 zero
	mknod null		c 2 2	; chmod 666 null
	mknod tty		c 1 0	; chmod 666 tty
	mknod klog		c 6 0	; chmod 600 klog
	mknod stdin		c 21 0	; chmod 666 stdin
	mknod stdout		c 21 1	; chmod 666 stdout
	mknod stderr		c 21 2	; chmod 666 stderr
	;;

fd)
	rm -f fd/*
	mkdir fd > /dev/null 2>&1
	(cd fd && i=0 && while [ $i -lt 64 ]; do
		mknod $i c 21 $i
		i=$(($i+1))
		done)
	chown -R bin.bin fd
	chmod 555 fd
	chmod 666 fd/*
	;;

st*)
	umask 2 ; unit=`expr $i : '..\(.*\)'`
	case $i in
	st*) name=st; blk=5; chr=20;;
	esac
	rm -f $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit 
	case $unit in
	0|1|2|3|4|5|6)
		mknod ${name}${unit}	b $blk `expr $unit '*' 16 + 0`
		mknod n${name}${unit}	b $blk `expr $unit '*' 16 + 1`
		mknod e${name}${unit}	b $blk `expr $unit '*' 16 + 2`
		mknod en${name}${unit}	b $blk `expr $unit '*' 16 + 3`
		mknod r${name}${unit}	c $chr `expr $unit '*' 16 + 0`
		mknod nr${name}${unit}	c $chr `expr $unit '*' 16 + 1`
		mknod er${name}${unit}	c $chr `expr $unit '*' 16 + 2`
		mknod enr${name}${unit}	c $chr `expr $unit '*' 16 + 3`
		chgrp operator ${name}${unit} n${name}${unit} \
			e$name$unit en$name$unit \
			r${name}${unit} nr${name}${unit} \
			er${name}${unit} enr${name}${unit} 
		chmod 640 ${name}${unit} n${name}${unit} \
			e$name$unit en$name$unit \
			r${name}${unit} nr${name}${unit} \
			er${name}${unit} enr${name}${unit} 
		;;
	*)
		echo bad unit for tape in: $i
		;;
	esac
	umask 77
	;;

fd*)
	umask 2 ; unit=`expr $i : '.*[^0-9]\([0-9]*\)'`
	rm -f fd$unit? rfd$unit?
	case $unit in
	0|1|2|3)
		mknod fd${unit}a b 2 `expr $unit '*' 8 + 0`
		mknod fd${unit}b b 2 `expr $unit '*' 8 + 1`
		mknod fd${unit}c b 2 `expr $unit '*' 8 + 2`
		mknod fd${unit}d b 2 `expr $unit '*' 8 + 3`
		mknod fd${unit}e b 2 `expr $unit '*' 8 + 4`
		mknod fd${unit}f b 2 `expr $unit '*' 8 + 5`
		mknod fd${unit}g b 2 `expr $unit '*' 8 + 6`
		mknod fd${unit}h b 2 `expr $unit '*' 8 + 7`
		mknod rfd${unit}a c 18 `expr $unit '*' 8 + 0`
		mknod rfd${unit}b c 18 `expr $unit '*' 8 + 1`
		mknod rfd${unit}c c 18 `expr $unit '*' 8 + 2`
		mknod rfd${unit}d c 18 `expr $unit '*' 8 + 3`
		mknod rfd${unit}e c 18 `expr $unit '*' 8 + 4`
		mknod rfd${unit}f c 18 `expr $unit '*' 8 + 5`
		mknod rfd${unit}g c 18 `expr $unit '*' 8 + 6`
		mknod rfd${unit}h c 18 `expr $unit '*' 8 + 7`
		chgrp operator fd$unit? rfd$unit?
		chmod 640 fd$unit? rfd$unit?
		;;
	*)
		echo bad unit for floppy disk in: $i
		;;
	esac
	umask 77
	;;

sd*|vnd*|ccd*)
	umask 2 ; unit=`expr $i : '.*[^0-9]\([0-9]*\)'`
	case $i in
	sd*) name=sd; blk=4; chr=8;;
	vnd*) name=vnd; blk=6; chr=19;;
	ccd*) name=ccd; blk=8; chr=7;;
	esac
	rm -f $name$unit? r$name$unit?
	case $unit in
	0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15)
		mknod ${name}${unit}c	b $blk `expr $unit '*' 8 + 2`
		mknod r${name}${unit}c	c $chr `expr $unit '*' 8 + 2`
		if [ $name != cd -a $name != vnd ]
		then
		mknod ${name}${unit}a	b $blk `expr $unit '*' 8 + 0`
		mknod ${name}${unit}b	b $blk `expr $unit '*' 8 + 1`
		mknod ${name}${unit}d	b $blk `expr $unit '*' 8 + 3`
		mknod ${name}${unit}e	b $blk `expr $unit '*' 8 + 4`
		mknod ${name}${unit}f	b $blk `expr $unit '*' 8 + 5`
		mknod ${name}${unit}g	b $blk `expr $unit '*' 8 + 6`
		mknod ${name}${unit}h	b $blk `expr $unit '*' 8 + 7`
		mknod r${name}${unit}a	c $chr `expr $unit '*' 8 + 0`
		mknod r${name}${unit}b	c $chr `expr $unit '*' 8 + 1`
		mknod r${name}${unit}d	c $chr `expr $unit '*' 8 + 3`
		mknod r${name}${unit}e	c $chr `expr $unit '*' 8 + 4`
		mknod r${name}${unit}f	c $chr `expr $unit '*' 8 + 5`
		mknod r${name}${unit}g	c $chr `expr $unit '*' 8 + 6`
		mknod r${name}${unit}h	c $chr `expr $unit '*' 8 + 7`
		fi
		chgrp operator ${name}${unit}[a-h] r${name}${unit}[a-h]
		chmod 640 ${name}${unit}[a-h] r${name}${unit}[a-h]
		;;
	*)
		echo bad unit for disk in: $i
		;;
	esac
	umask 77
	;;

cd*)
	umask 2 ; unit=`expr $i : '..\(.*\)'`
	case $i in
	cd*) name=cd; blk=7; chr=9;;
	esac
	rm -f $name$unit? r$name$unit?
	case $unit in
	0|1|2|3|4|5|6)
		mknod ${name}${unit}a   b $blk `expr $unit '*' 8 + 0`
		mknod ${name}${unit}d   b $blk `expr $unit '*' 8 + 3`
		mknod r${name}${unit}a  c $chr `expr $unit '*' 8 + 0`
		chgrp operator ${name}${unit}[a-h] r${name}${unit}[a-h]
		chmod 640 ${name}${unit}[a-h] r${name}${unit}[a-h]
		;;
	*)
		echo bad unit for disk in: $i
		;;
	esac
	umask 77
	;;

ss*)
	umask 2 ; unit=`expr $i : '..\(.*\)'`
	case $i in
	ss*) name=ss;  chr=35;;
	esac
	rm -f $name$unit
	mknod ${name}${unit}	c $chr `expr $unit '*' 16 + 0`
	chgrp operator ${name}${unit}
	chmod 640 ${name}${unit}
	umask 77
	;;

tty0*)
	unit=`expr $i : 'tty0\(.*\)'`
	rm -f ser${unit}
	case $unit in
	0|1|2|3)
		rm -f tty0${unit} ttym${unit}
		mknod tty0${unit} c 12 $unit
		mknod ttym${unit} c 12 `expr 128 + $unit`
		chown uucp:wheel tty0${unit} ttym${unit}
		;;
	*)
		echo bad unit for ser in: $i
		;;
	esac
	;;


com*)
	unit=`expr $i : 'com\(.*\)'`
	rm -f com${unit}
	case $unit in
	0|1)
		rm -f com${unit}
		mknod com${unit} c 16 $unit
		chown uucp:wheel com${unit}
		;;
	*)
		echo bad unit for com in: $i
		;;
	esac
	;;


par*)
	unit=`expr $i : 'par\(.*\)'`
	rm -f par${unit}
	case $unit in
	0)
		mknod par${unit} c 11 ${unit}
		;;
	*)
		echo bad unit for par in: $i
		;;
	esac
	;;


ttye*)
	unit=`expr $i : 'ttye\(.*\)'`
	rm -f ttye${unit}
	rm -f ite*
	case $unit in
	0|1)
		mknod ttye${unit} c 13 ${unit}
		;;
	*)
		echo bad unit for ttye in: $i
		;;
	esac
	;;

grf*)
	unit=`expr $i : 'grf\(.*\)'`
	rm -f grf${unit}
	case $unit in
	0|1)
		mknod grf${unit} c 10 ${unit}; chmod 666 grf${unit}
		;;
	*)
		echo bad unit for grf in: $i
		;;
	esac
	;;

mouse*)
	unit=`expr $i : 'mouse\(.*\)'`
	rm -f mouse${unit}
	case $unit in
	0|1)
		mknod mouse${unit} c 15 ${unit}; chmod 666 mouse${unit}
		if [ $unit = 0 ]
		then 
			rm -f mouse; ln -s mouse${unit} mouse
		fi
		;;
	*)
		echo bad unit for mouse in: $i
		;;
	esac
	;;

kbd)
	rm -f kbd
	mknod kbd c 14 0
	;;


# pty*)
# 	class=`expr $i : 'pty\(.*\)'`
# 	case $class in
# 	0) offset=0 name=p;;
# 	1) offset=16 name=q;;
# 	2) offset=32 name=r;;
# 	3) offset=48 name=s;;
# # Note that telnetd, rlogind, and xterm (at least) only look at p-s.
# 	4) offset=64 name=t;;
# 	*) echo bad unit for pty in: $i;;
# 	esac
# 	case $class in
# 	0|1|2|3|4)
# 		umask 0
# 		eval `echo $offset $name | awk ' { b=$1; n=$2 } END {
# 			for (i = 0; i < 16; i++)
# 				printf("rm -f tty%s%x; mknod tty%s%x c 4 %d; \
# 				    rm -f pty%s%x; mknod pty%s%x c 5 %d; ", \
# 				    n, i, n, i, b+i, n, i, n, i, b+i); }'`
# 		umask 77
# 		;;
# 	esac
# 	;;

pty*)
	class=`expr $i : 'pty\(.*\)'`
	case $class in
	0) offset=0 name=p;;
	1) offset=16 name=q;;
	2) offset=32 name=r;;
	3) offset=48 name=s;;
# Note that telnetd, rlogind, and xterm (at least) only look at p-s.
	4) offset=64 name=t;;
	*) echo bad unit for pty in: $i;;
	esac
	case $class in
	0|1|2|3|4)
		umask 0
		(i=0; while [ $i -lt 16 ]; do
			eval `printf "rm -f tty%s%x; mknod tty%s%x c 4 %d; \
			    rm -f pty%s%x; mknod pty%s%x c 5 %d" $name $i \
			    $name $i $offset $name $i $name $i $offset`
			offset=$(($offset+1))
			i=$(($i+1))
			done)
		umask 77
		;;
	esac
	;;

bpf*)
	unit=`expr $i : 'bpf\(.*\)'`
	rm -f bpf$unit
	mknod bpf$unit c 22 $unit
	chown root:wheel bpf$unit
	;;

tun*)
	unit=`expr $i : 'tun\(.*\)'`
	rm -f tun$unit
	mknod tun$unit c 31 $unit
	chmod 600 tun$unit
	chown root:wheel tun$unit
	;;

lkm)
        rm -f lkm
        mknod lkm c 24 0
        chown root:kmem lkm
        chmod 640 lkm
        ;;

audio*)
	rm -f adpcm pcm audio
	mknod adpcm c 17 0
	mknod pcm   c 17 64
	mknod audio c 17 128
	chown root:wheel adpcm pcm audio
	chmod 666 adpcm pcm audio
	;;

sram)
	rm -f sram
	mknod sram c 23 0
	chown root:wheel sram
	chmod 644 sram
	;;

pow*)
	unit=`expr $i : 'pow\(.*\)'`
	rm -f pow${unit}
	case $unit in
	0|1)
		mknod pow${unit} c 32 ${unit}; chmod 644 pow${unit}
		if [ $unit = 0 ]
		then 
			rm -f pow; ln -s pow${unit} pow
		fi
		;;
	*)
		echo bad unit for pow in: $i
		;;
	esac
	;;

bell*)
	rm -f bell
	mknod bell c 33 0
	chown root:wheel bell 
	chmod 666 bell
	;;

local)
	umask 0
	sh MAKEDEV.local
	umask 77
	;;

*)
	echo $i: unknown device
	;;
esac
done

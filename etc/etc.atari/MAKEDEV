#!/bin/sh -
#
#	$NetBSD: MAKEDEV,v 1.23.2.1 1997/11/20 08:19:40 mellon Exp $
#
# Copyright (c) 1990 The Regents of the University of California.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#	This product includes software developed by the University of
#	California, Berkeley and its contributors.
# 4. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
#	from:
#	hp300/MAKEDEV (1/15/94), from:
#	@(#)MAKEDEV	5.5 (Berkeley) 5/28/91
#
# Device "make" file.  Valid arguments:
#	all	makes all known devices, including local devices,
#		Tries to make the ``standard'' number of each.
#	fd	makes fd/* for the fdescfs.
#	floppy	devices needed for install floppies
#	std	standard devices
#	local	configuration specific devices
#
# Tapes:
#	st*	SCSI tapes
#
# Disks:
#	fd*	Floppy disks (fdxa: 360Kb, fdxb: 720Kb, fdxc: 1.44Mb)
#	sd*	SCSI disks, includes flopticals
#	cd*	SCSI cdrom discs
#	vnd*	"file" pseudo-disks
#	ccd*	concatenated disk driver
#	md*	memory pseudo-disk driver
#	wd*	IDE disks
#
# Console ports:
#	ttye*	ite bitmapped consoles
#
# Pointing devices:
#	mouse*	Atari mice
#
# Printer:
#	lpt0	centronics printer
#
# Terminal ports:
#	ser02	serial2 port (channel A on 8530)
#	mdm01	UART on first 68901
#	mdm02	modem2 port (channel B on 8530)
#
# Pseudo terminals:
#	pty*	set of 16 master and slave pseudo terminals
#
# Special purpose devices:
#	grf*	Motherboard bitmapped video.
#	kbd	Atari keyboard.
#	view*	generic interface to graphic displays.
#	aconf	autoconfig information (not yet)
#	lkm	loadable kernel modules interface.
#	bpf*	Berkeley Packet Filter
#	tun*	network tunnel driver
#	ss*	SCSI scanner
#	uk*	SCSI unknown
#	ch	SCSI changer
#	rtc	Atari RealTimeClock
#	ipl	IP Filter devices
#	random	Random number generator

PATH=/sbin:/bin:/usr/sbin:/usr/bin
umask 77
for i
do
case $i in
all)
	sh $0 std fd st0 ttye0 ttye1 ttye2 ttye3 ttye4 ttye5 grf0 grf1
	sh $0 grf2 grf3 grf4 grf5 mouse0 mouse1 rtc random
	sh $0 kbd sd0 sd1 sd2 sd3 sd4 sd5 sd6 sd7 sd8 sd9 vnd0 vnd1 vnd2
	sh $0 vnd3 vnd4 view00 view01 view02 view03 view04 view05 pty0 
	sh $0 vnd5 vnd6 cd0 fd0 fd1 fd2 fd3 bpf0 bpf1 bpf2 bpf3 ipl
	sh $0 ccd0 ccd1 ccd2 ccd3
	sh $0 ss0 ch0 uk0 uk1 wd0 wd1
	sh $0 tun0 tun1 lkm ser02 mdm01 mdm02 lpt0 local
	;;

floppy)
	sh $0 std st0 ttye0 ttye1 ttye2 grf0 grf1 grf2 kbd tun0 tun1
	sh $0 sd0 sd1 sd2 sd3 sd4 wd0 wd1 cd0 fd0 md0 md1 rtc
	;;

std)
	rm -f console drum kmem mem nvram reload null zero tty
	rm -f klog stdin stdout stderr
	mknod console		c 0 0
	mknod drum		c 3 0	; chmod 640 drum ; chgrp kmem drum
	mknod kmem		c 2 1	; chmod 640 kmem ; chgrp kmem kmem
	mknod mem		c 2 0	; chmod 640 mem ; chgrp kmem mem
	mknod nvram		c 2 11	; chmod 640 nvram ; chgrp kmem nvram
	mknod reload		c 2 20	; chmod 640 reload ; chgrp kmem reload
	mknod zero		c 2 12	; chmod 666 zero
	mknod null		c 2 2	; chmod 666 null
	mknod tty		c 1 0	; chmod 666 tty
	mknod klog		c 6 0	; chmod 600 klog
	mknod stdin		c 18 0	; chmod 666 stdin
	mknod stdout		c 18 1	; chmod 666 stdout
	mknod stderr		c 18 2	; chmod 666 stderr
	;;

fd)
	rm -f fd/*
	mkdir fd > /dev/null 2>&1
	n=0
	while [ $n -lt 64 ]; do
		mknod fd/$n c 18 $n
		n=$(($n+1))
	done
	chown -R bin.bin fd
	chmod 555 fd
	chmod 666 fd/*
	;;

ser02)
	rm -f ser02
	mknod ser02 c 7 0
	chown uucp:wheel ser02
	;;

mdm01)
	rm -f mdm01
	mknod mdm01 c 35 0
	chown uucp:wheel mdm01
	;;

mdm02)
	rm -f mdm02
	mknod mdm02 c 7 16
	chown uucp:wheel mdm02
	;;

st*)
	case $i in
		st*) name=st; unit=${i#st}; blk=5; chr=10;;
	esac
	rm -f $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit 
	case $unit in
	0|1|2|3|4|5|6)
		mknod ${name}${unit}	b $blk $(($unit * 16 + 0))
		mknod n${name}${unit}	b $blk $(($unit * 16 + 1))
		mknod e${name}${unit}	b $blk $(($unit * 16 + 2))
		mknod en${name}${unit}	b $blk $(($unit * 16 + 3))
		mknod r${name}${unit}	c $chr $(($unit * 16 + 0))
		mknod nr${name}${unit}	c $chr $(($unit * 16 + 1))
		mknod er${name}${unit}	c $chr $(($unit * 16 + 2))
		mknod enr${name}${unit}	c $chr $(($unit * 16 + 3))
		chgrp operator ${name}${unit} n${name}${unit} \
			e$name$unit en$name$unit \
			r${name}${unit} nr${name}${unit} \
			er${name}${unit} enr${name}${unit} 
		chmod 660 ${name}${unit} n${name}${unit} \
			e$name$unit en$name$unit \
			r${name}${unit} nr${name}${unit} \
			er${name}${unit} enr${name}${unit} 
		;;
	*)
		echo bad unit for tape in: $i
		;;
	esac
	;;

fd*)
	unit=${i#fd}
	rm -f fd$unit rfd$unit fd$unit? rfd$unit?
	case $unit in
	0|1|2|3)
		mknod fd${unit}   b  2 $(($unit * 16 + 0))
		mknod fd${unit}a  b  2 $(($unit * 16 + 1))
		mknod fd${unit}b  b  2 $(($unit * 16 + 2))
		mknod fd${unit}c  b  2 $(($unit * 16 + 3))
		mknod rfd${unit}  c 16 $(($unit * 16 + 0))
		mknod rfd${unit}a c 16 $(($unit * 16 + 1))
		mknod rfd${unit}b c 16 $(($unit * 16 + 2))
		mknod rfd${unit}c c 16 $(($unit * 16 + 3))
		chgrp operator fd$unit fd$unit? rfd$unit rfd$unit?
		chmod 640 fd$unit fd$unit? rfd$unit rfd$unit?
		;;
	*)
		echo bad unit for floppy disk in: $i
		;;
	esac
	;;

md*)	# Memory disk, only useful for boot-floppy
	unit=${i#md}
	rm -f md${unit}
	mknod md${unit} b 1 $(($unit * 16))
	chgrp operator md$unit
	chmod 640 md$unit
	;;

ss*)	# SCSI changer
	case $i in
		ss*) name=ss; unit=${i#ss} chr=32;;
	esac
	rm -f $name$unit n$name$unit en$name$unit
	mknod ${name}${unit}	c $chr $(($unit * 16 + 0))
	mknod n${name}${unit}	c $chr $(($unit * 16 + 1))
	mknod en${name}${unit}	c $chr $(($unit * 16 + 3))
	chgrp operator ${name}${unit} n${name}${unit} en${name}${unit}
	chmod 640 ${name}${unit} n${name}${unit} en${name}${unit}
	;;

sd*|vnd*|ccd*|wd*)
	case $i in
		sd*)  name=sd;  unit=${i#sd};  blk=4;  chr=8;;
		vnd*) name=vnd; unit=${i#vnd}; blk=0;  chr=17;;
		ccd*) name=ccd; unit=${i#ccd}; blk=13; chr=27;;
		wd*)  name=wd;  unit=${i#wd};  blk=14; chr=34;;
	esac
	rm -f $name$unit? r$name$unit?
	case $unit in
	0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15)
		mknod ${name}${unit}c	b $blk $(($unit * 16 + 2))
		mknod r${name}${unit}c	c $chr $(($unit * 16 + 2))
		if [ $name != cd -a $name != vnd ]; then
			mknod ${name}${unit}a	b $blk $(($unit * 16 + 0))
			mknod ${name}${unit}b	b $blk $(($unit * 16 + 1))
			mknod ${name}${unit}d	b $blk $(($unit * 16 + 3))
			mknod ${name}${unit}e	b $blk $(($unit * 16 + 4))
			mknod ${name}${unit}f	b $blk $(($unit * 16 + 5))
			mknod ${name}${unit}g	b $blk $(($unit * 16 + 6))
			mknod ${name}${unit}h	b $blk $(($unit * 16 + 7))
			mknod ${name}${unit}i	b $blk $(($unit * 16 + 8))
			mknod ${name}${unit}j	b $blk $(($unit * 16 + 9))
			mknod ${name}${unit}k	b $blk $(($unit * 16 + 10))
			mknod ${name}${unit}l	b $blk $(($unit * 16 + 11))
			mknod ${name}${unit}m	b $blk $(($unit * 16 + 12))
			mknod ${name}${unit}n	b $blk $(($unit * 16 + 13))
			mknod ${name}${unit}o	b $blk $(($unit * 16 + 14))
			mknod ${name}${unit}p	b $blk $(($unit * 16 + 15))
			mknod r${name}${unit}a	c $chr $(($unit * 16 + 0))
			mknod r${name}${unit}b	c $chr $(($unit * 16 + 1))
			mknod r${name}${unit}d	c $chr $(($unit * 16 + 3))
			mknod r${name}${unit}e	c $chr $(($unit * 16 + 4))
			mknod r${name}${unit}f	c $chr $(($unit * 16 + 5))
			mknod r${name}${unit}g	c $chr $(($unit * 16 + 6))
			mknod r${name}${unit}h	c $chr $(($unit * 16 + 7))
			mknod r${name}${unit}i	c $chr $(($unit * 16 + 8))
			mknod r${name}${unit}j	c $chr $(($unit * 16 + 9))
			mknod r${name}${unit}k	c $chr $(($unit * 16 + 10))
			mknod r${name}${unit}l	c $chr $(($unit * 16 + 11))
			mknod r${name}${unit}m	c $chr $(($unit * 16 + 12))
			mknod r${name}${unit}n	c $chr $(($unit * 16 + 13))
			mknod r${name}${unit}o	c $chr $(($unit * 16 + 14))
			mknod r${name}${unit}p	c $chr $(($unit * 16 + 15))
		fi
		chgrp operator ${name}${unit}[a-p] r${name}${unit}[a-p]
		chmod 640 ${name}${unit}[a-p] r${name}${unit}[a-p]
		;;
	*)
		echo bad unit for disk in: $i
		;;
	esac
	;;

ch*|uk*)
	case $i in
		ch*) name=ch; unit=${i#ch}; chr=30;;
		uk*) name=uk; unit=${i#uk}; chr=31;;
	esac
	rm -f $name$unit
	mknod $name$unit c $chr $unit
	chgrp operator ${name}${unit}
	chmod 640 ${name}${unit}
	;;
	
cd*)
	case $i in
	cd*) name=cd; unit=${i#cd}; blk=6; chr=9;;
	esac
	rm -f $name$unit? r$name$unit?
	case $unit in
	0|1|2|3|4|5|6)
		mknod ${name}${unit}a   b $blk $(($unit * 8 + 0))
		mknod ${name}${unit}d   b $blk $(($unit * 8 + 3))
		mknod r${name}${unit}a  c $chr $(($unit * 8 + 0))
		chgrp operator ${name}${unit}[a-h] r${name}${unit}[a-h]
		chmod 640 ${name}${unit}[a-h] r${name}${unit}[a-h]
		;;
	*)
		echo bad unit for disk in: $i
		;;
	esac
	;;

ttye*)
	unit=${i#ttye}
	rm -f ttye${unit}
	case $unit in
	0|1|2|3|4|5|6|7|8|9)
		mknod ttye${unit} c 12 ${unit}
		;;
	*)
		echo bad unit for ttye in: $i
		;;
	esac
	;;

grf*)
	unit=${i#grf}
	rm -f grf${unit}
	case $unit in
	0|1|2|3|4|5|6|7|8|9)
		mknod grf${unit} c 11 ${unit}; chmod 666 grf${unit}
		;;
	*)
		echo bad unit for grf in: $i
		;;
	esac
	;;

mouse*)
	unit=${i#mouse}
	rm -f mouse${unit}
	case $unit in
	0|1)
		mknod mouse${unit} c 15 ${unit}; chmod 666 mouse${unit}
		if [ $unit = 0 ]
		then 
			rm -f mouse; ln -s mouse${unit} mouse
		fi
		;;
	*)
		echo bad unit for mouse in: $i
		;;
	esac
	;;

kbd)
	rm -f kbd
	mknod kbd c 14 0
	;;


view*)
	unit=${i#view}
	rm -f view${unit}
	case $unit in
	00|01|02|03|04|05|06|07|08|09)
		mknod view${unit} c 13 ${unit}; chmod 666 view${unit}
		;;
	*)
		echo bad unit for view in: $i
		;;
	esac
	;;

pty*)
	class=${i#pty}
	case $class in
	0)      name=p;;
	1)      name=q;;
	2)      name=r;;
	3)      name=s;;
	4)      name=t;;
	5)      name=u;;
	6)      name=v;;
	7)      name=w;;
	8)      name=x;;
	9)      name=y;;
	10)     name=z;;
	11)     name=P;;
	12)     name=Q;;
	13)     name=R;;
	14)     name=S;;
	15)     name=T;;
	*)      echo "$0: $i: pty unit must be between 0 and 15"
	        continue ;;
	esac
	rm -f tty$name[0-9a-f] pty$name[0-9a-f]
	for j in 0 1 2 3 4 5 6 7 8 9 a b c d e f
	do
		case $j in
		[0-9])  jn=$j ;;
		a)      jn=10 ;;
		b)      jn=11 ;;
		c)      jn=12 ;;
		d)      jn=13 ;;
		e)      jn=14 ;;
		f)      jn=15 ;;
		esac
		unit=$(($class * 16 + $jn))
		mknod tty$name$j c 4 $unit
		mknod pty$name$j c 5 $unit
	done
        chgrp wheel tty$name? pty$name?
        chmod 666 tty$name? pty$name?
	;;

lpt*)
	unit=${i#lpt}
	rm -f lpt$unit
	mknod lpt$unit c 29 $unit
	chown root.wheel lpt$unit
	;;

rtc)
	rm -f rtc
	mknod rtc c 33 0
	chown root.wheel rtc
	;;

bpf*)
	unit=${i#bpf}
	rm -f bpf$unit
	mknod bpf$unit c 19 $unit
	chown root.wheel bpf$unit
	;;

tun*)
	unit=${i#tun}
	rm -f tun$unit
	mknod tun$unit c 28 $unit
	chmod 600 tun$unit
	chown root.wheel tun$unit
	;;

lkm)
        rm -f lkm
        mknod lkm c 20 0
        chown root:kmem lkm
        chmod 640 lkm
        ;;

ipl)
	rm -f ipl ipnat ipstate ipauth
	mknod ipl c 36 0
	mknod ipnat c 36 1
	mknod ipstate c 36 2
	mknod ipauth c 36 3
	chown root.wheel ipl ipnat ipstate ipauth
	chmod 600 ipl ipnat ipstate ipauth
	;;

random)
	rm -f random urandom
	mknod random c 38 0
	mknod urandom c 38 1
	chown root.wheel random urandom
	chmod 444 random
	chmod 644 urandom
	;;

local)
	umask 0
	sh $0.local all
	umask 77
	;;

*)
	echo $i: unknown device
	;;
esac
done

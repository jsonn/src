#!/bin/sh -
#	$NetBSD: MAKEDEV,v 1.1.4.1 2000/08/11 20:43:23 mason Exp $
#
# Copyright (c) 1990 The Regents of the University of California.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#	This product includes software developed by the University of
#	California, Berkeley and its contributors.
# 4. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
###########################################################################
#
#   PLEASE RUN "cd ../share/man/man8 ; perl5 MAKEDEV2manpage.pl"
#   AFTER CHANGING THIS FILE, AND COMMIT THE UPDATED MANPAGE!
#
###########################################################################
#
# Device "make" file.  Valid arguments:
#	all	Makes all known devices, including local devices.
#		If units are expected for a device MAKEDEV supplies the
#		standard numbers.
#	minimal	A minimal set of devices for install disks, etc.
#	std	The standard devices (console, drum, klog, kmem, mem,
#		null, stderr, stdin, stdout, tty, zero).
#	local	Configuration specific devices which are created by running
#		the MAKEDEV.local shell script with the argument "all".
#
# Tapes:
#	st*	SCSI tape
#
# Disks:
#	ccd*	concatenated disk driver
#	md*	memory pseudo-disk devices
#	vnd*	file pseudo-disks
#
# Terminals:
#	ttyE?	Workstation console ("wscons") glass-tty emulators
#
# Pseudo terminals:
#	pty*	set of 16 master and slave pseudo terminals
#
# Special purpose devices:
#	fd	file descriptors (/dev/fd/*)

dialin=0
dialout=524288
callunit=262144

PATH=/sbin:/usr/sbin:/bin:/usr/bin
umask 77
for i
do
case $i in

all)
	sh $0 std fd pty0 pty1 pty2 pty3
	sh $0 vnd0 vnd1 vnd2 vnd3
	sh $0 ccd0 ccd1 ccd2 ccd3 md0 md1
	sh $0 wskbd0 wsmouse0
	sh $0 wscons
	;;

minimal)
	sh $0 std
	sh $0 pty0 ccd0 ccd1 md0
	sh $0 ttyE0 ttyE1 wsmouse0 wskbd0 ttyEcfg
	;;

wscons)
	sh $0 ttyE0 ttyE1 ttyE2 ttyE3 ttyE4 ttyE5 ttyE6 ttyE7
	sh $0 wsmouse0 wsmouse1 wsmouse2 wsmouse3
	sh $0 wskbd0 wskbd1 wskbd2 wskbd3
	sh $0 ttyEcfg
	sh $0 wsmux
	;;

wskbd*)
	major=11
	unit=${i#wskbd}
	wskbd=wskbd$unit
	rm -f $wskbd
	mknod $wskbd c $major $unit
	chown root.wheel $wskbd
	chmod 600 $wskbd
	;;

wsmouse*)
	major=12
	unit=${i#wsmouse}
	wsmouse=wsmouse$unit
	rm -f $wsmouse
	mknod $wsmouse c 12 $unit
	chown root.wheel $wsmouse
	chmod 600 $wsmouse
	;;

wsmux|wsmouse|wskbd)
	rm -f wsmouse wskbd
	mknod wsmouse c 13 0
	mknod wskbd c 13 1
	chown root.wheel wsmouse wskbd
	chmod 600 wsmouse wskbd
	;;

std)
	rm -f console drum mem kmem null zero io tty klog stdin stdout stderr
	mknod console		c 0 0
	mknod tty		c 1 0	; chmod 666 tty
	mknod kmem		c 2 1	; chmod 640 kmem ; chgrp kmem kmem
	mknod mem		c 2 0	; chmod 640 mem ; chgrp kmem mem
	mknod null		c 2 2	; chmod 666 null
	mknod zero		c 2 3	; chmod 666 zero
	mknod drum		c 3 0	; chmod 640 drum ; chgrp kmem drum
	mknod klog		c 6 0	; chmod 600 klog
	mknod stdin		c 7 0	; chmod 666 stdin
	mknod stdout		c 7 1	; chmod 666 stdout
	mknod stderr		c 7 2	; chmod 666 stderr
	;;

fd)
	major=7
	rm -f fd/*
	mkdir fd > /dev/null 2>&1
	n=0
	while [ $n -lt 64 ]; do
		mknod fd/$n c $major $n
		n=$(($n + 1))
	done
	chown -R root.wheel fd
	chmod 755 fd
	chmod 666 fd/*
	;;

md*)
	unit=${i#md}; blk=1; chr=8;
	rm -f md${unit}? rmd${unit}?
	mknod md${unit}a  b $blk $(($unit * 8 + 0))
	mknod md${unit}c  b $blk $(($unit * 8 + 2))
#	mknod rmd${unit}a c $chr $(($unit * 8 + 0))
#	mknod rmd${unit}c c $chr $(($unit * 8 + 2))
	chgrp operator md${unit}? #rmd${unit}?
	chmod 640 md${unit}? #rmd${unit}?
	;;

ccd*|vnd*)
	case $i in
	ccd*)	name=ccd;	unit=${i#ccd};	blk=3; chr=9;;
	vnd*)	name=vnd;	unit=${i#vnd};	blk=2; chr=8;;
	esac
	rm -f $name$unit? r$name$unit?
	mknod ${name}${unit}a	b $blk $(($unit * 8 + 0))
	mknod ${name}${unit}b	b $blk $(($unit * 8 + 1))
	mknod ${name}${unit}c	b $blk $(($unit * 8 + 2))
	mknod ${name}${unit}d	b $blk $(($unit * 8 + 3))
	mknod ${name}${unit}e	b $blk $(($unit * 8 + 4))
	mknod ${name}${unit}f	b $blk $(($unit * 8 + 5))
	mknod ${name}${unit}g	b $blk $(($unit * 8 + 6))
	mknod ${name}${unit}h	b $blk $(($unit * 8 + 7))
	mknod r${name}${unit}a	c $chr $(($unit * 8 + 0))
	mknod r${name}${unit}b	c $chr $(($unit * 8 + 1))
	mknod r${name}${unit}c	c $chr $(($unit * 8 + 2))
	mknod r${name}${unit}d	c $chr $(($unit * 8 + 3))
	mknod r${name}${unit}e	c $chr $(($unit * 8 + 4))
	mknod r${name}${unit}f	c $chr $(($unit * 8 + 5))
	mknod r${name}${unit}g	c $chr $(($unit * 8 + 6))
	mknod r${name}${unit}h	c $chr $(($unit * 8 + 7))
	chgrp operator ${name}${unit}[a-h] r${name}${unit}[a-h]
	chmod 640 ${name}${unit}[a-h] r${name}${unit}[a-h]
	;;

ttyEcfg)
	rm -f $i
	mknod $i c 14 255
	chown root:wheel $i
	;;

ttyE*)
	case $i in
	ttyE*)	name=ttyE; unit=${i#ttyE};	major=14; minor=$unit;;
	esac
        rm -f $name$unit
        mknod $name$unit c $major $minor
        chown uucp.wheel $name$unit
        ;;

pty*)
	class=${i#pty}
	case $class in
	0)      name=p;;
	1)      name=q;;
	2)      name=r;;
	3)      name=s;;
	4)      name=t;;
	5)      name=u;;
	6)      name=v;;
	7)      name=w;;
	8)      name=x;;
	9)      name=y;;
	10)     name=z;;
	11)     name=P;;
	12)     name=Q;;
	13)     name=R;;
	14)     name=S;;
	15)     name=T;;
	*)      echo "$0: $i: pty unit must be between 0 and 15"
	        continue ;;
	esac
	rm -f tty$name[0-9a-f] pty$name[0-9a-f]
	for j in 0 1 2 3 4 5 6 7 8 9 a b c d e f
	do
		case $j in
		[0-9])  jn=$j ;;
		a)      jn=10 ;;
		b)      jn=11 ;;
		c)      jn=12 ;;
		d)      jn=13 ;;
		e)      jn=14 ;;
		f)      jn=15 ;;
		esac
		unit=$(($class * 16 + $jn))
		mknod tty$name$j c 4 $unit
		mknod pty$name$j c 5 $unit
	done
        chgrp wheel tty$name? pty$name?
        chmod 666 tty$name? pty$name?
	;;

local)
	umask 0
	sh $0.local all
	umask 77
	;;

*)
	echo $i: unknown device
	;;

esac
done

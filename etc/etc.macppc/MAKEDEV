#!/bin/sh -
#
#	$NetBSD: MAKEDEV,v 1.60.2.2 2004/04/12 04:49:45 jmc Exp $
#
# Copyright (c) 1990 The Regents of the University of California.
# All rights reserved.
#
# Written and contributed by W. Jolitz 12/90
#
# Redistribution and use in source and binary forms are permitted provided
# that: (1) source distributions retain this entire copyright notice and
# comment, and (2) distributions including binaries display the following
# acknowledgement:  ``This product includes software developed by the
# University of California, Berkeley and its contributors'' in the
# documentation or other materials provided with the distribution and in
# all advertising materials mentioning features or use of this software.
# Neither the name of the University nor the names of its contributors may
# be used to endorse or promote products derived from this software without
# specific prior written permission.
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
#
#	@(#)MAKEDEV	5.2 (Berkeley) 6/22/90
#
###########################################################################
#
#   PLEASE RUN "cd ../share/man/man8 ; perl5 MAKEDEV2manpage.pl"
#   AFTER CHANGING THIS FILE, AND COMMIT THE UPDATED MANPAGE!
#
###########################################################################
#
# Device "make" file.  Valid arguments:
#	all	makes all known devices, including local devices.
#		Tries to make the 'standard' number of each type.
#	floppy	devices to be put on install floppies
#	std	standard devices
#	local	configuration specific devices
#	isdns	make ISDN devices
#
# Tapes:
#	st*	SCSI tapes
#
# Disks:
#	wd*	"winchester" disk drives (ST506,IDE,ESDI,RLL,...)
#	fd*	"floppy" disk drives (3 1/2", 5 1/4") (not yet)
#	sd*	SCSI disks
#	cd*	SCSI CD-ROM
#	md*	memory pseudo-disk devices
#	vnd*	"file" pseudo-disks
#	raid*	RAIDframe disk driver
#	ccd*	contatenated disk devices
#
# Console ports:
#	ttyE*	wscons
#	ttye*	ite consoles
#
# Pointing devices:
#	wsmouse* wscons mouse events
#
# Keyboard devices:
#	wskbd*	wscons keyboard events
#
# Terminal ports:
#	tty*	standard built-in serial ports
#	ttyCZ*	Cyclades-Z multiport serial boards.  Each "unit"
#		makes 64 ports.
#	ttyCY*	Cyclom-Y multiport serial boards. Each "unit" makes
#		32 ports.
#
# Pseudo terminals:
#	pty*	set of 62 master and slave pseudo terminals
#	opty	first 16 ptys, to save inodes on install media
#
# USB devices:
#	usb*	Bus control devices used by usbd for attach/detach
#	uhid*	Generic HID devices
#	ulpt*	Printer devices
#	ugen*	Generic device
#	urio*	Diamond Rio 500
#	uscanner*	Scanners
#	ttyU*	Modem
#
# ISDN devices:
#	isdn	communication between userland isdnd and kernel
#	isdnctl	control device
#	isdnbchan* raw b-channel access
#	isdntel*	telephony device
#	isdntrc*	trace device
#
# Special purpose devices:
#	clockctl clock control for non root users
#	fd	file descriptors
#	bpf*	packet filter
#	ipl	ip filter
#	openfirm OpenFirmware queries
#	random	random number generator
#	lkm	loadable kernel modules interface
#	audio*	audio devices
#	tun*	network tunnel driver
#	scsibus* SCSI busses, see scsi(4), scsictl(8)
#	ss*	SCSI scanner
#	uk*	unknown SCSI device
#	ch*	SCSI media changer
#	wsmux*	wscons event multiplexor
#	pci*	PCI bus access devices
#	sysmon	System Monitoring hardware
#

dialin=0
dialout=524288		# high bit of the minor number
callunit=262144

PATH=/sbin:/usr/sbin:/bin:/usr/bin
umask 77

# Check if we have fdesc mounted
if [ -d fd ]; then
	case "`df fd`" in
	*fdesc*) nofdesc=false;;
	*) nofdesc=true;;
	esac
else
	nofdesc=true
fi

makedev()
{

for i
do
case $i in

all)
	makedev std wscons fd sd0 sd1 sd2 st0 st1 cd0 cd1 wd0 wd1 md0
	makedev ss0 ch0 uk0 uk1 vnd0 vnd1 ccd0 ccd1 ccd2 ccd3
	makedev random tty00 tty01 tty10 pty0 adb grf0
	makedev bpf0 bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7
	makedev tun0 tun1 ipl usbs ttyCZ0 ttyCY0 audio openfirm
	makedev music rmidi0 rmidi1 rmidi2 rmidi3 rmidi4 rmidi5 rmidi6 rmidi7
	makedev lkm nvram local
	makedev raid0 raid1 raid2 raid3 raid4 raid5 raid6 raid7
	makedev scsibus0 scsibus1 scsibus2 scsibus3
	makedev isdns
	makedev pci0 pci1 pci2 pci3 pci4 pci5 pci6 pci7
	makedev clockctl
	makedev sysmon
	;;

audio)
	makedev audio0 audio1 audio2 audio3
	ln -fs sound0 sound
	ln -fs audio0 audio
	ln -fs mixer0 mixer
	ln -fs audioctl0 audioctl
	;;

floppy)
	makedev std sd0 sd1 sd2 tty00 tty01 opty
	makedev st0 st1 cd0 cd1 wd0 wd1 md0
	makedev ttyE0 wsmouse0 wskbd0 ttyEcfg
	;;

isdns)
	makedev isdn isdnctl isdnbchan0 isdnbchan1 isdntel0 isdntel1 isdntrc0 isdntrc1
	;;

std)
	rm -f console drum mem kmem null zero io klog
	mknod console		c 0 0
	mknod drum		c 6 0	; chmod 640 drum ; chgrp kmem drum
	mknod kmem		c 2 1	; chmod 640 kmem ; chgrp kmem kmem
	mknod mem		c 2 0	; chmod 640 mem	; chgrp kmem mem
	mknod null		c 2 2	; chmod 666 null
	mknod zero		c 2 12	; chmod 666 zero
	mknod klog		c 5 0	; chmod 600 klog
	if $nofdesc; then
		rm -f tty stdin stdout stderr
		mknod tty	c 1 0	; chmod 666 tty
		mknod stdin	c 32 0	; chmod 666 stdin
		mknod stdout	c 32 1	; chmod 666 stdout
		mknod stderr	c 32 2	; chmod 666 stderr
	fi
	;;

ttye*)
	chr=22; unit=${i#ttye}
	rm -f ttye$unit
	mknod ttye$unit	c $chr $unit
	;;

grf*)
	chr=23; unit=${i#grf}
	rm -f grf$unit
	mknod grf$unit	c $chr $unit
	chmod 666 grf$unit
	;;

adb)
	rm -f adb
	mknod adb c 28 0
	chmod 666 adb
	;;

wscons)
	makedev ttyE0 ttyE1 ttyE2 ttyE3 ttyEcfg
	makedev wsmouse0 wsmouse1 wsmouse2 wsmouse3
	makedev wskbd0 wskbd1 wskbd2 wskbd3
	makedev wsmux0 wsmux1 wsmux2 wsmux3
	makedev wsmouse wskbd
	;;

wsmouse)
	rm -f wsmouse
	mknod wsmouse c 43 0
	chmod 600 wsmouse
	;;

wskbd)
	rm -f wskbd
	mknod wskbd c 43 1
	chmod 600 wskbd
	;;

wsmux*)
	unit=${i#wsmux}
	unitctl=$(($unit + 128))
	wsmux=wsmux$unit
	wsmuxctl=wsmuxctl$unit
	major=43
	rm -f $wsmux $wsmuxctl
	mknod $wsmux c $major $unit
	chmod 600 $wsmux
	mknod $wsmuxctl c $major $unitctl
	chmod 200 $wsmuxctl
	;;

ttyEcfg)
	chr=35
	rm -f ttyEcfg
	mknod ttyEcfg c $chr 255
	chmod 600 ttyEcfg
	;;

ttyE*)
	chr=35; unit=${i#ttyE}
	rm -f ttyE$unit
	mknod ttyE$unit c $chr $unit
	;;

wskbd*)
	unit=${i#wskbd}
	wskbd=wskbd$unit
	major=36
	rm -f $wskbd
	mknod $wskbd c $major $unit
	chmod 600 $wskbd
	;;

wsmouse*)
	unit=${i#wsmouse}
	wsmouse=wsmouse$unit
	major=37
	rm -f $wsmouse
	mknod $wsmouse c $major $unit
	chmod 600 $wsmouse
	;;

audio*)
	unit=${i#audio}
	audio=audio$unit
	sound=sound$unit
	mixer=mixer$unit
	major=48
	audioctl=audioctl$unit
	if [ "$unit" = "" ]; then unit=0; fi
	rm -f $audio $sound $mixer $audioctl
	mknod $sound    c $major $(($unit + 0))
	mknod $audio    c $major $(($unit + 128))
	mknod $mixer    c $major $(($unit + 16))
	mknod $audioctl c $major $(($unit + 192))
	chmod 666 $audio $sound $mixer $audioctl
	;;

rmidi*)
	unit=${i#rmidi}
	major=49
	rmidi=rmidi$unit
	rm -f $rmidi
	mknod $rmidi c $major $unit
	chmod 666 $rmidi
	;;

music*)
	unit=${i#music}
	music=music$unit
	sequencer=sequencer$unit
	major=50
	if [ "$unit" = "" ]; then unit=0; fi
	rm -f $sequencer $music
	mknod $music     c $major $(($unit + 0))
	mknod $sequencer c $major $(($unit + 128))
	chmod 666 $music $sequencer
	;;

fd)
	if $nofdesc; then
		rm -f fd/*
		mkdir fd 2>/dev/null
		n=0
		while [ $n -lt 64 ]; do
			mknod fd/$n c 32 $n
			n=$(($n + 1))
		done
		chmod 755 fd
		chmod 666 fd/*
	fi
	;;

ss*)
	case $i in
	ss*) name=ss;	unit=${i#ss};	chr=17;;
	esac
	rm -f $name$unit n$name$unit en$name$unit
	mknod $name$unit	c $chr $(($unit * 16 + 0))
	mknod n$name$unit	c $chr $(($unit * 16 + 1))
	mknod en$name$unit	c $chr $(($unit * 16 + 3))
	chgrp operator $name$unit n$name$unit en$name$unit
	chmod 640 $name$unit n$name$unit en$name$unit
	;;

ccd*|fd*|raid*|sd*|vnd*|wd*)
	case $i in
	ccd*) name=ccd;	unit=${i#ccd};	blk=3;	chr=26;;
#	fd*) name=fd;	unit=${i#fd};	blk=2;	chr=27;;
	sd*) name=sd;	unit=${i#sd};	blk=4;	chr=13;;
	raid*) name=raid; unit=${i#raid}; blk=12; chr=38;;
	vnd*) name=vnd;	unit=${i#vnd};	blk=2;	chr=25;;
	wd*) name=wd;	unit=${i#wd};	blk=10;	chr=30;;
	esac
	rm -f $name$unit? r$name$unit?
	mknod ${name}${unit}a	b $blk $(($unit * 16 + 0))
	mknod ${name}${unit}b	b $blk $(($unit * 16 + 1))
	mknod ${name}${unit}c	b $blk $(($unit * 16 + 2))
	mknod ${name}${unit}d	b $blk $(($unit * 16 + 3))
	mknod ${name}${unit}e	b $blk $(($unit * 16 + 4))
	mknod ${name}${unit}f	b $blk $(($unit * 16 + 5))
	mknod ${name}${unit}g	b $blk $(($unit * 16 + 6))
	mknod ${name}${unit}h	b $blk $(($unit * 16 + 7))
	mknod ${name}${unit}i	b $blk $(($unit * 16 + 8))
	mknod ${name}${unit}j	b $blk $(($unit * 16 + 9))
	mknod ${name}${unit}k	b $blk $(($unit * 16 + 10))
	mknod ${name}${unit}l	b $blk $(($unit * 16 + 11))
	mknod ${name}${unit}m	b $blk $(($unit * 16 + 12))
	mknod ${name}${unit}n	b $blk $(($unit * 16 + 13))
	mknod ${name}${unit}o	b $blk $(($unit * 16 + 14))
	mknod ${name}${unit}p	b $blk $(($unit * 16 + 15))
	mknod r${name}${unit}a	c $chr $(($unit * 16 + 0))
	mknod r${name}${unit}b	c $chr $(($unit * 16 + 1))
	mknod r${name}${unit}c	c $chr $(($unit * 16 + 2))
	mknod r${name}${unit}d	c $chr $(($unit * 16 + 3))
	mknod r${name}${unit}e	c $chr $(($unit * 16 + 4))
	mknod r${name}${unit}f	c $chr $(($unit * 16 + 5))
	mknod r${name}${unit}g	c $chr $(($unit * 16 + 6))
	mknod r${name}${unit}h	c $chr $(($unit * 16 + 7))
	mknod r${name}${unit}i	c $chr $(($unit * 16 + 8))
	mknod r${name}${unit}j	c $chr $(($unit * 16 + 9))
	mknod r${name}${unit}k	c $chr $(($unit * 16 + 10))
	mknod r${name}${unit}l	c $chr $(($unit * 16 + 11))
	mknod r${name}${unit}m	c $chr $(($unit * 16 + 12))
	mknod r${name}${unit}n	c $chr $(($unit * 16 + 13))
	mknod r${name}${unit}o	c $chr $(($unit * 16 + 14))
	mknod r${name}${unit}p	c $chr $(($unit * 16 + 15))
	chgrp operator $name$unit? r$name$unit?
	chmod 640 $name$unit? r$name$unit?
	;;

ttyCZ*)
	unit=${i#ttyCZ}
	major=46
	minor=$(($unit * 64))
	eminor=$(($minor + 64))
	while [ $minor -lt $eminor ]; do
		if [ $minor -lt 10 ]; then
			nminor=000$minor
		elif [ $minor -lt 100 ]; then
			nminor=00$minor
		elif [ $minor -lt 1000 ]; then
			nminor=0$minor
		else
			nminor=$minor
		fi
		rm -f ttyCZ$nminor dtyCZ$nminor
		mknod ttyCZ$nminor c $major $(($minor + $dialin  ))
		mknod dtyCZ$nminor c $major $(($minor + $dialout ))
		chown uucp ttyCZ$nminor dtyCZ$nminor
		chmod 600 ttyCZ$nminor dtyCZ$nminor
		minor=$(($minor + 1))
	done
	;;

ttyCY*)
	unit=${i#ttyCY}
	major=47
	minor=$(($unit * 32))
	eminor=$(($minor + 32))
	while [ $minor -lt $eminor ]; do
		if [ $minor -lt 10 ]; then
			nminor=00$minor
		elif [ $minor -lt 100 ]; then
			nminor=0$minor
		else
			nminor=$minor
		fi
		rm -f ttyCY$nminor dtyCY$nminor
		mknod ttyCY$nminor c $major $(($minor + $dialin  ))
		mknod dtyCY$nminor c $major $(($minor + $dialout ))
		chown uucp ttyCY$nminor dtyCY$nminor
		chmod 600 ttyCY$nminor dtyCY$nminor
		minor=$(($minor + 1))
	done
	;;

ttyU*)
	unit=${i#ttyU}
	ttyU=ttyU$unit
	dtyU=dtyU$unit
	ctyU=ctyU$unit
	major=44
	rm -f $ttyU $dtyU $ctyU
	mknod $ttyU c $major $(($unit + $dialin  ))
	mknod $dtyU c $major $(($unit + $dialout ))
	mknod $ctyU c $major $(($unit + $callunit))
	chown uucp $ttyU $dtyU $ctyU
	chmod 600 $ttyU $dtyU $ctyU
	;;

tty0*)
	unit=${i#????}
	rm -f tty0$unit dty0$unit
	mknod tty0$unit c 12 $(($unit + $dialin ))
	mknod dty0$unit c 12 $(($unit + $dialout))
	chown uucp tty0$unit dty0$unit
	;;

tty1*)
	unit=${i#????}
	rm -f tty1$unit dty1$unit
	mknod tty1$unit c 45 $(($unit + $dialin ))
	mknod dty1$unit c 45 $(($unit + $dialout))
	chown uucp tty1$unit dty1$unit
	;;

opty)
	rm -f ttyp[0-9a-f] ptyp[0-9a-f]
	for j in 0 1 2 3 4 5 6 7 8 9 a b c d e f
	do
		case $j in
		[0-9])	jn=$j ;;
		a)	jn=10 ;;
		b)	jn=11 ;;
		c)	jn=12 ;;
		d)	jn=13 ;;
		e)	jn=14 ;;
		f)	jn=15 ;;
		esac
		mknod ttyp$j c 3 $jn
		mknod ptyp$j c 4 $jn
	done
	chmod 666 ttyp[0-9a-f] ptyp[0-9a-f]
	;;

		
pty*)
	class=${i#pty}
	name=`echo pqrstuvwxyzPQRST | dd bs=1 count=1 skip=$class 2>/dev/null`
	case $name in
	v)	echo "$0: $i: pty unit conflicts with console ttyv0 device."
		continue;;
	?)      ;;
	*)      echo "$0: $i: pty unit must be between 0 and 15"
	        continue ;;
	esac
	rm -f tty$name[0-9a-zA-Z] pty$name[0-9a-zA-Z]
	jn=0
	while [ $jn -lt 62 ]
	do
		j=`echo 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ | dd bs=1 count=1 skip=$jn 2>/dev/null`
		skip=0
		if [ $jn -ge 16 ]; then
			skip=$(($class * 30 + 256 - 16))
		fi
		unit=$(($class * 16 + $jn + $skip))
		mknod tty$name$j c 3 $unit
		mknod pty$name$j c 4 $unit
		jn=$(($jn + 1))
	done
	chmod 666 tty$name[0-9a-zA-Z] pty$name[0-9a-zA-Z]
	;;

st*)
	case $i in
	st*) name=st;	unit=${i#st};	chr=14;	blk=5;;
	esac
	rm -f $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit
	mknod $name$unit	b $blk $(($unit * 16 + 0))
	mknod n$name$unit	b $blk $(($unit * 16 + 1))
	mknod e$name$unit	b $blk $(($unit * 16 + 2))
	mknod en$name$unit	b $blk $(($unit * 16 + 3))
	mknod r$name$unit	c $chr $(($unit * 16 + 0))
	mknod nr$name$unit	c $chr $(($unit * 16 + 1))
	mknod er$name$unit	c $chr $(($unit * 16 + 2))
	mknod enr$name$unit	c $chr $(($unit * 16 + 3))
	chgrp operator $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit
	chmod 660 $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit
	;;

ch*|uk*)
	case $i in
	ch*) name=ch;	unit=${i#ch};	chr=16;;
	uk*) name=uk;	unit=${i#uk};	chr=18;;
	esac
	rm -f $name$unit
	mknod $name$unit	c $chr $unit
	chgrp operator $name$unit
	chmod 640 $name$unit
	;;

cd*)
	case $i in
	cd*) name=cd;	unit=${i#cd};	chr=15;	blk=6;;
	esac
	rm -f $name$unit? r$name$unit?
	mknod ${name}${unit}a	b $blk $(($unit * 16 + 0))
	mknod ${name}${unit}c	b $blk $(($unit * 16 + 2))
	mknod r${name}${unit}a	c $chr $(($unit * 16 + 0))
	mknod r${name}${unit}c	c $chr $(($unit * 16 + 2))
	chgrp operator $name$unit? r$name$unit?
	chmod 640 $name$unit? r$name$unit?
	;;

md*)
	unit=${i#md}; blk=9; chr=27
	rm -f md${unit}? rmd${unit}?
	mknod md${unit}a  b $blk $(($unit * 16 + 0))
	mknod md${unit}c  b $blk $(($unit * 16 + 2))
#	mknod rmd${unit}a c $chr $(($unit * 16 + 0))
#	mknod rmd${unit}c c $chr $(($unit * 16 + 2))
	chgrp operator md${unit}? #rmd${unit}?
	chmod 640 md${unit}? #rmd${unit}?
	;;

bpf*|tun*)
	case $i in
	bpf*) name=bpf;	unit=${i#bpf};	chr=10;;
	tun*) name=tun;	unit=${i#tun};	chr=11;;
	esac
	rm -f $name$unit
	mknod $name$unit	c $chr $unit
	;;

ipl)
	rm -f ipl ipnat ipstate ipauth
	mknod ipl c 21 0
	mknod ipnat c 21 1
	mknod ipstate c 21 2
	mknod ipauth c 21 3
	chmod 600 ipl ipnat ipstate ipauth
	;;

lkm)
	rm -f lkm
	mknod lkm c 31 0
	chgrp kmem lkm
	chmod 640 lkm
	;;

random)
	rm -f random urandom
	mknod random c 24 0
	mknod urandom c 24 1
	chmod 444 random
	chmod 644 urandom
	;;

openfirm)
	rm -f openfirm
	mknod openfirm c 53 0
	chmod 444 openfirm
	;;

nvram)
	rm -f nvram
	mknod nvram c 33 0
	chmod 644 nvram
	;;

scsibus*)
	unit=${i#scsibus}
	rm -f scsibus$unit
	mknod scsibus$unit c 34 $unit
	chmod 644 scsibus$unit
	;;

usbs)
	makedev usb usb0 usb1 usb2 usb3 usb4 usb5 usb6 usb7
	makedev uhid0 uhid1 uhid2 uhid3
	makedev ulpt0 ulpt1
	makedev ttyU0 ttyU1
	makedev urio0
	makedev uscanner0 uscanner1
	;;

usb*)
	unit=${i#usb}
	if [ "$unit" = "" ]; then
	    unit=255
	    usb=usb
	else
	    usb=usb$unit
	fi
	major=39
	rm -f $usb
	mknod $usb c $major $unit
	chmod 600 $usb
	;;

uhid*)
	unit=${i#uhid}
	uhid=uhid$unit
	major=40
	rm -f $uhid
	mknod $uhid c $major $unit
	chmod 666 $uhid
	;;

ulpt*)
	unit=${i#ulpt}
	ulpt=ulpt$unit
	ulpn=ulpn$unit
	major=41
	rm -f $ulpt $ulpn
	mknod $ulpt c $major $unit
	mknod $ulpn c $major $(($unit + 64))
	chmod 600 $ulpt $ulpn
	;;

ugen*)
	unit=${i#ugen}
	ugen=ugen$unit
	major=42
	for j in 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15
	do
		ugenj=$ugen.$j
		rm -f $ugenj
		mknod $ugenj c $major $(($unit * 16 + ${j#0}))
		chmod 600 $ugenj
	done
	;;

urio*)
	unit=${i#urio}
	urio=urio$unit
	major=62
	rm -f $urio
	mknod $urio c $major $unit
	chmod 600 $urio
	;;

uscanner*)
	unit=${i#uscanner}
	uscanner=uscanner$unit
	major=52
	rm -f $uscanner
	mknod $uscanner c $major $unit
	chmod 600 $uscanner
	;;

isdn)
	rm -f isdn
	mknod isdn c 54 0
	chmod 600 isdn
	;;

isdnctl)
	rm -f isdnctl
	mknod isdnctl c 55 0
	chmod 600 isdnctl
	;;

isdnbchan*)
	unit=${i#isdnbchan}
	rm -f isdnbchan$unit
	mknod isdnbchan$unit c 56 $unit
	chmod 600 isdnbchan$unit
	;;

isdntel*)
	unit=${i#isdntel}
	rm -f isdntel$unit
	mknod isdntel$unit c 58 $unit
	chmod 600 isdntel$unit
	;;

isdntrc*)
	unit=${i#isdntrc}
	rm -f isdntrc$unit
	mknod isdntrc$unit c 57 $unit
	chmod 600 isdntrc$unit
	;;

pci*)
	unit=${i#pci}
	rm -f pci$unit
	mknod pci$unit c 60 $unit
	chmod 644 pci$unit
	;;

clockctl)
	rm -f clockctl
	mknod clockctl c 61 0
	chgrp ntpd clockctl
	chmod 660 clockctl
	;;

sysmon)
	major=62
	rm -f sysmon
	mknod sysmon c $major 0
	chmod 644 sysmon

	rm -f watchdog
	mknod watchdog c $major 1
	chmod 644 watchdog
	;;

local)
	if [ -f "$0.local" ]; then
		umask 0
		sh $0.local all
		umask 77
	fi
	;;

*)
	echo $i: unknown device
	;;

esac
done

}

makedev $*

#!/bin/sh -
#
#	$NetBSD: MAKEDEV,v 1.19 1999/09/18 00:23:37 hubertf Exp $
#
# Copyright (c) 1990 The Regents of the University of California.
# All rights reserved.
#
# Written and contributed by W. Jolitz 12/90
#
# Redistribution and use in source and binary forms are permitted provided
# that: (1) source distributions retain this entire copyright notice and
# comment, and (2) distributions including binaries display the following
# acknowledgement:  ``This product includes software developed by the
# University of California, Berkeley and its contributors'' in the
# documentation or other materials provided with the distribution and in
# all advertising materials mentioning features or use of this software.
# Neither the name of the University nor the names of its contributors may
# be used to endorse or promote products derived from this software without
# specific prior written permission.
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
#
#	@(#)MAKEDEV	5.2 (Berkeley) 6/22/90
#
###########################################################################
#
#   PLEASE RUN "cd ../share/man/man8 ; perl5 MAKEDEV2manpage.pl"
#   AFTER CHANGING THIS FILE, AND COMMIT THE UPDATED MANPAGE!
#
###########################################################################
#
# Device "make" file.  Valid arguments:
#	all	makes all known devices, including local devices.
#		Tries to make the 'standard' number of each type.
#	floppy	devices to be put on install floppies
#	std	standard devices
#	local	configuration specific devices
#
# Tapes:
#	st*	SCSI tapes
#
# Disks:
#	wd*	"winchester" disk drives (ST506,IDE,ESDI,RLL,...)
#	fd*	"floppy" disk drives (3 1/2", 5 1/4") (not yet)
#	sd*	SCSI disks
#	cd*	SCSI CD-ROM
#	md*	memory pseudo-disks
#	vnd*	"file" pseudo-disks
#	raid*	RAIDframe disk driver
#	ccd*	contatenated disk devices
#
# Console ports:
#	ttyE*	wscons
#	ttye*	ite consoles
#
# Pointing devices:
#	wsmouse* wscons mouse events
#
# Keyboard devices:
#	wskbd*	wscons keyboard events
#
# Terminal ports:
#	tty*	standard built-in serial ports
#
# Pseudo terminals:
#	pty*	set of 16 master and slave pseudo terminals
#
# USB devices:
#	usb*	Bus control devices used by usbd for attach/detach
#	uhid*	Generic HID devices
#	ulpt*	Printer devices
#	ugen*	Generic device
#	ttyU*	Modem
#
# Special purpose devices:
#	fd	file descriptors
#	bpf*	packet filter
#	ipl	ip filter
#	random	Random number generator
#	lkm	loadable kernel modules interface
#	audio	audio device
#	tun*	network tunnel driver
#	scsibus* SCSI busses
#	ss*	SCSI scanner
#	uk*	SCSI unknown
#	ch*	SCSI changer
#

dialin=0
dialout=524288		# high bit of the minor number
callunit=262144

PATH=/sbin:/usr/sbin:/bin:/usr/bin
umask 77
for i
do
case $i in

all)
	sh $0 std fd sd0 sd1 sd2 st0 st1 cd0 cd1 wd0 wd1 md0
	sh $0 ss0 ch0 uk0 uk1 vnd0 vnd1 ccd0 ccd1 ccd2 ccd3
	sh $0 random tty0 tty1 pty0 pty1 adb grf0 wscons
	sh $0 bpf0 bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7
	sh $0 tun0 tun1 ipl usbs
	sh $0 lkm nvram local raid0 raid1 raid2 raid3
	sh $0 scsibus0 scsibus1 scsibus2 scsibus3
	;;

floppy)
	sh $0 std sd0 sd1 sd2 tty0 tty1 pty0 wscons
	sh $0 st0 st1 cd0 cd1 wd0 wd1 md0
	;;

std)
	rm -f console drum mem kmem null zero io tty klog stdin stdout stderr
	mknod console		c 0 0
	mknod drum		c 6 0	; chmod 640 drum ; chgrp kmem drum
	mknod kmem		c 2 1	; chmod 640 kmem ; chgrp kmem kmem
	mknod mem		c 2 0	; chmod 640 mem	; chgrp kmem mem
	mknod null		c 2 2	; chmod 666 null
	mknod zero		c 2 12	; chmod 666 zero
	mknod tty		c 1 0	; chmod 666 tty
	mknod klog		c 5 0	; chmod 600 klog
	mknod stdin		c 32 0	; chmod 666 stdin
	mknod stdout		c 32 1	; chmod 666 stdout
	mknod stderr		c 32 2	; chmod 666 stderr
	;;

ttye*)
	chr=22; unit=${i#ttye}
	rm -f ttye$unit
	mknod ttye$unit	c $chr $unit
	chown root.wheel ttye$unit
	;;

grf*)
	chr=23; unit=${i#grf}
	rm -f grf$unit
	mknod grf$unit	c $chr $unit
	chown root.wheel grf$unit
	chmod 666 grf$unit
	;;

adb)
	rm -f adb
	mknod adb c 28 0
	chmod 666 adb
	;;

wscons)
	sh $0 ttyE0 ttyE1 ttyE2 ttyE3 ttyEcfg
	sh $0 wsmouse0 wsmouse1 wsmouse2 wsmouse3
	sh $0 wskbd0 wskbd1 wskbd2 wskbd3
	sh $0 ttyEcfg
	sh $0 wsmux
	;;

wsmux|wsmouse|wskbd)
	rm -f wsmouse wskbd
	mknod wsmouse c 43 0
	mknod wskbd c 43 1
	chown root.wheel wsmouse wskbd
	chmod 600 wsmouse wskbd
	;;

ttyEcfg)
	chr=35
	rm -f ttyEcfg
	mknod ttyEcfg c $chr 255
	chown root.wheel ttyEcfg
	chmod 600 ttyEcfg
	;;

ttyE*)
	chr=35; unit=${i#ttyE}
	rm -f ttyE$unit
	mknod ttyE$unit c $chr $unit
	chown root.wheel ttyE$unit
	;;

wskbd*)
	unit=${i#wskbd}
	wskbd=wskbd$unit
	major=36
	rm -f $wskbd
	mknod $wskbd c $major $unit
	chown root.wheel $wskbd
	chmod 600 $wskbd
	;;

wsmouse*)
	unit=${i#wsmouse}
	wsmouse=wsmouse$unit
	major=37
	rm -f $wsmouse
	mknod $wsmouse c $major $unit
	chown root.wheel $wsmouse
	chmod 600 $wsmouse
	;;

fd)
	rm -f fd/*
	mkdir fd > /dev/null 2>&1
	n=0
	while [ $n -lt 64 ]; do
		mknod fd/$n c 32 $n
		n=$(($n + 1))
	done
	chown -R root.wheel fd
	chmod 755 fd
	chmod 666 fd/*
	;;

ss*)
	case $i in
	ss*) name=ss;	unit=${i#ss};	chr=17;;
	esac
	rm -f $name$unit n$name$unit en$name$unit
	mknod $name$unit	c $chr $(($unit * 16 + 0))
	mknod n$name$unit	c $chr $(($unit * 16 + 1))
	mknod en$name$unit	c $chr $(($unit * 16 + 3))
	chgrp operator $name$unit n$name$unit en$name$unit
	chmod 640 $name$unit n$name$unit en$name$unit
	;;

ccd*|fd*|raid*|sd*|vnd*|wd*)
	case $i in
	ccd*) name=ccd;	unit=${i#ccd};	blk=3;	chr=26;;
#	fd*) name=fd;	unit=${i#fd};	blk=2;	chr=27;;
	sd*) name=sd;	unit=${i#sd};	blk=4;	chr=13;;
	raid*) name=raid; unit=${i#raid}; blk=12; chr=38;;
	vnd*) name=vnd;	unit=${i#vnd};	blk=2;	chr=25;;
	wd*) name=wd;	unit=${i#wd};	blk=10;	chr=30;;
	esac
	rm -f $name$unit? r$name$unit?
	mknod ${name}${unit}a	b $blk $(($unit * 16 + 0))
	mknod ${name}${unit}b	b $blk $(($unit * 16 + 1))
	mknod ${name}${unit}c	b $blk $(($unit * 16 + 2))
	mknod ${name}${unit}d	b $blk $(($unit * 16 + 3))
	mknod ${name}${unit}e	b $blk $(($unit * 16 + 4))
	mknod ${name}${unit}f	b $blk $(($unit * 16 + 5))
	mknod ${name}${unit}g	b $blk $(($unit * 16 + 6))
	mknod ${name}${unit}h	b $blk $(($unit * 16 + 7))
	mknod r${name}${unit}a	c $chr $(($unit * 16 + 0))
	mknod r${name}${unit}b	c $chr $(($unit * 16 + 1))
	mknod r${name}${unit}c	c $chr $(($unit * 16 + 2))
	mknod r${name}${unit}d	c $chr $(($unit * 16 + 3))
	mknod r${name}${unit}e	c $chr $(($unit * 16 + 4))
	mknod r${name}${unit}f	c $chr $(($unit * 16 + 5))
	mknod r${name}${unit}g	c $chr $(($unit * 16 + 6))
	mknod r${name}${unit}h	c $chr $(($unit * 16 + 7))
	chgrp operator $name$unit? r$name$unit?
	chmod 640 $name$unit? r$name$unit?
	;;

ttyU*)
	unit=${i#ttyU}
	ttyU=ttyU$unit
	dtyU=dtyU$unit
	ctyU=ctyU$unit
	major=44
	rm -f $ttyU $dtyU $ctyU
	mknod $ttyU c $major $(($unit + $dialin  ))
	mknod $dtyU c $major $(($unit + $dialout ))
	mknod $ctyU c $major $(($unit + $callunit))
	chown uucp.wheel $ttyU $dtyU $ctyU
	chmod 600 $ttyU $dtyU $ctyU
	;;

tty*)
	unit=${i#???}
	rm -f tty0$unit dty0$unit
	mknod tty0$unit c 12 $(($unit + $dialin ))
	mknod dty0$unit c 12 $(($unit + $dialout))
	chown uucp.wheel tty0$unit dty0$unit
	;;

pty*)
	class=${i#pty}
	case $class in
	0)      name=p;;
	1)      name=q;;
	2)      name=r;;
	3)      name=s;;
	4)      name=t;;
	5)      name=u;;
	6)      name=v
		echo "$0: $i: pty unit conflicts with console ttyv* devices."
		continue;;
	7)      name=w;;
	8)      name=x;;
	9)      name=y;;
	10)     name=z;;
	11)     name=P;;
	12)     name=Q;;
	13)     name=R;;
	14)     name=S;;
	15)     name=T;;
	*)      echo "$0: $i: pty unit must be between 0 and 15"
	        continue ;;
	esac
	rm -f tty$name[0-9a-f] pty$name[0-9a-f]
	for j in 0 1 2 3 4 5 6 7 8 9 a b c d e f
	do
		case $j in
		[0-9])  jn=$j ;;
		a)      jn=10 ;;
		b)      jn=11 ;;
		c)      jn=12 ;;
		d)      jn=13 ;;
		e)      jn=14 ;;
		f)      jn=15 ;;
		esac
		unit=$(($class * 16 + $jn))
		mknod tty$name$j c 3 $unit
		mknod pty$name$j c 4 $unit
	done
        chgrp wheel tty$name? pty$name?
        chmod 666 tty$name? pty$name?
	;;

st*)
	case $i in
	st*) name=st;	unit=${i#st};	chr=14;	blk=5;;
	esac
	rm -f $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit
	mknod $name$unit	b $blk $(($unit * 16 + 0))
	mknod n$name$unit	b $blk $(($unit * 16 + 1))
	mknod e$name$unit	b $blk $(($unit * 16 + 2))
	mknod en$name$unit	b $blk $(($unit * 16 + 3))
	mknod r$name$unit	c $chr $(($unit * 16 + 0))
	mknod nr$name$unit	c $chr $(($unit * 16 + 1))
	mknod er$name$unit	c $chr $(($unit * 16 + 2))
	mknod enr$name$unit	c $chr $(($unit * 16 + 3))
	chgrp operator $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit
	chmod 660 $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit
	;;

ch*|uk*)
	case $i in
	ch*) name=ch;	unit=${i#ch};	chr=16;;
	uk*) name=uk;	unit=${i#uk};	chr=18;;
	esac
	rm -f $name$unit
	mknod $name$unit	c $chr $unit
	chgrp operator $name$unit
	chmod 640 $name$unit
	;;

cd*)
	case $i in
	cd*) name=cd;	unit=${i#cd};	chr=15;	blk=6;;
	esac
	rm -f $name$unit? r$name$unit?
	mknod ${name}${unit}a	b $blk $(($unit * 8 + 0))
	mknod ${name}${unit}c	b $blk $(($unit * 8 + 2))
	mknod r${name}${unit}a	c $chr $(($unit * 8 + 0))
	mknod r${name}${unit}c	c $chr $(($unit * 8 + 2))
	chgrp operator $name$unit? r$name$unit?
	chmod 640 $name$unit? r$name$unit?
	;;

md*)
	case $i in
	md*) name=md;	unit=${i#md};	chr=27;	blk=9;;
	esac
	rm -f $name$unit? r$name$unit?
	mknod ${name}${unit}a	b $blk $(($unit * 8 + 0))
	mknod ${name}${unit}b	b $blk $(($unit * 8 + 1))
	mknod ${name}${unit}c	b $blk $(($unit * 8 + 2))
	mknod r${name}${unit}a	c $chr $(($unit * 8 + 0))
	mknod r${name}${unit}b	c $chr $(($unit * 8 + 1))
	mknod r${name}${unit}c	c $chr $(($unit * 8 + 2))
	chgrp operator $name$unit? r$name$unit?
	chmod 640 $name$unit? r$name$unit?
	;;

bpf*|tun*)
	case $i in
	bpf*) name=bpf;	unit=${i#bpf};	chr=10;;
	tun*) name=tun;	unit=${i#tun};	chr=11;;
	esac
	rm -f $name$unit
	mknod $name$unit	c $chr $unit
	chown root.wheel $name$unit
	;;

ipl)
	rm -f ipl ipnat ipstate ipauth
	mknod ipl c 21 0
	mknod ipnat c 21 1
	mknod ipstate c 21 2
	mknod ipauth c 21 3
	chown root.wheel ipl ipnat ipstate ipauth
	chmod 600 ipl ipnat ipstate ipauth
	;;

lkm)
	rm -f lkm
	mknod lkm c 31 0
	chown root.kmem lkm
	chmod 640 lkm
	;;

random)
	rm -f random urandom
	mknod random c 24 0
	mknod urandom c 24 1
	chown root.wheel random urandom
	chmod 444 random
	chmod 644 urandom
	;;

nvram)
	rm -f nvram
	mknod nvram c 33 0
	chown root.wheel nvram
	chmod 644 nvram
	;;

scsibus*)
	unit=${i#scsibus};
	rm -f scsibus$unit
	mknod scsibus$unit c 34 $unit
	chown root:wheel scsibus$unit
	chmod 644 scsibus$unit
	;;

usbs)
	sh $0 usb0 usb1
	sh $0 uhid0 uhid1 uhid2 uhid3
	sh $0 ulpt0 ulpt1
	sh $0 ttyU0 ttyU1
	;;

usb*)
	unit=${i#usb}
	usb=usb$unit
	major=39
	rm -f $usb
	mknod $usb c $major $unit
	chown root.wheel $usb
	chmod 600 $usb
	;;

uhid*)
	unit=${i#uhid}
	uhid=uhid$unit
	major=40
	rm -f $uhid
	mknod $uhid c $major $unit
	chown root.wheel $uhid
	chmod 666 $uhid
	;;

ulpt*)
	unit=${i#ulpt}
	ulpt=ulpt$unit
	major=41
	rm -f $ulpt
	mknod $ulpt c $major $unit
	chown root.wheel $ulpt
	chmod 600 $ulpt
	;;

ugen*)
	unit=${i#ugen}
	ugen=ugen$unit
	major=42
	for j in 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15
	do
		ugenj=$ugen.$j
		rm -f $ugenj
		mknod $ugenj c $major $(($unit * 16 + $j))
		chown root.wheel $ugenj
		chmod 600 $ugenj
	done
	;;

local)
	umask 0
	sh $0.local all
	umask 77
	;;

*)
	echo $i: unknown device
	;;

esac
done

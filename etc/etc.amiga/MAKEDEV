#!/bin/sh -
#
#	$NetBSD: MAKEDEV,v 1.38.2.3 1997/12/15 21:47:48 mellon Exp $
#
# Copyright (c) 1990 The Regents of the University of California.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#	This product includes software developed by the University of
#	California, Berkeley and its contributors.
# 4. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
#	from:
#	hp300/MAKEDEV (1/15/94), from:
#	@(#)MAKEDEV	5.5 (Berkeley) 5/28/91
#
# Device "make" file.  Valid arguments:
#	all	makes all known devices, including local devices,
#		Tries to make the ``standard'' number of each.
#	fd	makes fd/* for the fdescfs.
#	floppy	devices needed for install floppies
#	std	standard devices
#	local	configuration specific devices
#
# Tapes:
#	st*	SCSI tapes
#
# Disks:
#	fd*	Floppy disks
#	sd*	SCSI disks, includes flopticals
#	cd*	SCSI cdrom discs
#	vnd*	"file" pseudo-disks
#	ccd*	concatenated disk driver
#
# Console ports:
#	ttye*	ite bitmapped consoles
#
# Pointing devices:
#	mouse*	Amiga mice
#
# Terminal ports:
#	tty00	standard serial port.
#	ttyA*	mfc serial ports
#	ttyB*	msc serial ports
#	ttyC*	com style serial ports (DraCo, soon: HyperCom, GVP-I/O-Ext.)
#
# Pseudo terminals:
#	pty*	set of 16 master and slave pseudo terminals
#
# Printers:
#	par*	motherboard parallel port
#
# Special purpose devices:
#	grf*	custom chip (grf0), Retina Z2/Z3 (grf1/grf2),
#		Cirrus boards (grf3), A2410 (grf4) video,
#		CyberVision 64 (grf5), ET4000 boards (grf6)
#		or CyberVision 64/3D (grf7).
#	kbd	Amiga keyboard
#	view*	generic interface to graphic displays.
#	aconf	autoconfig information (not yet)
#	lkm	loadable kernel modules interface.
#	ipl	ip filter
#	random	Random number generator
#	bpf*	Berkeley Packet Filter
#	tun*	network tunnel driver
#	ss*	SCSI scanner
#	uk*	SCSI unknown
#	ch*	SCSI changer
#	audio*	one unit of the audio device. On Amiga machines, 
#		Unit 0 is custom chip audio, if configured.
#

PATH=/sbin:/bin:/usr/sbin:/usr/bin
umask 77
for i
do
case $i in
all)
	sh $0 std fd fd0 fd1 fd2 fd3 kbd mouse0 mouse1 par0
	sh $0 ttye0 ttye1 ttye2 ttye3 ttye4 ttye5 ttye6 ttye7
	sh $0 grf0 grf1 grf2 grf3 grf4 grf5 grf6 grf7
	sh $0 tty00 ttyA0 ttyA1
	sh $0 ttyB0 ttyB1 ttyB2 ttyB3 ttyB4 ttyB5 ttyB6 ttyB7
	sh $0 ttyC0 ttyC1 ttyC2 ttyC3 ttyC4 ttyC5 ttyC6 ttyC7
	sh $0 view00 view01 view02 view03 view04 view05 pty0 pty1
	sh $0 sd0 sd1 sd2 sd3 sd4 sd5 sd6 sd7 sd8 sd9 cd0 st0
	sh $0 ss0 ch0 uk0 uk1 ccd0 ccd1 ccd2 ccd3
	sh $0 vnd0 vnd1 vnd2 vnd3 vnd4 vnd5 vnd6
	sh $0 bpf0 bpf1 bpf2 bpf3 tun0 tun1 lkm ipl random local
	sh $0 audio0 audio1 audio2 audio3
	;;

floppy)
	sh $0 std fd0 fd1 fd2 fd3 kbd pty0 tun0 tun1
	sh $0 ttye0 ttye1 ttye2 ttye3 ttye4 ttye5 ttye6 ttye7
	sh $0 grf0 grf1 grf2 grf3 grf4 grf5 grf6 grf7
	sh $0 tty00 ttyA0 ttyB0 ttyC0
	sh $0 sd0 sd1 sd2 sd3 sd4 sd5 sd6 sd7 sd8 sd9 cd0 st0
	;;

std)
	rm -f console drum kmem mem reload null zero tty
	rm -f klog stdin stdout stderr
	mknod console		c 0 0
	mknod drum		c 3 0	; chmod 640 drum ; chgrp kmem drum
	mknod kmem		c 2 1	; chmod 640 kmem ; chgrp kmem kmem
	mknod mem		c 2 0	; chmod 640 mem ; chgrp kmem mem
	mknod reload		c 2 20	; chmod 600 reload
	mknod zero		c 2 12	; chmod 666 zero
	mknod null		c 2 2	; chmod 666 null
	mknod tty		c 1 0	; chmod 666 tty
	mknod klog		c 6 0	; chmod 600 klog
	mknod stdin		c 21 0	; chmod 666 stdin
	mknod stdout		c 21 1	; chmod 666 stdout
	mknod stderr		c 21 2	; chmod 666 stderr
	;;

fd)
	rm -f fd/*
	mkdir fd > /dev/null 2>&1
	n=0
	while [ $n -lt 64 ]; do
		mknod fd/$n c 21 $n
		n=$(($n + 1))
	done
	chown -R bin.bin fd
	chmod 555 fd
	chmod 666 fd/*
	;;

fd*)
	unit=${i#fd};	blk=2;	chr=18
	rm -f fd$unit? rfd$unit?
	case $unit in
	0|1|2|3)
		mknod fd${unit}a	b $blk $(($unit * 16 + 0))
		mknod fd${unit}b	b $blk $(($unit * 16 + 1))
		mknod rfd${unit}a	c $chr $(($unit * 16 + 0))
		mknod rfd${unit}b	c $chr $(($unit * 16 + 1))
		chgrp operator fd$unit? rfd$unit?
		chmod 640 fd$unit? rfd$unit?
		;;
	*)
		echo bad unit for floppy disk in: $i
		;;
	esac
	;;

sd*|vnd*|ccd*)
	case $i in
	sd*)	name=sd;	unit=${i#sd};	blk=4;	chr=8;;
	vnd*)	name=vnd;	unit=${i#vnd};	blk=6;	chr=19;;
	ccd*)	name=ccd;	unit=${i#ccd};	blk=8;	chr=7;;
	esac
	rm -f $name$unit? r$name$unit?
	mknod ${name}${unit}a	b $blk $(($unit * 16 + 0))
	mknod ${name}${unit}b	b $blk $(($unit * 16 + 1))
	mknod ${name}${unit}c	b $blk $(($unit * 16 + 2))
	mknod ${name}${unit}d	b $blk $(($unit * 16 + 3))
	mknod ${name}${unit}e	b $blk $(($unit * 16 + 4))
	mknod ${name}${unit}f	b $blk $(($unit * 16 + 5))
	mknod ${name}${unit}g	b $blk $(($unit * 16 + 6))
	mknod ${name}${unit}h	b $blk $(($unit * 16 + 7))
	mknod ${name}${unit}i	b $blk $(($unit * 16 + 8))
	mknod ${name}${unit}j	b $blk $(($unit * 16 + 9))
	mknod ${name}${unit}k	b $blk $(($unit * 16 + 10))
	mknod ${name}${unit}l	b $blk $(($unit * 16 + 11))
	mknod ${name}${unit}m	b $blk $(($unit * 16 + 12))
	mknod ${name}${unit}n	b $blk $(($unit * 16 + 13))
	mknod ${name}${unit}o	b $blk $(($unit * 16 + 14))
	mknod ${name}${unit}p	b $blk $(($unit * 16 + 15))
	mknod r${name}${unit}a	c $chr $(($unit * 16 + 0))
	mknod r${name}${unit}b	c $chr $(($unit * 16 + 1))
	mknod r${name}${unit}c	c $chr $(($unit * 16 + 2))
	mknod r${name}${unit}d	c $chr $(($unit * 16 + 3))
	mknod r${name}${unit}e	c $chr $(($unit * 16 + 4))
	mknod r${name}${unit}f	c $chr $(($unit * 16 + 5))
	mknod r${name}${unit}g	c $chr $(($unit * 16 + 6))
	mknod r${name}${unit}h	c $chr $(($unit * 16 + 7))
	mknod r${name}${unit}i	c $chr $(($unit * 16 + 8))
	mknod r${name}${unit}j	c $chr $(($unit * 16 + 9))
	mknod r${name}${unit}k	c $chr $(($unit * 16 + 10))
	mknod r${name}${unit}l	c $chr $(($unit * 16 + 11))
	mknod r${name}${unit}m	c $chr $(($unit * 16 + 12))
	mknod r${name}${unit}n	c $chr $(($unit * 16 + 13))
	mknod r${name}${unit}o	c $chr $(($unit * 16 + 14))
	mknod r${name}${unit}p	c $chr $(($unit * 16 + 15))
	chgrp operator $name$unit? r$name$unit?
	chmod 640 $name$unit? r$name$unit?
	;;

st*)
	case $i in
	st*) name=st;	unit=${i#st};	chr=20;	blk=5;;
	esac
	rm -f $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit \
		$name$unit[hml] [ne]$name$unit[hml] en$name$unit[hml] \
		r$name$unit[hml] [ne]r$name$unit[hml] enr$name$unit[hml]
	mknod $name${unit}	b $blk $(($unit * 16 + 0))
	mknod n$name${unit}	b $blk $(($unit * 16 + 1))
	mknod e$name${unit}	b $blk $(($unit * 16 + 2))
	mknod en$name${unit}	b $blk $(($unit * 16 + 3))
	mknod $name${unit}h	b $blk $(($unit * 16 + 4))
	mknod n$name${unit}h	b $blk $(($unit * 16 + 5))
	mknod e$name${unit}h	b $blk $(($unit * 16 + 6))
	mknod en$name${unit}h	b $blk $(($unit * 16 + 7))
	mknod $name${unit}m	b $blk $(($unit * 16 + 8))
	mknod n$name${unit}m	b $blk $(($unit * 16 + 9))
	mknod e$name${unit}m	b $blk $(($unit * 16 + 10))
	mknod en$name${unit}m	b $blk $(($unit * 16 + 11))
	mknod $name${unit}l	b $blk $(($unit * 16 + 12))
	mknod n$name${unit}l	b $blk $(($unit * 16 + 13))
	mknod e$name${unit}l	b $blk $(($unit * 16 + 14))
	mknod en$name${unit}l	b $blk $(($unit * 16 + 15))
	mknod r$name${unit}	c $chr $(($unit * 16 + 0))
	mknod nr$name${unit}	c $chr $(($unit * 16 + 1))
	mknod er$name${unit}	c $chr $(($unit * 16 + 2))
	mknod enr$name${unit}	c $chr $(($unit * 16 + 3))
	mknod r$name${unit}h	c $chr $(($unit * 16 + 4))
	mknod nr$name${unit}h	c $chr $(($unit * 16 + 5))
	mknod er$name${unit}h	c $chr $(($unit * 16 + 6))
	mknod enr$name${unit}h	c $chr $(($unit * 16 + 7))
	mknod r$name${unit}m	c $chr $(($unit * 16 + 8))
	mknod nr$name${unit}m	c $chr $(($unit * 16 + 9))
	mknod er$name${unit}m	c $chr $(($unit * 16 + 10))
	mknod enr$name${unit}m	c $chr $(($unit * 16 + 11))
	mknod r$name${unit}l	c $chr $(($unit * 16 + 12))
	mknod nr$name${unit}l	c $chr $(($unit * 16 + 13))
	mknod er$name${unit}l	c $chr $(($unit * 16 + 14))
	mknod enr$name${unit}l	c $chr $(($unit * 16 + 15))
	chgrp operator $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit \
		$name$unit[hml] [ne]$name$unit[hml] en$name$unit[hml] \
		r$name$unit[hml] [ne]r$name$unit[hml] enr$name$unit[hml]
	chmod 660 $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit \
		$name$unit[hml] [ne]$name$unit[hml] en$name$unit[hml] \
		r$name$unit[hml] [ne]r$name$unit[hml] enr$name$unit[hml]
	;;

cd*)
	case $i in
	cd*) name=cd;	unit=${i#cd};	blk=7;	chr=9;;
	esac
	rm -f $name$unit? r$name$unit?
	mknod ${name}${unit}a	b $blk $(($unit * 16 + 0))
	mknod ${name}${unit}c	b $blk $(($unit * 16 + 2))
	mknod r${name}${unit}a	c $chr $(($unit * 16 + 0))
	mknod r${name}${unit}c	c $chr $(($unit * 16 + 2))
	chgrp operator $name$unit? r$name$unit?
	chmod 640 $name$unit? r$name$unit?
	;;

ss*)
	case $i in
	ss*) name=ss;	unit=${i#ss};	chr=37;;
	esac
	rm -f $name$unit n$name$unit en$name$unit
	mknod $name$unit	c $chr $(($unit * 16 + 0))
	mknod n$name$unit	c $chr $(($unit * 16 + 1))
	mknod en$name$unit	c $chr $(($unit * 16 + 3))
	chgrp operator $name$unit n$name$unit en$name$unit
	chmod 640 $name$unit n$name$unit en$name$unit
	;;

ch*|uk*)
	case $i in
	ch*) name=ch;	unit=${i#ch};	chr=38;;
	uk*) name=uk;	unit=${i#uk};	chr=39;;
	esac
	rm -f $name$unit
	mknod $name$unit	c $chr $unit
	chgrp operator $name$unit
	chmod 640 $name$unit
	;;

tty0*|ttyA*|ttyB*|ttyC*)
	case $i in
	tty0*) name=tty0; mname=ttym;	unit=${i#tty0};	chr=12; mult=1; add=128;;
	ttyA*) name=ttyA; mname=ttyAm;	unit=${i#ttyA};	chr=17; mult=1; add=128;;
	ttyB*) name=ttyB; mname=ttyBm;	unit=${i#ttyB};	chr=31; mult=2; add=1;;
	ttyC*) name=ttyC; mname=ttyCm;	unit=${i#ttyC};	chr=32; mult=1; add=0;;
	esac
	rm -f $name$unit $mname$unit
	rm -f ser$unit
	rm -f ttyM$unit
	mknod $name$unit	c $chr $(($unit * $mult))
	mknod $mname$unit	c $chr $(($unit * $mult + $add))
	chown uucp:wheel $name$unit $mname$unit
	;;

par*)
	unit=${i#par};	chr=11
	rm -f par$unit
	case $unit in
	0)
		mknod par$unit	c $chr $unit
		;;
	*)
		echo bad unit for par in: $i
		;;
	esac
	;;


ttye*)
	unit=${i#ttye};	chr=13
	rm -f ttye$unit
	rm -f ite*
	case $unit in
	0|1|2|3|4|5|6|7)
		mknod ttye$unit	c $chr $unit
		;;
	*)
		echo bad unit for ttye in: $i
		;;
	esac
	;;

grf*)
	unit=${i#grf};	chr=10
	rm -f grf$unit
	case $unit in
	0|1|2|3|4|5|6|7)
		mknod grf$unit	c $chr $unit
		chmod 666 grf$unit
		;;
	*)
		echo bad unit for grf in: $i
		;;
	esac
# for those that need it, also make overlay and image devices:
	rm -f grfov$unit grfim$unit
	case $unit in
	4)
		mknod grfov$unit	c $chr $(($unit + 16))
		chmod 666 grfov$unit
		mknod grfim$unit	c $chr $(($unit + 32))
		chmod 666 grfim$unit
		;;
	esac
	;;

mouse*)
	unit=${i#mouse};	chr=15
	rm -f mouse$unit
	case $unit in
	0|1)
		mknod mouse$unit c	$chr $unit
		chmod 666 mouse$unit
		if [ $unit = 0 ]
		then 
			rm -f mouse; ln -s mouse$unit mouse
		fi
		;;
	*)
		echo bad unit for mouse in: $i
		;;
	esac
	;;

kbd)
	rm -f kbd
	mknod kbd c 14 0
	;;


view*)
	unit=${i#view};	chr=16
	rm -f view$unit
	mknod view$unit	c $chr $unit
	chmod 666 view$unit
	;;

pty*)
	class=${i#pty}
	case $class in
	0)      name=p;;
	1)      name=q;;
	2)      name=r;;
	3)      name=s;;
	4)      name=t;;
	5)      name=u;;
	6)      name=v;;
	7)      name=w;;
	8)      name=x;;
	9)      name=y;;
	10)     name=z;;
	11)     name=P;;
	12)     name=Q;;
	13)     name=R;;
	14)     name=S;;
	15)     name=T;;
	*)      echo "$0: $i: pty unit must be between 0 and 15"
	        continue ;;
	esac
	rm -f tty$name[0-9a-f] pty$name[0-9a-f]
	for j in 0 1 2 3 4 5 6 7 8 9 a b c d e f
	do
		case $j in
		[0-9])  jn=$j ;;
		a)      jn=10 ;;
		b)      jn=11 ;;
		c)      jn=12 ;;
		d)      jn=13 ;;
		e)      jn=14 ;;
		f)      jn=15 ;;
		esac
		unit=$(($class * 16 + $jn))
		mknod tty$name$j c 4 $unit
		mknod pty$name$j c 5 $unit
	done
        chgrp wheel tty$name? pty$name?
        chmod 666 tty$name? pty$name?
	;;

bpf*|tun*)
	case $i in
	bpf*) name=bpf;	unit=${i#bpf};	chr=22;;
	tun*) name=tun;	unit=${i#tun};	chr=23;;
	esac
	rm -f $name$unit
	mknod $name$unit	c $chr $unit
	chown root.wheel $name$unit
	;;

lkm)
        rm -f lkm
        mknod lkm c 24 0
        chown root:kmem lkm
        chmod 640 lkm
        ;;

ipl)
	rm -f ipl ipnat ipstate ipauth
	mknod ipl c 40 0
	mknod ipnat c 40 1
	mknod ipstate c 40 2
	mknod ipauth c 40 3
	chown root.wheel ipl ipnat ipstate ipauth
	chmod 600 ipl ipnat ipstate ipauth
	;;

audio*)
	unit=${i#audio}
	audio=audio$unit
	sound=sound$unit
	mixer=mixer$unit
	major=41
	audioctl=audioctl$unit
	if [ "$unit" = "" ]; then unit=0; fi
	rm -f $audio $sound $mixer $audioctl
	mknod $sound    c $major $(($unit + 0))
	mknod $audio    c $major $(($unit + 128))
	mknod $mixer    c $major $(($unit + 16))
	mknod $audioctl c $major $(($unit + 192))
	chown root.wheel $audio $sound $mixer $audioctl
	chmod 666 $audio $sound $mixer $audioctl
	;;


random)
	rm -f random urandom
	mknod random c 42 0
	mknod urandom c 42 1
	chown root.wheel random urandom
	chmod 444 random
	chmod 644 urandom
	;;

local)
	umask 0
	sh $0.local all
	umask 77
	;;

*)
	echo $i: unknown device
	;;
esac
done

#!/bin/sh -
#
#	$NetBSD: MAKEDEV,v 1.75.2.2 2002/12/12 23:15:32 he Exp $
#
# Copyright (c) 1990 The Regents of the University of California.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#	This product includes software developed by the University of
#	California, Berkeley and its contributors.
# 4. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
#	@(#)MAKEDEV	5.5 (Berkeley) 5/28/91
#
###########################################################################
#
#   PLEASE RUN "cd ../share/man/man8 ; perl5 MAKEDEV2manpage.pl"
#   AFTER CHANGING THIS FILE, AND COMMIT THE UPDATED MANPAGE!
#
###########################################################################
#
# Device "make" file.  Valid arguments:
#	std	standard devices
#	local	configuration specific devices
#	isdns	make ISDN devices
# Tapes:
#	st*	SCSI tape
# Disks:
#	sd*	SCSI disks
#	cd*	SCSI cdrom drives
#	ch*	SCSI media changer
#	xy*	Xylogic 450/451 disks
#	xd*	Xylogic 753/7053 disks
#	fd*	Floppies
#	vnd*	"file" pseudo-disks
#	ccd*	concatenated disk devices
#	raid*	RAIDframe disk driver
#	md*	memory pseudo-disk devices
# Pseudo terminals:
#	pty*	set of 62 master and slave pseudo terminals
#	opty	first 16 ptys, to save inodes on install media
# Printers:
#	bpp*	parallel printer port
# ISDN devices:
#	isdn	communication between userland isdnd and kernel
#	isdnctl	control device
#	isdnbchan* raw b-channel access
#	isdntel*	telephony device
#	isdntrc*	trace device
# Special purpose devices:
#	clockctl clock control for non root users
#	audio*	Audio devices.
#	openprom	OPENPROM and EEPROM interface
#	bwtwo*	monochromatic frame buffer
#	cgtwo*	8-bit color frame buffer
#	cgthree*	8-bit color frame buffer
#	cgfour*	8-bit color frame buffer
#	cgsix*	accelerated 8-bit color frame buffer
#	cgeight*	24-bit color frame buffer
#	tcx*	accelerated 8/24-bit color frame buffer
#	bpf*	packet filter
#	lkm	loadable kernel modules interface
#	tun*	network tunnel driver
#	ipl	IP filter
#	random	Random number generator
#	scsibus* SCSI busses, see scsi(4), scsictl(8)
#	ses*    SES/SAF-TE SCSI Devices
#	ss*	SCSI scanner
#	uk*	unknown SCSI device
#	pci*	PCI bus access devices
#	magma*  Magma multiport serial/parallel cards
#	clcd*   CL18xx-based multiport serial cards

dialin=0
dialout=524288		# high bit of the minor number

PATH=/sbin:/bin/:/usr/bin:/usr/sbin:/usr/etc
umask 77

# Check if we have fdesc mounted
if [ -d fd ]; then
	case "`df fd`" in
	*fdesc*) nofdesc=false;;
	*) nofdesc=true;;
	esac
else
	nofdesc=true
fi

makedev()
{

for i
do
case $i in

all)
	sh -$- $0 std ttya ttyb ttyc ttyd
	sh -$- $0 fd sd0 sd1 sd2 sd3 sd4 xd0 xd1 xd2 xd3 xy0 xy1 xy2 xy3
	sh -$- $0 cd0 st0 st1 fd0 md0 md1
	sh -$- $0 audio0 audio1 audio2 audio3
	sh -$- $0 pty0 vnd0 vnd1 vnd2 vnd3 audio
	sh -$- $0 tun0 tun1 tun2 tun3
	sh -$- $0 bpp
	sh -$- $0 ccd0 ccd1 ccd2 ccd3
	sh -$- $0 raid0 raid1 raid2 raid3 raid4 raid5 raid6 raid7
	sh -$- $0 bpf0 bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7
	sh -$- $0 bwtwo0 cgthree0 cgsix0 tcx0
	sh -$- $0 bwtwo1 cgthree1 cgsix1 tcx1
	sh -$- $0 cgtwo0 cgfour0 cgeight0
	sh -$- $0 scsibus0 scsibus1 scsibus2 scsibus3
	sh -$- $0 lkm random local ipl cfs0 apm apmctl tctrl0
	sh -$- $0 isdns
	sh -$- $0 pci0
	sh -$- $0 clockctl
	;;

floppy|ramdisk)
	sh -$- $0 std ttya ttyb ttyc ttyd opty
	sh -$- $0 sd0 sd1 sd2 sd3 sd4 sd5 md0
	sh -$- $0 cd0 cd1 st0 st1 fd0
	;;

isdns)
	makedev isdn isdnctl isdnbchan0 isdnbchan1 isdntel0 isdntel1 isdntrc0 isdntrc1
	;;

std)
	rm -f console kmem mem null zero eeprom openprom drum klog \
		ttya ttyb fb mouse kbd
	mknod console		c 0 0
	mknod kmem		c 3 1	; chmod 640 kmem ; chgrp kmem kmem
	mknod mem		c 3 0	; chmod 640 mem ; chgrp kmem mem
	mknod null		c 3 2	; chmod 666 null
	mknod zero		c 3 12	; chmod 666 zero
	mknod eeprom		c 3 11  ; chmod 640 eeprom ; chgrp kmem eeprom
	mknod openprom		c 70 0  ; chmod 640 openprom;chgrp kmem openprom
	mknod drum		c 7 0	; chmod 640 drum ; chgrp kmem drum
	mknod klog		c 16 0	; chmod 600 klog
	if $nofdesc; then
		rm -f tty stdin stdout stderr
		mknod tty	c 2 0	; chmod 666 tty
		mknod stdin	c 24 0	; chmod 666 stdin
		mknod stdout	c 24 1	; chmod 666 stdout
		mknod stderr	c 24 2	; chmod 666 stderr
	fi

	mknod fb		c 22 0 ; chmod 666 fb
	mknod mouse		c 13 0 ; chmod 666 mouse
	mknod kbd		c 29 0 ; chmod 666 kbd
	makedev bpp
	;;

tty[abcd])
	unit=${i#???}
	case $unit in
	a)	index=0;;
	b)	index=1;;
	c)	index=2;;
	d)	index=3;;
	esac
	rm -f tty$unit dty$unit
	mknod tty$unit c 12 $(($index + $dialin ))
	mknod dty$unit c 12 $(($index + $dialout))
	chown uucp tty$unit dty$unit
	;;

ttyC*)
	unit=${i#ttyC}
	rm -f ttyC$unit dtyC$unit
	mknod ttyC$unit c 36 $(($unit + $dialin ))
	mknod dtyC$unit c 36 $(($unit + $dialout))
	chown uucp ttyC$unit dtyC$unit
	;;

fd)
	if $nofdesc; then
		rm -f fd/*
		mkdir fd 2>/dev/null
		n=0
		while [ $n -lt 64 ]; do
			mknod fd/$n c 24 $n
			n=$(($n + 1))
		done
		chmod 755 fd
		chmod 666 fd/*
	fi
	;;

bwtwo*)
	unit=${i#bwtwo}
	rm -f bwtwo$unit
	mknod bwtwo$unit	c 27 $unit; chmod 666 bwtwo$unit
	;;

cfs*)
	unit=${i#cfs}
	rm -f cfs$unit
	mknod cfs$unit		c 47 $unit; chmod 600 cfs$unit
	;;

cgtwo*)
	unit=${i#cgtwo}
	rm -f cgtwo$unit
	mknod cgtwo$unit	c 31 $unit; chmod 666 cgtwo$unit
	;;

cgthree*)
	unit=${i#cgthree}
	rm -f cgthree$unit
	mknod cgthree$unit	c 55 $unit; chmod 666 cgthree$unit
	;;

cgfour*)
	unit=${i#cgfour}
	rm -f cgfour$unit
	mknod cgfour$unit	c 39 $unit; chmod 666 cgfour$unit
	;;

cgsix*)
	unit=${i#cgsix}
	rm -f cgsix$unit
	mknod cgsix$unit	c 67 $unit; chmod 666 cgsix$unit
	;;

cgeight*)
	unit=${i#cgeight}
	rm -f cgeight$unit
	mknod cgeight$unit	c 64 $unit; chmod 666 cgeight$unit
	;;

tcx*)
	unit=${i#tcx}
	rm -f tcx$unit
	mknod tcx$unit		c 109 $unit; chmod 666 tcx$unit
	;;

audio*)
	unit=${i#audio}
	audio=audio$unit
	sound=sound$unit
	mixer=mixer$unit
	major=69
	audioctl=audioctl$unit
	if [ "$unit" = "" ]; then unit=0; fi
	rm -f $audio $sound $mixer $audioctl
	mknod $sound    c $major $(($unit + 0))
	mknod $audio    c $major $(($unit + 128))
	mknod $mixer    c $major $(($unit + 16))
	mknod $audioctl c $major $(($unit + 192))
	chmod 666 $audio $sound $mixer $audioctl
	;;

bpf*)
	unit=${i#bpf}
	rm -f bpf$unit
	mknod bpf$unit c 105 $unit
	chmod 600 bpf$unit
	;;

tun*)
	unit=${i#tun}
	rm -f tun$unit
	mknod tun$unit c 111 $unit
	chmod 600 tun$unit
	;;

md*)
	unit=${i#md}; blk=5; chr=61
	rm -f md${unit}? rmd${unit}?
	mknod md${unit}a  b $blk $(($unit * 8 + 0))
	mknod md${unit}c  b $blk $(($unit * 8 + 2))
#	mknod rmd${unit}a c $chr $(($unit * 8 + 0))
#	mknod rmd${unit}c c $chr $(($unit * 8 + 2))
	chgrp operator md${unit}? #rmd${unit}?
	chmod 640 md${unit}? #rmd${unit}?
	;;

ccd*|fd*|sd*|xd*|xy*|cd*|vnd*|raid*)
	case $i in
	ccd*)	name=ccd;	unit=${i#ccd};	blk=9;	chr=23;;
	fd*)	name=fd;	unit=${i#fd};	blk=16;	chr=54;;
	sd*)	name=sd;	unit=${i#sd};	blk=7;	chr=17;;
	xd*)	name=xd;	unit=${i#xd};	blk=10;	chr=42;;
	xy*)	name=xy;	unit=${i#xy};	blk=3;	chr=9;;
	cd*)	name=cd;	unit=${i#cd};	blk=18;	chr=58;;
	raid*)	name=raid;	unit=${i#raid};	blk=25;	chr=121;;
	vnd*)	name=vnd;	unit=${i#vnd};	blk=8;	chr=110;;
	esac
	case $unit in
	0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|\
	17|18|19|20|21|22|23|24|25|26|27|28|29|30|31)
		rm -f ${name}${unit}[a-h] r${name}${unit}[a-h]
		mknod ${name}${unit}c	b $blk $(($unit * 8 + 2))
		mknod ${name}${unit}a	b $blk $(($unit * 8 + 0))
		mknod ${name}${unit}b	b $blk $(($unit * 8 + 1))
		mknod ${name}${unit}d	b $blk $(($unit * 8 + 3))
		mknod ${name}${unit}e	b $blk $(($unit * 8 + 4))
		mknod ${name}${unit}f	b $blk $(($unit * 8 + 5))
		mknod ${name}${unit}g	b $blk $(($unit * 8 + 6))
		mknod ${name}${unit}h	b $blk $(($unit * 8 + 7))
		mknod r${name}${unit}a	c $chr $(($unit * 8 + 0))
		mknod r${name}${unit}b	c $chr $(($unit * 8 + 1))
		mknod r${name}${unit}c	c $chr $(($unit * 8 + 2))
		mknod r${name}${unit}d	c $chr $(($unit * 8 + 3))
		mknod r${name}${unit}e	c $chr $(($unit * 8 + 4))
		mknod r${name}${unit}f	c $chr $(($unit * 8 + 5))
		mknod r${name}${unit}g	c $chr $(($unit * 8 + 6))
		mknod r${name}${unit}h	c $chr $(($unit * 8 + 7))
		chgrp operator ${name}${unit}[a-h] r${name}${unit}[a-h]
		chmod 640 ${name}${unit}[a-h] r${name}${unit}[a-h]
		;;
	*)
		echo bad unit for disk in: $i
		;;
	esac
	;;

st*)
	case $i in
	st*) name=st; unit=${i#st}; blk=11; chr=18;;
	esac
	rm -f $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit
	mknod ${name}${unit}	b $blk $(($unit * 16 + 0))
	mknod n${name}${unit}	b $blk $(($unit * 16 + 1))
	mknod e${name}${unit}	b $blk $(($unit * 16 + 2))
	mknod en${name}${unit}	b $blk $(($unit * 16 + 3))
	mknod r${name}${unit}	c $chr $(($unit * 16 + 0))
	mknod nr${name}${unit}	c $chr $(($unit * 16 + 1))
	mknod er${name}${unit}	c $chr $(($unit * 16 + 2))
	mknod enr${name}${unit}	c $chr $(($unit * 16 + 3))
	chgrp operator ${name}${unit} n${name}${unit} \
		e$name$unit en$name$unit \
		r${name}${unit} nr${name}${unit} \
		er${name}${unit} enr${name}${unit}
	chmod 660 ${name}${unit} n${name}${unit} \
		e$name$unit en$name$unit \
		r${name}${unit} nr${name}${unit} \
		er${name}${unit} enr${name}${unit}
	;;

ss*)
	case $i in
	ss*) name=ss;	unit=${i#ss};	chr=59;;
	esac
	rm -f $name$unit n$name$unit en$name$unit
	mknod $name$unit	c $chr $(($unit * 16 + 0))
	mknod n$name$unit	c $chr $(($unit * 16 + 1))
	mknod en$name$unit	c $chr $(($unit * 16 + 3))
	chgrp operator $name$unit n$name$unit en$name$unit
	chmod 640 $name$unit n$name$unit en$name$unit
	;;

ses*|ch*|uk*)
	case $i in
	ch*) name=ch;  unit=${i#ch}; chr=19;;
	uk*) name=uk;  unit=${i#uk}; chr=60;;
	ses*) name=ses; unit=${i#ses};  chr=4;;
	esac
	rm -f $name$unit
	mknod ${name}${unit}	c $chr $(($unit + 0))
	chgrp operator ${name}${unit}
	chmod 640 ${name}${unit}
	;;

lkm)
	rm -f lkm
	mknod lkm c 112 0
	chgrp kmem lkm
	chmod 640 lkm
	;;

ipl)
	rm -f ipl ipnat ipstate ipauth
	mknod ipl c 25 0
	mknod ipnat c 25 1
	mknod ipstate c 25 2
	mknod ipauth c 25 3
	chmod 600 ipl ipnat ipstate ipauth
	;;

opty)
	rm -f ttyp[0-9a-f] ptyp[0-9a-f]
	for j in 0 1 2 3 4 5 6 7 8 9 a b c d e f
	do
		case $j in
		[0-9])	jn=$j ;;
		a)	jn=10 ;;
		b)	jn=11 ;;
		c)	jn=12 ;;
		d)	jn=13 ;;
		e)	jn=14 ;;
		f)	jn=15 ;;
		esac
		mknod ttyp$j c 20 $jn
		mknod ptyp$j c 21 $jn
	done
	chmod 666 ttyp[0-9a-f] ptyp[0-9a-f]
	;;

		
pty*)
	class=${i#pty}
	name=`echo pqrstuvwxyzPQRST | dd bs=1 count=1 skip=$class 2>/dev/null`
	case $name in
	v)	echo "$0: $i: pty unit conflicts with console ttyv0 device."
		continue;;
	?)      ;;
	*)      echo "$0: $i: pty unit must be between 0 and 15"
	        continue ;;
	esac
	rm -f tty$name[0-9a-zA-Z] pty$name[0-9a-zA-Z]
	jn=0
	while [ $jn -lt 62 ]
	do
		j=`echo 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ | dd bs=1 count=1 skip=$jn 2>/dev/null`
		skip=0
		if [ $jn -ge 16 ]; then
			skip=$(($class * 30 + 256 - 16))
		fi
		unit=$(($class * 16 + $jn + $skip))
		mknod tty$name$j c 20 $unit
		mknod pty$name$j c 21 $unit
		jn=$(($jn + 1))
	done
	chmod 666 tty$name[0-9a-zA-Z] pty$name[0-9a-zA-Z]
	;;

random)
	rm -f random urandom
	mknod random c 119 0
	mknod urandom c 119 1
	chmod 444 random
	chmod 644 urandom
	;;

magma*)
	unit=${i#magma}
	if [ 0$unit -gt 3 ]
	then
		echo "bad unit for $i: $unit"
		break
	fi

	rm -f tty$unit[0-9a-f] bpp$unit[01]
	for j in 0 1 2 3 4 5 6 7 8 9 a b c d e f
	do
		case $j in
		[0-9])  jn=$j ;;
		a)      jn=10 ;;
		b)      jn=11 ;;
		c)      jn=12 ;;
		d)      jn=13 ;;
		e)      jn=14 ;;
		f)      jn=15 ;;
		esac
		mknod tty$unit$j c 100 $(($unit * 64 + $jn))
	done

	mknod bpp${unit}0 c 101 $(($unit * 64 + 0))
	mknod bpp${unit}1 c 101 $(($unit * 64 + 1))
	;;

clcd*)
	unit=${i#clcd}
	if [ 0$unit -gt 7 ]
	then
		echo "bad unit for $i: $unit"
		break
	fi

	rm -f ttyA$unit[0-7] dtyA$unit[0-7]
	for j in 0 1 2 3 4 5 6 7
	do
		mknod ttyA$unit$j c 124 $(($unit * 8 + $j + $dialin))
		mknod dtyA$unit$j c 124 $(($unit * 8 + $j + $dialout))
	done
	chown uucp ttyA$unit[0-9a-f] dtyA$unit[0-9a-f]

	;;

bpp*)
	unit=${i#bpp}
	rm -f bpp$unit
	mknod bpp$unit c 107 $(($unit + 0))
	chmod 600 bpp$unit
	;;

scsibus*)
	unit=${i#scsibus}
	rm -f scsibus$unit
	mknod scsibus$unit c 120 $unit
	chmod 644 scsibus$unit
	;;

apm*)
	rm -f apmctl
	ln -fs tctrl0 apm
	mknod apmctl c 71 8
	chmod 644 apmctl
	;;

tctrl*)
	unit=${i#tctrl}
	rm -f tctrl$unit
	mknod tctrl$unit	c 71 $unit
	chmod 666 tctrl$unit
	;;

isdn)
	rm -f isdn
	mknod isdn c 72 0
	chmod 600 isdn
	;;

isdnctl)
	rm -f isdnctl
	mknod isdnctl c 73 0
	chmod 600 isdnctl
	;;

isdnbchan*)
	unit=${i#isdnbchan}
	rm -f isdnbchan$unit
	mknod isdnbchan$unit c 74 $unit
	chmod 600 isdnbchan$unit
	;;

isdntel*)
	unit=${i#isdntel}
	rm -f isdntel$unit
	mknod isdntel$unit c 76 $unit
	chmod 600 isdntel$unit
	;;

isdntrc*)
	unit=${i#isdntrc}
	rm -f isdntrc$unit
	mknod isdntrc$unit c 75 $unit
	chmod 600 isdntrc$unit
	;;

pci*)
	unit=${i#pci}
	rm -f pci$unit
	mknod pci$unit c 123 $unit
	chmod 644 pci$unit
	;;

clockctl)
	rm -f clockctl
	mknod clockctl c 125 0
	chgrp ntpd clockctl
	chmod 660 clockctl
	;;

local)
	if [ -f "$0.local" ]; then
		umask 0
		sh $0.local all
		umask 77
	fi
	;;

*)
	echo $i: unknown device
	;;
esac
done

}

makedev $*

#!/bin/sh -
#	$NetBSD: MAKEDEV,v 1.2.2.1 2002/08/10 00:08:47 lukem Exp $
#
# Copyright (c) 1990 The Regents of the University of California.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#	This product includes software developed by the University of
#	California, Berkeley and its contributors.
# 4. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
###########################################################################
#
#   PLEASE RUN "cd ../share/man/man8 ; perl5 MAKEDEV2manpage.pl"
#   AFTER CHANGING THIS FILE, AND COMMIT THE UPDATED MANPAGE!
#
###########################################################################
#
# Device "make" file.  Valid arguments:
#	all	Makes all known devices, including local devices.
#		If units are expected for a device MAKEDEV supplies the
#		standard numbers.
#	minimal	A minimal set of devices for install disks, etc.
#	std	The standard devices (console, drum, klog, kmem, mem,
#		null, stderr, stdin, stdout, tty, zero).
#	local	Configuration specific devices which are created by running
#		the MAKEDEV.local shell script with the argument "all".
#
# Tapes:
#	st*	SCSI tape
#
# Disks:
#	wd*	IDE disk drives
#	sd*	SCSI or ATAPI disk drives
#	cd*	SCSI or ATAPI CD-ROM
#	ccd*	concatenated disk driver
#	md*	memory pseudo-disk devices
#	vnd*	file pseudo-disks
#	raid*	RAIDframe disk devices
#
# Terminals:
#	ttyE?	Workstation console ("wscons") glass-tty emulators
#	com*	standard PC COM ports			(XXX)
#	tty*	alias for PC COM ports, this is what the system really wants
#
# Pseudo terminals:
#	pty*	set of 62 master and slave pseudo terminals
#	opty	first 16 ptys, to save inodes on install media
#
# Printers:
#	lpt*	stock lp
#	lpa*	interruptless lp
#	arcpp*	Archimedes parallel port
#
# Special purpose devices:
#	clockctl clock control for non root users
#	fd	file descriptors (/dev/fd/*)
#	bpf*	Berkeley packet filter devices
#	ipl	IP filter
#	random	Random number generator, see rnd(4)
#	tun*	network tunnel driver
#	cfs*	Coda file system device
#	wsmux*	wscons event multiplexor

dialin=0
dialout=524288
callunit=262144

PATH=/sbin:/usr/sbin:/bin:/usr/bin
umask 77

# Check if we have fdesc mounted
if [ -d fd ]; then
	case "`df fd`" in
	*fdesc*) nofdesc=false;;
	*) nofdesc=true;;
	esac
else
	nofdesc=true
fi

makedev()
{

for i
do
case $i in

all)
	makedev std wscons fd pty0
	makedev vnd0 vnd1 vnd2 vnd3
	makedev ccd0 ccd1 ccd2 ccd3 md0 md1
	makedev wd0 wd1 sd0 sd1
	makedev wskbd0 wsmouse0
	makedev com0 lpt0 arcpp0
	makedev clockctl
	;;

ramdisk)
	makedev std wd0 wd1 wd2 wd3 md0 md1 sd0 sd1 sd2 sd3
	makedev opty ttyE0 wskbd0 ttyEcfg
	makedev cd0 cd1
	;;

wscons)
	makedev ttyE0 ttyE1 ttyE2 ttyE3 ttyE4 ttyE5 ttyE6 ttyE7
	makedev wsmouse0 wsmouse1 wsmouse2 wsmouse3
	makedev wskbd0 wskbd1 wskbd2 wskbd3
	makedev wsmux0 wsmux1 wsmux2 wsmux3
	makedev wsmouse wskbd
	makedev ttyEcfg
	;;

wskbd*)
	major=11
	unit=${i#wskbd}
	wskbd=wskbd$unit
	rm -f $wskbd
	mknod $wskbd c $major $unit
	chmod 600 $wskbd
	;;

wsmouse*)
	major=12
	unit=${i#wsmouse}
	wsmouse=wsmouse$unit
	rm -f $wsmouse
	mknod $wsmouse c 12 $unit
	chmod 600 $wsmouse
	;;

wsmouse)
	rm -f wsmouse
	mknod wsmouse c 13 0
	chmod 600 wsmouse
	;;

wskbd)
	rm -f wskbd
	mknod wskbd c 13 1
	chmod 600 wskbd
	;;

wsmux*)
	unit=${i#wsmux}
	unitctl=$(($unit + 128))
	wsmux=wsmux$unit
	wsmuxctl=wsmuxctl$unit
	major=13
	rm -f $wsmux $wsmuxctl
	mknod $wsmux c $major $unit
	chmod 600 $wsmux
	mknod $wsmuxctl c $major $unitctl
	chmod 200 $wsmuxctl
	;;

std)
	rm -f console drum mem kmem null zero io klog
	mknod console		c 0 0
	mknod kmem		c 2 1	; chmod 640 kmem ; chgrp kmem kmem
	mknod mem		c 2 0	; chmod 640 mem ; chgrp kmem mem
	mknod null		c 2 2	; chmod 666 null
	mknod zero		c 2 3	; chmod 666 zero
	mknod drum		c 3 0	; chmod 640 drum ; chgrp kmem drum
	mknod klog		c 6 0	; chmod 600 klog
	if $nofdesc; then
		rm -f tty stdin stdout stderr
		mknod tty	c 1 0	; chmod 666 tty
		mknod stdin	c 7 0	; chmod 666 stdin
		mknod stdout	c 7 1	; chmod 666 stdout
		mknod stderr	c 7 2	; chmod 666 stderr
	fi
	;;

fd)
	if $nofdesc; then
		major=7
		rm -f fd/*
		mkdir fd 2>/dev/null
		n=0
		while [ $n -lt 64 ]; do
			mknod fd/$n c $major $n
			n=$(($n + 1))
		done
		chmod 755 fd
		chmod 666 fd/*
	fi
	;;

md*)
	unit=${i#md}; blk=1; chr=8
	rm -f md${unit}? rmd${unit}?
	mknod md${unit}a  b $blk $(($unit * 8 + 0))
	mknod md${unit}c  b $blk $(($unit * 8 + 2))
#	mknod rmd${unit}a c $chr $(($unit * 8 + 0))
#	mknod rmd${unit}c c $chr $(($unit * 8 + 2))
	chgrp operator md${unit}? #rmd${unit}?
	chmod 640 md${unit}? #rmd${unit}?
	;;

ccd*|raid*|vnd*|wd*|sd*|cd*)
	case $i in
	ccd*)	name=ccd;	unit=${i#ccd};	blk=3; chr=9;;
	raid*)	name=raid;	unit=${i#raid};	blk=7; chr=26;;
	vnd*)	name=vnd;	unit=${i#vnd};	blk=2; chr=8;;
	wd*)	name=wd;	unit=${i#wd};	blk=4; chr=15;;
	sd*)	name=sd;	unit=${i#sd};	blk=5; chr=16;;
	cd*)	name=cd;	unit=${i#cd};	blk=6; chr=17;;
	esac
	rm -f $name$unit? r$name$unit?
	mknod ${name}${unit}a	b $blk $(($unit * 8 + 0))
	mknod ${name}${unit}b	b $blk $(($unit * 8 + 1))
	mknod ${name}${unit}c	b $blk $(($unit * 8 + 2))
	mknod ${name}${unit}d	b $blk $(($unit * 8 + 3))
	mknod ${name}${unit}e	b $blk $(($unit * 8 + 4))
	mknod ${name}${unit}f	b $blk $(($unit * 8 + 5))
	mknod ${name}${unit}g	b $blk $(($unit * 8 + 6))
	mknod ${name}${unit}h	b $blk $(($unit * 8 + 7))
	mknod r${name}${unit}a	c $chr $(($unit * 8 + 0))
	mknod r${name}${unit}b	c $chr $(($unit * 8 + 1))
	mknod r${name}${unit}c	c $chr $(($unit * 8 + 2))
	mknod r${name}${unit}d	c $chr $(($unit * 8 + 3))
	mknod r${name}${unit}e	c $chr $(($unit * 8 + 4))
	mknod r${name}${unit}f	c $chr $(($unit * 8 + 5))
	mknod r${name}${unit}g	c $chr $(($unit * 8 + 6))
	mknod r${name}${unit}h	c $chr $(($unit * 8 + 7))
	chgrp operator ${name}${unit}[a-h] r${name}${unit}[a-h]
	chmod 640 ${name}${unit}[a-h] r${name}${unit}[a-h]
	;;

ttyEcfg)
	rm -f $i
	mknod $i c 14 255
	;;

ttyE*)
	case $i in
	ttyE*)	name=ttyE; unit=${i#ttyE};	major=14; minor=$unit;;
	esac
	rm -f $name$unit
	mknod $name$unit c $major $minor
	chown uucp $name$unit
	;;

com*|tty*)					# (XXX -- com should die)
	ounit=${i#???}
	ounit=$(($ounit + 0))
	if [ $ounit -lt 10 ]; then
		unit=0$ounit
		rm -f com$ounit
	else
		unit=$ounit
	fi
	rm -f tty$unit dty$unit
	mknod tty$unit c 20 $(($ounit + $dialin ))
	mknod dty$unit c 20 $(($ounit + $dialout))
	chown uucp tty$unit dty$unit
	;;


opty)
	rm -f ttyp[0-9a-f] ptyp[0-9a-f]
	for j in 0 1 2 3 4 5 6 7 8 9 a b c d e f
	do
		case $j in
		[0-9])	jn=$j ;;
		a)	jn=10 ;;
		b)	jn=11 ;;
		c)	jn=12 ;;
		d)	jn=13 ;;
		e)	jn=14 ;;
		f)	jn=15 ;;
		esac
		mknod ttyp$j c 4 $jn
		mknod ptyp$j c 5 $jn
	done
	chmod 666 ttyp[0-9a-f] ptyp[0-9a-f]
	;;

		
pty*)
	class=${i#pty}
	name=`echo pqrstuvwxyzPQRST | dd bs=1 count=1 skip=$class 2>/dev/null`
	case $name in
	v)	echo "$0: $i: pty unit conflicts with console ttyv0 device."
		continue;;
	?)      ;;
	*)      echo "$0: $i: pty unit must be between 0 and 15"
	        continue ;;
	esac
	rm -f tty$name[0-9a-zA-Z] pty$name[0-9a-zA-Z]
	jn=0
	while [ $jn -lt 62 ]
	do
		j=`echo 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ | dd bs=1 count=1 skip=$jn 2>/dev/null`
		skip=0
		if [ $jn -ge 16 ]; then
			skip=$(($class * 30 + 256 - 16))
		fi
		unit=$(($class * 16 + $jn + $skip))
		mknod tty$name$j c 4 $unit
		mknod pty$name$j c 5 $unit
		jn=$(($jn + 1))
	done
	chmod 666 tty$name[0-9a-zA-Z] pty$name[0-9a-zA-Z]
	;;

bpf*|tun*|lpt*|arcpp*)
	case $i in
	bpf*)	name=bpf;	unit=${i#bpf};	chr=18;;
	tun*)	name=tun;	unit=${i#tun};	chr=19;;
	lpt*)	name=lpt;	unit=${i#lpt};	chr=21;;
	arcpp*) name=arcpp;	unit=${i#arcpp};chr=22;;
	esac
	rm -f $name$unit
	mknod $name$unit	c $chr $unit
	;;

ipl)
	rm -f ipl ipnat ipstate ipauth
	mknod ipl c 23 0
	mknod ipnat c 23 1
	mknod ipstate c 23 2
	mknod ipauth c 23 3
	chmod 600 ipl ipnat ipstate ipauth
	;;

random)
	rm -f random urandom
	mknod random c 24 0
	mknod urandom c 24 1
	chmod 444 random
	chmod 644 urandom
	;;

cfs*)
	unit=${i#cfs}
	cfs=cfs$unit
	major=25
	rm -f $cfs
	mknod $cfs c $major $unit
	chmod 600 $cfs
	;;


clockctl)
	rm -f clockctl
	mknod clockctl c 27 0
	chgrp ntpd clockctl
	chmod 660 clockctl
	;;

local)
	if [ -f "$0.local" ]; then
		umask 0
		sh $0.local all
		umask 77
	fi
	;;

*)
	echo $i: unknown device
	;;

esac
done

}

makedev $*

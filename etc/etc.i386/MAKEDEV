#!/bin/sh -
#
#	$NetBSD: MAKEDEV,v 1.113.2.1 2000/06/23 15:45:59 minoura Exp $
#
# Copyright (c) 1990 The Regents of the University of California.
# All rights reserved.
#
# Written and contributed by W. Jolitz 12/90
#
# Redistribution and use in source and binary forms are permitted provided
# that: (1) source distributions retain this entire copyright notice and
# comment, and (2) distributions including binaries display the following
# acknowledgement:  ``This product includes software developed by the
# University of California, Berkeley and its contributors'' in the
# documentation or other materials provided with the distribution and in
# all advertising materials mentioning features or use of this software.
# Neither the name of the University nor the names of its contributors may
# be used to endorse or promote products derived from this software without
# specific prior written permission.
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
#
#	@(#)MAKEDEV	5.2 (Berkeley) 6/22/90
#
###########################################################################
#
#   PLEASE RUN "cd ../share/man/man8 ; perl5 MAKEDEV2manpage.pl"
#   AFTER CHANGING THIS FILE, AND COMMIT THE UPDATED MANPAGE!
#
###########################################################################
#
# Device "make" file.  Valid arguments:
#	all	makes all known devices, including local devices.
#		Tries to make the 'standard' number of each type.
#	floppy	devices to be put on install floppies
#	ramdisk	devices to be put into INSTALL kernel ramdisks.
#	std	standard devices
#	local	configuration specific devices
#	usbs	make USB devices
#
# Tapes:
#	wt*	QIC-interfaced (e.g. not SCSI) 3M cartridge tape
#	st*	SCSI tapes
#
# Disks:
#	wd*	"winchester" disk drives (ST506,IDE,ESDI,RLL,...)
#	fd*	"floppy" disk drives (3 1/2", 5 1/4")
#	sd*	SCSI disks
#	cd*	SCSI or ATAPI CD-ROM
#	mcd*	Mitsumi CD-ROM
#	vnd*	"file" pseudo-disks
#	md*	memory pseudo-disk devices
#	ccd*	contatenated disk devices
#	raid*	RAIDframe disk devices
#	ca*	Compaq array disk devices
#
# Console ports:
#	ttyv0	pccons
#	ttyE*	wscons
#
# Pointing devices:
#	mms*	Microsoft bus mouse
#	lms*	Logitech bus mouse
#	pms*	PS/2 mouse
#	wsmouse* wscons mouse events
#
# Keyboard devices:
#	wskbd*	wscons keyboard events
# 
# Terminal ports:
#	com*	standard PC COM ports			(XXX)
#	tty*	alias for PC COM ports, this is what the system really wants
#	ttyCZ*	Cyclades-Z multiport serial boards.  Each "unit"
#		makes 64 ports.
#
# Pseudo terminals:
#	pty*	set of 16 master and slave pseudo terminals
#
# Printers:
#	lpt*	stock lp
#	lpa*	interruptless lp
#
# USB devices:
#	usb*	USB control devices
#	uhid*	USB generic HID devices
#	ulpt*	USB printer devices
#	ugen*	USB generic devices
#	urio*	USB Diamond Rio 500 devices
#	ttyU*	USB modems
#
# Special purpose devices:
#	fd	file descriptors
#	bpf*	packet filter
#	ipl	IP filter
#	random	Random number generator, see rnd(4)
#	speaker	pc speaker		(XXX - installed)
#	lkm	loadable kernel modules interface
#	audio*	audio devices
#	apm	power management device
#	tun*	network tunnel driver
#	joy*	joystick device
#	satlink* PlanetConnect satellite receiver driver
#	scsibus* SCSI busses, see scsi(4), scsictl(8)
#	ses*	SES/SAF-TE SCSI Devices
#	ss*	SCSI scanner
#	uk*	unknown SCSI device
#	ch*	SCSI changer
#	cfs*	Coda file system device
#	lm	LM7[89] hardware monitor
#	bktr	Brooktree 848/849/878/879 based TV cards
#

dialin=0
dialout=524288		# high bit of the minor number
callunit=262144

PATH=/sbin:/usr/sbin:/bin:/usr/bin
umask 77

# Check if we have fdesc mounted
if [ -d fd ]; then
	case "`df fd`" in
	*fdesc*) nofdesc=false;;
	*) nofdesc=true;;
	esac
else
	nofdesc=true
fi

for i
do

case $i in

all)
	sh $0 std fd wt0 fd0 fd1 wd0 wd1 wd2 wd3 sd0 sd1 sd2 sd3 sd4
	sh $0 tty0 tty1 tty2 tty3 pty0 pty1 raid0 raid1 raid2 raid3
	sh $0 st0 st1 ch0 cd0 cd1 mcd0 vnd0 vnd1 lpa0 lpa1 lpa2
	sh $0 bpf0 bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7
	sh $0 lpt0 lpt1 lpt2 ttyv0 tun0 tun1 tun2 tun3 ipl
	sh $0 ccd0 ccd1 ccd2 ccd3 md0 ss0 ch0 uk0 uk1 random
	sh $0 speaker lkm mms0 lms0 pms0 joy0 joy1 apm local satlink0
	sh $0 audio
	sh $0 usbs
	sh $0 music rmidi0 rmidi1 rmidi2 rmidi3 rmidi4 rmidi5 rmidi6 rmidi7
	sh $0 scsibus0 scsibus1 scsibus2 scsibus3
	sh $0 wscons
	sh $0 ca0 ca1 ca2 ca3
	sh $0 lm0
	sh $0 bktr
	sh $0 ttyCZ0
	;;

audio)
	sh $0 audio0 audio1 audio2 audio3
	ln -fs sound0 sound
	ln -fs audio0 audio
	ln -fs mixer0 mixer
	ln -fs audioctl0 audioctl
	;;

floppy)
	sh $0 std wt0 fd0 fd1 wd0 wd1 wd2 wd3 sd0 sd1 sd2 tty0 tty1 tty2
	sh $0 st0 st1 cd0 cd1 mcd0 ttyv0 pty0 ca0 ca1 ca2 ca3
	;;

ramdisk)
	sh $0 floppy md0
	;;

usbs)
	sh $0 usb usb0 usb1 
	sh $0 uhid0 uhid1 uhid2 uhid3
	sh $0 ulpt0 ulpt1
	sh $0 ttyU0 ttyU1
	sh $0 urio0
	sh $0 ugen0
	;;

std)
	rm -f console drum mem kmem null zero io klog
	mknod console		c 0 0
	mknod drum		c 4 0	; chmod 640 drum ; chgrp kmem drum
	mknod kmem		c 2 1	; chmod 640 kmem ; chgrp kmem kmem
	mknod mem		c 2 0	; chmod 640 mem	; chgrp kmem mem
	mknod null		c 2 2	; chmod 666 null
	mknod zero		c 2 12	; chmod 666 zero
	mknod io		c 2 14	; chmod 640 io ; chgrp kmem io
	mknod klog		c 7 0	; chmod 600 klog
	if $nofdesc; then
		rm -f tty stdin stdout stderr
		mknod tty	c 1 0	; chmod 666 tty
		mknod stdin	c 22 0	; chmod 666 stdin
		mknod stdout	c 22 1	; chmod 666 stdout
		mknod stderr	c 22 2	; chmod 666 stderr
	fi
	;;

usb*)
	unit=${i#usb}
	if [ "$unit" = "" ]; then
	    unit=255
	    usb=usb
	else
	    usb=usb$unit
	fi
	major=55
	rm -f $usb
	mknod $usb c $major $unit
	chown root.wheel $usb
	chmod 600 $usb
	;;

uhid*)
	unit=${i#uhid}
	uhid=uhid$unit
	major=56
	rm -f $uhid
	mknod $uhid c $major $unit
	chown root.wheel $uhid
	chmod 666 $uhid
	;;

ulpt*)
	unit=${i#ulpt}
	ulpt=ulpt$unit
	major=57
	rm -f $ulpt
	mknod $ulpt c $major $unit
	chown root.wheel $ulpt
	chmod 600 $ulpt
	;;

urio*)
	unit=${i#urio}
	urio=urio$unit
	major=70
	rm -f $urio
	mknod $urio c $major $unit
	chown root.wheel $urio
	chmod 666 $urio
	;;

ttyU*)
	unit=${i#ttyU}
	ttyU=ttyU$unit
	dtyU=dtyU$unit
	ctyU=ctyU$unit
	major=66
	rm -f $ttyU $dtyU $ctyU
	mknod $ttyU c $major $(($unit + $dialin  ))
	mknod $dtyU c $major $(($unit + $dialout ))
	mknod $ctyU c $major $(($unit + $callunit))
	chown uucp.wheel $ttyU $dtyU $ctyU
	chmod 600 $ttyU $dtyU $ctyU
	;;

ugen*)
	unit=${i#ugen}
	ugen=ugen$unit
	major=64
	for j in 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15
	do
		ugenj=$ugen.$j
		rm -f $ugenj
		mknod $ugenj c $major $(($unit * 16 + $j))
		chown root.wheel $ugenj
		chmod 600 $ugenj
	done
	;;

ttyv0)
	rm -f ttyv0
	mknod ttyv0 c 12 0
	chown root.wheel ttyv0
	;;

wscons)
	sh $0 ttyE0 ttyE1 ttyE2 ttyE3 ttyE4 ttyE5 ttyE6 ttyE7
	sh $0 wsmouse0 wsmouse1 wsmouse2 wsmouse3
	sh $0 wskbd0 wskbd1 wskbd2 wskbd3
	sh $0 ttyEcfg
	sh $0 wsmux
	;;

wsmux|wsmouse|wskbd)
	rm -f wsmouse wskbd
	mknod wsmouse c 65 0
	mknod wskbd c 65 1
	chown root.wheel wsmouse wskbd
	chmod 600 wsmouse wskbd
	;;

ttyEcfg)
	chr=47
	rm -f ttyEcfg
	mknod ttyEcfg c $chr 255
	chown root.wheel ttyEcfg
	chmod 600 ttyEcfg
	;;

ttyE*)
	chr=47; unit=${i#ttyE}
	rm -f ttyE$unit
	mknod ttyE$unit c $chr $unit
	chown root.wheel ttyE$unit
	;;

wsmouse*)
	unit=${i#wsmouse}
	wsmouse=wsmouse$unit
	major=49
	rm -f $wsmouse
	mknod $wsmouse c $major $unit
	chown root.wheel $wsmouse
	chmod 600 $wsmouse
	;;

wskbd*)
	unit=${i#wskbd}
	wskbd=wskbd$unit
	major=48
	rm -f $wskbd
	mknod $wskbd c $major $unit
	chown root.wheel $wskbd
	chmod 600 $wskbd
	;;

fd)
	if $nofdesc; then
		rm -f fd/*
		mkdir fd > /dev/null 2>&1
		n=0
		while [ $n -lt 64 ]; do
			mknod fd/$n c 22 $n
			n=$(($n + 1))
		done
		chown -R root.wheel fd
		chmod 755 fd
		chmod 666 fd/*
	fi
	;;

wt*)
	case $i in
	wt*) name=wt;  unit=${i#wt};	chr=10;	blk=3;;
	esac
	for sub in $unit $(($unit+8)) $(($unit+16))
	do
	    rm -f $name$sub n$name$sub r$name$sub nr$name$sub
	    mknod $name$sub	b $blk $(($sub + 0))
	    mknod n$name$sub	b $blk $(($sub + 4))
	    mknod r$name$sub	c $chr $(($sub + 0))
	    mknod nr$name$sub	c $chr $(($sub + 4))
	    chgrp operator $name$sub n$name$sub r$name$sub nr$name$sub
	    chmod 660 $name$sub n$name$sub r$name$sub nr$name$sub
	done
	;;

md*)
	unit=${i#md}; blk=17; chr=24;
	rm -f md${unit}? rmd${unit}?
	mknod md${unit}a  b $blk $(($unit * 8 + 0))
	mknod md${unit}d  b $blk $(($unit * 8 + 3))
#	mknod rmd${unit}a c $chr $(($unit * 8 + 0))
#	mknod rmd${unit}d c $chr $(($unit * 8 + 3))
	chgrp operator md${unit}? #rmd${unit}?
	chmod 640 md${unit}? #rmd${unit}?
	;;      

ss*)
	case $i in
	ss*) name=ss;	unit=${i#ss};	chr=19;;
	esac
	rm -f $name$unit n$name$unit en$name$unit
	mknod $name$unit	c $chr $(($unit * 16 + 0))
	mknod n$name$unit	c $chr $(($unit * 16 + 1))
	mknod en$name$unit	c $chr $(($unit * 16 + 3))
	chgrp operator $name$unit n$name$unit en$name$unit
	chmod 640 $name$unit n$name$unit en$name$unit
	;;

ca*|ccd*|fd*|sd*|vnd*|wd*|raid*)
	case $i in
	ca*) name=ca;	unit=${i#ca};	blk=19;	chr=69;;
	ccd*) name=ccd;	unit=${i#ccd};	blk=16;	chr=18;;
	fd*) name=fd;	unit=${i#fd};	blk=2;	chr=9;;
	raid*) name=raid; unit=${i#raid}; blk=18; chr=62;;
	sd*) name=sd;	unit=${i#sd};	blk=4;	chr=13;;
	vnd*) name=vnd;	unit=${i#vnd};	blk=14;	chr=41;;
	wd*) name=wd;	unit=${i#wd};	blk=0;	chr=3;;
	esac
	rm -f $name$unit? r$name$unit?
	mknod ${name}${unit}a	b $blk $(($unit * 8 + 0))
	mknod ${name}${unit}b	b $blk $(($unit * 8 + 1))
	mknod ${name}${unit}c	b $blk $(($unit * 8 + 2))
	mknod ${name}${unit}d	b $blk $(($unit * 8 + 3))
	mknod ${name}${unit}e	b $blk $(($unit * 8 + 4))
	mknod ${name}${unit}f	b $blk $(($unit * 8 + 5))
	mknod ${name}${unit}g	b $blk $(($unit * 8 + 6))
	mknod ${name}${unit}h	b $blk $(($unit * 8 + 7))
	mknod r${name}${unit}a	c $chr $(($unit * 8 + 0))
	mknod r${name}${unit}b	c $chr $(($unit * 8 + 1))
	mknod r${name}${unit}c	c $chr $(($unit * 8 + 2))
	mknod r${name}${unit}d	c $chr $(($unit * 8 + 3))
	mknod r${name}${unit}e	c $chr $(($unit * 8 + 4))
	mknod r${name}${unit}f	c $chr $(($unit * 8 + 5))
	mknod r${name}${unit}g	c $chr $(($unit * 8 + 6))
	mknod r${name}${unit}h	c $chr $(($unit * 8 + 7))
	chgrp operator $name$unit? r$name$unit?
	chmod 640 $name$unit? r$name$unit?
	;;

ttyCZ*)
	unit=${i#ttyCZ}
	major=73
	minor=$(($unit * 64))
	eminor=$(($minor + 64))
	while [ $minor -lt $eminor ]; do
		if [ $minor -lt 10 ]; then
			nminor=000$minor
		elif [ $minor -lt 100 ]; then
			nminor=00$minor
		elif [ $minor -lt 1000 ]; then
			nminor=0$minor
		else
			nminor=$minor
		fi
		rm -f ttyCZ$nminor dtyCZ$nminor
		mknod ttyCZ$nminor c $major $(($minor + $dialin  ))
		mknod dtyCZ$nminor c $major $(($minor + $dialout ))
		chown uucp.wheel ttyCZ$nminor dtyCZ$nminor
		chmod 600 ttyCZ$nminor dtyCZ$nminor
		minor=$(($minor + 1))
	done
	;;

com*|tty*)					# (XXX -- com should die)
	ounit=${i#???}
	ounit=$(($ounit + 0))
	if [ $ounit -lt 10 ]; then
		unit=0$ounit
		rm -f com$ounit
	else
		unit=$ounit
	fi
	rm -f tty$unit dty$unit
	mknod tty$unit c 8 $(($ounit + $dialin ))
	mknod dty$unit c 8 $(($ounit + $dialout))
	chown uucp.wheel tty$unit dty$unit
	;;

pty*)
	class=${i#pty}
	case $class in
	0)      name=p;;
	1)      name=q;;
	2)      name=r;;
	3)      name=s;;
	4)      name=t;;
	5)      name=u;;
	6)      name=v
		echo "$0: $i: pty unit conflicts with console ttyv0 device."
		continue;;
	7)      name=w;;
	8)      name=x;;
	9)      name=y;;
	10)     name=z;;
	11)     name=P;;
	12)     name=Q;;
	13)     name=R;;
	14)     name=S;;
	15)     name=T;;
	*)      echo "$0: $i: pty unit must be between 0 and 15"
	        continue ;;
	esac
	rm -f tty$name[0-9a-f] pty$name[0-9a-f]
	for j in 0 1 2 3 4 5 6 7 8 9 a b c d e f
	do
		case $j in
		[0-9])  jn=$j ;;
		a)      jn=10 ;;
		b)      jn=11 ;;
		c)      jn=12 ;;
		d)      jn=13 ;;
		e)      jn=14 ;;
		f)      jn=15 ;;
		esac
		unit=$(($class * 16 + $jn))
		mknod tty$name$j c 5 $unit
		mknod pty$name$j c 6 $unit
	done
        chgrp wheel tty$name? pty$name?
        chmod 666 tty$name? pty$name?
	;;

st*)
	case $i in
	st*) name=st;	unit=${i#st};	chr=14;	blk=5;;
	esac
	rm -f $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit 
	mknod $name$unit	b $blk $(($unit * 16 + 0))
	mknod n$name$unit	b $blk $(($unit * 16 + 1))
	mknod e$name$unit	b $blk $(($unit * 16 + 2))
	mknod en$name$unit	b $blk $(($unit * 16 + 3))
	mknod r$name$unit	c $chr $(($unit * 16 + 0))
	mknod nr$name$unit	c $chr $(($unit * 16 + 1))
	mknod er$name$unit	c $chr $(($unit * 16 + 2))
	mknod enr$name$unit	c $chr $(($unit * 16 + 3))
	chgrp operator $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit 
	chmod 660 $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit 
	;;

ses*|ch*|uk*)
	case $i in
	ch*) name=ch;	unit=${i#ch};	chr=17;;
	uk*) name=uk;	unit=${i#uk};	chr=20;;
	ses*) name=ses;	unit=${i#ses};	chr=74;;
	esac
	rm -f $name$unit
	mknod $name$unit	c $chr $unit
	chgrp operator $name$unit
	chmod 640 $name$unit
	;;

cd*|mcd*)
	case $i in
	cd*) name=cd;	unit=${i#cd};	chr=15;	blk=6;;
	mcd*) name=mcd;	unit=${i#mcd};	chr=39;	blk=7;;
	esac
	rm -f $name$unit? r$name$unit?
	mknod ${name}${unit}a	b $blk $(($unit * 8 + 0))
	mknod ${name}${unit}d	b $blk $(($unit * 8 + 3))
	mknod r${name}${unit}a	c $chr $(($unit * 8 + 0))
	mknod r${name}${unit}d	c $chr $(($unit * 8 + 3))
	chgrp operator $name$unit? r$name$unit?
	chmod 640 $name$unit? r$name$unit?
	;;

lpt*|lpa*)
	case $i in
	lpt*) name=lpt;	unit=${i#lpt};	chr=16;	flags=0;;
	lpa*) name=lpa;	unit=${i#lpa};	chr=16;	flags=128;;
	esac
	rm -f $name$unit
	mknod $name$unit	c $chr $(($unit + $flags))
	chown root.wheel $name$unit
	;;

bpf*|tun*|mms*|lms*|pms*|joy*)
	case $i in
	bpf*) name=bpf;	unit=${i#bpf};	chr=23;;
	tun*) name=tun;	unit=${i#tun};	chr=40;;
	mms*) name=mms;	unit=${i#mms};	chr=35;;
	lms*) name=lms;	unit=${i#lms};	chr=36;;
	pms*) name=pms;	unit=${i#pms};	chr=37;;
	joy*) name=joy;	unit=${i#joy};	chr=26;;
	esac
	rm -f $name$unit
	mknod $name$unit	c $chr $unit
	chown root.wheel $name$unit
	;;

ipl)
	rm -f ipl ipnat ipstate ipauth
	mknod ipl c 44 0
	mknod ipnat c 44 1
	mknod ipstate c 44 2
	mknod ipauth c 44 3
	chown root.wheel ipl ipnat ipstate ipauth
	chmod 600 ipl ipnat ipstate ipauth
	;;

speaker)					# (XXX - installed)
	rm -f speaker
	mknod speaker c 27 0
	chown root.wheel speaker
	;;

lkm)
	rm -f lkm
	mknod lkm c 28 0
	chown root.kmem lkm
	chmod 640 lkm
	;;

audio*)
	unit=${i#audio}
	audio=audio$unit
	sound=sound$unit
	mixer=mixer$unit
	major=42
	audioctl=audioctl$unit
	if [ "$unit" = "" ]; then unit=0; fi
	rm -f $audio $sound $mixer $audioctl
	mknod $sound    c $major $(($unit + 0))
	mknod $audio    c $major $(($unit + 128))
	mknod $mixer    c $major $(($unit + 16))
	mknod $audioctl c $major $(($unit + 192))
	chown root.wheel $audio $sound $mixer $audioctl
	chmod 666 $audio $sound $mixer $audioctl
	;;

rmidi*)
	unit=${i#rmidi}
	major=58
	rmidi=rmidi$unit
	rm -f $rmidi
	mknod $rmidi c $major $unit
	chown root.wheel $rmidi
	chmod 666 $rmidi
	;;

music*)
	unit=${i#music}
	music=music$unit
	sequencer=sequencer$unit
	major=59
	if [ "$unit" = "" ]; then unit=0; fi
	rm -f $sequencer $music
	mknod $music     c $major $(($unit + 0))
	mknod $sequencer c $major $(($unit + 128))
	chown root.wheel $music $sequencer
	chmod 666 $music $sequencer
	;;

apm*)
	rm -f apm apmctl
	mknod apm c 21 0
	mknod apmctl c 21 8
	chown root.wheel apm apmctl
	chmod 644 apm apmctl
	;;

satlink*)
	unit=${i#satlink};
	rm -f satlink$unit
	mknod satlink$unit c 45 $unit
	chmod 444 satlink$unit
	;;

random)
	rm -f random urandom
	mknod random c 46 0
	mknod urandom c 46 1
	chown root.wheel random urandom
	chmod 444 random
	chmod 644 urandom
	;;

cfs*)
	unit=${i#cfs}
	cfs=cfs$unit
	major=60
	rm -f $cfs
	mknod $cfs c $major $unit
	chown root.wheel $cfs
	chmod 600 $cfs
	;;

lm*)
	unit=${i#lm}
	lm=lm$unit
	major=67
	rm -f $lm
	mknod $lm c $major $unit
	chown root.wheel $lm
	chmod 644 $lm
	;;

scsibus*)
	unit=${i#scsibus}; 
	rm -f scsibus$unit
	mknod scsibus$unit c 61 $unit
	chown root:wheel scsibus$unit
	chmod 644 scsibus$unit
	;;

bktr)
	sh $0 bktr0 bktr1
	ln -fs bktr0 bktr
	ln -fs tuner0 tuner
	ln -fs vbi0 vbi
	;;

bktr*)
	unit=${i#bktr}
	rm -f bktr$unit tuner$unit vbi$unit
	mknod bktr$unit c 71 $(($unit + 0))
	mknod tuner$unit c 71 $(($unit + 16))
	mknod vbi$unit c 71 $(($unit + 32))
	chown root.wheel bktr$unit tuner$unit vbi$unit
	chmod 444 bktr$unit tuner$unit vbi$unit
	;;

local)
	umask 0
	sh $0.local all
	umask 77
	;;

*)
	echo $i: unknown device
	;;

esac
done

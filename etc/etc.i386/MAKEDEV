#!/bin/sh -
#
#	$NetBSD: MAKEDEV,v 1.175.2.3 2002/12/16 04:29:43 jmc Exp $
#
# Copyright (c) 1990 The Regents of the University of California.
# All rights reserved.
#
# Written and contributed by W. Jolitz 12/90
#
# Redistribution and use in source and binary forms are permitted provided
# that: (1) source distributions retain this entire copyright notice and
# comment, and (2) distributions including binaries display the following
# acknowledgement:  ``This product includes software developed by the
# University of California, Berkeley and its contributors'' in the
# documentation or other materials provided with the distribution and in
# all advertising materials mentioning features or use of this software.
# Neither the name of the University nor the names of its contributors may
# be used to endorse or promote products derived from this software without
# specific prior written permission.
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
#
#	@(#)MAKEDEV	5.2 (Berkeley) 6/22/90
#
###########################################################################
#
#   PLEASE RUN "cd ../share/man/man8 ; perl5 MAKEDEV2manpage.pl"
#   AFTER CHANGING THIS FILE, AND COMMIT THE UPDATED MANPAGE!
#
###########################################################################
#
# Device "make" file.  Valid arguments:
#	all	makes all known devices, including local devices.
#		Tries to make the 'standard' number of each type.
#	floppy	devices to be put on install floppies
#	ramdisk	devices to be put into INSTALL kernel ramdisks.
#	std	standard devices
#	local	configuration specific devices
#	usbs	make USB devices
#	isdns	make ISDN devices
#
# Tapes:
#	wt*	QIC-interfaced (e.g. not SCSI) 3M cartridge tape
#	st*	SCSI tapes
#
# Disks:
#	wd*	"winchester" disk drives (ST506,IDE,ESDI,RLL,...)
#	fd*	"floppy" disk drives (3 1/2", 5 1/4")
#	sd*	SCSI disks
#	cd*	SCSI or ATAPI CD-ROM
#	mcd*	Mitsumi CD-ROM
#	vnd*	"file" pseudo-disks
#	md*	memory pseudo-disk devices
#	ccd*	contatenated disk devices
#	raid*	RAIDframe disk devices
#	ld*	Logical disk devices (e.g., hardware RAID)
#	ed*	PS/2 ESDI disk devices
#
# Console ports:
#	ttyv0	pccons
#	ttyE*	wscons
#
# Pointing devices:
#	mms*	Microsoft bus mouse
#	lms*	Logitech bus mouse
#	wsmouse* wscons mouse events
#
# Keyboard devices:
#	wskbd*	wscons keyboard events
#
# Terminal ports:
#	com*	standard PC COM ports			(XXX)
#	tty*	alias for PC COM ports, this is what the system really wants
#	ttyCZ*	Cyclades-Z multiport serial boards.  Each "unit"
#		makes 64 ports.
#	ttyCY*	Cyclom-Y multiport serial boards. Each "unit" makes
#		32 ports.
#
# Pseudo terminals:
#	pty*	set of 62 master and slave pseudo terminals
#	opty	first 16 ptys, to save inodes on install media
#
# Printers:
#	lpt*	stock lp
#	lpa*	interruptless lp
#
# USB devices:
#	usb*	USB control devices
#	uhid*	USB generic HID devices
#	ulpt*	USB printer devices
#	ugen*	USB generic devices
#	urio*	USB Diamond Rio 500 devices
#	uscanner*	USB scanners
#	ttyU*	USB modems
#
# ISDN devices:
#	isdn	communication between userland isdnd and kernel
#	isdnctl	control device
#	isdnbchan* raw b-channel access
#	isdntel*	telephony device
#	isdntrc*	trace device
#
# Special purpose devices:
#	clockctl clock control for non root users
#	fd	file descriptors
#	bpf*	packet filter
#	cir*	Consumer IR
#	ipl	IP filter
#	irframe* IrDA physical frame
#	random	Random number generator, see rnd(4)
#	speaker	pc speaker		(XXX - installed)
#	lkm	loadable kernel modules interface
#	audio*	audio devices
#	apm	power management device
#	tun*	network tunnel driver
#	joy*	joystick device
#	satlink* PlanetConnect satellite receiver driver
#	scsibus* SCSI busses, see scsi(4), scsictl(8)
#	ses*	SES/SAF-TE SCSI Devices
#	ss*	SCSI scanner
#	uk*	unknown SCSI device
#	ch*	SCSI media changer
#	cfs*	Coda file system device
#	sysmon	System Monitoring hardware
#	bktr	Brooktree 848/849/878/879 based TV cards
#	iop*	I2O IOP control interface
#	mlx*	Mylex DAC960 control interface
#	mly*	Mylex AcceleRAID/eXtremeRAID control interface
#	altq	ALTQ control interface
#	vmegen*	generic VME access
#	wsfont*	console font control
#	wsmux*	wscons event multiplexor
#	agp*	AGP GART devices
#	pci*	PCI bus access devices
#	dpt*	DPT/Adaptec EATA RAID management interface
#	dpti*	DPT/Adaptec I2O RAID management interface
#	radio*	radio devices
#	nsmb*	SMB requester
#

dialin=0
dialout=524288		# high bit of the minor number
callunit=262144

highpartoffset=524280	# offset for partition 9 to 16

PATH=/sbin:/usr/sbin:/bin:/usr/bin
umask 77

# Check if we have fdesc mounted
if [ -d fd ]; then
	case "`df fd`" in
	*fdesc*) nofdesc=false;;
	*) nofdesc=true;;
	esac
else
	nofdesc=true
fi

makedev()
{

for i
do

case $i in

all)
	makedev std wscons fd wt0 fd0 fd1 wd0 wd1 wd2 wd3 sd0 sd1 sd2 sd3 sd4
	makedev tty0 tty1 tty2 tty3 pty0
	makedev raid0 raid1 raid2 raid3 raid4 raid5 raid6 raid7
	makedev st0 st1 ch0 cd0 cd1 mcd0 vnd0 vnd1 lpa0 lpa1 lpa2
	makedev bpf0 bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7
	makedev lpt0 lpt1 lpt2 ttyv0 tun0 tun1 tun2 tun3 ipl
	makedev ccd0 ccd1 ccd2 ccd3 md0 ss0 ch0 uk0 uk1 random
	makedev speaker lkm mms0 lms0 joy0 joy1 apm local satlink0
	makedev iop0 mlx0 mly0 dpt0 dpti0
	makedev audio
	makedev radio
	makedev usbs
	makedev isdns
	makedev music rmidi0 rmidi1 rmidi2 rmidi3 rmidi4 rmidi5 rmidi6 rmidi7
	makedev scsibus0 scsibus1 scsibus2 scsibus3
	makedev ld0 ld1 ld2 ld3
	makedev sysmon
	makedev bktr
	makedev ttyCZ0 ttyCY0
	makedev agp0
	makedev pci0 pci1 pci2 pci3 pci4 pci5 pci6 pci7
	makedev altq
	makedev ed0 ed1
	makedev cir0 cir1 irframe0 irframe1
	makedev clockctl
	makedev nsmb0 nsmb1 nsmb2 nsmb3
	;;

audio)
	makedev audio0 audio1 audio2 audio3
	ln -fs sound0 sound
	ln -fs audio0 audio
	ln -fs mixer0 mixer
	ln -fs audioctl0 audioctl
	;;

radio)
	makedev radio0 radio1
	ln -fs radio0 radio
	;;

floppy)
	makedev std wt0 fd0 fd1 wd0 wd1 wd2 wd3 sd0 sd1 sd2 sd3 sd4 st0 st1
	makedev tty0 tty1 tty2 cd0 cd1 mcd0 ttyv0 opty ld0 ld1 ld2 ld3 ed0 ed1
	;;

ramdisk)
	makedev floppy md0
	;;

usbs)
	makedev usb usb0 usb1 usb2 usb3 usb4 usb5 usb6 usb7
	makedev uhid0 uhid1 uhid2 uhid3
	makedev ulpt0 ulpt1
	makedev ttyU0 ttyU1
	makedev urio0
	makedev uscanner0 uscanner1
	makedev ugen0
	;;

isdns)
	makedev isdn isdnctl isdnbchan0 isdnbchan1 isdntel0 isdntel1 isdntrc0 isdntrc1
	;;

std)
	rm -f console drum mem kmem null zero io klog
	mknod console		c 0 0
	mknod drum		c 4 0	; chmod 640 drum ; chgrp kmem drum
	mknod kmem		c 2 1	; chmod 640 kmem ; chgrp kmem kmem
	mknod mem		c 2 0	; chmod 640 mem	; chgrp kmem mem
	mknod null		c 2 2	; chmod 666 null
	mknod zero		c 2 12	; chmod 666 zero
	mknod io		c 2 14	; chmod 640 io ; chgrp kmem io
	mknod klog		c 7 0	; chmod 600 klog
	if $nofdesc; then
		rm -f tty stdin stdout stderr
		mknod tty	c 1 0	; chmod 666 tty
		mknod stdin	c 22 0	; chmod 666 stdin
		mknod stdout	c 22 1	; chmod 666 stdout
		mknod stderr	c 22 2	; chmod 666 stderr
	fi
	;;

usb*)
	unit=${i#usb}
	if [ "$unit" = "" ]; then
	    unit=255
	    usb=usb
	else
	    usb=usb$unit
	fi
	major=55
	rm -f $usb
	mknod $usb c $major $unit
	chmod 600 $usb
	;;

uhid*)
	unit=${i#uhid}
	uhid=uhid$unit
	major=56
	rm -f $uhid
	mknod $uhid c $major $unit
	chmod 666 $uhid
	;;

ulpt*)
	unit=${i#ulpt}
	ulpt=ulpt$unit
	ulpn=ulpn$unit
	major=57
	rm -f $ulpt $ulpn
	mknod $ulpt c $major $unit
	mknod $ulpn c $major $(($unit + 64))
	chmod 600 $ulpt $ulpn
	;;

urio*)
	unit=${i#urio}
	urio=urio$unit
	major=70
	rm -f $urio
	mknod $urio c $major $unit
	chmod 666 $urio
	;;

uscanner*)
	unit=${i#uscanner}
	uscanner=uscanner$unit
	major=75
	rm -f $uscanner
	mknod $uscanner c $major $unit
	chmod 600 $uscanner
	;;

ttyU*)
	unit=${i#ttyU}
	ttyU=ttyU$unit
	dtyU=dtyU$unit
	ctyU=ctyU$unit
	major=66
	rm -f $ttyU $dtyU $ctyU
	mknod $ttyU c $major $(($unit + $dialin  ))
	mknod $dtyU c $major $(($unit + $dialout ))
	mknod $ctyU c $major $(($unit + $callunit))
	chown uucp $ttyU $dtyU $ctyU
	chmod 600 $ttyU $dtyU $ctyU
	;;

ugen*)
	unit=${i#ugen}
	ugen=ugen$unit
	major=64
	for j in 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15
	do
		ugenj=$ugen.$j
		rm -f $ugenj
		mknod $ugenj c $major $(($unit * 16 + $j))
		chmod 600 $ugenj
	done
	;;

ttyv0)
	rm -f ttyv0
	mknod ttyv0 c 12 0
	;;

wscons)
	makedev ttyE0 ttyE1 ttyE2 ttyE3 ttyE4 ttyE5 ttyE6 ttyE7
	makedev wsmouse0 wsmouse1 wsmouse2 wsmouse3
	makedev wskbd0 wskbd1 wskbd2 wskbd3
	makedev wsmux0 wsmux1 wsmux2 wsmux3
	makedev wsmouse wskbd
	makedev ttyEcfg
	makedev wsfont
	;;

wsmouse)
	rm -f wsmouse
	mknod wsmouse c 65 0
	chmod 600 wsmouse
	;;

wskbd)
	rm -f wskbd
	mknod wskbd c 65 1
	chmod 600 wskbd
	;;

wsmux*)
	unit=${i#wsmux}
	unitctl=$(($unit + 128))
	wsmux=wsmux$unit
	wsmuxctl=wsmuxctl$unit
	major=65
	rm -f $wsmux $wsmuxctl
	mknod $wsmux c $major $unit
	chmod 600 $wsmux
	mknod $wsmuxctl c $major $unitctl
	chmod 200 $wsmuxctl
	;;

ttyEcfg)
	chr=47
	rm -f ttyEcfg
	mknod ttyEcfg c $chr 255
	chmod 600 ttyEcfg
	;;

ttyE*)
	chr=47; unit=${i#ttyE}
	rm -f ttyE$unit
	mknod ttyE$unit c $chr $unit
	;;

wsmouse*)
	unit=${i#wsmouse}
	wsmouse=wsmouse$unit
	major=49
	rm -f $wsmouse
	mknod $wsmouse c $major $unit
	chmod 600 $wsmouse
	;;

wskbd*)
	unit=${i#wskbd}
	wskbd=wskbd$unit
	major=48
	rm -f $wskbd
	mknod $wskbd c $major $unit
	chmod 600 $wskbd
	;;

fd)
	if $nofdesc; then
		rm -f fd/*
		mkdir fd 2>/dev/null
		n=0
		while [ $n -lt 64 ]; do
			mknod fd/$n c 22 $n
			n=$(($n + 1))
		done
		chmod 755 fd
		chmod 666 fd/*
	fi
	;;

wt*)
	case $i in
	wt*) name=wt;  unit=${i#wt};	chr=10;	blk=3;;
	esac
	for sub in $unit $(($unit+8)) $(($unit+16))
	do
	    rm -f $name$sub n$name$sub r$name$sub nr$name$sub
	    mknod $name$sub	b $blk $(($sub + 0))
	    mknod n$name$sub	b $blk $(($sub + 4))
	    mknod r$name$sub	c $chr $(($sub + 0))
	    mknod nr$name$sub	c $chr $(($sub + 4))
	    chgrp operator $name$sub n$name$sub r$name$sub nr$name$sub
	    chmod 660 $name$sub n$name$sub r$name$sub nr$name$sub
	done
	;;

md*)
	unit=${i#md}; blk=17; chr=24
	rm -f md${unit}? rmd${unit}?
	mknod md${unit}a  b $blk $(($unit * 8 + 0))
	mknod md${unit}d  b $blk $(($unit * 8 + 3))
#	mknod rmd${unit}a c $chr $(($unit * 8 + 0))
#	mknod rmd${unit}d c $chr $(($unit * 8 + 3))
	chgrp operator md${unit}? #rmd${unit}?
	chmod 640 md${unit}? #rmd${unit}?
	;;

ss*)
	case $i in
	ss*) name=ss;	unit=${i#ss};	chr=19;;
	esac
	rm -f $name$unit n$name$unit en$name$unit
	mknod $name$unit	c $chr $(($unit * 16 + 0))
	mknod n$name$unit	c $chr $(($unit * 16 + 1))
	mknod en$name$unit	c $chr $(($unit * 16 + 3))
	chgrp operator $name$unit n$name$unit en$name$unit
	chmod 640 $name$unit n$name$unit en$name$unit
	;;

ccd*|fd*|ld*|raid*|sd*|vnd*|wd*|ed*)
	case $i in
	ccd*) name=ccd;	unit=${i#ccd};	blk=16;	chr=18;;
	fd*) name=fd;	unit=${i#fd};	blk=2;	chr=9;;
	raid*) name=raid; unit=${i#raid}; blk=18; chr=62;;
	ld*) name=ld;	unit=${i#ld};	blk=19;	chr=69;;
	sd*) name=sd;	unit=${i#sd};	blk=4;	chr=13;;
	vnd*) name=vnd;	unit=${i#vnd};	blk=14;	chr=41;;
	wd*) name=wd;	unit=${i#wd};	blk=0;	chr=3;;
	ed*) name=ed;	unit=${i#ed};	blk=20;	chr=79;;
	esac
	rm -f $name$unit? r$name$unit?
	mknod ${name}${unit}a	b $blk $(($unit * 8 + 0))
	mknod ${name}${unit}b	b $blk $(($unit * 8 + 1))
	mknod ${name}${unit}c	b $blk $(($unit * 8 + 2))
	mknod ${name}${unit}d	b $blk $(($unit * 8 + 3))
	mknod ${name}${unit}e	b $blk $(($unit * 8 + 4))
	mknod ${name}${unit}f	b $blk $(($unit * 8 + 5))
	mknod ${name}${unit}g	b $blk $(($unit * 8 + 6))
	mknod ${name}${unit}h	b $blk $(($unit * 8 + 7))
	mknod ${name}${unit}i	b $blk $(($unit * 8 + $highpartoffset + 8))
	mknod ${name}${unit}j	b $blk $(($unit * 8 + $highpartoffset + 9))
	mknod ${name}${unit}k	b $blk $(($unit * 8 + $highpartoffset + 10))
	mknod ${name}${unit}l	b $blk $(($unit * 8 + $highpartoffset + 11))
	mknod ${name}${unit}m	b $blk $(($unit * 8 + $highpartoffset + 12))
	mknod ${name}${unit}n	b $blk $(($unit * 8 + $highpartoffset + 13))
	mknod ${name}${unit}o	b $blk $(($unit * 8 + $highpartoffset + 14))
	mknod ${name}${unit}p	b $blk $(($unit * 8 + $highpartoffset + 15))
	mknod r${name}${unit}a	c $chr $(($unit * 8 + 0))
	mknod r${name}${unit}b	c $chr $(($unit * 8 + 1))
	mknod r${name}${unit}c	c $chr $(($unit * 8 + 2))
	mknod r${name}${unit}d	c $chr $(($unit * 8 + 3))
	mknod r${name}${unit}e	c $chr $(($unit * 8 + 4))
	mknod r${name}${unit}f	c $chr $(($unit * 8 + 5))
	mknod r${name}${unit}g	c $chr $(($unit * 8 + 6))
	mknod r${name}${unit}h	c $chr $(($unit * 8 + 7))
	mknod r${name}${unit}i	c $chr $(($unit * 8 + $highpartoffset + 8))
	mknod r${name}${unit}j	c $chr $(($unit * 8 + $highpartoffset + 9))
	mknod r${name}${unit}k	c $chr $(($unit * 8 + $highpartoffset + 10))
	mknod r${name}${unit}l	c $chr $(($unit * 8 + $highpartoffset + 11))
	mknod r${name}${unit}m	c $chr $(($unit * 8 + $highpartoffset + 12))
	mknod r${name}${unit}n	c $chr $(($unit * 8 + $highpartoffset + 13))
	mknod r${name}${unit}o	c $chr $(($unit * 8 + $highpartoffset + 14))
	mknod r${name}${unit}p	c $chr $(($unit * 8 + $highpartoffset + 15))
	chgrp operator $name$unit? r$name$unit?
	chmod 640 $name$unit? r$name$unit?
	;;

ttyCZ*)
	unit=${i#ttyCZ}
	major=73
	minor=$(($unit * 64))
	eminor=$(($minor + 64))
	while [ $minor -lt $eminor ]; do
		if [ $minor -lt 10 ]; then
			nminor=000$minor
		elif [ $minor -lt 100 ]; then
			nminor=00$minor
		elif [ $minor -lt 1000 ]; then
			nminor=0$minor
		else
			nminor=$minor
		fi
		rm -f ttyCZ$nminor dtyCZ$nminor
		mknod ttyCZ$nminor c $major $(($minor + $dialin  ))
		mknod dtyCZ$nminor c $major $(($minor + $dialout ))
		chown uucp ttyCZ$nminor dtyCZ$nminor
		chmod 600 ttyCZ$nminor dtyCZ$nminor
		minor=$(($minor + 1))
	done
	;;

ttyCY*)
	unit=${i#ttyCY}
	major=38
	minor=$(($unit * 32))
	eminor=$(($minor + 32))
	while [ $minor -lt $eminor ]; do
		if [ $minor -lt 10 ]; then
			nminor=00$minor
		elif [ $minor -lt 100 ]; then
			nminor=0$minor
		else
			nminor=$minor
		fi
		rm -f ttyCY$nminor dtyCY$nminor
		mknod ttyCY$nminor c $major $(($minor + $dialin  ))
		mknod dtyCY$nminor c $major $(($minor + $dialout ))
		chown uucp ttyCY$nminor dtyCY$nminor
		chmod 600 ttyCY$nminor dtyCY$nminor
		minor=$(($minor + 1))
	done
	;;

com*|tty*)					# (XXX -- com should die)
	ounit=${i#???}
	ounit=$(($ounit + 0))
	if [ $ounit -lt 10 ]; then
		unit=0$ounit
		rm -f com$ounit
	else
		unit=$ounit
	fi
	rm -f tty$unit dty$unit
	mknod tty$unit c 8 $(($ounit + $dialin ))
	mknod dty$unit c 8 $(($ounit + $dialout))
	chown uucp tty$unit dty$unit
	;;

opty)
	rm -f ttyp[0-9a-f] ptyp[0-9a-f]
	for j in 0 1 2 3 4 5 6 7 8 9 a b c d e f
	do
		case $j in
		[0-9])	jn=$j ;;
		a)	jn=10 ;;
		b)	jn=11 ;;
		c)	jn=12 ;;
		d)	jn=13 ;;
		e)	jn=14 ;;
		f)	jn=15 ;;
		esac
		mknod ttyp$j c 5 $jn
		mknod ptyp$j c 6 $jn
	done
	chmod 666 ttyp[0-9a-f] ptyp[0-9a-f]
	;;

		
pty*)
	class=${i#pty}
	name=`echo pqrstuvwxyzPQRST | dd bs=1 count=1 skip=$class 2>/dev/null`
	case $name in
	v)	echo "$0: $i: pty unit conflicts with console ttyv0 device."
		continue;;
	?)      ;;
	*)      echo "$0: $i: pty unit must be between 0 and 15"
	        continue ;;
	esac
	rm -f tty$name[0-9a-zA-Z] pty$name[0-9a-zA-Z]
	jn=0
	while [ $jn -lt 62 ]
	do
		j=`echo 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ | dd bs=1 count=1 skip=$jn 2>/dev/null`
		skip=0
		if [ $jn -ge 16 ]; then
			skip=$(($class * 30 + 256 - 16))
		fi
		unit=$(($class * 16 + $jn + $skip))
		mknod tty$name$j c 5 $unit
		mknod pty$name$j c 6 $unit
		jn=$(($jn + 1))
	done
	chmod 666 tty$name[0-9a-zA-Z] pty$name[0-9a-zA-Z]
	;;

st*)
	case $i in
	st*) name=st;	unit=${i#st};	chr=14;	blk=5;;
	esac
	rm -f $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit
	mknod $name$unit	b $blk $(($unit * 16 + 0))
	mknod n$name$unit	b $blk $(($unit * 16 + 1))
	mknod e$name$unit	b $blk $(($unit * 16 + 2))
	mknod en$name$unit	b $blk $(($unit * 16 + 3))
	mknod r$name$unit	c $chr $(($unit * 16 + 0))
	mknod nr$name$unit	c $chr $(($unit * 16 + 1))
	mknod er$name$unit	c $chr $(($unit * 16 + 2))
	mknod enr$name$unit	c $chr $(($unit * 16 + 3))
	chgrp operator $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit
	chmod 660 $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit
	;;

ses*|ch*|uk*)
	case $i in
	ch*) name=ch;	unit=${i#ch};	chr=17;;
	uk*) name=uk;	unit=${i#uk};	chr=20;;
	ses*) name=ses;	unit=${i#ses};	chr=74;;
	esac
	rm -f $name$unit
	mknod $name$unit	c $chr $unit
	chgrp operator $name$unit
	chmod 640 $name$unit
	;;

cd*|mcd*)
	case $i in
	cd*) name=cd;	unit=${i#cd};	chr=15;	blk=6;;
	mcd*) name=mcd;	unit=${i#mcd};	chr=39;	blk=7;;
	esac
	rm -f $name$unit? r$name$unit?
	mknod ${name}${unit}a	b $blk $(($unit * 8 + 0))
	mknod ${name}${unit}d	b $blk $(($unit * 8 + 3))
	mknod r${name}${unit}a	c $chr $(($unit * 8 + 0))
	mknod r${name}${unit}d	c $chr $(($unit * 8 + 3))
	chgrp operator $name$unit? r$name$unit?
	chmod 640 $name$unit? r$name$unit?
	;;

lpt*|lpa*)
	case $i in
	lpt*) name=lpt;	unit=${i#lpt};	chr=16;	flags=0;;
	lpa*) name=lpa;	unit=${i#lpa};	chr=16;	flags=128;;
	esac
	rm -f $name$unit
	mknod $name$unit	c $chr $(($unit + $flags))
	;;

bpf*|tun*|mms*|lms*|joy*)
	case $i in
	bpf*) name=bpf;	unit=${i#bpf};	chr=23;;
	tun*) name=tun;	unit=${i#tun};	chr=40;;
	mms*) name=mms;	unit=${i#mms};	chr=35;;
	lms*) name=lms;	unit=${i#lms};	chr=36;;
	joy*) name=joy;	unit=${i#joy};	chr=26;;
	esac
	rm -f $name$unit
	mknod $name$unit	c $chr $unit
	;;

ipl)
	rm -f ipl ipnat ipstate ipauth
	mknod ipl c 44 0
	mknod ipnat c 44 1
	mknod ipstate c 44 2
	mknod ipauth c 44 3
	chmod 600 ipl ipnat ipstate ipauth
	;;

speaker)					# (XXX - installed)
	rm -f speaker
	mknod speaker c 27 0
	;;

lkm)
	rm -f lkm
	mknod lkm c 28 0
	chgrp kmem lkm
	chmod 640 lkm
	;;

audio*)
	unit=${i#audio}
	audio=audio$unit
	sound=sound$unit
	mixer=mixer$unit
	major=42
	audioctl=audioctl$unit
	if [ "$unit" = "" ]; then unit=0; fi
	rm -f $audio $sound $mixer $audioctl
	mknod $sound    c $major $(($unit + 0))
	mknod $audio    c $major $(($unit + 128))
	mknod $mixer    c $major $(($unit + 16))
	mknod $audioctl c $major $(($unit + 192))
	chmod 666 $audio $sound $mixer $audioctl
	;;

rmidi*)
	unit=${i#rmidi}
	major=58
	rmidi=rmidi$unit
	rm -f $rmidi
	mknod $rmidi c $major $unit
	chmod 666 $rmidi
	;;

music*)
	unit=${i#music}
	music=music$unit
	sequencer=sequencer$unit
	major=59
	if [ "$unit" = "" ]; then unit=0; fi
	rm -f $sequencer $music
	mknod $music     c $major $(($unit + 0))
	mknod $sequencer c $major $(($unit + 128))
	chmod 666 $music $sequencer
	;;

radio*)
	unit=${i#radio}
	radio=radio$unit
	major=87
	if [ "$unit" = "" ]; then unit=0; fi
	rm -f $radio
	mknod $radio c $major $unit
	chmod 666 $radio
	;;

apm*)
	rm -f apm apmctl
	mknod apm c 21 0
	mknod apmctl c 21 8
	chmod 644 apm apmctl
	;;

satlink*)
	unit=${i#satlink}
	rm -f satlink$unit
	mknod satlink$unit c 45 $unit
	chmod 444 satlink$unit
	;;

random)
	rm -f random urandom
	mknod random c 46 0
	mknod urandom c 46 1
	chmod 444 random
	chmod 644 urandom
	;;

cfs*)
	unit=${i#cfs}
	cfs=cfs$unit
	major=60
	rm -f $cfs
	mknod $cfs c $major $unit
	chmod 600 $cfs
	;;

sysmon)
	major=67
	rm -f sysmon
	mknod sysmon c $major 0
	chmod 644 sysmon

	rm -f watchdog
	mknod watchdog c $major 1
	chmod 644 watchdog
	;;

scsibus*)
	unit=${i#scsibus}
	rm -f scsibus$unit
	mknod scsibus$unit c 61 $unit
	chmod 644 scsibus$unit
	;;

bktr)
	makedev bktr0 bktr1
	ln -fs bktr0 bktr
	ln -fs tuner0 tuner
	ln -fs vbi0 vbi
	;;

bktr*)
	unit=${i#bktr}
	rm -f bktr$unit tuner$unit vbi$unit
	mknod bktr$unit c 71 $(($unit + 0))
	mknod tuner$unit c 71 $(($unit + 16))
	mknod vbi$unit c 71 $(($unit + 32))
	chmod 444 bktr$unit tuner$unit vbi$unit
	;;

iop*)
	unit=${i#iop}
	rm -f iop$unit
	mknod iop$unit c 76 $unit
	chmod 600 iop$unit
	;;

mlx*)
	unit=${i#mlx}
	rm -f mlx$unit
	mknod mlx$unit c 78 $unit
	chmod 600 mlx$unit
	;;

mly*)
	unit=${i#mly}
	rm -f mly$unit
	mknod mly$unit c 80 $unit
	chmod 600 mly$unit
	;;

agp*)
	unit=${i#agp}
	rm -f agp$unit
	mknod agp$unit c 82 $unit
	if [ "$unit" = "0" ]; then ln -fs agp$unit agpgart; fi
	chmod 644 agp$unit
	;;

pci*)
	unit=${i#pci}
	rm -f pci$unit
	mknod pci$unit c 83 $unit
	chmod 644 pci$unit
	;;

dpti*)
	unit=${i#dpti}
	rm -f dpti$unit
	mknod dpti$unit c 84 $unit
	chmod 600 dpti$unit
	;;

dpt*)
	unit=${i#dpt}
	rm -f dpt$unit
	mknod dpt$unit c 96 $unit
	chmod 600 dpt$unit
	;;

altq)
	mkdir altq 2>/dev/null
	chmod 755 altq
	unit=0
	for dev in altq cbq wfq afm fifoq red rio localq hfsc \
	    cdnr blue priq; do
		rm -f altq/$dev
		mknod altq/$dev c 77 $unit
		chmod 644 altq/$dev
		unit=$(($unit + 1))
	done
	;;

isdn)
	rm -f isdn
	mknod isdn c 50 0
	chmod 600 isdn
	;;

isdnctl)
	rm -f isdnctl
	mknod isdnctl c 51 0
	chmod 600 isdnctl
	;;

isdnbchan*)
	unit=${i#isdnbchan}
	rm -f isdnbchan$unit
	mknod isdnbchan$unit c 52 $unit
	chmod 600 isdnbchan$unit
	;;

isdntel*)
	unit=${i#isdntel}
	rm -f isdntel$unit
	mknod isdntel$unit c 54 $unit
	chmod 600 isdntel$unit
	;;

isdntrc*)
	unit=${i#isdntrc}
	rm -f isdntrc$unit
	mknod isdntrc$unit c 53 $unit
	chmod 600 isdntrc$unit
	;;

vmegen)
	makedev vmegen0 vmegen1 vmegen2 vmegen3
	;;

vmegen*)
	unit=${i#vmegen}
	rm -f vmegen$unit
	mknod vmegen$unit c 68 $(($unit * 16 + 0))
	chmod 600 vmegen$unit
	;;

wsfont)
	rm -f wsfont
	mknod wsfont c 81 0
	chmod 600 wsfont
	;;

cir*)
	unit=${i#cir}
	cir=cir$unit
	major=86
	rm -f $cir
	mknod $cir c $major $unit
	chmod 666 $cir
	;;

irframe*)
	unit=${i#irframe}
	irframe=irframe$unit
	major=85
	rm -f $irframe
	mknod $irframe c $major $unit
	chmod 600 $irframe
	;;

clockctl)
	rm -f clockctl
	mknod clockctl c 89 0
	chgrp ntpd clockctl
	chmod 660 clockctl
	;;

nsmb*)
	unit=${i#nsmb}
	nsmb=nsmb$unit
	major=88
	rm -f $nsmb
	mknod $nsmb c $major $unit
	chmod 644 $nsmb
	;;

local)
	if [ -f "$0.local" ]; then
		umask 0
		sh $0.local all
		umask 77
	fi
	;;

*)
	echo $i: unknown device
	;;

esac
done

}

makedev $*

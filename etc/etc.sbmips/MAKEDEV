#!/bin/sh -
#	$NetBSD: MAKEDEV,v 1.1.2.2 2004/04/12 04:49:56 jmc Exp $
#
# Copyright (c) 1990 The Regents of the University of California.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#	This product includes software developed by the University of
#	California, Berkeley and its contributors.
# 4. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
###########################################################################
#
#   PLEASE RUN "cd ../share/man/man8 ; perl5 MAKEDEV2manpage.pl"
#   AFTER CHANGING THIS FILE, AND COMMIT THE UPDATED MANPAGE!
#
###########################################################################
#
# Device "make" file.  Valid arguments:
#	all	Makes all known devices, including local devices.
#		If units are expected for a device MAKEDEV supplies the
#		standard numbers.
#	minimal	A minimal set of devices for install disks, etc.
#	std	The standard devices (console, drum, klog, kmem, mem,
#		null, stderr, stdin, stdout, tty, zero).
#	local	Configuration specific devices which are created by running
#		the MAKEDEV.local shell script with the argument "all".
#	usbs	All USB devices. If units are expected for a device
#		MAKEDEV supplies the standard numbers.
#	isdn	make ISDN devices
#
# Tapes:
#	st*	SCSI tape
#
# Disks:
#	ccd*	concatenated disk driver
#	cd*	SCSI CD-ROM
#	ld*	Logical disk devices (e.g. hardware RAID)
#	md*	memory pseudo-disk devices
#	raid*	RAIDframe disk driver
#	sd*	ATAPI and SCSI disks
#	vnd*	file pseudo-disks
#	wd*	IDE disks
#
# Terminals:
#	tty0*	SB1250 ("sbscn") serial ports
#
# Pseudo terminals:
#	pty*	set of 62 master and slave pseudo terminals
#	opty	first 16 ptys, to save inodes on install media
#
# USB devices:
#	usb*	Bus control devices used by usbd for attach/detach
#	uhid*	Generic HID devices
#	ulpt*	Printer devices
#	ugen*	Generic devices
#	urio*	Diamond Rio 500
#	uscanner*	Scanners
#	ttyU*	Modem
#
# ISDN devices:
#	i4b	communication between userland isdnd and kernel
#	i4bctl	control device
#	i4brbch* raw b-channel access
#	i4btel*	telephony device
#	i4btrc*	trace device
#
# Special purpose devices:
#	altq	ALTQ control device
#	bpf*	Berkeley packet filter devices
#	ch*	SCSI media changer
#	clockctl clock control for non root users
#	fd	file descriptors (/dev/fd/*)
#	ipl	IP filter
#	lkm	loadable kernel modules interface
#	mlx*	Mylex DAC960 control interface
#	pci*	PCI bus access devices
#	random	Random number generator
#	satlink* PlanetConnect satellite receiver driver
#	scsibus* SCSI busses, see scsi(4), scsictl(8)
#	ses*	SES/SAF-TE SCSI Devices
#	ss*	SCSI scanner
#	tun*	network tunnel driver
#	uk*	unknown SCSI device

dialin=0
dialout=524288
callunit=262144

highpartoffset=524280	# offset for partition 9 to 16

PATH=/sbin:/usr/sbin:/bin:/usr/bin
umask 77
for i
do
case $i in

all)
	sh $0 std fd wd0 wd1 sd0 sd1 sd2 sd3 pty0
	sh $0 st0 st1 ch0 cd0 cd1 vnd0 vnd1 vnd2 vnd3
	sh $0 ccd0 ccd1 ccd2 ccd3 md0 md1 ss0 ss1 uk0 uk1
	sh $0 raid0 raid1 raid2 raid3 raid4 raid5 raid6 raid7
	sh $0 ld0 ld1 ld2 ld3
	sh $0 bpf0 bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7
	sh $0 tun0 tun1 tun2 tun3
	sh $0 tty00 tty01
	sh $0 ipl
	sh $0 random local satlink0 mlx0
	sh $0 scsibus0 scsibus1 scsibus2 scsibus3
	sh $0 lkm
	sh $0 usbs isdn
	sh $0 ttyCZ0 ttyCY0
	sh $0 pci0 pci1 pci2 pci3 pci4 pci5 pci6 pci7
	sh $0 altq
	sh $0 clockctl
	;;

minimal)
	sh $0 std
	sh $0 wd0 wd1 sd0 sd1 sd2 sd3 st0 st1 ch0 cd0 cd1 ccd0 ccd1 md0
	sh $0 opty
	sh $0 tty00 tty01
	;;

usbs)
	sh $0 usb usb0 usb1 usb2 usb3 usb4 usb5 usb6 usb7
	sh $0 uhid0 uhid1 uhid2 uhid3
	sh $0 ulpt0 ulpt1
	sh $0 ttyU0 ttyU1
	sh $0 urio0
	sh $0 uscanner0 uscanner1
	;;

isdn)
	sh $0 i4b i4bctl i4brbch0 i4brbch1 i4btel0 i4btel1 i4btrc0 i4btrc1
	;;

std)
	rm -f console drum mem kmem null zero io tty klog stdin stdout stderr
	mknod console		c 0 0
	mknod drum		c 3 0	; chmod 640 drum ; chgrp kmem drum
	mknod kmem		c 2 1	; chmod 640 kmem ; chgrp kmem kmem
	mknod mem		c 2 0	; chmod 640 mem ; chgrp kmem mem
	mknod null		c 2 2	; chmod 666 null
	mknod zero		c 2 12	; chmod 666 zero
	mknod tty		c 1 0	; chmod 666 tty
	mknod klog		c 6 0	; chmod 600 klog
	mknod stdin		c 10 0	; chmod 666 stdin
	mknod stdout		c 10 1	; chmod 666 stdout
	mknod stderr		c 10 2	; chmod 666 stderr
	;;

usb*)
	unit=${i#usb}
	if [ "$unit" = "" ]; then
	    unit=255
	    usb=usb
	else
	    usb=usb$unit
	fi
	major=45
	rm -f $usb
	mknod $usb c $major $unit
	chown root.wheel $usb
	chmod 600 $usb
	;;

uhid*)
	unit=${i#uhid}
	uhid=uhid$unit
	major=46
	rm -f $uhid
	mknod $uhid c $major $unit
	chown root.wheel $uhid
	chmod 666 $uhid
	;;

ulpt*)
	unit=${i#ulpt}
	ulpt=ulpt$unit
	major=47
	rm -f $ulpt
	mknod $ulpt c $major $unit
	chown root.wheel $ulpt
	chmod 600 $ulpt
	;;

ttyU*)
	unit=${i#ttyU}
	ttyU=ttyU$unit
	dtyU=dtyU$unit
	ctyU=ctyU$unit
	major=57
	rm -f $ttyU $dtyU $ctyU
	mknod $ttyU c $major $(($unit + $dialin  ))
	mknod $dtyU c $major $(($unit + $dialout ))
	mknod $ctyU c $major $(($unit + $callunit))
	chown uucp.wheel $ttyU $dtyU $ctyU
	chmod 600 $ttyU $dtyU $ctyU
	;;

ugen*)
	unit=${i#ugen}
	ugen=ugen$unit
	major=48
	for j in 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15
	do
		ugenj=$ugen.$j
		rm -f $ugenj
		mknod $ugenj c $major $(($unit * 16 + ${j#0}))
		chown root.wheel $ugenj
		chmod 600 $ugenj
	done
	;;

urio*)
	unit=${i#urio}
	urio=urio$unit
	major=62
	rm -f $urio
	mknod $urio c $major $unit
	chown root.wheel $urio
	chmod 600 $urio
	;;

uscanner*)
	unit=${i#uscanner}
	uscanner=uscanner$unit
	major=63
	rm -f $uscanner
	mknod $uscanner c $major $unit
	chown root.wheel $uscanner
	chmod 600 $uscanner
	;;

fd)
	rm -f fd/*
	mkdir fd > /dev/null 2>&1
	n=0
	while [ $n -lt 64 ]; do
		mknod fd/$n c 10 $n
		n=$(($n + 1))
	done
	chown -R root.wheel fd
	chmod 755 fd
	chmod 666 fd/*
	;;

md*)
	unit=${i#md}; blk=6; chr=28
	rm -f md${unit}? rmd${unit}?
	mknod md${unit}a  b $blk $(($unit * 8 + 0))
	mknod md${unit}c  b $blk $(($unit * 8 + 2))
#	mknod rmd${unit}a c $chr $(($unit * 8 + 0))
#	mknod rmd${unit}c c $chr $(($unit * 8 + 2))
	chgrp operator md${unit}? #rmd${unit}?
	chmod 640 md${unit}? #rmd${unit}?
	;;

ccd*|cd*|ld*|raid*|sd*|vnd*|wd*)
	case $i in
	ccd*)	name=ccd;	unit=${i#ccd};	blk=7; chr=27;;
	cd*)	name=cd;	unit=${i#cd};	blk=3; chr=13;;
	ld*)	name=ld;	unit=${i#ld};	blk=17; chr=59;;
	raid*)	name=raid;	unit=${i#raid};	blk=16; chr=43;;
	sd*)	name=sd;	unit=${i#sd};	blk=8; chr=8;;
	vnd*)	name=vnd;	unit=${i#vnd};	blk=9; chr=9;;
	wd*)	name=wd;	unit=${i#wd};	blk=4; chr=36;;
	esac
	rm -f $name$unit? r$name$unit?
	mknod ${name}${unit}a	b $blk $(($unit * 8 + 0))
	mknod ${name}${unit}b	b $blk $(($unit * 8 + 1))
	mknod ${name}${unit}c	b $blk $(($unit * 8 + 2))
	mknod ${name}${unit}d	b $blk $(($unit * 8 + 3))
	mknod ${name}${unit}e	b $blk $(($unit * 8 + 4))
	mknod ${name}${unit}f	b $blk $(($unit * 8 + 5))
	mknod ${name}${unit}g	b $blk $(($unit * 8 + 6))
	mknod ${name}${unit}h	b $blk $(($unit * 8 + 7))
	mknod ${name}${unit}i	b $blk $(($unit * 8 + $highpartoffset + 8))
	mknod ${name}${unit}j	b $blk $(($unit * 8 + $highpartoffset + 9))
	mknod ${name}${unit}k	b $blk $(($unit * 8 + $highpartoffset + 10))
	mknod ${name}${unit}l	b $blk $(($unit * 8 + $highpartoffset + 11))
	mknod ${name}${unit}m	b $blk $(($unit * 8 + $highpartoffset + 12))
	mknod ${name}${unit}n	b $blk $(($unit * 8 + $highpartoffset + 13))
	mknod ${name}${unit}o	b $blk $(($unit * 8 + $highpartoffset + 14))
	mknod ${name}${unit}p	b $blk $(($unit * 8 + $highpartoffset + 15))
	mknod r${name}${unit}a	c $chr $(($unit * 8 + 0))
	mknod r${name}${unit}b	c $chr $(($unit * 8 + 1))
	mknod r${name}${unit}c	c $chr $(($unit * 8 + 2))
	mknod r${name}${unit}d	c $chr $(($unit * 8 + 3))
	mknod r${name}${unit}e	c $chr $(($unit * 8 + 4))
	mknod r${name}${unit}f	c $chr $(($unit * 8 + 5))
	mknod r${name}${unit}g	c $chr $(($unit * 8 + 6))
	mknod r${name}${unit}h	c $chr $(($unit * 8 + 7))
	mknod r${name}${unit}i	c $chr $(($unit * 8 + $highpartoffset + 8))
	mknod r${name}${unit}j	c $chr $(($unit * 8 + $highpartoffset + 9))
	mknod r${name}${unit}k	c $chr $(($unit * 8 + $highpartoffset + 10))
	mknod r${name}${unit}l	c $chr $(($unit * 8 + $highpartoffset + 11))
	mknod r${name}${unit}m	c $chr $(($unit * 8 + $highpartoffset + 12))
	mknod r${name}${unit}n	c $chr $(($unit * 8 + $highpartoffset + 13))
	mknod r${name}${unit}o	c $chr $(($unit * 8 + $highpartoffset + 14))
	mknod r${name}${unit}p	c $chr $(($unit * 8 + $highpartoffset + 15))
	chgrp operator $name$unit? r$name$unit?
	chmod 640 $name$unit? r$name$unit?
	;;

ttyCZ*)
	unit=${i#ttyCZ}
	major=61
	minor=$(($unit * 64))
	eminor=$(($minor + 64))
	while [ $minor -lt $eminor ]; do
		if [ $minor -lt 10 ]; then
			nminor=000$minor
		elif [ $minor -lt 100 ]; then
			nminor=00$minor
		elif [ $minor -lt 1000 ]; then
			nminor=0$minor
		else
			nminor=$minor
		fi
		rm -f ttyCZ$nminor dtyCZ$nminor
		mknod ttyCZ$nminor c $major $(($minor + $dialin  ))
		mknod dtyCZ$nminor c $major $(($minor + $dialout ))
		chown uucp.wheel ttyCZ$nminor dtyCZ$nminor
		chmod 600 ttyCZ$nminor dtyCZ$nminor
		minor=$(($minor + 1))
	done
	;;

ttyCY*)
	unit=${i#ttyCY}
	major=60
	minor=$(($unit * 32))
	eminor=$(($minor + 32))
	while [ $minor -lt $eminor ]; do
		if [ $minor -lt 10 ]; then
			nminor=00$minor
		elif [ $minor -lt 100 ]; then
			nminor=0$minor
		else
			nminor=$minor
		fi
		rm -f ttyCY$nminor dtyCY$nminor
		mknod ttyCY$nminor c $major $(($minor + $dialin  ))
		mknod dtyCY$nminor c $major $(($minor + $dialout ))
		chown uucp.wheel ttyCY$nminor dtyCY$nminor
		chmod 600 ttyCY$nminor dtyCY$nminor
		minor=$(($minor + 1))
	done
	;;

ttyEcfg)
	rm -f $i
	mknod $i c 25 255
	chown root:wheel $i
	;;

ttyE*)
	unit=${i#ttyE}
        rm -f ttyE$unit
        mknod ttyE$unit c 25 $unit
        chown uucp.wheel ttyE$unit
        ;;

tty0*)
	unit=${i#tty0}
	rm -f tty0$unit dty0$unit
	mknod tty0$unit c 26 $(($unit + $dialin))
	mknod dty0$unit c 26 $(($unit + $dialout))
	chown uucp.wheel tty0$unit dty0$unit
	;;


opty)
	rm -f ttyp[0-9a-f] ptyp[0-9a-f]
	for j in 0 1 2 3 4 5 6 7 8 9 a b c d e f
	do
		case $j in
		[0-9])	jn=$j ;;
		a)	jn=10 ;;
		b)	jn=11 ;;
		c)	jn=12 ;;
		d)	jn=13 ;;
		e)	jn=14 ;;
		f)	jn=15 ;;
		esac
		mknod ttyp$j c 4 $jn
		mknod ptyp$j c 5 $jn
	done
	chgrp wheel ttyp[0-9a-f] ptyp[0-9a-f]
	chmod 666 ttyp[0-9a-f] ptyp[0-9a-f]
	;;

		
pty*)
	class=${i#pty}
	name=`echo pqrstuvwxyzPQRST | dd bs=1 count=1 skip=$class 2>/dev/null`
	case $name in
	v)	echo "$0: $i: pty unit conflicts with console ttyv0 device."
		continue;;
	?)      ;;
	*)      echo "$0: $i: pty unit must be between 0 and 15"
	        continue ;;
	esac
	rm -f tty$name[0-9a-zA-Z] pty$name[0-9a-zA-Z]
	jn=0
	while [ $jn -lt 62 ]
	do
		j=`echo 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ | dd bs=1 count=1 skip=$jn 2>/dev/null`
		skip=0
		if [ $jn -ge 16 ]; then
			skip=$(($class * 30 + 256 - 16))
		fi
		unit=$(($class * 62 + $jn + $skip))
		mknod tty$name$j c 4 $unit
		mknod pty$name$j c 5 $unit
		jn=$(($jn + 1))
	done
        chgrp wheel tty$name[0-9a-zA-Z] pty$name[0-9a-zA-Z]
        chmod 666 tty$name[0-9a-zA-Z] pty$name[0-9a-zA-Z]
	;;

st*)
	case $i in
	st*) name=st;	unit=${i#st};	chr=12;	blk=2;;
	esac
	rm -f $name$unit n$name$unit e$name$unit en$name$unit \
	r$name$unit nr$name$unit er$name$unit enr$name$unit
	mknod ${name}${unit}	b $blk $(($unit * 16+ 0))
	mknod n${name}${unit}	b $blk $(($unit * 16+ 1))
	mknod e${name}${unit}	b $blk $(($unit * 16+ 2))
	mknod en${name}${unit}	b $blk $(($unit * 16+ 3))
	mknod r${name}${unit}	c $chr $(($unit * 16+ 0))
	mknod nr${name}${unit}	c $chr $(($unit * 16+ 1))
	mknod er${name}${unit}	c $chr $(($unit * 16+ 2))
	mknod enr${name}${unit} c $chr $(($unit * 16+ 3))
	chgrp operator ${name}${unit} n${name}${unit} \
		e$name$unit en$name$unit \
		r${name}${unit} nr${name}${unit} \
		er${name}${unit} enr${name}${unit}
	chmod 660 ${name}${unit} n${name}${unit} \
		e$name$unit en$name$unit \
		r${name}${unit} nr${name}${unit} \
		er${name}${unit} enr${name}${unit}
	;;

ses*|ch*|uk*)
	case $i in
	ch*) name=ch;	unit=${i#ch};	chr=14;;
	uk*) name=uk;	unit=${i#uk};	chr=33;;
	ses*) name=ses;	unit=${i#ses};	chr=58;;
	esac
	rm -f $name$unit
	mknod $name$unit	c $chr $unit
	chgrp operator $name$unit
	chmod 640 $name$unit
	;;

ss*)
	case $i in
	ss*) name=ss;	unit=${i#ss};	chr=32;;
	esac
	rm -f $name$unit n$name$unit en$name$unit
	mknod $name$unit	c $chr $(($unit * 16 + 0))
	mknod n$name$unit	c $chr $(($unit * 16 + 1))
	mknod en$name$unit	c $chr $(($unit * 16 + 3))
	chgrp operator $name$unit n$name$unit en$name$unit
	chmod 640 $name$unit n$name$unit en$name$unit
	;;

bpf*|tun*)
	case $i in
	bpf*) name=bpf;	unit=${i#bpf};	chr=11;;
	tun*) name=tun;	unit=${i#tun};	chr=7;;
	esac
	rm -f $name$unit
	mknod $name$unit	c $chr $unit
	chown root.wheel $name$unit
	;;

lkm)
	rm -f lkm
	mknod lkm c 16 0
	chown root.kmem lkm
	chmod 640 lkm
	;;

mlx*)
	unit=${i#mlx}
	rm -f mlx$unit
	mknod mlx$unit c 65 $unit
	chmod 600 mlx$unit
	;;

pci*)
	unit=${i#pci}
	rm -f pci$unit
	mknod pci$unit c 66 $unit
	chmod 644 pci$unit
	;;

altq)
	mkdir -p altq
	chmod 755 altq
	unit=0
	for dev in altq cbq wfq afm fifoq red rio localq hfsc \
	    cdnr blue priq; do
		rm -f altq/$dev
		mknod altq/$dev c 64 $unit
		chmod 644 altq/$dev
		unit=$(($unit + 1))
	done
	;;

ipl)
	rm -f ipl ipnat ipstate ipauth
	mknod ipl c 35 0
	mknod ipnat c 35 1
	mknod ipstate c 35 2
	mknod ipauth c 35 3
	chown root.wheel ipl ipnat ipstate ipauth
	chmod 600 ipl ipnat ipstate ipauth
	;;

satlink*)
	unit=${i#satlink}
	rm -f satlink$unit
	mknod satlink$unit c 38 $unit
	chmod 444 satlink$unit
	;;

random)
	rm -f random urandom
	mknod random c 39 0
	mknod urandom c 39 1
	chown root.wheel random urandom
	chmod 444 random
	chmod 644 urandom
	;;

scsibus*)
	unit=${i#scsibus}
	rm -f scsibus$unit
	mknod scsibus$unit c 42 $unit
	chown root:wheel scsibus$unit
	chmod 644 scsibus$unit
	;;

i4b)
	rm -f i4b
	mknod i4b c 51 0
	chmod 600 i4b
	;;

i4bctl)
	rm -f i4bctl
	mknod i4bctl c 52 0
	chmod 600 i4bctl
	;;

i4brbch*)
	unit=${i#i4brbch}
	rm -f i4brbch$unit
	mknod i4brbch$unit c 53 $unit
	chmod 600 i4brbch$unit
	;;

i4btrc*)
	unit=${i#i4btrc}
	rm -f i4btrc$unit
	mknod i4btrc$unit c 54 $unit
	chmod 600 i4btrc$unit
	;;

i4btel*)
	unit=${i#i4btel}
	rm -f i4btel$unit
	mknod i4btel$unit c 55 $unit
	chmod 600 i4btel$unit
	;;

clockctl)
	rm -f clockctl
	mknod clockctl c 69 0
	chown root.ntpd clockctl
	chmod 660 clockctl
	;;

local)
	if [ -f "$0.local" ]; then
		umask 0
		sh $0.local all
		umask 77
	fi
	;;

*)
	echo $i: unknown device
	;;

esac
done

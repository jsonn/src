.\"	$NetBSD: ld.aout_so.1,v 1.7.30.1 2008/05/18 12:30:44 yamt Exp $
.\"
.\" Copyright (c) 1998 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to The NetBSD Foundation
.\" by Paul Kranenburg.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd March 24, 2000
.Dt LD.AOUT_SO 1
.Os
.Sh NAME
.Nm ld.so
.Nd run-time link-editor
.Sh DESCRIPTION
.Nm
is a self-contained, position independent program image
providing run-time support for loading and link-editing
shared objects into a process' address space.
It uses the data structures
.Po
see
.Xr link 5
.Pc
contained within dynamically linked programs to determine which shared
libraries are needed and loads them at a convenient virtual address
using the
.Xr mmap 2
system call.
.Pp
After all shared libraries have been successfully loaded,
.Nm
proceeds to resolve external references from both the main program and
all objects loaded.
A mechanism is provided for initialization routines to be called,
on a per-object basis, giving a shared object an opportunity
to perform any extra set-up, before execution of the program proper begins.
.Nm
looks for a symbol named
.Em .init
in each object's symbol table.
If present, this symbol is assumed to represent a C-function declared as
.Ft void
.Fn .init "void" ,
which is then called.
Similarly, a
.Ft void
.Fn .fini "void"
function is called just before an object is unloaded from the process
address space as a result of calling
.Xr dlclose 3 .
Note that while an object's
.Em .init
is always called, whether the object is loaded automatically at program
startup or programmatically by using
.Xr dlopen 3 ,
the
.Em .fini
function is called only on
.Sq last Xr dlclose 3 .
.Pp
This mechanism is exploited by the system-supplied C++ constructor
initialization code located in
.Pa /usr/lib/c++rt.o .
This file should be included in the list of object-code files passed to
.Xr ld 1
when building a shared C++ library.
.Pp
.Nm
is itself a shared object that is initially loaded by the startup module
.Em crt0 .
Since
.Xr a.out 5
formats do not provide easy access to the file header from within a running
process,
.Em crt0
uses the special symbol
.Va _DYNAMIC
to determine whether a program is in fact dynamically linked or not.
Whenever the linker
.Xr ld 1
has relocated this symbol to a location other than 0,
.Em crt0
assumes the services of
.Nm
are needed
.Po
see
.Xr link 5
for details
.Pc .
.Em crt0
passes control to
.Nm rtld Ns 's
entry point before the program's
.Fn main
routine is called.
Thus,
.Nm
can complete the link-editing process before the dynamic program calls upon
services of any dynamic library.
.Pp
To quickly locate the required shared objects in the filesystem,
.Nm
may use a
.Dq hints
file, prepared by the
.Xr ldconfig 8
utility, in which the full path specification of the shared objects can be
looked up by hashing on the 3-tuple
.Ao
library-name, major-version-number, minor-version-number
.Ac Ns \&.
.Pp
.Nm
recognizes a number of environment variables that can be used to modify
its behavior as follows:
.Pp
.Bl -tag -width LD_TRACE_LOADED_OBJECTS \" intentionally not the longest
.It Ev LD_LIBRARY_PATH
A colon separated list of directories, overriding the default search path
for shared libraries.
.It Ev LD_PRELOAD
A colon separated list of shared object filenames to be loaded
.Em after
the main program but
.Em before
its shared object dependencies.
.It Ev LD_WARN_NON_PURE_CODE
When set, issue a warning whenever a link-editing operation requires
modification of the text segment of some loaded object.
This is usually indicative of an incorrectly built library.
.It Ev LD_SUPPRESS_WARNINGS
When set, no warning messages of any kind are issued.
Normally, a warning is given if satisfactorily versioned
library could not be found.
.It Ev LD_TRACE_LOADED_OBJECTS
When set, causes
.Nm
to exit after loading the shared objects and printing a summary which includes
the absolute pathnames of all objects, to standard output.
.It Ev LD_TRACE_LOADED_OBJECTS_FMT1
.It Ev LD_TRACE_LOADED_OBJECTS_FMT2
When set, these variables are interpreted as format strings a la
.Xr printf 3
to customize the trace output and are used by
.Xr ldd 1 Ns 's
.Fl f
option and allows
.Xr ldd 1
to be operated as a filter more conveniently.
The following conversions can be used:
.Bl -tag -width xxxx
.It \&%a
The main program's name
.Po also known as
.Dq __progname
.Pc .
.It \&%A
The value of the environment variable
.Ev LD_TRACE_LOADED_OBJECTS_PROGNAME
.It \&%o
The library name.
.It \&%m
The library's major version number.
.It \&%n
The library's minor version number.
.It \&%p
The full pathname as determined by
.Nm rtld Ns 's
library search rules.
.It \&%x
The library's load address.
.El
.Pp
Additionally,
.Sy \en
and
.Sy \et
are recognized and have their usual meaning.
.It Ev LD_NO_INTERN_SEARCH
When set,
.Nm
does not process any internal search paths that were recorded in the
executable.
.It Ev LD_NOSTD_PATH
When set, do not include a set of built-in standard directory paths for
searching.
This might be useful when running on a system with a completely
non-standard filesystem layout.
.El
.Sh FILES
.Bl -tag -width /var/run/ld.so.hintsXXX -compact
.It Pa /var/run/ld.so.hints
library location hints built by
.Xr ldconfig 8
.El
.Sh SEE ALSO
.Xr ld 1 ,
.Xr ld.elf_so 1 ,
.Xr ld.so 1 ,
.Xr link 5 ,
.Xr ldconfig 8
.Sh HISTORY
The shared library model employed first appeared in SunOS 4.0.
.Sh SECURITY CONSIDERATIONS
The environment variables
.Ev LD_LIBRARY_PATH
and
.Ev LD_PRELOAD
are not honored when executing in a set-user-ID or set-group-ID environment.
This action is taken to prevent malicious substitution of shared object
dependencies or interposition of symbols.

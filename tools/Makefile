#	$NetBSD: Makefile,v 1.50.2.2 2002/06/13 02:42:04 lukem Exp $

.include <bsd.own.mk>

# XXX We can't currently build the toolchain for x86-64.
.if ${MACHINE_ARCH} != "x86_64"
TOOLCHAIN_BITS= toolchain .WAIT dbsym mdsetimage
.endif

# Dependencies in SUBDIR below ordered to maximize parallel ability.
.if !defined(NOSUBDIR)					# {

SUBDIR=	host-mkdep .WAIT compat .WAIT \
	binstall .WAIT \
		cap_mkdb crunchgen ctags gencat lint lint2 lorder \
		m4 makewhatis mkdep mtree rpcgen tsort uudecode \
	texinfo .WAIT \
	yacc .WAIT \
	lex .WAIT \
	${TOOLCHAIN_BITS} \
		asn1_compile cat cksum compile_et config installboot lint1 \
		makefs menuc mklocale msgc pax pwd_mkdb zic

.if ${MKMAN} != "no"
SUBDIR+=	groff
.endif

.if ${MKMAINTAINERTOOLS:Uno} != "no"
SUBDIR+=	autoconf gettext
.endif

.if ${MACHINE} == prep
SUBDIR+=	prep-mkbootimage
.endif

.if (${MACHINE_ARCH} == "mipsel" || ${MACHINE_ARCH} == "mipseb")
SUBDIR+=	mips-elf2ecoff
.endif

.if (${MACHINE} == "sparc" || ${MACHINE} == "sparc64")
SUBDIR+=	fgen
.endif

.endif	# ! NOSUBDIR					# }

.if ${MKTOOLS:Uyes} == "no" || ${USETOOLS} != "yes"
realall install: _warn
.if ${MKTOOLS:Uyes} == "no"
_warn:
	@echo '*** WARNING: "MKTOOLS" is set to "no"; this will prevent building and'
	@echo '*** updating your host toolchain.  This should be used only as a'
	@echo '*** temporary workaround for toolchain problems, as it will result'
	@echo '*** in version skew and build errors over time!'
.else
_warn:
.endif

.for dir in ${SUBDIR:N.WAIT}
all-${dir} depend-${dir} dependall-${dir} install-${dir}:
	@true
.endfor
.endif

.include <bsd.subdir.mk>
.include <bsd.obj.mk>

# For each .WAIT point, make sure the immediately preceding target is
# installed before building anything after that point.
#
# We use the "internal" targets and dependencies generated by <bsd.subdir.mk>
# to achieve this. These targets look like:
#	subdir-all:	all-dir1     [.WAIT] all-dir2     etc..
#	subdir-install:	install-dir1 [.WAIT] install-dir2 etc..
# and so on for each element in ${TARGETS}, with .WAIT sources inserted at
# places corresponding to the .WAITs in our $SUBDIR variable.
#
# Also, since we're now mixing `install' with `all' and `depend' targets
# an order relationship between those in each individual subdirectory
# must be established.
#
_deps:=
_prev:=

.for d in ${SUBDIR}
_this:=		${d}

.if ${_this} == ".WAIT"

# setup dependency to apply to all/depend targets in the next group
_deps:=		${_deps} ${_prev:S/^/install-/}

# if we're building *only* individual targets (i.e. "dependall-yacc"),
# make sure prerequisite tools build before installing
.if !make(all) && !make(dependall)
install-${_prev}: dependall-${_prev}
.endif

.else

# order depend/all/install targets for ${d} subdir.  Note the additional
# .WAIT to achieve "closure" of the predecessor/successor relationships.
.ORDER: depend-${d} all-${d} dependall-${d} .WAIT install-${d}

# make all/depend-${d} dependent on list of install targets
depend-${d} all-${d} dependall-${d}: ${_deps}

.endif

# stash current name in case the next entry is .WAIT
_prev:=		${d}
.endfor

cleantools:
	rm -r -f tools.${HOST_OSTYPE}

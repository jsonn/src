.\"	$NetBSD: curses.3,v 1.15.6.1 2000/03/05 23:28:57 jdc Exp $
.\"
.\" Copyright (c) 1985, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)curses.3	8.1 (Berkeley) 6/4/93
.\"
.Dd March 11, 1999
.Dt CURSES 3
.Os
.Sh NAME
.Nm curses
.Nd screen functions with
.Dq optimal
cursor motion
.Sh LIBRARY
.Lb libcurses
.Sh SYNOPSIS
.Nm cc
.Op Ar flags
.Ar files
.Fl lcurses ltermcap
.Op Ar libraries
.Sh DESCRIPTION
These routines give the user a method of updating screens with reasonable
optimization.  They keep an image of the current screen,
and the user sets up an image of a new one.  Then the
.Fn refresh
tells the routines to make the current screen look like the new one.
In order to initialize the routines, the routine
.Fn initscr
must be called before any of the other routines that deal with windows and
screens are used.  The routine
.Fn endwin
should be called before exiting.
.Sh SEE ALSO
.Xr ioctl 2 ,
.Xr getenv 3 ,
.Xr tty 4 ,
.Xr termcap 5
.Rs
.%T Screen Updating and Cursor Movement Optimization: A Library Package
.%A Ken Arnold
.Re
.Sh AUTHOR
.An Ken Arnold
.Sh FUNCTIONS
.Bl -column "subwin(win,lines,cols,begin_y,begin_x)"
.It addch(ch)	add a character to
.Em stdscr
.It addstr(str)	add a string to
.Em stdscr
.It addnstr(str,len)	add no more than len chars of string to
.Em stdscr
.It attron(attribute)	turn on attribute modes
.It attroff(attribute)	turn off attribute modes
.It attrset(attribute)	set attribute modes
.It beep()	sound the terminal bell
.It border(ls,rs,ts,bs,tl,tr,bl,br)	draw a border around
.Em stdscr
.It box(win,vert,hor)	draw a box around a window
.It cbreak()	set cbreak mode
.It clear()	clear
.Em stdscr
.It clearok(win,boolf)	set clear flag for
.Em win
.It clrtobot()	clear to bottom on
.Em stdscr
.It clrtoeol()	clear to end of line on
.Em stdscr
.It delch()	delete a character
.It deleteln()	delete a line
.It delwin(win)	delete
.Em win
.It echo()	set echo mode
.It endwin()	end window modes
.It erase()	erase
.Em stdscr
.It flash()	flash the terminal screen
.It flushinp()	flush terminal input
.It flushok(win,boolf)	set flush-on-refresh flag for
.Em win
.It fullname(termbuf,name) get full name from
.Em termbuf
.It getch()	get a char through
.Em stdscr
.It getcap(name)	get terminal capability
.Em name
.It getstr(str)	get a string through
.Em stdscr
.It gettmode()	get tty modes
.It getyx(win,y,x)	get (y,x) co-ordinates
.It idlok(win,boolf)	set insert/deleteln flags for
.Em win
.It inch()	get char at current (y,x) co-ordinates
.It initscr()	initialize screens
.It insch(c)	insert a char
.It insdelln(n)	insert/delete n lines on
.Em stdstr
.It insertln()	insert a line
.It isendwin()	check if endwin() or wrefresh() was called latest
.It keypad(win,boolf)	set keypad flag for
.Em win
.It leaveok(win,boolf)	set leave flag for
.Em win
.It longname(termbuf,name)	get long name from
.Em termbuf
.It move(y,x)	move to (y,x) on
.Em stdscr
.It mvcur(lasty,lastx,newy,newx)	actually move cursor
.It newwin(lines,cols,begin_y,begin_x)\ 	create a new window
.It nl()	set newline mapping
.It nocbreak()	unset cbreak mode
.It nodelay(win,boolf)	unset blocking reads for
.Em win
.It noecho()	unset echo mode
.It nonl()	unset newline mapping
.It noraw()	unset raw mode
.It notimeout(win, boolf)	unset infinite timeout on keypad assembly for
.Em win
.It overlay(win1,win2)	overlay win1 on win2
.It overwrite(win1,win2)	overwrite win1 on top of win2
.It printw(fmt,arg1,arg2,...)	printf on
.Em stdscr
.It raw()	set raw mode
.It refresh()	make current screen look like
.Em stdscr
.It resetty()	reset tty flags to stored value
.It savetty()	stored current tty flags
.It scanw(fmt,arg1,arg2,...)	scanf through
.Em stdscr
.It scrl(n)	scroll
.Em stdscr
n lines
.It scroll(win)	scroll
.Em win
one line
.It scrollok(win,boolf)	set scroll flag for
.Em win
.It setterm(name)	set term variables for name
.It standend()	end standout mode
.It standout()	start standout mode
.It subwin(win,lines,cols,begin_y,begin_x)\ 	create a subwindow
.It timeout(delay)	set blocking or non-blocking read for
.Em stdscr
.It touchline(win,y,sx,ex)	mark line
.Em y
.Em sx
through
.Em sy
as changed
.It touchoverlap(win1,win2)	mark overlap of
.Em win1
on
.Em win2
as changed
.It touchwin(win)	\*(lqchange\*(rq all of
.Em win
.It unctrl(ch)	printable version of
.Em ch
.It underend()	end underscore mode
.It underscore()	start underscore mode
.It waddch(win,ch)	add char to
.Em win
.It waddstr(win,str)	add string to
.Em win
.It wattron(attribute)	turn on attribute modes for
.Em win
.It wattroff(attribute)	turn off attribute modes for
.Em win
.It wattrset(attribute)	set attribute modes for
.Em win
.It wborder(win,ls,rs,ts,bs,tl,tr,bl,br)	draw a border around
.Em win
.It wclear(win)	clear
.Em win
.It wclrtobot(win)	clear to bottom of
.Em win
.It wclrtoeol(win)	clear to end of line on
.Em win
.It wdelch(win)	delete char from
.Em win
.It wdeleteln(win)	delete line from
.Em win
.It werase(win)	erase
.Em win
.It wgetch(win)	get a char through
.Em win
.It wgetstr(win,str)	get a string through
.Em win
.It winch(win)	get char at current (y,x) in
.Em win
.It winsch(win,c)	insert char into
.Em win
.It winsdelln(win,n)	insert/delete n lines on
.Em win
.It winsertln(win)	insert line into
.Em win
.It wmove(win,y,x)	set current (y,x) co-ordinates on
.Em win
.It wprintw(win,fmt,arg1,arg2,...)\ 	printf on
.Em win
.It wrefresh(win)	make screen look like
.Em win
.It wscanw(win,fmt,arg1,arg2,...)\ 	scanf through
.Em win
.It wscrl(win,n)	scroll
.Em win
n lines
.It wstandend(win)	end standout mode on
.Em win
.It wstandout(win)	start standout mode on
.Em win
.It wtimeout(win,delay)	set blocking or non-blocking read for
.Em win
.It wunderend(win)	end underscore mode on
.Em win
.It wunderscore(win)	start underscore mode on
.Em win
.El
.Sh HISTORY
The
.Nm
package appeared in
.Bx 4.0 .

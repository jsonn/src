.\"	$NetBSD: curses.3,v 1.28.2.1 2000/06/23 16:16:27 minoura Exp $
.\"
.\" Copyright (c) 1985, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)curses.3	8.1 (Berkeley) 6/4/93
.\"
.Dd March 11, 1999
.Dt CURSES 3
.Os
.Sh NAME
.Nm curses
.Nd screen functions with
.Dq optimal
cursor motion
.Sh LIBRARY
.Lb libcurses
.Sh SYNOPSIS
.Nm cc
.Op Ar flags
.Ar files
.Fl lcurses ltermcap
.Op Ar libraries
.Sh DESCRIPTION
These routines give the user a method of updating screens with reasonable
optimization.  They keep an image of the current screen,
and the user sets up an image of a new one.  Then the
.Fn refresh
tells the routines to make the current screen look like the new one.
In order to initialize the routines, the routine
.Fn initscr
must be called before any of the other routines that deal with windows and
screens are used.  The routine
.Fn endwin
should be called before exiting.  The routine
.Fn start_color
must be called before any of the other routines that deal with color are used.
.Sh SEE ALSO
.Xr ioctl 2 ,
.Xr getenv 3 ,
.Xr tty 4 ,
.Xr termcap 5
.Rs
.%T Screen Updating and Cursor Movement Optimization: A Library Package
.%A Ken Arnold
.Re
.Sh AUTHOR
.An Ken Arnold
.Sh FUNCTIONS
.Bl -column "subwin(win,lines,cols,begin_y,begin_x)"
.It addch(ch)	add a character to
.Em stdscr
.It addstr(str)	add a string to
.Em stdscr
.It addnstr(str,len)	add no more than len chars of string to
.Em stdscr
.It attron(attribute)	turn on attribute modes
.It attroff(attribute)	turn off attribute modes
.It attrset(attribute)	set attribute modes
.It beep()	sound the terminal bell
.It bkgd(ch)	set background rendition for
.Em stdscr
and applies this rendition to
.Em stdscr
.It bkgdset(ch)	set background rendition for
.Em stdscr
.It border(ls,rs,ts,bs,tl,tr,bl,br)	draw a border around
.Em stdscr
.It box(win,vert,hor)	draw a box around a window
.It can_change_colors()	check if terminal can change colors
.It cbreak()	set cbreak mode
.It clear()	clear
.Em stdscr
.It clearok(win,boolf)	set clear flag for
.Em win
.It clrtobot()	clear to bottom on
.Em stdscr
.It clrtoeol()	clear to end of line on
.Em stdscr
.It color_content(c, r, g, b)	get rgb values of color
.It copywin(srcwin,dstwin,sminrow,smincol,dminrow,dmincol,dmaxrow,dmaxcol,overlay)
 Copy rectangle from
.Em srcwin 
to 
.Em dstwin.
If overlay is true then copy is nondestructive.
.It curs_set(vis)	change cursor visibility, 0 is invisible, 1 is
normal, 2 is high visibility.  Returns previous value on success.
.It delay_output(ms)	pause output for
.Em ms
milliseconds using terminal pad character.
.It def_prog_mode()	define program (in curses) terminal modes
.It def_shell_mode()	define shell (not in curses) terminal modes
.It delch()	delete a character
.It deleteln()	delete a line
.It delwin(win)	delete
.Em win
.It derwin(win,lines,cols,begin_y,begin_x)\ 	create a subwindow
relative to 
.Em win.
.It doupdate()	make current screen look like virtual screen 
.It dupwin(win)	duplicate
.Em win
.It echo()	set echo mode
.It endwin()	end window modes
.It erase()	erase
.Em stdscr
.It erasechar()	Return the terminal erase character
.It flash()	flash the terminal screen
.It flushinp()	flush terminal input
.It flushok(win,boolf)	set flush-on-refresh flag for
.Em win
.It fullname(termbuf,name)	get full name from
.Em termbuf
.It getattrs(win)	get attributes for
.Em win
.It getbkgd(win)	get background rendition for
.Em win
.It getcap(name)	get terminal capability
.Em name
.It getch()	get a char through
.Em stdscr
.It getcury(win)	get current y position on
.Em win
.It getcurx(win)	get current x position on
.Em win
.It getbegy(win)	get start y position on
.Em win
.It getbegx(win)	get start x position on
.Em win
.It getmaxy(win)	get maximum y position on
.Em win
.It getmaxx(win)	get maximum x position on
.Em win
.It getstr(str)	get a string through
.Em stdscr
.It gettmode()	get tty modes
.It getyx(win,y,x)	get (y,x) co-ordinates
.It has_colors()	check if terminal has colors
.It hline(ch, count)	draw a horizontal line of character ch.
.It idlok(win,boolf)	set insert/deleteln flags for
.Em win
.It inch()	get char at current (y,x) co-ordinates
.It init_color(c, r, g, b)	set rgb values of color
.It init_pair(p, f, b)	set foreground and background colors of pair
.It initscr()	initialize screens
.It insch(c)	insert a char
.It insdelln(n)	insert/delete n lines on
.Em stdstr
.It insertln()	insert a line
.It intrflush(win,boolf)	set flush on interrupt terminal mode
.It is_linetouched(win, line)	check if line has been modified since
last refresh.
.It is_wintouched(win)	Check if window has been modified since last
refresh.
.It isendwin()	check if endwin() or wrefresh() was called latest
.It keypad(win,boolf)	set keypad flag for
.Em win
.It killchar()	Return the terminal kill character.
.It leaveok(win,boolf)	set leave flag for
.Em win
.It longname(termbuf,name)	get long name from
.Em termbuf
.It meta(win,boolf)	turn terminal meta mode on and off.  Note
.Em win
is always ignored.
.It move(y,x)	move to (y,x) on
.Em stdscr
.It mvcur(lasty,lastx,newy,newx)	actually move cursor
.It mvhline(y, x, ch, count)	move to
.Em y ,
.Em x
and draw a horizontal line of character
.Em ch
for
.Em count
characters.
.It mvvline(y, x, ch, count)	move to 
.Em y ,
.Em x
and draw a vertical line of character 
.Em ch
for
.Em count
characters.
.It mvwhline(win, y, x, ch, count)	move to 
.Em y ,
.Em x
and draw a horizontal line of character 
.Em ch
for
.Em count
characters on window
.Em win .
.It mvwvline(win, y, x, ch, count)	move to 
.Em y ,
.Em x
and draw a vertical line of character 
.Em ch
for
.Em count
characters on window
.Em win .
.It napms(ms)	sleep for
.Em ms
milliseconds.
.It newwin(lines,cols,begin_y,begin_x)\ 	create a new window
.It nl()	set newline mapping
.It nocbreak()	unset cbreak mode
.It nodelay(win,boolf)	unset blocking reads for
.Em win
.It noecho()	unset echo mode
.It nonl()	unset newline mapping
.It noraw()	unset raw mode
.It notimeout(win, boolf)	unset infinite timeout on keypad assembly for
.Em win
.It overlay(win1,win2)	overlay win1 on win2
.It overwrite(win1,win2)	overwrite win1 on top of win2
.It pair_content(p, r, g, b)	get foreground and background colors of pair
.It printw(fmt,arg1,arg2,...)	printf on
.Em stdscr
.It raw()	set raw mode
.It refresh()	make current screen look like
.Em stdscr
.It reset_prog_mode()	restore program (in curses) terminal modes
.It reset_shell_mode()	restore shell (not in curses) terminal modes
.It resetty()	reset tty flags to stored value
.It savetty()	stored current tty flags
.It scanw(fmt,arg1,arg2,...)	scanf through
.Em stdscr
.It scrl(n)	scroll
.Em stdscr
n lines
.It scroll(win)	scroll
.Em win
one line
.It scrollok(win,boolf)	set scroll flag for
.Em win
.It setterm(name)	set term variables for name
.It standend()	end standout mode
.It standout()	start standout mode
.It start_color()	initialise color
.It subwin(win,lines,cols,begin_y,begin_x)\ 	create a subwindow
.It timeout(delay)	set blocking or non-blocking read for
.Em stdscr
.It touchline(win,y,sx,ex)	mark line
.Em y
.Em sx
through
.Em sy
as changed
.It touchoverlap(win1,win2)	mark overlap of
.Em win1
on
.Em win2
as changed
.It touchwin(win)	\*(lqchange\*(rq all of
.Em win
.It unctrl(ch)	printable version of
.Em ch
.It underend()	end underscore mode
.It underscore()	start underscore mode
.It ungetch(ch)		Put character back onto input queue.
.It untouchwin(win)	Make window appear not to have been modified.
.It vline(ch, count)	Draw a vertical line of character
.Em ch .
.It waddch(win,ch)	add char to
.Em win
.It waddstr(win,str)	add string to
.Em win
.It wattron(win,attribute)	turn on attribute modes for
.Em win
.It wattroff(win,attribute)	turn off attribute modes for
.Em win
.It wattrset(win,attribute)	set attribute modes for
.Em win
.It wbkgd(win, ch)	set background rendition for
.Em win and apply this rendition to
.Em win
.It wbkgdset(win, ch)	set background rendition for
.Em win
.It wborder(win,ls,rs,ts,bs,tl,tr,bl,br)	draw a border around
.Em win
.It wclear(win)	clear
.Em win
.It wclrtobot(win)	clear to bottom of
.Em win
.It wclrtoeol(win)	clear to end of line on
.Em win
.It wdelch(win)	delete char from
.Em win
.It wdeleteln(win)	delete line from
.Em win
.It werase(win)	erase
.Em win
.It wgetch(win)	get a char through
.Em win
.It wgetstr(win,str)	get a string through
.Em win
.It whline(win, ch, count)	Draw a horizontal line of character
.Em ch
on window
.Em win .
.It winch(win)	get char at current (y,x) in
.Em win
.It winsch(win,c)	insert char into
.Em win
.It winsdelln(win,n)	insert/delete n lines on
.Em win
.It winsertln(win)	insert line into
.Em win
.It wmove(win,y,x)	set current (y,x) co-ordinates on
.Em win
.It wnoutrefresh(win)	add
.Em win
to virtual screen
.It wprintw(win,fmt,arg1,arg2,...)\ 	printf on
.Em win
.It wrefresh(win)	make screen look like
.Em win
.It wscanw(win,fmt,arg1,arg2,...)\ 	scanf through
.Em win
.It wscrl(win,n)	scroll
.Em win
n lines
.It wstandend(win)	end standout mode on
.Em win
.It wstandout(win)	start standout mode on
.Em win
.It wtimeout(win,delay)	set blocking or non-blocking read for
.Em win
.It wtouchln(win, line, n, changed)	If 
.Em changed
is 1 then touch
.Em n
lines starting at
.Em line
in window
.Em win .
If 
.Em changed
is 0 then untouch
.Em n
lines starting at
.Em line
in window
.Em win
.It wunderend(win)	end underscore mode on
.Em win
.It wunderscore(win)	start underscore mode on
.Em win
.It wvline(win, ch, count)	Draw a vertical line of character
.Em ch
on window
.Em win .
.El
.Sh HISTORY
The
.Nm
package appeared in
.Bx 4.0 .

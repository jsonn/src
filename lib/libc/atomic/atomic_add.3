.\"	$NetBSD: atomic_add.3,v 1.1.8.2 2008/06/23 10:22:41 ad Exp $
.\"
.\" Copyright (c) 2007 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to The NetBSD Foundation
.\" by Jason R. Thorpe.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\" notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\" notice, this list of conditions and the following disclaimer in the
.\" documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd April 11, 2007
.Dt ATOMIC_ADD 3
.Os
.Sh NAME
.Nm atomic_add ,
.Nm atomic_add_32 ,
.Nm atomic_add_int ,
.Nm atomic_add_long ,
.Nm atomic_add_ptr ,
.Nm atomic_add_64 ,
.Nm atomic_add_32_nv ,
.Nm atomic_add_int_nv ,
.Nm atomic_add_long_nv ,
.Nm atomic_add_ptr_nv ,
.Nm atomic_add_64_nv
.Nd atomic add operations
.\" .Sh LIBRARY
.\" .Lb libc
.Sh SYNOPSIS
.In sys/atomic.h
.Ft void
.Fn atomic_add_32 "volatile uint32_t *ptr" "int32_t delta"
.Ft void
.Fn atomic_add_int "volatile unsigned int *ptr" "int delta"
.Ft void
.Fn atomic_add_long "volatile unsigned long *ptr" "long delta"
.Ft void
.Fn atomic_add_ptr "volatile void *ptr" "ssize_t delta"
.Ft void
.Fn atomic_add_64 "volatile uint64_t *ptr" "int64_t delta"
.Ft uint32_t
.Fn atomic_add_32_nv "volatile uint32_t *ptr" "int32_t delta"
.Ft unsigned int
.Fn atomic_add_int_nv "volatile unsigned int *ptr" "int delta"
.Ft unsigned long
.Fn atomic_add_long_nv "volatile unsigned long *ptr" "long delta"
.Ft void *
.Fn atomic_add_ptr_nv "volatile void *ptr" "ssize_t delta"
.Ft uint64_t
.Fn atomic_add_64_nv "volatile uint64_t *ptr" "int64_t delta"
.Sh DESCRIPTION
The
.Nm atomic_add
family of functions add a signed value
.Fa delta
to the variable referenced by
.Fa ptr
in an atomic fashion.
.Pp
The
.Fn *_nv
variants of these functions return the new value.
.Pp
The 64-bit variants of these functions are available only on platforms
that can support atomic 64-bit memory access.
Applications can check for the availability of 64-bit atomic memory
operations by testing if the pre-processor macro
.Dv __HAVE_ATOMIC64_OPS
is defined.
.Sh SEE ALSO
.Xr atomic_ops 3
.Sh HISTORY
The
.Nm atomic_add
functions first appeared in
.Nx 5.0 .

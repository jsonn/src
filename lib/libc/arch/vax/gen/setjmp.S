/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#if defined(LIBC_SCCS) && !defined(lint)
	/* .asciz "@(#)setjmp.s	8.1 (Berkeley) 6/4/93" */
	.asciz "$NetBSD: setjmp.S,v 1.4.2.2 2002/03/22 20:41:57 nathanw Exp $"
#endif /* LIBC_SCCS and not lint */

/*
 * C library -- setjmp, longjmp
 *
 *	longjmp(a,v)
 * will generate a "return(v)" from
 * the last call to
 *	setjmp(a)
 * by restoring registers from the stack,
 * and a struct sigcontext, see <signal.h>
 */

#include "DEFS.h"

ENTRY(setjmp, R6)
	movl	4(%ap),%r6		# construct sigcontext
	subl2	$12,%sp			# space for current struct sigstack
	pushl	%sp			# get current values
	pushl	$0			# no new values
	calls	$4,_C_LABEL(__sigaltstack14) # pop args plus signal stack value
	movl	(%sp)+,(%r6)+		# save onsigstack status of caller
	pushl	$0
	calls	$1,_C_LABEL(sigblock)	# get signal mask
	movl	%r0,(%r6)+		# save signal mask of caller
	movl	(%ap),%r0
	moval	4(%ap)[%r0],(%r6)+		# save sp of caller
	movl	12(%fp),(%r6)+		# save frame pointer of caller
	movl	8(%fp),(%r6)+		# save argument pointer of caller
	movl	16(%fp),(%r6)+		# save pc of caller
	movpsl	(%r6)			# save psl of caller
	movw	4(%fp),(%r6)
	clrl	%r0
	ret

ENTRY(longjmp, 0)
	movl	8(%ap),%r0		# return(v)
	movl	4(%ap),%r1		# fetch buffer
	tstl	12(%r1)
	beql	botch
loop:
	cmpl	12(%r1),%fp		# are we there yet?
	beql	done
	blssu	botch
	moval	20(%fp),%r2
	blbc	6(%fp),1f		# was %r0 saved?
	movl	%r0,(%r2)+
1:
	bbc	$1,6(%fp),2f		# was %r1 saved?
	movl	%r1,(%r2)
2:
	movab	loop,16(%fp)
	ret				# pop another frame

done:
	pushl	%r1			# pointer to sigcontext
	calls	$1,_C_LABEL(sigreturn)	# restore previous context
					# we should never return
botch:
	calls	$0,_C_LABEL(longjmperror)
	halt

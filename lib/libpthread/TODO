Bugs to fix:

- pthread_cond_timedwait() doesn't work if SA's aren't running yet,
  because the alarm system isn't up and running. It would be weird to
  use them that way, but it's perfectly legal.
- There is a race between pthread_cancel() and
  pthread_cond_broadcast() or pthread_exit() about removing an item
  from the sleep queue. The locking protocols there need a little
  adjustment.


Interfaces/features to implement:
- pthread_kill()
- pthread_atfork()
- priority scheduling
- libc integration: 
   - foo_r interfaces
- system integration
   - some macros and prototypes belong in headers other than pthread.h


Features that need more/better regression tests:
 - pthread_cond_broadcast()
 - pthread_once()
 - pthread_get/setspecific()
 - signals


Things that need fixing:
- Recycle dead threads for new threads.

Ideas to play with:
- Explore the trapcontext vs. usercontext distinction in ucontext_t.
- Get rid of thread structures when too many accumulate (is this
  actually a good idea?)
- Adaptive spin/sleep locks for mutexes.
- Supporting different mutex types would be nice (normal, debugging,
  recursive, etc).
- Currently, each thread uses two real pages of memory: one at the top
  of the stack for actual stack data, and one at the bottom for the
  pthread_st. If we can get suitable space above the initial stack for
  main(), we can cut this to one page per thread. Perhaps crt0 should
  do something different (give us more space) if libpthread is linked
  in?
- Figure out whether/how to expose the inline version of
  pthread_self().

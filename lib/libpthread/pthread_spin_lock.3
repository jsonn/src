.\" $NetBSD: pthread_spin_lock.3,v 1.8.6.2 2008/05/26 08:45:56 wiz Exp $
.\"
.\" Copyright (c) 2002, 2008 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd May 26, 2008
.Dt PTHREAD_SPIN_LOCK 3
.Os
.Sh NAME
.Nm pthread_spin_lock ,
.Nm pthread_spin_trylock
.Nd acquire a spin lock
.Sh LIBRARY
.Lb libpthread
.Sh SYNOPSIS
.In pthread.h
.Ft int
.Fn pthread_spin_lock "pthread_spinlock_t *lock"
.Ft int
.Fn pthread_spin_trylock "pthread_spinlock_t *lock"
.Sh DESCRIPTION
The
.Fn pthread_spin_lock
function acquires a spin lock on
.Fa lock
provided that
.Fa lock
is not presently held.
If the lock cannot be
immediately acquired, the calling thread repeatedly retries until it can
acquire the lock.
.Pp
The
.Fn pthread_spin_trylock
function performs the same action, but does not block if the lock
cannot be immediately obtained (i.e., the lock is held).
.Sh RETURN VALUES
If successful, the
.Fn pthread_spin_lock
and
.Fn pthread_spin_trylock
functions will return zero.
Otherwise an error number will be returned to indicate the error.
.Sh ERRORS
The
.Fn pthread_spin_trylock
function shall fail if:
.Bl -tag -width Er
.It Bq Er EBUSY
The lock could not be acquired because a writer holds the lock or
was blocked on it.
.El
.Pp
The
.Fn pthread_spin_lock
function may fail if:
.Bl -tag -width Er
.It Bq Er EDEADLK
The current thread already owns
.Fa lock
for writing.
.El
.Pp
The
.Fn pthread_spin_lock
and
.Fn pthread_spin_trylock
functions may fail if:
.Bl -tag -width Er
.It Bq Er EINVAL
The value specified by
.Fa lock
is invalid.
.El
.Sh SEE ALSO
.Xr pthread_spin_destroy 3 ,
.Xr pthread_spin_init 3 ,
.Xr pthread_spin_unlock 3
.Sh STANDARDS
.Fn pthread_spin_lock
and
.Fn pthread_spin_trylock
conform to
.St -p1003.1-2001 .
.Sh CAVEATS
Applications using spinlocks are vulnerable to the effects of priority
inversion.
Applications using real-time threads
.Pq Dv SCHED_FIFO , SCHED_RR
should not use these interfaces.
Outside carefully controlled environments, priority inversion with spinlocks
can lead to system deadlock.
Mutexes are preferable in nearly every possible use case.

.\"	$NetBSD: RSA_set_method.3,v 1.2.2.2 2002/08/29 16:38:59 he Exp $
.\"
.\" Automatically generated by Pod::Man version 1.02
.\" Sat Aug 10 00:57:10 2002
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "RSA_set_method 3"
.TH RSA_set_method 3 "0.9.6g" "2001-04-12" "OpenSSL"
.UC
.SH "NAME"
RSA_set_default_method, RSA_get_default_method, RSA_set_method,
RSA_get_method, RSA_PKCS1_SSLeay, RSA_PKCS1_RSAref,
RSA_null_method, RSA_flags, RSA_new_method \- select \s-1RSA\s0 method
.SH "LIBRARY"
libcrypto, -lcrypto
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/rsa.h>
.Ve
.Vb 1
\& void RSA_set_default_method(RSA_METHOD *meth);
.Ve
.Vb 1
\& RSA_METHOD *RSA_get_default_method(void);
.Ve
.Vb 1
\& RSA_METHOD *RSA_set_method(RSA *rsa, RSA_METHOD *meth);
.Ve
.Vb 1
\& RSA_METHOD *RSA_get_method(RSA *rsa);
.Ve
.Vb 1
\& RSA_METHOD *RSA_PKCS1_SSLeay(void);
.Ve
.Vb 1
\& RSA_METHOD *RSA_PKCS1_RSAref(void);
.Ve
.Vb 1
\& RSA_METHOD *RSA_null_method(void);
.Ve
.Vb 1
\& int RSA_flags(RSA *rsa);
.Ve
.Vb 1
\& RSA *RSA_new_method(RSA_METHOD *method);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An \fB\s-1RSA_METHOD\s0\fR specifies the functions that OpenSSL uses for \s-1RSA\s0
operations. By modifying the method, alternative implementations
such as hardware accelerators may be used.
.PP
Initially, the default is to use the OpenSSL internal implementation,
unless OpenSSL was configured with the \f(CW\*(C`rsaref\*(C'\fR or \f(CW\*(C`\-DRSA_NULL\*(C'\fR
options. \fIRSA_PKCS1_SSLeay()\fR returns a pointer to that method.
.PP
\&\fIRSA_PKCS1_RSAref()\fR returns a pointer to a method that uses the RSAref
library. This is the default method in the \f(CW\*(C`rsaref\*(C'\fR configuration;
the function is not available in other configurations.
\&\fIRSA_null_method()\fR returns a pointer to a method that does not support
the \s-1RSA\s0 transformation. It is the default if OpenSSL is compiled with
\&\f(CW\*(C`\-DRSA_NULL\*(C'\fR. These methods may be useful in the \s-1USA\s0 because of a
patent on the \s-1RSA\s0 cryptosystem.
.PP
\&\fIRSA_set_default_method()\fR makes \fBmeth\fR the default method for all \fB\s-1RSA\s0\fR
structures created later.
.PP
\&\fIRSA_get_default_method()\fR returns a pointer to the current default
method.
.PP
\&\fIRSA_set_method()\fR selects \fBmeth\fR for all operations using the key
\&\fBrsa\fR.
.PP
\&\fIRSA_get_method()\fR returns a pointer to the method currently selected
for \fBrsa\fR.
.PP
\&\fIRSA_flags()\fR returns the \fBflags\fR that are set for \fBrsa\fR's current method.
.PP
\&\fIRSA_new_method()\fR allocates and initializes an \fB\s-1RSA\s0\fR structure so that
\&\fBmethod\fR will be used for the \s-1RSA\s0 operations. If \fBmethod\fR is \fB\s-1NULL\s0\fR,
the default method is used.
.SH "THE RSA_METHOD STRUCTURE"
.IX Header "THE RSA_METHOD STRUCTURE"
.Vb 4
\& typedef struct rsa_meth_st
\& {
\&     /* name of the implementation */
\&        const char *name;
.Ve
.Vb 3
\&     /* encrypt */
\&        int (*rsa_pub_enc)(int flen, unsigned char *from,
\&          unsigned char *to, RSA *rsa, int padding);
.Ve
.Vb 3
\&     /* verify arbitrary data */
\&        int (*rsa_pub_dec)(int flen, unsigned char *from,
\&          unsigned char *to, RSA *rsa, int padding);
.Ve
.Vb 3
\&     /* sign arbitrary data */
\&        int (*rsa_priv_enc)(int flen, unsigned char *from,
\&          unsigned char *to, RSA *rsa, int padding);
.Ve
.Vb 3
\&     /* decrypt */
\&        int (*rsa_priv_dec)(int flen, unsigned char *from,
\&          unsigned char *to, RSA *rsa, int padding);
.Ve
.Vb 3
\&     /* compute r0 = r0 ^ I mod rsa->n (May be NULL for some
\&                                        implementations) */
\&        int (*rsa_mod_exp)(BIGNUM *r0, BIGNUM *I, RSA *rsa);
.Ve
.Vb 3
\&     /* compute r = a ^ p mod m (May be NULL for some implementations) */
\&        int (*bn_mod_exp)(BIGNUM *r, BIGNUM *a, const BIGNUM *p,
\&          const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
.Ve
.Vb 2
\&     /* called at RSA_new */
\&        int (*init)(RSA *rsa);
.Ve
.Vb 2
\&     /* called at RSA_free */
\&        int (*finish)(RSA *rsa);
.Ve
.Vb 7
\&     /* RSA_FLAG_EXT_PKEY        - rsa_mod_exp is called for private key
\&      *                            operations, even if p,q,dmp1,dmq1,iqmp
\&      *                            are NULL
\&      * RSA_FLAG_SIGN_VER        - enable rsa_sign and rsa_verify
\&      * RSA_METHOD_FLAG_NO_CHECK - don't check pub/private match
\&      */
\&        int flags;
.Ve
.Vb 1
\&        char *app_data; /* ?? */
.Ve
.Vb 5
\&     /* sign. For backward compatibility, this is used only
\&      * if (flags & RSA_FLAG_SIGN_VER)
\&      */
\&        int (*rsa_sign)(int type, unsigned char *m, unsigned int m_len,
\&           unsigned char *sigret, unsigned int *siglen, RSA *rsa);
.Ve
.Vb 5
\&     /* verify. For backward compatibility, this is used only
\&      * if (flags & RSA_FLAG_SIGN_VER)
\&      */
\&        int (*rsa_verify)(int type, unsigned char *m, unsigned int m_len,
\&           unsigned char *sigbuf, unsigned int siglen, RSA *rsa);
.Ve
.Vb 1
\& } RSA_METHOD;
.Ve
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fIRSA_PKCS1_SSLeay()\fR, \fIRSA_PKCS1_RSAref()\fR, \fIRSA_PKCS1_null_method()\fR,
\&\fIRSA_get_default_method()\fR and \fIRSA_get_method()\fR return pointers to the
respective \fB\s-1RSA_METHOD\s0\fRs.
.PP
\&\fIRSA_set_default_method()\fR returns no value.
.PP
\&\fIRSA_set_method()\fR returns a pointer to the \fB\s-1RSA_METHOD\s0\fR previously
associated with \fBrsa\fR.
.PP
\&\fIRSA_new_method()\fR returns \fB\s-1NULL\s0\fR and sets an error code that can be
obtained by ERR_get_error(3) if the allocation fails. Otherwise it
returns a pointer to the newly allocated structure.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
openssl_rsa(3), RSA_new(3)
.SH "HISTORY"
.IX Header "HISTORY"
\&\fIRSA_new_method()\fR and \fIRSA_set_default_method()\fR appeared in SSLeay 0.8.
\&\fIRSA_get_default_method()\fR, \fIRSA_set_method()\fR and \fIRSA_get_method()\fR as
well as the rsa_sign and rsa_verify components of \s-1RSA_METHOD\s0 were
added in OpenSSL 0.9.4.

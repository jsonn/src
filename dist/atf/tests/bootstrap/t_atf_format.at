dnl
dnl Automated Testing Framework (atf)
dnl
dnl Copyright (c) 2007, 2008 The NetBSD Foundation, Inc.
dnl All rights reserved.
dnl
dnl Redistribution and use in source and binary forms, with or without
dnl modification, are permitted provided that the following conditions
dnl are met:
dnl 1. Redistributions of source code must retain the above copyright
dnl    notice, this list of conditions and the following disclaimer.
dnl 2. Redistributions in binary form must reproduce the above copyright
dnl    notice, this list of conditions and the following disclaimer in the
dnl    documentation and/or other materials provided with the distribution.
dnl
dnl THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND
dnl CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
dnl INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
dnl MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
dnl IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS BE LIABLE FOR ANY
dnl DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
dnl DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
dnl GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
dnl INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
dnl IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
dnl OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
dnl IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
dnl

AT_SETUP([atf-format: formatting of long lines])

AT_TESTED([atf-config])
call_atf_format()
{
    export COLUMNS # Required by FreeBSD's sh.
    $(atf-config -t atf_libexecdir)/atf-format "${@}"
}

dnl Start by formatting a single-paragraph message.  Do several tests
dnl with different screen widths.

AT_DATA([text],
[This is a single-line text message to be formatted.
])

AT_DATA([expout],
[This is a single-line text message to be formatted.
])
AT_CHECK([COLUMNS=80 call_atf_format <text], [0], [expout], [])

AT_DATA([expout],
[  tag  This is a single-line text message to be formatted.
])
AT_CHECK([COLUMNS=80 call_atf_format -t '  tag  ' <text], [0], [expout], [])
AT_CHECK([COLUMNS=80 call_atf_format -t '  tag' -l 7 <text], [0], [expout], [])

AT_DATA([expout],
[This is a single-line
text message to be
formatted.
])
AT_CHECK([COLUMNS=21 call_atf_format <text], [0], [expout], [])

AT_DATA([expout],
[  tag  This is a single-line
       text message to be
       formatted.
])
AT_CHECK([COLUMNS=28 call_atf_format -t '  tag  ' <text], [0], [expout], [])
AT_CHECK([COLUMNS=28 call_atf_format -t '  tag' -l 7 <text], [0], [expout], [])

AT_DATA([expout],
[  tag  This
       is
       a
       single-line
       text
       message
       to
       be
       formatted.
])
AT_CHECK([COLUMNS=1 call_atf_format -t '  tag  ' <text], [0], [expout], [])
AT_CHECK([COLUMNS=1 call_atf_format -t '  tag' -l 7 <text], [0], [expout], [])

dnl Now repeat all the tests above buy by formatting a two-paragraph
dnl message.

AT_DATA([text],
[This is a multi-line text message to be formatted.
And this is the second line, or better said paragraph.
])

AT_DATA([expout],
[This is a multi-line text message to be formatted.

And this is the second line, or better said paragraph.
])
AT_CHECK([COLUMNS=80 call_atf_format <text], [0], [expout], [])

AT_DATA([expout],
[  tag  This is a multi-line text message to be formatted.

       And this is the second line, or better said paragraph.
])
AT_CHECK([COLUMNS=80 call_atf_format -t '  tag  ' <text], [0], [expout], [])
AT_CHECK([COLUMNS=80 call_atf_format -t '  tag' -l 7 <text], [0], [expout], [])

AT_DATA([expout],
[This is a multi-line
text message to be
formatted.

And this is the
second line, or
better said
paragraph.
])
AT_CHECK([COLUMNS=21 call_atf_format <text], [0], [expout], [])

AT_DATA([expout],
[  tag  This is a multi-line
       text message to be
       formatted.

       And this is the
       second line, or
       better said
       paragraph.
])
AT_CHECK([COLUMNS=28 call_atf_format -t '  tag  ' <text], [0], [expout], [])
AT_CHECK([COLUMNS=28 call_atf_format -t '  tag' -l 7 <text], [0], [expout], [])

AT_DATA([expout],
[  tag  This
       is
       a
       multi-line
       text
       message
       to
       be
       formatted.

       And
       this
       is
       the
       second
       line,
       or
       better
       said
       paragraph.
])
AT_CHECK([COLUMNS=1 call_atf_format -t '  tag  ' <text], [0], [expout], [])
AT_CHECK([COLUMNS=1 call_atf_format -t '  tag' -l 7 <text], [0], [expout], [])

dnl NO_CHECK_STYLE_BEGIN
AT_DATA([text],
[This is a single-line text message to be formatted; it is very long so that it wraps a traditional 80-column terminal.
])
dnl NO_CHECK_STYLE_END
cp text expout

AT_CHECK([COLUMNS= call_atf_format <text], [0], [expout], [])

AT_CLEANUP()

dnl vim: syntax=m4:expandtab:shiftwidth=4:softtabstop=4

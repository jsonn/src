.\"
.\" Automated Testing Framework (atf)
.\"
.\" Copyright (c) 2007 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this
.\"    software must display the following acknowledgement:
.\"        This product includes software developed by the NetBSD
.\"        Foundation, Inc. and its contributors.
.\" 4. Neither the name of The NetBSD Foundation nor the names of its
.\"    contributors may be used to endorse or promote products derived
.\"    from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND
.\" CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
.\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS BE LIABLE FOR ANY
.\" DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
.\" GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
.\" IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
.\" OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
.\" IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd September 30, 2007
.Dt ATF-TEST-CASE 8
.Os
.Sh NAME
.Nm atf-test-case
.Nd generic description of test cases
.Sh DESCRIPTION
A
.Em test case
is a piece of code that stress-tests a specific feature of the software.
This feature is typically self-contained enough, either in the amount of
code that implements it or in the general idea that describes it, to
warrant its independent testing.
Given this, test cases are very fine-grained, but they attempt to group
similar smaller tests which are semantically related.
.Pp
A test case is defined by two components regardless of the language it is
implemented in: a
.Em header
and a
.Em body .
The header is, basically, a declarative piece of code that defines several
properties to describe what the test case does and how it behaves.
In other words: it defines the test case's
.Em meta-data ,
further described in the
.Sx Meta-data
section.
The body is the test case itself.
It executes all actions needed to reproduce the test, and checks for
failures.
This body is only executed if the abstract conditions specified by the
header are met.
.Pp
It is extremely important to keep the separation between a test case's
header and body well-defined, because the header is
.Em always
parsed, whereas the body is only executed when the conditions defined in
the header are met and when the user specifies that test case.
.Pp
At last, test cases are always contained into test programs.
The test programs act as a front-end to them, providing a consistent
interface to the user and several APIs to ease their implementation.
.Ss Results
A test case always exits with one of the following results:
.Bl -tag -width skippedXX
.It passed
The test case was executed successfully.
.It skipped
The test case could not be executed because some preconditions were not
met.
This is not a failure because it can typically be resolved by adjusting
the system to meet the necessary conditions.
This is always accompanied by a
.Em reason ,
a message describing why the test was skipped.
.It failed
An error appeared during the execution of the test case.
This is always accompanied by a
.Em reason ,
a message describing why the test failed.
.El
.Ss Input/output
Test cases are free to print whatever they want to their
.Xr stdout 4
and
.Xr stderr 4
file descriptors.
They are, in fact, encouraged to print status information as they execute
to keep the user informed of their actions.
This is specially important for long test cases.
.Pp
Test cases will log their results to an auxiliary file, which is then
collected by the test program they are contained in.
The developer need not care about this as long as he uses the correct
APIs to implement the test cases.
.Ss Meta-data
The following list describes all meta-data properties interpreted
internally by ATF.
You are free to define new properties in your test cases and use them as
you wish.
.Bl -tag -width requireXconfigXX
.It descr
Type: textual.
Required.
.Pp
A brief textual description of the test case's purpose.
Will be shown to the user in reports.
Also good for documentation purposes.
.It ident
Type: textual.
Required.
.Pp
The test case's identifier.
Must be unique inside the test program and should be short but descriptive.
.It require.config
Type: textual.
Optional.
.Pp
A whitespace separated list of configuration variables that must be defined
to execute the test case.
If any of the required variables is not defined, the test case is
.Em skipped .
.It require.progs
Type: textual.
Optional.
.Pp
A whitespace separated list of programs that must be present to execute
the test case.
These can be given as plain names, in which case they are looked in the
user's
.Ev PATH ,
or as absolute paths.
If any of the required programs is not found, the test case is
.Em skipped .
.It require.user
Type: textual.
Optional.
.Pp
The required privileges to execute the test case.
Can be one of
.Sq root
or
.Sq unprivileged .
If the requested privileges do not match the current user, the test case is
.Em skipped .
.Pp
.Em NOTE :
In the future, it is expected that the test case will attempt to gain the
necessary privileges on its own before failing.
At the very least, lowering the privileges from the super-user to an
unprivileged user will be supported.
.El
.Ss Environment
Every time a test case is executed, several environment variables are
cleared or reseted to sane values to ensure they do not make the test fail
due to unexpected conditions.
These variables are:
.Bl -tag -width LCXMESSAGESXX
.It Ev HOME
Set to the work directory's path.
.It Ev LANG
Undefined.
.It Ev LC_ALL
Undefined.
.It Ev LC_COLLATE
Undefined.
.It Ev LC_CTYPE
Undefined.
.It Ev LC_MESSAGES
Undefined.
.It Ev LC_MONETARY
Undefined.
.It Ev LC_NUMERIC
Undefined.
.It Ev LC_TIME
Undefined.
.It Ev TZ
Undefined.
.El
.Ss Work directories
The test program always creates a temporary directory
and switches to it before running the test case's body.
This way the test case is free to modify its current directory as it
wishes, and the test program will be able to clean it up later on in a
safe way, removing any traces of its execution from the system.
.Ss File creation mode mask (umask)
Test cases are always executed with a file creation mode mask (umask) of
.Sq 0022 .
The test case's code is free to change this during execution.
.Sh SEE ALSO
.Xr atf-test-program 1 ,
.Xr atf-formats 5 ,
.Xr atf 7
